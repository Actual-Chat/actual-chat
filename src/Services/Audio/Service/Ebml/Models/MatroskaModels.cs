using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Runtime.CompilerServices;
using System.IO;
// ReSharper disable UnusedAutoPropertyAccessor.Global
// ReSharper disable InconsistentNaming
// ReSharper disable ClassNeverInstantiated.Global
// ReSharper disable IdentifierTypo


//--------------------------------------------------------------------------------------------------------
// <auto-generated>
//     This C# code class was auto-generated at 08/17/2021 12:48:38.
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//
//     Based on "https://github.com/ietf-wg-cellar/matroska-specification/blob/master/ebml_matroska.xml".
// </auto-generated>
//--------------------------------------------------------------------------------------------------------
namespace ActualChat.Audio.Ebml.Models
{
    [GeneratedCode("MatroskaModels.tt", "1.0.0.0")]
    [MatroskaElementDescriptor(MatroskaSpecification.Unknown)]
    public sealed class Unknown : BaseModel
    {
    }

    [GeneratedCode("MatroskaModels.tt", "1.0.0.0")]
    [MatroskaElementDescriptor(MatroskaSpecification.EBML)]
    public sealed class EBML : RootEntry
    {
        [MatroskaElementDescriptor(MatroskaSpecification.DocType)]
        public string DocType { get; set; } = null!;

        [MatroskaElementDescriptor(MatroskaSpecification.DocTypeExtension)]
        public DocTypeExtension? DocTypeExtension { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.DocTypeReadVersion)]
        public ulong DocTypeReadVersion { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.DocTypeVersion)]
        public ulong DocTypeVersion { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.EBMLMaxIDLength)]
        public ulong EBMLMaxIDLength { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.EBMLMaxSizeLength)]
        public ulong EBMLMaxSizeLength { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.EBMLReadVersion)]
        public ulong EBMLReadVersion { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.EBMLVersion)]
        public ulong EBMLVersion { get; set; }
    }

    [GeneratedCode("MatroskaModels.tt", "1.0.0.0")]
    [MatroskaElementDescriptor(MatroskaSpecification.DocTypeExtension)]
    public sealed class DocTypeExtension : BaseModel
    {
        [MatroskaElementDescriptor(MatroskaSpecification.DocTypeExtensionName)]
        public string DocTypeExtensionName { get; set; } = null!;

        [MatroskaElementDescriptor(MatroskaSpecification.DocTypeExtensionVersion)]
        public ulong DocTypeExtensionVersion { get; set; }
    }

    [GeneratedCode("MatroskaModels.tt", "1.0.0.0")]
    [MatroskaElementDescriptor(MatroskaSpecification.Segment)]
    public sealed class Segment : RootEntry
    {
        [MatroskaElementDescriptor(MatroskaSpecification.Attachments)]
        public Attachments? Attachments { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.Chapters)]
        public Chapters? Chapters { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.Cues)]
        public Cues? Cues { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.Info)]
        public Info Info { get; set; } = null!;

        [MatroskaElementDescriptor(MatroskaSpecification.SeekHead)]
        public SeekHead? SeekHead { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.Tags)]
        public Tags? Tags { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.Tracks)]
        public Tracks? Tracks { get; set; }
    }

    [GeneratedCode("MatroskaModels.tt", "1.0.0.0")]
    [MatroskaElementDescriptor(MatroskaSpecification.Attachments)]
    public sealed class Attachments : BaseModel
    {
        [MatroskaElementDescriptor(MatroskaSpecification.AttachedFile)]
        public AttachedFile AttachedFile { get; set; } = null!;
    }

    [GeneratedCode("MatroskaModels.tt", "1.0.0.0")]
    [MatroskaElementDescriptor(MatroskaSpecification.AttachedFile)]
    public sealed class AttachedFile : BaseModel
    {
        [MatroskaElementDescriptor(MatroskaSpecification.FileData)]
        public byte[] FileData { get; set; } = null!;

        [MatroskaElementDescriptor(MatroskaSpecification.FileDescription)]
        public string? FileDescription { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.FileMimeType)]
        public string FileMimeType { get; set; } = null!;

        [MatroskaElementDescriptor(MatroskaSpecification.FileName)]
        public string FileName { get; set; } = null!;

        [MatroskaElementDescriptor(MatroskaSpecification.FileReferral)]
        public byte[]? FileReferral { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.FileUID)]
        public ulong FileUID { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.FileUsedEndTime)]
        public ulong? FileUsedEndTime { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.FileUsedStartTime)]
        public ulong? FileUsedStartTime { get; set; }
    }

    [GeneratedCode("MatroskaModels.tt", "1.0.0.0")]
    [MatroskaElementDescriptor(MatroskaSpecification.Chapters)]
    public sealed class Chapters : BaseModel
    {
        [MatroskaElementDescriptor(MatroskaSpecification.EditionEntry)]
        public EditionEntry EditionEntry { get; set; } = null!;
    }

    [GeneratedCode("MatroskaModels.tt", "1.0.0.0")]
    [MatroskaElementDescriptor(MatroskaSpecification.EditionEntry)]
    public sealed class EditionEntry : BaseModel
    {
        [MatroskaElementDescriptor(MatroskaSpecification.ChapterAtom)]
        public ChapterAtom ChapterAtom { get; set; } = null!;

        [MatroskaElementDescriptor(MatroskaSpecification.EditionFlagDefault)]
        public ulong EditionFlagDefault { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.EditionFlagHidden)]
        public ulong EditionFlagHidden { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.EditionFlagOrdered)]
        public ulong EditionFlagOrdered { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.EditionUID)]
        public ulong? EditionUID { get; set; }
    }

    [GeneratedCode("MatroskaModels.tt", "1.0.0.0")]
    [MatroskaElementDescriptor(MatroskaSpecification.ChapterAtom)]
    public sealed class ChapterAtom : BaseModel
    {
    }

    [GeneratedCode("MatroskaModels.tt", "1.0.0.0")]
    [MatroskaElementDescriptor(MatroskaSpecification.ChapProcess)]
    public sealed class ChapProcess : BaseModel
    {
    }

    [GeneratedCode("MatroskaModels.tt", "1.0.0.0")]
    [MatroskaElementDescriptor(MatroskaSpecification.ChapProcessCommand)]
    public sealed class ChapProcessCommand : BaseModel
    {
    }

    [GeneratedCode("MatroskaModels.tt", "1.0.0.0")]
    [MatroskaElementDescriptor(MatroskaSpecification.ChapterDisplay)]
    public sealed class ChapterDisplay : BaseModel
    {
    }

    [GeneratedCode("MatroskaModels.tt", "1.0.0.0")]
    [MatroskaElementDescriptor(MatroskaSpecification.ChapterTrack)]
    public sealed class ChapterTrack : BaseModel
    {
    }

    [GeneratedCode("MatroskaModels.tt", "1.0.0.0")]
    [MatroskaElementDescriptor(MatroskaSpecification.Cluster)]
    public sealed class Cluster : RootEntry
    {
        [MatroskaElementDescriptor(MatroskaSpecification.BlockGroup, typeof(BlockGroup))]
        public IReadOnlyList<BlockGroup>? BlockGroups { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.EncryptedBlock, typeof(EncryptedBlock))]
        public IReadOnlyList<EncryptedBlock>? EncryptedBlocks { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.Position)]
        public ulong? Position { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.PrevSize)]
        public ulong? PrevSize { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.SilentTracks)]
        public SilentTracks? SilentTracks { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.SimpleBlock, typeof(SimpleBlock))]
        public IReadOnlyList<SimpleBlock>? SimpleBlocks { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.Timestamp)]
        public ulong Timestamp { get; set; }
    }

    [GeneratedCode("MatroskaModels.tt", "1.0.0.0")]
    [MatroskaElementDescriptor(MatroskaSpecification.BlockGroup)]
    public sealed class BlockGroup : BaseModel
    {
        [MatroskaElementDescriptor(MatroskaSpecification.Block, typeof(Block))]
        public IReadOnlyList<Block> Blocks { get; set; } = null!;

        [MatroskaElementDescriptor(MatroskaSpecification.BlockAdditions)]
        public BlockAdditions? BlockAdditions { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.BlockDuration)]
        public ulong? BlockDuration { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.BlockVirtual, typeof(BlockVirtual))]
        public IReadOnlyList<BlockVirtual>? BlockVirtuals { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.CodecState)]
        public byte[]? CodecState { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.DiscardPadding)]
        public long? DiscardPadding { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.ReferenceBlock)]
        public long? ReferenceBlock { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.ReferenceFrame)]
        public ReferenceFrame? ReferenceFrame { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.ReferencePriority)]
        public ulong ReferencePriority { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.ReferenceVirtual)]
        public long? ReferenceVirtual { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.Slices)]
        public Slices? Slices { get; set; }
    }

    [GeneratedCode("MatroskaModels.tt", "1.0.0.0")]
    [MatroskaElementDescriptor(MatroskaSpecification.BlockAdditions)]
    public sealed class BlockAdditions : BaseModel
    {
        [MatroskaElementDescriptor(MatroskaSpecification.BlockMore)]
        public BlockMore BlockMore { get; set; } = null!;
    }

    [GeneratedCode("MatroskaModels.tt", "1.0.0.0")]
    [MatroskaElementDescriptor(MatroskaSpecification.BlockMore)]
    public sealed class BlockMore : BaseModel
    {
        [MatroskaElementDescriptor(MatroskaSpecification.BlockAddID)]
        public ulong BlockAddID { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.BlockAdditional, typeof(BlockAdditional))]
        public IReadOnlyList<BlockAdditional> BlockAdditionals { get; set; } = null!;
    }

    [GeneratedCode("MatroskaModels.tt", "1.0.0.0")]
    [MatroskaElementDescriptor(MatroskaSpecification.ReferenceFrame)]
    public sealed class ReferenceFrame : BaseModel
    {
        [MatroskaElementDescriptor(MatroskaSpecification.ReferenceOffset)]
        public ulong ReferenceOffset { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.ReferenceTimestamp)]
        public ulong ReferenceTimestamp { get; set; }
    }

    [GeneratedCode("MatroskaModels.tt", "1.0.0.0")]
    [MatroskaElementDescriptor(MatroskaSpecification.Slices)]
    public sealed class Slices : BaseModel
    {
        [MatroskaElementDescriptor(MatroskaSpecification.TimeSlice)]
        public TimeSlice? TimeSlice { get; set; }
    }

    [GeneratedCode("MatroskaModels.tt", "1.0.0.0")]
    [MatroskaElementDescriptor(MatroskaSpecification.TimeSlice)]
    public sealed class TimeSlice : BaseModel
    {
        [MatroskaElementDescriptor(MatroskaSpecification.BlockAdditionID)]
        public ulong? BlockAdditionID { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.Delay)]
        public ulong? Delay { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.FrameNumber)]
        public ulong? FrameNumber { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.LaceNumber)]
        public ulong? LaceNumber { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.SliceDuration)]
        public ulong? SliceDuration { get; set; }
    }

    [GeneratedCode("MatroskaModels.tt", "1.0.0.0")]
    [MatroskaElementDescriptor(MatroskaSpecification.SilentTracks)]
    public sealed class SilentTracks : BaseModel
    {
        [MatroskaElementDescriptor(MatroskaSpecification.SilentTrackNumber)]
        public ulong? SilentTrackNumber { get; set; }
    }

    [GeneratedCode("MatroskaModels.tt", "1.0.0.0")]
    [MatroskaElementDescriptor(MatroskaSpecification.Cues)]
    public sealed class Cues : BaseModel
    {
        [MatroskaElementDescriptor(MatroskaSpecification.CuePoint, typeof(CuePoint))]
        public IReadOnlyList<CuePoint> CuePoints { get; set; } = null!;
    }

    [GeneratedCode("MatroskaModels.tt", "1.0.0.0")]
    [MatroskaElementDescriptor(MatroskaSpecification.CuePoint)]
    public sealed class CuePoint : BaseModel
    {
        [MatroskaElementDescriptor(MatroskaSpecification.CueTime)]
        public ulong CueTime { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.CueTrackPositions)]
        public CueTrackPositions CueTrackPositions { get; set; } = null!;
    }

    [GeneratedCode("MatroskaModels.tt", "1.0.0.0")]
    [MatroskaElementDescriptor(MatroskaSpecification.CueTrackPositions)]
    public sealed class CueTrackPositions : BaseModel
    {
        [MatroskaElementDescriptor(MatroskaSpecification.CueBlockNumber)]
        public ulong? CueBlockNumber { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.CueClusterPosition)]
        public ulong CueClusterPosition { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.CueCodecState)]
        public ulong? CueCodecState { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.CueDuration)]
        public ulong? CueDuration { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.CueReference, typeof(CueReference))]
        public IReadOnlyList<CueReference>? CueReferences { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.CueRelativePosition)]
        public ulong? CueRelativePosition { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.CueTrack)]
        public ulong CueTrack { get; set; }
    }

    [GeneratedCode("MatroskaModels.tt", "1.0.0.0")]
    [MatroskaElementDescriptor(MatroskaSpecification.CueReference)]
    public sealed class CueReference : BaseModel
    {
        [MatroskaElementDescriptor(MatroskaSpecification.CueRefCluster)]
        public ulong CueRefCluster { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.CueRefCodecState)]
        public ulong? CueRefCodecState { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.CueRefNumber)]
        public ulong? CueRefNumber { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.CueRefTime)]
        public ulong CueRefTime { get; set; }
    }

    [GeneratedCode("MatroskaModels.tt", "1.0.0.0")]
    [MatroskaElementDescriptor(MatroskaSpecification.Info)]
    public sealed class Info : BaseModel
    {
        [MatroskaElementDescriptor(MatroskaSpecification.ChapterTranslate)]
        public ChapterTranslate? ChapterTranslate { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.DateUTC)]
        public DateTime? DateUTC { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.Duration)]
        public double? Duration { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.MuxingApp)]
        public string MuxingApp { get; set; } = null!;

        [MatroskaElementDescriptor(MatroskaSpecification.NextFilename)]
        public string? NextFilename { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.NextUID)]
        public byte[]? NextUID { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.PrevFilename)]
        public string? PrevFilename { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.PrevUID)]
        public byte[]? PrevUID { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.SegmentFamily)]
        public byte[]? SegmentFamily { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.SegmentFilename)]
        public string? SegmentFilename { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.SegmentUID)]
        public byte[]? SegmentUID { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.TimestampScale)]
        public ulong TimestampScale { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.Title)]
        public string? Title { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.WritingApp)]
        public string WritingApp { get; set; } = null!;
    }

    [GeneratedCode("MatroskaModels.tt", "1.0.0.0")]
    [MatroskaElementDescriptor(MatroskaSpecification.ChapterTranslate)]
    public sealed class ChapterTranslate : BaseModel
    {
        [MatroskaElementDescriptor(MatroskaSpecification.ChapterTranslateCodec)]
        public ulong ChapterTranslateCodec { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.ChapterTranslateEditionUID)]
        public ulong? ChapterTranslateEditionUID { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.ChapterTranslateID)]
        public byte[] ChapterTranslateID { get; set; } = null!;
    }

    [GeneratedCode("MatroskaModels.tt", "1.0.0.0")]
    [MatroskaElementDescriptor(MatroskaSpecification.SeekHead)]
    public sealed class SeekHead : BaseModel
    {
        [MatroskaElementDescriptor(MatroskaSpecification.Seek)]
        public Seek Seek { get; set; } = null!;
    }

    [GeneratedCode("MatroskaModels.tt", "1.0.0.0")]
    [MatroskaElementDescriptor(MatroskaSpecification.Seek)]
    public sealed class Seek : BaseModel
    {
        [MatroskaElementDescriptor(MatroskaSpecification.SeekID)]
        public byte[] SeekID { get; set; } = null!;

        [MatroskaElementDescriptor(MatroskaSpecification.SeekPosition)]
        public ulong SeekPosition { get; set; }
    }

    [GeneratedCode("MatroskaModels.tt", "1.0.0.0")]
    [MatroskaElementDescriptor(MatroskaSpecification.Tags)]
    public sealed class Tags : BaseModel
    {
        [MatroskaElementDescriptor(MatroskaSpecification.Tag, typeof(TagItem))]
        public IReadOnlyList<TagItem> TagItems { get; set; } = null!;
    }

    [GeneratedCode("MatroskaModels.tt", "1.0.0.0")]
    [MatroskaElementDescriptor(MatroskaSpecification.Tag)]
    public sealed class TagItem : BaseModel
    {
        [MatroskaElementDescriptor(MatroskaSpecification.SimpleTag, typeof(SimpleTag))]
        public IReadOnlyList<SimpleTag> SimpleTags { get; set; } = null!;

        [MatroskaElementDescriptor(MatroskaSpecification.Targets)]
        public Targets Targets { get; set; } = null!;
    }

    [GeneratedCode("MatroskaModels.tt", "1.0.0.0")]
    [MatroskaElementDescriptor(MatroskaSpecification.Targets)]
    public sealed class Targets : BaseModel
    {
        [MatroskaElementDescriptor(MatroskaSpecification.TagAttachmentUID)]
        public ulong? TagAttachmentUID { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.TagChapterUID)]
        public ulong? TagChapterUID { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.TagEditionUID)]
        public ulong? TagEditionUID { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.TagTrackUID)]
        public ulong? TagTrackUID { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.TargetType)]
        public string? TargetType { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.TargetTypeValue)]
        public ulong? TargetTypeValue { get; set; }
    }

    [GeneratedCode("MatroskaModels.tt", "1.0.0.0")]
    [MatroskaElementDescriptor(MatroskaSpecification.Tracks)]
    public sealed class Tracks : BaseModel
    {
        [MatroskaElementDescriptor(MatroskaSpecification.TrackEntry, typeof(TrackEntry))]
        public IReadOnlyList<TrackEntry> TrackEntries { get; set; } = null!;
    }

    [GeneratedCode("MatroskaModels.tt", "1.0.0.0")]
    [MatroskaElementDescriptor(MatroskaSpecification.TrackEntry)]
    public sealed class TrackEntry : BaseModel
    {
        [MatroskaElementDescriptor(MatroskaSpecification.AttachmentLink)]
        public ulong? AttachmentLink { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.Audio)]
        public Audio? Audio { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.BlockAdditionMapping)]
        public BlockAdditionMapping? BlockAdditionMapping { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.CodecDecodeAll)]
        public ulong CodecDecodeAll { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.CodecDelay)]
        public ulong? CodecDelay { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.CodecDownloadURL)]
        public string? CodecDownloadURL { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.CodecID)]
        public string CodecID { get; set; } = null!;

        [MatroskaElementDescriptor(MatroskaSpecification.CodecInfoURL)]
        public string? CodecInfoURL { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.CodecName)]
        public string? CodecName { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.CodecPrivate)]
        public byte[]? CodecPrivate { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.CodecSettings)]
        public string? CodecSettings { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.ContentEncodings)]
        public ContentEncodings? ContentEncodings { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.DefaultDecodedFieldDuration)]
        public ulong? DefaultDecodedFieldDuration { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.DefaultDuration)]
        public ulong? DefaultDuration { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.FlagCommentary)]
        public ulong? FlagCommentary { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.FlagDefault)]
        public ulong FlagDefault { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.FlagEnabled)]
        public ulong FlagEnabled { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.FlagForced)]
        public ulong FlagForced { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.FlagHearingImpaired)]
        public ulong? FlagHearingImpaired { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.FlagLacing)]
        public ulong FlagLacing { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.FlagOriginal)]
        public ulong? FlagOriginal { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.FlagTextDescriptions)]
        public ulong? FlagTextDescriptions { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.FlagVisualImpaired)]
        public ulong? FlagVisualImpaired { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.Language)]
        public string Language { get; set; } = null!;

        [MatroskaElementDescriptor(MatroskaSpecification.LanguageIETF)]
        public string? LanguageIETF { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.MaxBlockAdditionID)]
        public ulong MaxBlockAdditionID { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.MaxCache)]
        public ulong? MaxCache { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.MinCache)]
        public ulong MinCache { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.Name)]
        public string? Name { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.SeekPreRoll)]
        public ulong SeekPreRoll { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.TrackNumber)]
        public ulong TrackNumber { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.TrackOffset)]
        public long? TrackOffset { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.TrackOperation)]
        public TrackOperation? TrackOperation { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.TrackOverlay)]
        public ulong? TrackOverlay { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.TrackTimestampScale)]
        public double TrackTimestampScale { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.TrackTranslate)]
        public TrackTranslate? TrackTranslate { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.TrackType)]
        public TrackType? TrackType { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.TrackUID)]
        public ulong TrackUID { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.TrickMasterTrackSegmentUID)]
        public byte[]? TrickMasterTrackSegmentUID { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.TrickMasterTrackUID)]
        public ulong? TrickMasterTrackUID { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.TrickTrackFlag)]
        public ulong? TrickTrackFlag { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.TrickTrackSegmentUID)]
        public byte[]? TrickTrackSegmentUID { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.TrickTrackUID)]
        public ulong? TrickTrackUID { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.Video)]
        public Video? Video { get; set; }
    }

    [GeneratedCode("MatroskaModels.tt", "1.0.0.0")]
    [MatroskaElementDescriptor(MatroskaSpecification.Audio)]
    public sealed class Audio : BaseModel
    {
        [MatroskaElementDescriptor(MatroskaSpecification.BitDepth)]
        public ulong? BitDepth { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.ChannelPositions)]
        public byte[]? ChannelPositions { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.Channels)]
        public ulong Channels { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.OutputSamplingFrequency)]
        public double? OutputSamplingFrequency { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.SamplingFrequency)]
        public double SamplingFrequency { get; set; }
    }

    [GeneratedCode("MatroskaModels.tt", "1.0.0.0")]
    [MatroskaElementDescriptor(MatroskaSpecification.BlockAdditionMapping)]
    public sealed class BlockAdditionMapping : BaseModel
    {
        [MatroskaElementDescriptor(MatroskaSpecification.BlockAddIDExtraData)]
        public byte[]? BlockAddIDExtraData { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.BlockAddIDName)]
        public string? BlockAddIDName { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.BlockAddIDType)]
        public ulong BlockAddIDType { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.BlockAddIDValue)]
        public ulong? BlockAddIDValue { get; set; }
    }

    [GeneratedCode("MatroskaModels.tt", "1.0.0.0")]
    [MatroskaElementDescriptor(MatroskaSpecification.ContentEncodings)]
    public sealed class ContentEncodings : BaseModel
    {
        [MatroskaElementDescriptor(MatroskaSpecification.ContentEncoding, typeof(ContentEncodingItem))]
        public IReadOnlyList<ContentEncodingItem> ContentEncodingItems { get; set; } = null!;
    }

    [GeneratedCode("MatroskaModels.tt", "1.0.0.0")]
    [MatroskaElementDescriptor(MatroskaSpecification.ContentEncoding)]
    public sealed class ContentEncodingItem : BaseModel
    {
        [MatroskaElementDescriptor(MatroskaSpecification.ContentCompression, typeof(ContentCompression))]
        public IReadOnlyList<ContentCompression>? ContentCompressions { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.ContentEncodingOrder)]
        public ulong ContentEncodingOrder { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.ContentEncodingScope)]
        public ulong ContentEncodingScope { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.ContentEncodingType)]
        public ulong ContentEncodingType { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.ContentEncryption)]
        public ContentEncryption? ContentEncryption { get; set; }
    }

    [GeneratedCode("MatroskaModels.tt", "1.0.0.0")]
    [MatroskaElementDescriptor(MatroskaSpecification.ContentCompression)]
    public sealed class ContentCompression : BaseModel
    {
        [MatroskaElementDescriptor(MatroskaSpecification.ContentCompAlgo)]
        public ulong ContentCompAlgo { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.ContentCompSettings)]
        public byte[]? ContentCompSettings { get; set; }
    }

    [GeneratedCode("MatroskaModels.tt", "1.0.0.0")]
    [MatroskaElementDescriptor(MatroskaSpecification.ContentEncryption)]
    public sealed class ContentEncryption : BaseModel
    {
        [MatroskaElementDescriptor(MatroskaSpecification.ContentEncAESSettings)]
        public ContentEncAESSettings? ContentEncAESSettings { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.ContentEncAlgo)]
        public ulong ContentEncAlgo { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.ContentEncKeyID)]
        public byte[]? ContentEncKeyID { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.ContentSigAlgo)]
        public ulong? ContentSigAlgo { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.ContentSigHashAlgo)]
        public ulong? ContentSigHashAlgo { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.ContentSigKeyID)]
        public byte[]? ContentSigKeyID { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.ContentSignature)]
        public byte[]? ContentSignature { get; set; }
    }

    [GeneratedCode("MatroskaModels.tt", "1.0.0.0")]
    [MatroskaElementDescriptor(MatroskaSpecification.ContentEncAESSettings)]
    public sealed class ContentEncAESSettings : BaseModel
    {
        [MatroskaElementDescriptor(MatroskaSpecification.AESSettingsCipherMode)]
        public ulong AESSettingsCipherMode { get; set; }
    }

    [GeneratedCode("MatroskaModels.tt", "1.0.0.0")]
    [MatroskaElementDescriptor(MatroskaSpecification.TrackOperation)]
    public sealed class TrackOperation : BaseModel
    {
        [MatroskaElementDescriptor(MatroskaSpecification.TrackCombinePlanes)]
        public TrackCombinePlanes? TrackCombinePlanes { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.TrackJoinBlocks)]
        public TrackJoinBlocks? TrackJoinBlocks { get; set; }
    }

    [GeneratedCode("MatroskaModels.tt", "1.0.0.0")]
    [MatroskaElementDescriptor(MatroskaSpecification.TrackCombinePlanes)]
    public sealed class TrackCombinePlanes : BaseModel
    {
        [MatroskaElementDescriptor(MatroskaSpecification.TrackPlane)]
        public TrackPlane TrackPlane { get; set; } = null!;
    }

    [GeneratedCode("MatroskaModels.tt", "1.0.0.0")]
    [MatroskaElementDescriptor(MatroskaSpecification.TrackPlane)]
    public sealed class TrackPlane : BaseModel
    {
        [MatroskaElementDescriptor(MatroskaSpecification.TrackPlaneType)]
        public ulong TrackPlaneType { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.TrackPlaneUID)]
        public ulong TrackPlaneUID { get; set; }
    }

    [GeneratedCode("MatroskaModels.tt", "1.0.0.0")]
    [MatroskaElementDescriptor(MatroskaSpecification.TrackJoinBlocks)]
    public sealed class TrackJoinBlocks : BaseModel
    {
        [MatroskaElementDescriptor(MatroskaSpecification.TrackJoinUID)]
        public ulong TrackJoinUID { get; set; }
    }

    [GeneratedCode("MatroskaModels.tt", "1.0.0.0")]
    [MatroskaElementDescriptor(MatroskaSpecification.TrackTranslate)]
    public sealed class TrackTranslate : BaseModel
    {
        [MatroskaElementDescriptor(MatroskaSpecification.TrackTranslateCodec)]
        public ulong TrackTranslateCodec { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.TrackTranslateEditionUID)]
        public ulong? TrackTranslateEditionUID { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.TrackTranslateTrackID)]
        public byte[] TrackTranslateTrackID { get; set; } = null!;
    }

    [GeneratedCode("MatroskaModels.tt", "1.0.0.0")]
    [MatroskaElementDescriptor(MatroskaSpecification.Video)]
    public sealed class Video : BaseModel
    {
        [MatroskaElementDescriptor(MatroskaSpecification.AlphaMode)]
        public ulong? AlphaMode { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.AspectRatioType)]
        public ulong? AspectRatioType { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.Colour)]
        public Colour? Colour { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.ColourSpace)]
        public byte[]? ColourSpace { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.DisplayHeight)]
        public ulong? DisplayHeight { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.DisplayUnit)]
        public ulong DisplayUnit { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.DisplayWidth)]
        public ulong? DisplayWidth { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.FieldOrder)]
        public ulong FieldOrder { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.FlagInterlaced)]
        public ulong FlagInterlaced { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.FrameRate)]
        public double? FrameRate { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.GammaValue)]
        public double? GammaValue { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.OldStereoMode)]
        public ulong? OldStereoMode { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.PixelCropBottom)]
        public ulong? PixelCropBottom { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.PixelCropLeft)]
        public ulong? PixelCropLeft { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.PixelCropRight)]
        public ulong? PixelCropRight { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.PixelCropTop)]
        public ulong? PixelCropTop { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.PixelHeight)]
        public ulong PixelHeight { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.PixelWidth)]
        public ulong PixelWidth { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.Projection)]
        public Projection? Projection { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.StereoMode)]
        public ulong StereoMode { get; set; }
    }

    [GeneratedCode("MatroskaModels.tt", "1.0.0.0")]
    [MatroskaElementDescriptor(MatroskaSpecification.Colour)]
    public sealed class Colour : BaseModel
    {
        [MatroskaElementDescriptor(MatroskaSpecification.BitsPerChannel)]
        public ulong? BitsPerChannel { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.CbSubsamplingHorz)]
        public ulong? CbSubsamplingHorz { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.CbSubsamplingVert)]
        public ulong? CbSubsamplingVert { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.ChromaSitingHorz)]
        public ulong ChromaSitingHorz { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.ChromaSitingVert)]
        public ulong ChromaSitingVert { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.ChromaSubsamplingHorz)]
        public ulong? ChromaSubsamplingHorz { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.ChromaSubsamplingVert)]
        public ulong? ChromaSubsamplingVert { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.MasteringMetadata)]
        public MasteringMetadata? MasteringMetadata { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.MatrixCoefficients)]
        public ulong MatrixCoefficients { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.MaxCLL)]
        public ulong? MaxCLL { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.MaxFALL)]
        public ulong? MaxFALL { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.Primaries)]
        public ulong Primaries { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.Range)]
        public ulong Range { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.TransferCharacteristics)]
        public ulong TransferCharacteristics { get; set; }
    }

    [GeneratedCode("MatroskaModels.tt", "1.0.0.0")]
    [MatroskaElementDescriptor(MatroskaSpecification.MasteringMetadata)]
    public sealed class MasteringMetadata : BaseModel
    {
        [MatroskaElementDescriptor(MatroskaSpecification.LuminanceMax)]
        public double? LuminanceMax { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.LuminanceMin)]
        public double? LuminanceMin { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.PrimaryBChromaticityX)]
        public double? PrimaryBChromaticityX { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.PrimaryBChromaticityY)]
        public double? PrimaryBChromaticityY { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.PrimaryGChromaticityX)]
        public double? PrimaryGChromaticityX { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.PrimaryGChromaticityY)]
        public double? PrimaryGChromaticityY { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.PrimaryRChromaticityX)]
        public double? PrimaryRChromaticityX { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.PrimaryRChromaticityY)]
        public double? PrimaryRChromaticityY { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.WhitePointChromaticityX)]
        public double? WhitePointChromaticityX { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.WhitePointChromaticityY)]
        public double? WhitePointChromaticityY { get; set; }
    }

    [GeneratedCode("MatroskaModels.tt", "1.0.0.0")]
    [MatroskaElementDescriptor(MatroskaSpecification.Projection)]
    public sealed class Projection : BaseModel
    {
        [MatroskaElementDescriptor(MatroskaSpecification.ProjectionPosePitch)]
        public double ProjectionPosePitch { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.ProjectionPoseRoll)]
        public double ProjectionPoseRoll { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.ProjectionPoseYaw)]
        public double ProjectionPoseYaw { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.ProjectionPrivate)]
        public byte[]? ProjectionPrivate { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.ProjectionType)]
        public ulong ProjectionType { get; set; }
    }

    public static class ModelExtensions
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static BaseModel CreateInstance(this ElementDescriptor descriptor)
        {
            if (descriptor.Type != ElementType.MasterElement)
                throw new InvalidOperationException("Can't create instances of non-master element");

            switch (descriptor.Identifier.EncodedValue) {
                case MatroskaSpecification.EBML:
                    return new EBML();
                case MatroskaSpecification.DocTypeExtension:
                    return new DocTypeExtension();
                case MatroskaSpecification.Segment:
                    return new Segment();
                case MatroskaSpecification.Attachments:
                    return new Attachments();
                case MatroskaSpecification.AttachedFile:
                    return new AttachedFile();
                case MatroskaSpecification.Chapters:
                    return new Chapters();
                case MatroskaSpecification.EditionEntry:
                    return new EditionEntry();
                case MatroskaSpecification.ChapterAtom:
                    return new ChapterAtom();
                case MatroskaSpecification.ChapProcess:
                    return new ChapProcess();
                case MatroskaSpecification.ChapProcessCommand:
                    return new ChapProcessCommand();
                case MatroskaSpecification.ChapterDisplay:
                    return new ChapterDisplay();
                case MatroskaSpecification.ChapterTrack:
                    return new ChapterTrack();
                case MatroskaSpecification.Cluster:
                    return new Cluster();
                case MatroskaSpecification.BlockGroup:
                    return new BlockGroup();
                case MatroskaSpecification.BlockAdditions:
                    return new BlockAdditions();
                case MatroskaSpecification.BlockMore:
                    return new BlockMore();
                case MatroskaSpecification.ReferenceFrame:
                    return new ReferenceFrame();
                case MatroskaSpecification.Slices:
                    return new Slices();
                case MatroskaSpecification.TimeSlice:
                    return new TimeSlice();
                case MatroskaSpecification.SilentTracks:
                    return new SilentTracks();
                case MatroskaSpecification.Cues:
                    return new Cues();
                case MatroskaSpecification.CuePoint:
                    return new CuePoint();
                case MatroskaSpecification.CueTrackPositions:
                    return new CueTrackPositions();
                case MatroskaSpecification.CueReference:
                    return new CueReference();
                case MatroskaSpecification.Info:
                    return new Info();
                case MatroskaSpecification.ChapterTranslate:
                    return new ChapterTranslate();
                case MatroskaSpecification.SeekHead:
                    return new SeekHead();
                case MatroskaSpecification.Seek:
                    return new Seek();
                case MatroskaSpecification.Tags:
                    return new Tags();
                case MatroskaSpecification.Tag:
                    return new TagItem();
                case MatroskaSpecification.Targets:
                    return new Targets();
                case MatroskaSpecification.Tracks:
                    return new Tracks();
                case MatroskaSpecification.TrackEntry:
                    return new TrackEntry();
                case MatroskaSpecification.Audio:
                    return new Audio();
                case MatroskaSpecification.BlockAdditionMapping:
                    return new BlockAdditionMapping();
                case MatroskaSpecification.ContentEncodings:
                    return new ContentEncodings();
                case MatroskaSpecification.ContentEncoding:
                    return new ContentEncodingItem();
                case MatroskaSpecification.ContentCompression:
                    return new ContentCompression();
                case MatroskaSpecification.ContentEncryption:
                    return new ContentEncryption();
                case MatroskaSpecification.ContentEncAESSettings:
                    return new ContentEncAESSettings();
                case MatroskaSpecification.TrackOperation:
                    return new TrackOperation();
                case MatroskaSpecification.TrackCombinePlanes:
                    return new TrackCombinePlanes();
                case MatroskaSpecification.TrackPlane:
                    return new TrackPlane();
                case MatroskaSpecification.TrackJoinBlocks:
                    return new TrackJoinBlocks();
                case MatroskaSpecification.TrackTranslate:
                    return new TrackTranslate();
                case MatroskaSpecification.Video:
                    return new Video();
                case MatroskaSpecification.Colour:
                    return new Colour();
                case MatroskaSpecification.MasteringMetadata:
                    return new MasteringMetadata();
                case MatroskaSpecification.Projection:
                    return new Projection();
                default:
                    throw new InvalidOperationException("Unknown master element: " + descriptor.Identifier);
            }
        }
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void FillScalar(this BaseModel model, ElementDescriptor containerDescriptor, ElementDescriptor descriptor, int size, ref SpanReader reader)
        {
            switch (containerDescriptor.Identifier.EncodedValue) {
                case MatroskaSpecification.EBML:
                    ((EBML)model).FillScalar(descriptor, size, ref reader);
                    break;
                case MatroskaSpecification.DocTypeExtension:
                    ((DocTypeExtension)model).FillScalar(descriptor, size, ref reader);
                    break;
                case MatroskaSpecification.AttachedFile:
                    ((AttachedFile)model).FillScalar(descriptor, size, ref reader);
                    break;
                case MatroskaSpecification.EditionEntry:
                    ((EditionEntry)model).FillScalar(descriptor, size, ref reader);
                    break;
                case MatroskaSpecification.Cluster:
                    ((Cluster)model).FillScalar(descriptor, size, ref reader);
                    break;
                case MatroskaSpecification.BlockGroup:
                    ((BlockGroup)model).FillScalar(descriptor, size, ref reader);
                    break;
                case MatroskaSpecification.BlockMore:
                    ((BlockMore)model).FillScalar(descriptor, size, ref reader);
                    break;
                case MatroskaSpecification.ReferenceFrame:
                    ((ReferenceFrame)model).FillScalar(descriptor, size, ref reader);
                    break;
                case MatroskaSpecification.TimeSlice:
                    ((TimeSlice)model).FillScalar(descriptor, size, ref reader);
                    break;
                case MatroskaSpecification.SilentTracks:
                    ((SilentTracks)model).FillScalar(descriptor, size, ref reader);
                    break;
                case MatroskaSpecification.CuePoint:
                    ((CuePoint)model).FillScalar(descriptor, size, ref reader);
                    break;
                case MatroskaSpecification.CueTrackPositions:
                    ((CueTrackPositions)model).FillScalar(descriptor, size, ref reader);
                    break;
                case MatroskaSpecification.CueReference:
                    ((CueReference)model).FillScalar(descriptor, size, ref reader);
                    break;
                case MatroskaSpecification.Info:
                    ((Info)model).FillScalar(descriptor, size, ref reader);
                    break;
                case MatroskaSpecification.ChapterTranslate:
                    ((ChapterTranslate)model).FillScalar(descriptor, size, ref reader);
                    break;
                case MatroskaSpecification.Seek:
                    ((Seek)model).FillScalar(descriptor, size, ref reader);
                    break;
                case MatroskaSpecification.Targets:
                    ((Targets)model).FillScalar(descriptor, size, ref reader);
                    break;
                case MatroskaSpecification.TrackEntry:
                    ((TrackEntry)model).FillScalar(descriptor, size, ref reader);
                    break;
                case MatroskaSpecification.Audio:
                    ((Audio)model).FillScalar(descriptor, size, ref reader);
                    break;
                case MatroskaSpecification.BlockAdditionMapping:
                    ((BlockAdditionMapping)model).FillScalar(descriptor, size, ref reader);
                    break;
                case MatroskaSpecification.ContentEncoding:
                    ((ContentEncodingItem)model).FillScalar(descriptor, size, ref reader);
                    break;
                case MatroskaSpecification.ContentCompression:
                    ((ContentCompression)model).FillScalar(descriptor, size, ref reader);
                    break;
                case MatroskaSpecification.ContentEncryption:
                    ((ContentEncryption)model).FillScalar(descriptor, size, ref reader);
                    break;
                case MatroskaSpecification.ContentEncAESSettings:
                    ((ContentEncAESSettings)model).FillScalar(descriptor, size, ref reader);
                    break;
                case MatroskaSpecification.TrackPlane:
                    ((TrackPlane)model).FillScalar(descriptor, size, ref reader);
                    break;
                case MatroskaSpecification.TrackJoinBlocks:
                    ((TrackJoinBlocks)model).FillScalar(descriptor, size, ref reader);
                    break;
                case MatroskaSpecification.TrackTranslate:
                    ((TrackTranslate)model).FillScalar(descriptor, size, ref reader);
                    break;
                case MatroskaSpecification.Video:
                    ((Video)model).FillScalar(descriptor, size, ref reader);
                    break;
                case MatroskaSpecification.Colour:
                    ((Colour)model).FillScalar(descriptor, size, ref reader);
                    break;
                case MatroskaSpecification.MasteringMetadata:
                    ((MasteringMetadata)model).FillScalar(descriptor, size, ref reader);
                    break;
                case MatroskaSpecification.Projection:
                    ((Projection)model).FillScalar(descriptor, size, ref reader);
                    break;
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void FillComplex(this BaseModel model, ElementDescriptor containerDescriptor, ElementDescriptor descriptor, BaseModel propertyModel)
        {
            switch (containerDescriptor.Identifier.EncodedValue) {
                case MatroskaSpecification.EBML:
                    ((EBML)model).FillComplex(descriptor, propertyModel);
                    break;
                case MatroskaSpecification.Segment:
                    ((Segment)model).FillComplex(descriptor, propertyModel);
                    break;
                case MatroskaSpecification.Attachments:
                    ((Attachments)model).FillComplex(descriptor, propertyModel);
                    break;
                case MatroskaSpecification.Chapters:
                    ((Chapters)model).FillComplex(descriptor, propertyModel);
                    break;
                case MatroskaSpecification.EditionEntry:
                    ((EditionEntry)model).FillComplex(descriptor, propertyModel);
                    break;
                case MatroskaSpecification.Cluster:
                    ((Cluster)model).FillComplex(descriptor, propertyModel);
                    break;
                case MatroskaSpecification.BlockGroup:
                    ((BlockGroup)model).FillComplex(descriptor, propertyModel);
                    break;
                case MatroskaSpecification.BlockAdditions:
                    ((BlockAdditions)model).FillComplex(descriptor, propertyModel);
                    break;
                case MatroskaSpecification.Slices:
                    ((Slices)model).FillComplex(descriptor, propertyModel);
                    break;
                case MatroskaSpecification.CuePoint:
                    ((CuePoint)model).FillComplex(descriptor, propertyModel);
                    break;
                case MatroskaSpecification.Info:
                    ((Info)model).FillComplex(descriptor, propertyModel);
                    break;
                case MatroskaSpecification.SeekHead:
                    ((SeekHead)model).FillComplex(descriptor, propertyModel);
                    break;
                case MatroskaSpecification.Tag:
                    ((TagItem)model).FillComplex(descriptor, propertyModel);
                    break;
                case MatroskaSpecification.TrackEntry:
                    ((TrackEntry)model).FillComplex(descriptor, propertyModel);
                    break;
                case MatroskaSpecification.ContentEncoding:
                    ((ContentEncodingItem)model).FillComplex(descriptor, propertyModel);
                    break;
                case MatroskaSpecification.ContentEncryption:
                    ((ContentEncryption)model).FillComplex(descriptor, propertyModel);
                    break;
                case MatroskaSpecification.TrackOperation:
                    ((TrackOperation)model).FillComplex(descriptor, propertyModel);
                    break;
                case MatroskaSpecification.TrackCombinePlanes:
                    ((TrackCombinePlanes)model).FillComplex(descriptor, propertyModel);
                    break;
                case MatroskaSpecification.Video:
                    ((Video)model).FillComplex(descriptor, propertyModel);
                    break;
                case MatroskaSpecification.Colour:
                    ((Colour)model).FillComplex(descriptor, propertyModel);
                    break;
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void FillListEntry(this BaseModel model, ElementDescriptor containerDescriptor, ElementDescriptor descriptor, object listEntry)
        {
            switch (containerDescriptor.Identifier.EncodedValue) {
                case MatroskaSpecification.Cluster:
                    ((Cluster)model).FillListEntry(descriptor, listEntry);
                    break;
                case MatroskaSpecification.BlockGroup:
                    ((BlockGroup)model).FillListEntry(descriptor, listEntry);
                    break;
                case MatroskaSpecification.BlockMore:
                    ((BlockMore)model).FillListEntry(descriptor, listEntry);
                    break;
                case MatroskaSpecification.Cues:
                    ((Cues)model).FillListEntry(descriptor, listEntry);
                    break;
                case MatroskaSpecification.CueTrackPositions:
                    ((CueTrackPositions)model).FillListEntry(descriptor, listEntry);
                    break;
                case MatroskaSpecification.Tags:
                    ((Tags)model).FillListEntry(descriptor, listEntry);
                    break;
                case MatroskaSpecification.Tag:
                    ((TagItem)model).FillListEntry(descriptor, listEntry);
                    break;
                case MatroskaSpecification.Tracks:
                    ((Tracks)model).FillListEntry(descriptor, listEntry);
                    break;
                case MatroskaSpecification.ContentEncodings:
                    ((ContentEncodings)model).FillListEntry(descriptor, listEntry);
                    break;
                case MatroskaSpecification.ContentEncoding:
                    ((ContentEncodingItem)model).FillListEntry(descriptor, listEntry);
                    break;
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void FillScalar(this EBML model, ElementDescriptor descriptor, int size, ref SpanReader reader)
        {
            if (descriptor.Type == ElementType.MasterElement)
                throw new InvalidOperationException("Can't read master elements directly from the reader");
            
            switch (descriptor.Identifier.EncodedValue) {
                case MatroskaSpecification.DocType:
                    model.DocType = reader.ReadAsciiString(size);
                    break;
                case MatroskaSpecification.DocTypeReadVersion:
                    model.DocTypeReadVersion = reader.ReadULong(size);
                    break;
                case MatroskaSpecification.DocTypeVersion:
                    model.DocTypeVersion = reader.ReadULong(size);
                    break;
                case MatroskaSpecification.EBMLMaxIDLength:
                    model.EBMLMaxIDLength = reader.ReadULong(size);
                    break;
                case MatroskaSpecification.EBMLMaxSizeLength:
                    model.EBMLMaxSizeLength = reader.ReadULong(size);
                    break;
                case MatroskaSpecification.EBMLReadVersion:
                    model.EBMLReadVersion = reader.ReadULong(size);
                    break;
                case MatroskaSpecification.EBMLVersion:
                    model.EBMLVersion = reader.ReadULong(size);
                    break;
                default:
                    throw new EbmlDataFormatException($"Unexpected ebml element '{descriptor.Identifier}'");
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void FillComplex(this EBML model, ElementDescriptor descriptor, BaseModel propertyModel)
        {
            if (descriptor.Type != ElementType.MasterElement)
                throw new InvalidOperationException("ElementDescriptor should have 'master' type");
            
            switch (descriptor.Identifier.EncodedValue) {
                case MatroskaSpecification.DocTypeExtension:
                    model.DocTypeExtension = (DocTypeExtension?)propertyModel;
                    break;
                default:
                    throw new EbmlDataFormatException($"Unexpected ebml element '{descriptor.Identifier}'");
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void FillScalar(this DocTypeExtension model, ElementDescriptor descriptor, int size, ref SpanReader reader)
        {
            if (descriptor.Type == ElementType.MasterElement)
                throw new InvalidOperationException("Can't read master elements directly from the reader");
            
            switch (descriptor.Identifier.EncodedValue) {
                case MatroskaSpecification.DocTypeExtensionName:
                    model.DocTypeExtensionName = reader.ReadAsciiString(size);
                    break;
                case MatroskaSpecification.DocTypeExtensionVersion:
                    model.DocTypeExtensionVersion = reader.ReadULong(size);
                    break;
                default:
                    throw new EbmlDataFormatException($"Unexpected ebml element '{descriptor.Identifier}'");
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void FillComplex(this Segment model, ElementDescriptor descriptor, BaseModel propertyModel)
        {
            if (descriptor.Type != ElementType.MasterElement)
                throw new InvalidOperationException("ElementDescriptor should have 'master' type");
            
            switch (descriptor.Identifier.EncodedValue) {
                case MatroskaSpecification.Attachments:
                    model.Attachments = (Attachments?)propertyModel;
                    break;
                case MatroskaSpecification.Chapters:
                    model.Chapters = (Chapters?)propertyModel;
                    break;
                case MatroskaSpecification.Cues:
                    model.Cues = (Cues?)propertyModel;
                    break;
                case MatroskaSpecification.Info:
                    model.Info = (Info)propertyModel;
                    break;
                case MatroskaSpecification.SeekHead:
                    model.SeekHead = (SeekHead?)propertyModel;
                    break;
                case MatroskaSpecification.Tags:
                    model.Tags = (Tags?)propertyModel;
                    break;
                case MatroskaSpecification.Tracks:
                    model.Tracks = (Tracks?)propertyModel;
                    break;
                default:
                    throw new EbmlDataFormatException($"Unexpected ebml element '{descriptor.Identifier}'");
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void FillComplex(this Attachments model, ElementDescriptor descriptor, BaseModel propertyModel)
        {
            if (descriptor.Type != ElementType.MasterElement)
                throw new InvalidOperationException("ElementDescriptor should have 'master' type");
            
            switch (descriptor.Identifier.EncodedValue) {
                case MatroskaSpecification.AttachedFile:
                    model.AttachedFile = (AttachedFile)propertyModel;
                    break;
                default:
                    throw new EbmlDataFormatException($"Unexpected ebml element '{descriptor.Identifier}'");
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void FillScalar(this AttachedFile model, ElementDescriptor descriptor, int size, ref SpanReader reader)
        {
            if (descriptor.Type == ElementType.MasterElement)
                throw new InvalidOperationException("Can't read master elements directly from the reader");
            
            switch (descriptor.Identifier.EncodedValue) {
                case MatroskaSpecification.FileData:
                    model.FileData = reader.ReadBytes(size);
                    break;
                case MatroskaSpecification.FileDescription:
                    model.FileDescription = reader.ReadUtf8String(size);
                    break;
                case MatroskaSpecification.FileMimeType:
                    model.FileMimeType = reader.ReadAsciiString(size);
                    break;
                case MatroskaSpecification.FileName:
                    model.FileName = reader.ReadUtf8String(size);
                    break;
                case MatroskaSpecification.FileReferral:
                    model.FileReferral = reader.ReadBytes(size);
                    break;
                case MatroskaSpecification.FileUID:
                    model.FileUID = reader.ReadULong(size);
                    break;
                case MatroskaSpecification.FileUsedEndTime:
                    model.FileUsedEndTime = reader.ReadULong(size);
                    break;
                case MatroskaSpecification.FileUsedStartTime:
                    model.FileUsedStartTime = reader.ReadULong(size);
                    break;
                default:
                    throw new EbmlDataFormatException($"Unexpected ebml element '{descriptor.Identifier}'");
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void FillComplex(this Chapters model, ElementDescriptor descriptor, BaseModel propertyModel)
        {
            if (descriptor.Type != ElementType.MasterElement)
                throw new InvalidOperationException("ElementDescriptor should have 'master' type");
            
            switch (descriptor.Identifier.EncodedValue) {
                case MatroskaSpecification.EditionEntry:
                    model.EditionEntry = (EditionEntry)propertyModel;
                    break;
                default:
                    throw new EbmlDataFormatException($"Unexpected ebml element '{descriptor.Identifier}'");
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void FillScalar(this EditionEntry model, ElementDescriptor descriptor, int size, ref SpanReader reader)
        {
            if (descriptor.Type == ElementType.MasterElement)
                throw new InvalidOperationException("Can't read master elements directly from the reader");
            
            switch (descriptor.Identifier.EncodedValue) {
                case MatroskaSpecification.EditionFlagDefault:
                    model.EditionFlagDefault = reader.ReadULong(size);
                    break;
                case MatroskaSpecification.EditionFlagHidden:
                    model.EditionFlagHidden = reader.ReadULong(size);
                    break;
                case MatroskaSpecification.EditionFlagOrdered:
                    model.EditionFlagOrdered = reader.ReadULong(size);
                    break;
                case MatroskaSpecification.EditionUID:
                    model.EditionUID = reader.ReadULong(size);
                    break;
                default:
                    throw new EbmlDataFormatException($"Unexpected ebml element '{descriptor.Identifier}'");
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void FillComplex(this EditionEntry model, ElementDescriptor descriptor, BaseModel propertyModel)
        {
            if (descriptor.Type != ElementType.MasterElement)
                throw new InvalidOperationException("ElementDescriptor should have 'master' type");
            
            switch (descriptor.Identifier.EncodedValue) {
                case MatroskaSpecification.ChapterAtom:
                    model.ChapterAtom = (ChapterAtom)propertyModel;
                    break;
                default:
                    throw new EbmlDataFormatException($"Unexpected ebml element '{descriptor.Identifier}'");
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void FillScalar(this Cluster model, ElementDescriptor descriptor, int size, ref SpanReader reader)
        {
            if (descriptor.Type == ElementType.MasterElement)
                throw new InvalidOperationException("Can't read master elements directly from the reader");
            
            switch (descriptor.Identifier.EncodedValue) {
                case MatroskaSpecification.Position:
                    model.Position = reader.ReadULong(size);
                    break;
                case MatroskaSpecification.PrevSize:
                    model.PrevSize = reader.ReadULong(size);
                    break;
                case MatroskaSpecification.Timestamp:
                    model.Timestamp = reader.ReadULong(size);
                    break;
                default:
                    throw new EbmlDataFormatException($"Unexpected ebml element '{descriptor.Identifier}'");
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void FillComplex(this Cluster model, ElementDescriptor descriptor, BaseModel propertyModel)
        {
            if (descriptor.Type != ElementType.MasterElement)
                throw new InvalidOperationException("ElementDescriptor should have 'master' type");
            
            switch (descriptor.Identifier.EncodedValue) {
                case MatroskaSpecification.SilentTracks:
                    model.SilentTracks = (SilentTracks?)propertyModel;
                    break;
                default:
                    throw new EbmlDataFormatException($"Unexpected ebml element '{descriptor.Identifier}'");
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void FillListEntry(this Cluster model, ElementDescriptor descriptor, object listItem)
        {
            if (descriptor.Type != ElementType.MasterElement && descriptor.Type != ElementType.Binary)
                throw new InvalidOperationException("ElementDescriptor should have 'master' or 'binary' type");
            
            switch (descriptor.Identifier.EncodedValue) {
                case MatroskaSpecification.BlockGroup:
                {
                    var list = model.BlockGroups as IList<BlockGroup> ?? new List<BlockGroup>(4);
                    list.Add((BlockGroup)listItem);
                    model.BlockGroups = (IReadOnlyList<BlockGroup>?)list;
                    break;
                }
                case MatroskaSpecification.EncryptedBlock:
                {
                    var list = model.EncryptedBlocks as IList<EncryptedBlock> ?? new List<EncryptedBlock>(4);
                    list.Add((EncryptedBlock)listItem);
                    model.EncryptedBlocks = (IReadOnlyList<EncryptedBlock>?)list;
                    break;
                }
                case MatroskaSpecification.SimpleBlock:
                {
                    var list = model.SimpleBlocks as IList<SimpleBlock> ?? new List<SimpleBlock>(4);
                    list.Add((SimpleBlock)listItem);
                    model.SimpleBlocks = (IReadOnlyList<SimpleBlock>?)list;
                    break;
                }
                default:
                    throw new EbmlDataFormatException($"Unexpected ebml element '{descriptor.Identifier}'");
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void FillScalar(this BlockGroup model, ElementDescriptor descriptor, int size, ref SpanReader reader)
        {
            if (descriptor.Type == ElementType.MasterElement)
                throw new InvalidOperationException("Can't read master elements directly from the reader");
            
            switch (descriptor.Identifier.EncodedValue) {
                case MatroskaSpecification.BlockDuration:
                    model.BlockDuration = reader.ReadULong(size);
                    break;
                case MatroskaSpecification.CodecState:
                    model.CodecState = reader.ReadBytes(size);
                    break;
                case MatroskaSpecification.DiscardPadding:
                    model.DiscardPadding = reader.ReadLong(size);
                    break;
                case MatroskaSpecification.ReferenceBlock:
                    model.ReferenceBlock = reader.ReadLong(size);
                    break;
                case MatroskaSpecification.ReferencePriority:
                    model.ReferencePriority = reader.ReadULong(size);
                    break;
                case MatroskaSpecification.ReferenceVirtual:
                    model.ReferenceVirtual = reader.ReadLong(size);
                    break;
                default:
                    throw new EbmlDataFormatException($"Unexpected ebml element '{descriptor.Identifier}'");
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void FillComplex(this BlockGroup model, ElementDescriptor descriptor, BaseModel propertyModel)
        {
            if (descriptor.Type != ElementType.MasterElement)
                throw new InvalidOperationException("ElementDescriptor should have 'master' type");
            
            switch (descriptor.Identifier.EncodedValue) {
                case MatroskaSpecification.BlockAdditions:
                    model.BlockAdditions = (BlockAdditions?)propertyModel;
                    break;
                case MatroskaSpecification.ReferenceFrame:
                    model.ReferenceFrame = (ReferenceFrame?)propertyModel;
                    break;
                case MatroskaSpecification.Slices:
                    model.Slices = (Slices?)propertyModel;
                    break;
                default:
                    throw new EbmlDataFormatException($"Unexpected ebml element '{descriptor.Identifier}'");
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void FillListEntry(this BlockGroup model, ElementDescriptor descriptor, object listItem)
        {
            if (descriptor.Type != ElementType.MasterElement && descriptor.Type != ElementType.Binary)
                throw new InvalidOperationException("ElementDescriptor should have 'master' or 'binary' type");
            
            switch (descriptor.Identifier.EncodedValue) {
                case MatroskaSpecification.Block:
                {
                    var list = model.Blocks as IList<Block> ?? new List<Block>(4);
                    list.Add((Block)listItem);
                    model.Blocks = (IReadOnlyList<Block>)list;
                    break;
                }
                case MatroskaSpecification.BlockVirtual:
                {
                    var list = model.BlockVirtuals as IList<BlockVirtual> ?? new List<BlockVirtual>(4);
                    list.Add((BlockVirtual)listItem);
                    model.BlockVirtuals = (IReadOnlyList<BlockVirtual>?)list;
                    break;
                }
                default:
                    throw new EbmlDataFormatException($"Unexpected ebml element '{descriptor.Identifier}'");
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void FillComplex(this BlockAdditions model, ElementDescriptor descriptor, BaseModel propertyModel)
        {
            if (descriptor.Type != ElementType.MasterElement)
                throw new InvalidOperationException("ElementDescriptor should have 'master' type");
            
            switch (descriptor.Identifier.EncodedValue) {
                case MatroskaSpecification.BlockMore:
                    model.BlockMore = (BlockMore)propertyModel;
                    break;
                default:
                    throw new EbmlDataFormatException($"Unexpected ebml element '{descriptor.Identifier}'");
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void FillScalar(this BlockMore model, ElementDescriptor descriptor, int size, ref SpanReader reader)
        {
            if (descriptor.Type == ElementType.MasterElement)
                throw new InvalidOperationException("Can't read master elements directly from the reader");
            
            switch (descriptor.Identifier.EncodedValue) {
                case MatroskaSpecification.BlockAddID:
                    model.BlockAddID = reader.ReadULong(size);
                    break;
                default:
                    throw new EbmlDataFormatException($"Unexpected ebml element '{descriptor.Identifier}'");
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void FillListEntry(this BlockMore model, ElementDescriptor descriptor, object listItem)
        {
            if (descriptor.Type != ElementType.MasterElement && descriptor.Type != ElementType.Binary)
                throw new InvalidOperationException("ElementDescriptor should have 'master' or 'binary' type");
            
            switch (descriptor.Identifier.EncodedValue) {
                case MatroskaSpecification.BlockAdditional:
                {
                    var list = model.BlockAdditionals as IList<BlockAdditional> ?? new List<BlockAdditional>(4);
                    list.Add((BlockAdditional)listItem);
                    model.BlockAdditionals = (IReadOnlyList<BlockAdditional>)list;
                    break;
                }
                default:
                    throw new EbmlDataFormatException($"Unexpected ebml element '{descriptor.Identifier}'");
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void FillScalar(this ReferenceFrame model, ElementDescriptor descriptor, int size, ref SpanReader reader)
        {
            if (descriptor.Type == ElementType.MasterElement)
                throw new InvalidOperationException("Can't read master elements directly from the reader");
            
            switch (descriptor.Identifier.EncodedValue) {
                case MatroskaSpecification.ReferenceOffset:
                    model.ReferenceOffset = reader.ReadULong(size);
                    break;
                case MatroskaSpecification.ReferenceTimestamp:
                    model.ReferenceTimestamp = reader.ReadULong(size);
                    break;
                default:
                    throw new EbmlDataFormatException($"Unexpected ebml element '{descriptor.Identifier}'");
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void FillComplex(this Slices model, ElementDescriptor descriptor, BaseModel propertyModel)
        {
            if (descriptor.Type != ElementType.MasterElement)
                throw new InvalidOperationException("ElementDescriptor should have 'master' type");
            
            switch (descriptor.Identifier.EncodedValue) {
                case MatroskaSpecification.TimeSlice:
                    model.TimeSlice = (TimeSlice?)propertyModel;
                    break;
                default:
                    throw new EbmlDataFormatException($"Unexpected ebml element '{descriptor.Identifier}'");
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void FillScalar(this TimeSlice model, ElementDescriptor descriptor, int size, ref SpanReader reader)
        {
            if (descriptor.Type == ElementType.MasterElement)
                throw new InvalidOperationException("Can't read master elements directly from the reader");
            
            switch (descriptor.Identifier.EncodedValue) {
                case MatroskaSpecification.BlockAdditionID:
                    model.BlockAdditionID = reader.ReadULong(size);
                    break;
                case MatroskaSpecification.Delay:
                    model.Delay = reader.ReadULong(size);
                    break;
                case MatroskaSpecification.FrameNumber:
                    model.FrameNumber = reader.ReadULong(size);
                    break;
                case MatroskaSpecification.LaceNumber:
                    model.LaceNumber = reader.ReadULong(size);
                    break;
                case MatroskaSpecification.SliceDuration:
                    model.SliceDuration = reader.ReadULong(size);
                    break;
                default:
                    throw new EbmlDataFormatException($"Unexpected ebml element '{descriptor.Identifier}'");
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void FillScalar(this SilentTracks model, ElementDescriptor descriptor, int size, ref SpanReader reader)
        {
            if (descriptor.Type == ElementType.MasterElement)
                throw new InvalidOperationException("Can't read master elements directly from the reader");
            
            switch (descriptor.Identifier.EncodedValue) {
                case MatroskaSpecification.SilentTrackNumber:
                    model.SilentTrackNumber = reader.ReadULong(size);
                    break;
                default:
                    throw new EbmlDataFormatException($"Unexpected ebml element '{descriptor.Identifier}'");
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void FillListEntry(this Cues model, ElementDescriptor descriptor, object listItem)
        {
            if (descriptor.Type != ElementType.MasterElement && descriptor.Type != ElementType.Binary)
                throw new InvalidOperationException("ElementDescriptor should have 'master' or 'binary' type");
            
            switch (descriptor.Identifier.EncodedValue) {
                case MatroskaSpecification.CuePoint:
                {
                    var list = model.CuePoints as IList<CuePoint> ?? new List<CuePoint>(4);
                    list.Add((CuePoint)listItem);
                    model.CuePoints = (IReadOnlyList<CuePoint>)list;
                    break;
                }
                default:
                    throw new EbmlDataFormatException($"Unexpected ebml element '{descriptor.Identifier}'");
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void FillScalar(this CuePoint model, ElementDescriptor descriptor, int size, ref SpanReader reader)
        {
            if (descriptor.Type == ElementType.MasterElement)
                throw new InvalidOperationException("Can't read master elements directly from the reader");
            
            switch (descriptor.Identifier.EncodedValue) {
                case MatroskaSpecification.CueTime:
                    model.CueTime = reader.ReadULong(size);
                    break;
                default:
                    throw new EbmlDataFormatException($"Unexpected ebml element '{descriptor.Identifier}'");
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void FillComplex(this CuePoint model, ElementDescriptor descriptor, BaseModel propertyModel)
        {
            if (descriptor.Type != ElementType.MasterElement)
                throw new InvalidOperationException("ElementDescriptor should have 'master' type");
            
            switch (descriptor.Identifier.EncodedValue) {
                case MatroskaSpecification.CueTrackPositions:
                    model.CueTrackPositions = (CueTrackPositions)propertyModel;
                    break;
                default:
                    throw new EbmlDataFormatException($"Unexpected ebml element '{descriptor.Identifier}'");
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void FillScalar(this CueTrackPositions model, ElementDescriptor descriptor, int size, ref SpanReader reader)
        {
            if (descriptor.Type == ElementType.MasterElement)
                throw new InvalidOperationException("Can't read master elements directly from the reader");
            
            switch (descriptor.Identifier.EncodedValue) {
                case MatroskaSpecification.CueBlockNumber:
                    model.CueBlockNumber = reader.ReadULong(size);
                    break;
                case MatroskaSpecification.CueClusterPosition:
                    model.CueClusterPosition = reader.ReadULong(size);
                    break;
                case MatroskaSpecification.CueCodecState:
                    model.CueCodecState = reader.ReadULong(size);
                    break;
                case MatroskaSpecification.CueDuration:
                    model.CueDuration = reader.ReadULong(size);
                    break;
                case MatroskaSpecification.CueRelativePosition:
                    model.CueRelativePosition = reader.ReadULong(size);
                    break;
                case MatroskaSpecification.CueTrack:
                    model.CueTrack = reader.ReadULong(size);
                    break;
                default:
                    throw new EbmlDataFormatException($"Unexpected ebml element '{descriptor.Identifier}'");
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void FillListEntry(this CueTrackPositions model, ElementDescriptor descriptor, object listItem)
        {
            if (descriptor.Type != ElementType.MasterElement && descriptor.Type != ElementType.Binary)
                throw new InvalidOperationException("ElementDescriptor should have 'master' or 'binary' type");
            
            switch (descriptor.Identifier.EncodedValue) {
                case MatroskaSpecification.CueReference:
                {
                    var list = model.CueReferences as IList<CueReference> ?? new List<CueReference>(4);
                    list.Add((CueReference)listItem);
                    model.CueReferences = (IReadOnlyList<CueReference>?)list;
                    break;
                }
                default:
                    throw new EbmlDataFormatException($"Unexpected ebml element '{descriptor.Identifier}'");
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void FillScalar(this CueReference model, ElementDescriptor descriptor, int size, ref SpanReader reader)
        {
            if (descriptor.Type == ElementType.MasterElement)
                throw new InvalidOperationException("Can't read master elements directly from the reader");
            
            switch (descriptor.Identifier.EncodedValue) {
                case MatroskaSpecification.CueRefCluster:
                    model.CueRefCluster = reader.ReadULong(size);
                    break;
                case MatroskaSpecification.CueRefCodecState:
                    model.CueRefCodecState = reader.ReadULong(size);
                    break;
                case MatroskaSpecification.CueRefNumber:
                    model.CueRefNumber = reader.ReadULong(size);
                    break;
                case MatroskaSpecification.CueRefTime:
                    model.CueRefTime = reader.ReadULong(size);
                    break;
                default:
                    throw new EbmlDataFormatException($"Unexpected ebml element '{descriptor.Identifier}'");
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void FillScalar(this Info model, ElementDescriptor descriptor, int size, ref SpanReader reader)
        {
            if (descriptor.Type == ElementType.MasterElement)
                throw new InvalidOperationException("Can't read master elements directly from the reader");
            
            switch (descriptor.Identifier.EncodedValue) {
                case MatroskaSpecification.DateUTC:
                    model.DateUTC = reader.ReadDateTime();
                    break;
                case MatroskaSpecification.Duration:
                    model.Duration = reader.ReadFloat(size);
                    break;
                case MatroskaSpecification.MuxingApp:
                    model.MuxingApp = reader.ReadUtf8String(size);
                    break;
                case MatroskaSpecification.NextFilename:
                    model.NextFilename = reader.ReadUtf8String(size);
                    break;
                case MatroskaSpecification.NextUID:
                    model.NextUID = reader.ReadBytes(size);
                    break;
                case MatroskaSpecification.PrevFilename:
                    model.PrevFilename = reader.ReadUtf8String(size);
                    break;
                case MatroskaSpecification.PrevUID:
                    model.PrevUID = reader.ReadBytes(size);
                    break;
                case MatroskaSpecification.SegmentFamily:
                    model.SegmentFamily = reader.ReadBytes(size);
                    break;
                case MatroskaSpecification.SegmentFilename:
                    model.SegmentFilename = reader.ReadUtf8String(size);
                    break;
                case MatroskaSpecification.SegmentUID:
                    model.SegmentUID = reader.ReadBytes(size);
                    break;
                case MatroskaSpecification.TimestampScale:
                    model.TimestampScale = reader.ReadULong(size);
                    break;
                case MatroskaSpecification.Title:
                    model.Title = reader.ReadUtf8String(size);
                    break;
                case MatroskaSpecification.WritingApp:
                    model.WritingApp = reader.ReadUtf8String(size);
                    break;
                default:
                    throw new EbmlDataFormatException($"Unexpected ebml element '{descriptor.Identifier}'");
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void FillComplex(this Info model, ElementDescriptor descriptor, BaseModel propertyModel)
        {
            if (descriptor.Type != ElementType.MasterElement)
                throw new InvalidOperationException("ElementDescriptor should have 'master' type");
            
            switch (descriptor.Identifier.EncodedValue) {
                case MatroskaSpecification.ChapterTranslate:
                    model.ChapterTranslate = (ChapterTranslate?)propertyModel;
                    break;
                default:
                    throw new EbmlDataFormatException($"Unexpected ebml element '{descriptor.Identifier}'");
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void FillScalar(this ChapterTranslate model, ElementDescriptor descriptor, int size, ref SpanReader reader)
        {
            if (descriptor.Type == ElementType.MasterElement)
                throw new InvalidOperationException("Can't read master elements directly from the reader");
            
            switch (descriptor.Identifier.EncodedValue) {
                case MatroskaSpecification.ChapterTranslateCodec:
                    model.ChapterTranslateCodec = reader.ReadULong(size);
                    break;
                case MatroskaSpecification.ChapterTranslateEditionUID:
                    model.ChapterTranslateEditionUID = reader.ReadULong(size);
                    break;
                case MatroskaSpecification.ChapterTranslateID:
                    model.ChapterTranslateID = reader.ReadBytes(size);
                    break;
                default:
                    throw new EbmlDataFormatException($"Unexpected ebml element '{descriptor.Identifier}'");
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void FillComplex(this SeekHead model, ElementDescriptor descriptor, BaseModel propertyModel)
        {
            if (descriptor.Type != ElementType.MasterElement)
                throw new InvalidOperationException("ElementDescriptor should have 'master' type");
            
            switch (descriptor.Identifier.EncodedValue) {
                case MatroskaSpecification.Seek:
                    model.Seek = (Seek)propertyModel;
                    break;
                default:
                    throw new EbmlDataFormatException($"Unexpected ebml element '{descriptor.Identifier}'");
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void FillScalar(this Seek model, ElementDescriptor descriptor, int size, ref SpanReader reader)
        {
            if (descriptor.Type == ElementType.MasterElement)
                throw new InvalidOperationException("Can't read master elements directly from the reader");
            
            switch (descriptor.Identifier.EncodedValue) {
                case MatroskaSpecification.SeekID:
                    model.SeekID = reader.ReadBytes(size);
                    break;
                case MatroskaSpecification.SeekPosition:
                    model.SeekPosition = reader.ReadULong(size);
                    break;
                default:
                    throw new EbmlDataFormatException($"Unexpected ebml element '{descriptor.Identifier}'");
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void FillListEntry(this Tags model, ElementDescriptor descriptor, object listItem)
        {
            if (descriptor.Type != ElementType.MasterElement && descriptor.Type != ElementType.Binary)
                throw new InvalidOperationException("ElementDescriptor should have 'master' or 'binary' type");
            
            switch (descriptor.Identifier.EncodedValue) {
                case MatroskaSpecification.Tag:
                {
                    var list = model.TagItems as IList<TagItem> ?? new List<TagItem>(4);
                    list.Add((TagItem)listItem);
                    model.TagItems = (IReadOnlyList<TagItem>)list;
                    break;
                }
                default:
                    throw new EbmlDataFormatException($"Unexpected ebml element '{descriptor.Identifier}'");
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void FillComplex(this TagItem model, ElementDescriptor descriptor, BaseModel propertyModel)
        {
            if (descriptor.Type != ElementType.MasterElement)
                throw new InvalidOperationException("ElementDescriptor should have 'master' type");
            
            switch (descriptor.Identifier.EncodedValue) {
                case MatroskaSpecification.Targets:
                    model.Targets = (Targets)propertyModel;
                    break;
                default:
                    throw new EbmlDataFormatException($"Unexpected ebml element '{descriptor.Identifier}'");
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void FillListEntry(this TagItem model, ElementDescriptor descriptor, object listItem)
        {
            if (descriptor.Type != ElementType.MasterElement && descriptor.Type != ElementType.Binary)
                throw new InvalidOperationException("ElementDescriptor should have 'master' or 'binary' type");
            
            switch (descriptor.Identifier.EncodedValue) {
                case MatroskaSpecification.SimpleTag:
                {
                    var list = model.SimpleTags as IList<SimpleTag> ?? new List<SimpleTag>(4);
                    list.Add((SimpleTag)listItem);
                    model.SimpleTags = (IReadOnlyList<SimpleTag>)list;
                    break;
                }
                default:
                    throw new EbmlDataFormatException($"Unexpected ebml element '{descriptor.Identifier}'");
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void FillScalar(this Targets model, ElementDescriptor descriptor, int size, ref SpanReader reader)
        {
            if (descriptor.Type == ElementType.MasterElement)
                throw new InvalidOperationException("Can't read master elements directly from the reader");
            
            switch (descriptor.Identifier.EncodedValue) {
                case MatroskaSpecification.TagAttachmentUID:
                    model.TagAttachmentUID = reader.ReadULong(size);
                    break;
                case MatroskaSpecification.TagChapterUID:
                    model.TagChapterUID = reader.ReadULong(size);
                    break;
                case MatroskaSpecification.TagEditionUID:
                    model.TagEditionUID = reader.ReadULong(size);
                    break;
                case MatroskaSpecification.TagTrackUID:
                    model.TagTrackUID = reader.ReadULong(size);
                    break;
                case MatroskaSpecification.TargetType:
                    model.TargetType = reader.ReadAsciiString(size);
                    break;
                case MatroskaSpecification.TargetTypeValue:
                    model.TargetTypeValue = reader.ReadULong(size);
                    break;
                default:
                    throw new EbmlDataFormatException($"Unexpected ebml element '{descriptor.Identifier}'");
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void FillListEntry(this Tracks model, ElementDescriptor descriptor, object listItem)
        {
            if (descriptor.Type != ElementType.MasterElement && descriptor.Type != ElementType.Binary)
                throw new InvalidOperationException("ElementDescriptor should have 'master' or 'binary' type");
            
            switch (descriptor.Identifier.EncodedValue) {
                case MatroskaSpecification.TrackEntry:
                {
                    var list = model.TrackEntries as IList<TrackEntry> ?? new List<TrackEntry>(4);
                    list.Add((TrackEntry)listItem);
                    model.TrackEntries = (IReadOnlyList<TrackEntry>)list;
                    break;
                }
                default:
                    throw new EbmlDataFormatException($"Unexpected ebml element '{descriptor.Identifier}'");
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void FillScalar(this TrackEntry model, ElementDescriptor descriptor, int size, ref SpanReader reader)
        {
            if (descriptor.Type == ElementType.MasterElement)
                throw new InvalidOperationException("Can't read master elements directly from the reader");
            
            switch (descriptor.Identifier.EncodedValue) {
                case MatroskaSpecification.AttachmentLink:
                    model.AttachmentLink = reader.ReadULong(size);
                    break;
                case MatroskaSpecification.CodecDecodeAll:
                    model.CodecDecodeAll = reader.ReadULong(size);
                    break;
                case MatroskaSpecification.CodecDelay:
                    model.CodecDelay = reader.ReadULong(size);
                    break;
                case MatroskaSpecification.CodecDownloadURL:
                    model.CodecDownloadURL = reader.ReadAsciiString(size);
                    break;
                case MatroskaSpecification.CodecID:
                    model.CodecID = reader.ReadAsciiString(size);
                    break;
                case MatroskaSpecification.CodecInfoURL:
                    model.CodecInfoURL = reader.ReadAsciiString(size);
                    break;
                case MatroskaSpecification.CodecName:
                    model.CodecName = reader.ReadUtf8String(size);
                    break;
                case MatroskaSpecification.CodecPrivate:
                    model.CodecPrivate = reader.ReadBytes(size);
                    break;
                case MatroskaSpecification.CodecSettings:
                    model.CodecSettings = reader.ReadUtf8String(size);
                    break;
                case MatroskaSpecification.DefaultDecodedFieldDuration:
                    model.DefaultDecodedFieldDuration = reader.ReadULong(size);
                    break;
                case MatroskaSpecification.DefaultDuration:
                    model.DefaultDuration = reader.ReadULong(size);
                    break;
                case MatroskaSpecification.FlagCommentary:
                    model.FlagCommentary = reader.ReadULong(size);
                    break;
                case MatroskaSpecification.FlagDefault:
                    model.FlagDefault = reader.ReadULong(size);
                    break;
                case MatroskaSpecification.FlagEnabled:
                    model.FlagEnabled = reader.ReadULong(size);
                    break;
                case MatroskaSpecification.FlagForced:
                    model.FlagForced = reader.ReadULong(size);
                    break;
                case MatroskaSpecification.FlagHearingImpaired:
                    model.FlagHearingImpaired = reader.ReadULong(size);
                    break;
                case MatroskaSpecification.FlagLacing:
                    model.FlagLacing = reader.ReadULong(size);
                    break;
                case MatroskaSpecification.FlagOriginal:
                    model.FlagOriginal = reader.ReadULong(size);
                    break;
                case MatroskaSpecification.FlagTextDescriptions:
                    model.FlagTextDescriptions = reader.ReadULong(size);
                    break;
                case MatroskaSpecification.FlagVisualImpaired:
                    model.FlagVisualImpaired = reader.ReadULong(size);
                    break;
                case MatroskaSpecification.Language:
                    model.Language = reader.ReadAsciiString(size);
                    break;
                case MatroskaSpecification.LanguageIETF:
                    model.LanguageIETF = reader.ReadAsciiString(size);
                    break;
                case MatroskaSpecification.MaxBlockAdditionID:
                    model.MaxBlockAdditionID = reader.ReadULong(size);
                    break;
                case MatroskaSpecification.MaxCache:
                    model.MaxCache = reader.ReadULong(size);
                    break;
                case MatroskaSpecification.MinCache:
                    model.MinCache = reader.ReadULong(size);
                    break;
                case MatroskaSpecification.Name:
                    model.Name = reader.ReadUtf8String(size);
                    break;
                case MatroskaSpecification.SeekPreRoll:
                    model.SeekPreRoll = reader.ReadULong(size);
                    break;
                case MatroskaSpecification.TrackNumber:
                    model.TrackNumber = reader.ReadULong(size);
                    break;
                case MatroskaSpecification.TrackOffset:
                    model.TrackOffset = reader.ReadLong(size);
                    break;
                case MatroskaSpecification.TrackOverlay:
                    model.TrackOverlay = reader.ReadULong(size);
                    break;
                case MatroskaSpecification.TrackTimestampScale:
                    model.TrackTimestampScale = reader.ReadFloat(size);
                    break;
                case MatroskaSpecification.TrackType:
                    model.TrackType = (TrackType?)reader.ReadULong(size);
                    break;
                case MatroskaSpecification.TrackUID:
                    model.TrackUID = reader.ReadULong(size);
                    break;
                case MatroskaSpecification.TrickMasterTrackSegmentUID:
                    model.TrickMasterTrackSegmentUID = reader.ReadBytes(size);
                    break;
                case MatroskaSpecification.TrickMasterTrackUID:
                    model.TrickMasterTrackUID = reader.ReadULong(size);
                    break;
                case MatroskaSpecification.TrickTrackFlag:
                    model.TrickTrackFlag = reader.ReadULong(size);
                    break;
                case MatroskaSpecification.TrickTrackSegmentUID:
                    model.TrickTrackSegmentUID = reader.ReadBytes(size);
                    break;
                case MatroskaSpecification.TrickTrackUID:
                    model.TrickTrackUID = reader.ReadULong(size);
                    break;
                default:
                    throw new EbmlDataFormatException($"Unexpected ebml element '{descriptor.Identifier}'");
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void FillComplex(this TrackEntry model, ElementDescriptor descriptor, BaseModel propertyModel)
        {
            if (descriptor.Type != ElementType.MasterElement)
                throw new InvalidOperationException("ElementDescriptor should have 'master' type");
            
            switch (descriptor.Identifier.EncodedValue) {
                case MatroskaSpecification.Audio:
                    model.Audio = (Audio?)propertyModel;
                    break;
                case MatroskaSpecification.BlockAdditionMapping:
                    model.BlockAdditionMapping = (BlockAdditionMapping?)propertyModel;
                    break;
                case MatroskaSpecification.ContentEncodings:
                    model.ContentEncodings = (ContentEncodings?)propertyModel;
                    break;
                case MatroskaSpecification.TrackOperation:
                    model.TrackOperation = (TrackOperation?)propertyModel;
                    break;
                case MatroskaSpecification.TrackTranslate:
                    model.TrackTranslate = (TrackTranslate?)propertyModel;
                    break;
                case MatroskaSpecification.Video:
                    model.Video = (Video?)propertyModel;
                    break;
                default:
                    throw new EbmlDataFormatException($"Unexpected ebml element '{descriptor.Identifier}'");
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void FillScalar(this Audio model, ElementDescriptor descriptor, int size, ref SpanReader reader)
        {
            if (descriptor.Type == ElementType.MasterElement)
                throw new InvalidOperationException("Can't read master elements directly from the reader");
            
            switch (descriptor.Identifier.EncodedValue) {
                case MatroskaSpecification.BitDepth:
                    model.BitDepth = reader.ReadULong(size);
                    break;
                case MatroskaSpecification.ChannelPositions:
                    model.ChannelPositions = reader.ReadBytes(size);
                    break;
                case MatroskaSpecification.Channels:
                    model.Channels = reader.ReadULong(size);
                    break;
                case MatroskaSpecification.OutputSamplingFrequency:
                    model.OutputSamplingFrequency = reader.ReadFloat(size);
                    break;
                case MatroskaSpecification.SamplingFrequency:
                    model.SamplingFrequency = reader.ReadFloat(size);
                    break;
                default:
                    throw new EbmlDataFormatException($"Unexpected ebml element '{descriptor.Identifier}'");
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void FillScalar(this BlockAdditionMapping model, ElementDescriptor descriptor, int size, ref SpanReader reader)
        {
            if (descriptor.Type == ElementType.MasterElement)
                throw new InvalidOperationException("Can't read master elements directly from the reader");
            
            switch (descriptor.Identifier.EncodedValue) {
                case MatroskaSpecification.BlockAddIDExtraData:
                    model.BlockAddIDExtraData = reader.ReadBytes(size);
                    break;
                case MatroskaSpecification.BlockAddIDName:
                    model.BlockAddIDName = reader.ReadAsciiString(size);
                    break;
                case MatroskaSpecification.BlockAddIDType:
                    model.BlockAddIDType = reader.ReadULong(size);
                    break;
                case MatroskaSpecification.BlockAddIDValue:
                    model.BlockAddIDValue = reader.ReadULong(size);
                    break;
                default:
                    throw new EbmlDataFormatException($"Unexpected ebml element '{descriptor.Identifier}'");
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void FillListEntry(this ContentEncodings model, ElementDescriptor descriptor, object listItem)
        {
            if (descriptor.Type != ElementType.MasterElement && descriptor.Type != ElementType.Binary)
                throw new InvalidOperationException("ElementDescriptor should have 'master' or 'binary' type");
            
            switch (descriptor.Identifier.EncodedValue) {
                case MatroskaSpecification.ContentEncoding:
                {
                    var list = model.ContentEncodingItems as IList<ContentEncodingItem> ?? new List<ContentEncodingItem>(4);
                    list.Add((ContentEncodingItem)listItem);
                    model.ContentEncodingItems = (IReadOnlyList<ContentEncodingItem>)list;
                    break;
                }
                default:
                    throw new EbmlDataFormatException($"Unexpected ebml element '{descriptor.Identifier}'");
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void FillScalar(this ContentEncodingItem model, ElementDescriptor descriptor, int size, ref SpanReader reader)
        {
            if (descriptor.Type == ElementType.MasterElement)
                throw new InvalidOperationException("Can't read master elements directly from the reader");
            
            switch (descriptor.Identifier.EncodedValue) {
                case MatroskaSpecification.ContentEncodingOrder:
                    model.ContentEncodingOrder = reader.ReadULong(size);
                    break;
                case MatroskaSpecification.ContentEncodingScope:
                    model.ContentEncodingScope = reader.ReadULong(size);
                    break;
                case MatroskaSpecification.ContentEncodingType:
                    model.ContentEncodingType = reader.ReadULong(size);
                    break;
                default:
                    throw new EbmlDataFormatException($"Unexpected ebml element '{descriptor.Identifier}'");
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void FillComplex(this ContentEncodingItem model, ElementDescriptor descriptor, BaseModel propertyModel)
        {
            if (descriptor.Type != ElementType.MasterElement)
                throw new InvalidOperationException("ElementDescriptor should have 'master' type");
            
            switch (descriptor.Identifier.EncodedValue) {
                case MatroskaSpecification.ContentEncryption:
                    model.ContentEncryption = (ContentEncryption?)propertyModel;
                    break;
                default:
                    throw new EbmlDataFormatException($"Unexpected ebml element '{descriptor.Identifier}'");
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void FillListEntry(this ContentEncodingItem model, ElementDescriptor descriptor, object listItem)
        {
            if (descriptor.Type != ElementType.MasterElement && descriptor.Type != ElementType.Binary)
                throw new InvalidOperationException("ElementDescriptor should have 'master' or 'binary' type");
            
            switch (descriptor.Identifier.EncodedValue) {
                case MatroskaSpecification.ContentCompression:
                {
                    var list = model.ContentCompressions as IList<ContentCompression> ?? new List<ContentCompression>(4);
                    list.Add((ContentCompression)listItem);
                    model.ContentCompressions = (IReadOnlyList<ContentCompression>?)list;
                    break;
                }
                default:
                    throw new EbmlDataFormatException($"Unexpected ebml element '{descriptor.Identifier}'");
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void FillScalar(this ContentCompression model, ElementDescriptor descriptor, int size, ref SpanReader reader)
        {
            if (descriptor.Type == ElementType.MasterElement)
                throw new InvalidOperationException("Can't read master elements directly from the reader");
            
            switch (descriptor.Identifier.EncodedValue) {
                case MatroskaSpecification.ContentCompAlgo:
                    model.ContentCompAlgo = reader.ReadULong(size);
                    break;
                case MatroskaSpecification.ContentCompSettings:
                    model.ContentCompSettings = reader.ReadBytes(size);
                    break;
                default:
                    throw new EbmlDataFormatException($"Unexpected ebml element '{descriptor.Identifier}'");
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void FillScalar(this ContentEncryption model, ElementDescriptor descriptor, int size, ref SpanReader reader)
        {
            if (descriptor.Type == ElementType.MasterElement)
                throw new InvalidOperationException("Can't read master elements directly from the reader");
            
            switch (descriptor.Identifier.EncodedValue) {
                case MatroskaSpecification.ContentEncAlgo:
                    model.ContentEncAlgo = reader.ReadULong(size);
                    break;
                case MatroskaSpecification.ContentEncKeyID:
                    model.ContentEncKeyID = reader.ReadBytes(size);
                    break;
                case MatroskaSpecification.ContentSigAlgo:
                    model.ContentSigAlgo = reader.ReadULong(size);
                    break;
                case MatroskaSpecification.ContentSigHashAlgo:
                    model.ContentSigHashAlgo = reader.ReadULong(size);
                    break;
                case MatroskaSpecification.ContentSigKeyID:
                    model.ContentSigKeyID = reader.ReadBytes(size);
                    break;
                case MatroskaSpecification.ContentSignature:
                    model.ContentSignature = reader.ReadBytes(size);
                    break;
                default:
                    throw new EbmlDataFormatException($"Unexpected ebml element '{descriptor.Identifier}'");
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void FillComplex(this ContentEncryption model, ElementDescriptor descriptor, BaseModel propertyModel)
        {
            if (descriptor.Type != ElementType.MasterElement)
                throw new InvalidOperationException("ElementDescriptor should have 'master' type");
            
            switch (descriptor.Identifier.EncodedValue) {
                case MatroskaSpecification.ContentEncAESSettings:
                    model.ContentEncAESSettings = (ContentEncAESSettings?)propertyModel;
                    break;
                default:
                    throw new EbmlDataFormatException($"Unexpected ebml element '{descriptor.Identifier}'");
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void FillScalar(this ContentEncAESSettings model, ElementDescriptor descriptor, int size, ref SpanReader reader)
        {
            if (descriptor.Type == ElementType.MasterElement)
                throw new InvalidOperationException("Can't read master elements directly from the reader");
            
            switch (descriptor.Identifier.EncodedValue) {
                case MatroskaSpecification.AESSettingsCipherMode:
                    model.AESSettingsCipherMode = reader.ReadULong(size);
                    break;
                default:
                    throw new EbmlDataFormatException($"Unexpected ebml element '{descriptor.Identifier}'");
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void FillComplex(this TrackOperation model, ElementDescriptor descriptor, BaseModel propertyModel)
        {
            if (descriptor.Type != ElementType.MasterElement)
                throw new InvalidOperationException("ElementDescriptor should have 'master' type");
            
            switch (descriptor.Identifier.EncodedValue) {
                case MatroskaSpecification.TrackCombinePlanes:
                    model.TrackCombinePlanes = (TrackCombinePlanes?)propertyModel;
                    break;
                case MatroskaSpecification.TrackJoinBlocks:
                    model.TrackJoinBlocks = (TrackJoinBlocks?)propertyModel;
                    break;
                default:
                    throw new EbmlDataFormatException($"Unexpected ebml element '{descriptor.Identifier}'");
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void FillComplex(this TrackCombinePlanes model, ElementDescriptor descriptor, BaseModel propertyModel)
        {
            if (descriptor.Type != ElementType.MasterElement)
                throw new InvalidOperationException("ElementDescriptor should have 'master' type");
            
            switch (descriptor.Identifier.EncodedValue) {
                case MatroskaSpecification.TrackPlane:
                    model.TrackPlane = (TrackPlane)propertyModel;
                    break;
                default:
                    throw new EbmlDataFormatException($"Unexpected ebml element '{descriptor.Identifier}'");
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void FillScalar(this TrackPlane model, ElementDescriptor descriptor, int size, ref SpanReader reader)
        {
            if (descriptor.Type == ElementType.MasterElement)
                throw new InvalidOperationException("Can't read master elements directly from the reader");
            
            switch (descriptor.Identifier.EncodedValue) {
                case MatroskaSpecification.TrackPlaneType:
                    model.TrackPlaneType = reader.ReadULong(size);
                    break;
                case MatroskaSpecification.TrackPlaneUID:
                    model.TrackPlaneUID = reader.ReadULong(size);
                    break;
                default:
                    throw new EbmlDataFormatException($"Unexpected ebml element '{descriptor.Identifier}'");
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void FillScalar(this TrackJoinBlocks model, ElementDescriptor descriptor, int size, ref SpanReader reader)
        {
            if (descriptor.Type == ElementType.MasterElement)
                throw new InvalidOperationException("Can't read master elements directly from the reader");
            
            switch (descriptor.Identifier.EncodedValue) {
                case MatroskaSpecification.TrackJoinUID:
                    model.TrackJoinUID = reader.ReadULong(size);
                    break;
                default:
                    throw new EbmlDataFormatException($"Unexpected ebml element '{descriptor.Identifier}'");
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void FillScalar(this TrackTranslate model, ElementDescriptor descriptor, int size, ref SpanReader reader)
        {
            if (descriptor.Type == ElementType.MasterElement)
                throw new InvalidOperationException("Can't read master elements directly from the reader");
            
            switch (descriptor.Identifier.EncodedValue) {
                case MatroskaSpecification.TrackTranslateCodec:
                    model.TrackTranslateCodec = reader.ReadULong(size);
                    break;
                case MatroskaSpecification.TrackTranslateEditionUID:
                    model.TrackTranslateEditionUID = reader.ReadULong(size);
                    break;
                case MatroskaSpecification.TrackTranslateTrackID:
                    model.TrackTranslateTrackID = reader.ReadBytes(size);
                    break;
                default:
                    throw new EbmlDataFormatException($"Unexpected ebml element '{descriptor.Identifier}'");
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void FillScalar(this Video model, ElementDescriptor descriptor, int size, ref SpanReader reader)
        {
            if (descriptor.Type == ElementType.MasterElement)
                throw new InvalidOperationException("Can't read master elements directly from the reader");
            
            switch (descriptor.Identifier.EncodedValue) {
                case MatroskaSpecification.AlphaMode:
                    model.AlphaMode = reader.ReadULong(size);
                    break;
                case MatroskaSpecification.AspectRatioType:
                    model.AspectRatioType = reader.ReadULong(size);
                    break;
                case MatroskaSpecification.ColourSpace:
                    model.ColourSpace = reader.ReadBytes(size);
                    break;
                case MatroskaSpecification.DisplayHeight:
                    model.DisplayHeight = reader.ReadULong(size);
                    break;
                case MatroskaSpecification.DisplayUnit:
                    model.DisplayUnit = reader.ReadULong(size);
                    break;
                case MatroskaSpecification.DisplayWidth:
                    model.DisplayWidth = reader.ReadULong(size);
                    break;
                case MatroskaSpecification.FieldOrder:
                    model.FieldOrder = reader.ReadULong(size);
                    break;
                case MatroskaSpecification.FlagInterlaced:
                    model.FlagInterlaced = reader.ReadULong(size);
                    break;
                case MatroskaSpecification.FrameRate:
                    model.FrameRate = reader.ReadFloat(size);
                    break;
                case MatroskaSpecification.GammaValue:
                    model.GammaValue = reader.ReadFloat(size);
                    break;
                case MatroskaSpecification.OldStereoMode:
                    model.OldStereoMode = reader.ReadULong(size);
                    break;
                case MatroskaSpecification.PixelCropBottom:
                    model.PixelCropBottom = reader.ReadULong(size);
                    break;
                case MatroskaSpecification.PixelCropLeft:
                    model.PixelCropLeft = reader.ReadULong(size);
                    break;
                case MatroskaSpecification.PixelCropRight:
                    model.PixelCropRight = reader.ReadULong(size);
                    break;
                case MatroskaSpecification.PixelCropTop:
                    model.PixelCropTop = reader.ReadULong(size);
                    break;
                case MatroskaSpecification.PixelHeight:
                    model.PixelHeight = reader.ReadULong(size);
                    break;
                case MatroskaSpecification.PixelWidth:
                    model.PixelWidth = reader.ReadULong(size);
                    break;
                case MatroskaSpecification.StereoMode:
                    model.StereoMode = reader.ReadULong(size);
                    break;
                default:
                    throw new EbmlDataFormatException($"Unexpected ebml element '{descriptor.Identifier}'");
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void FillComplex(this Video model, ElementDescriptor descriptor, BaseModel propertyModel)
        {
            if (descriptor.Type != ElementType.MasterElement)
                throw new InvalidOperationException("ElementDescriptor should have 'master' type");
            
            switch (descriptor.Identifier.EncodedValue) {
                case MatroskaSpecification.Colour:
                    model.Colour = (Colour?)propertyModel;
                    break;
                case MatroskaSpecification.Projection:
                    model.Projection = (Projection?)propertyModel;
                    break;
                default:
                    throw new EbmlDataFormatException($"Unexpected ebml element '{descriptor.Identifier}'");
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void FillScalar(this Colour model, ElementDescriptor descriptor, int size, ref SpanReader reader)
        {
            if (descriptor.Type == ElementType.MasterElement)
                throw new InvalidOperationException("Can't read master elements directly from the reader");
            
            switch (descriptor.Identifier.EncodedValue) {
                case MatroskaSpecification.BitsPerChannel:
                    model.BitsPerChannel = reader.ReadULong(size);
                    break;
                case MatroskaSpecification.CbSubsamplingHorz:
                    model.CbSubsamplingHorz = reader.ReadULong(size);
                    break;
                case MatroskaSpecification.CbSubsamplingVert:
                    model.CbSubsamplingVert = reader.ReadULong(size);
                    break;
                case MatroskaSpecification.ChromaSitingHorz:
                    model.ChromaSitingHorz = reader.ReadULong(size);
                    break;
                case MatroskaSpecification.ChromaSitingVert:
                    model.ChromaSitingVert = reader.ReadULong(size);
                    break;
                case MatroskaSpecification.ChromaSubsamplingHorz:
                    model.ChromaSubsamplingHorz = reader.ReadULong(size);
                    break;
                case MatroskaSpecification.ChromaSubsamplingVert:
                    model.ChromaSubsamplingVert = reader.ReadULong(size);
                    break;
                case MatroskaSpecification.MatrixCoefficients:
                    model.MatrixCoefficients = reader.ReadULong(size);
                    break;
                case MatroskaSpecification.MaxCLL:
                    model.MaxCLL = reader.ReadULong(size);
                    break;
                case MatroskaSpecification.MaxFALL:
                    model.MaxFALL = reader.ReadULong(size);
                    break;
                case MatroskaSpecification.Primaries:
                    model.Primaries = reader.ReadULong(size);
                    break;
                case MatroskaSpecification.Range:
                    model.Range = reader.ReadULong(size);
                    break;
                case MatroskaSpecification.TransferCharacteristics:
                    model.TransferCharacteristics = reader.ReadULong(size);
                    break;
                default:
                    throw new EbmlDataFormatException($"Unexpected ebml element '{descriptor.Identifier}'");
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void FillComplex(this Colour model, ElementDescriptor descriptor, BaseModel propertyModel)
        {
            if (descriptor.Type != ElementType.MasterElement)
                throw new InvalidOperationException("ElementDescriptor should have 'master' type");
            
            switch (descriptor.Identifier.EncodedValue) {
                case MatroskaSpecification.MasteringMetadata:
                    model.MasteringMetadata = (MasteringMetadata?)propertyModel;
                    break;
                default:
                    throw new EbmlDataFormatException($"Unexpected ebml element '{descriptor.Identifier}'");
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void FillScalar(this MasteringMetadata model, ElementDescriptor descriptor, int size, ref SpanReader reader)
        {
            if (descriptor.Type == ElementType.MasterElement)
                throw new InvalidOperationException("Can't read master elements directly from the reader");
            
            switch (descriptor.Identifier.EncodedValue) {
                case MatroskaSpecification.LuminanceMax:
                    model.LuminanceMax = reader.ReadFloat(size);
                    break;
                case MatroskaSpecification.LuminanceMin:
                    model.LuminanceMin = reader.ReadFloat(size);
                    break;
                case MatroskaSpecification.PrimaryBChromaticityX:
                    model.PrimaryBChromaticityX = reader.ReadFloat(size);
                    break;
                case MatroskaSpecification.PrimaryBChromaticityY:
                    model.PrimaryBChromaticityY = reader.ReadFloat(size);
                    break;
                case MatroskaSpecification.PrimaryGChromaticityX:
                    model.PrimaryGChromaticityX = reader.ReadFloat(size);
                    break;
                case MatroskaSpecification.PrimaryGChromaticityY:
                    model.PrimaryGChromaticityY = reader.ReadFloat(size);
                    break;
                case MatroskaSpecification.PrimaryRChromaticityX:
                    model.PrimaryRChromaticityX = reader.ReadFloat(size);
                    break;
                case MatroskaSpecification.PrimaryRChromaticityY:
                    model.PrimaryRChromaticityY = reader.ReadFloat(size);
                    break;
                case MatroskaSpecification.WhitePointChromaticityX:
                    model.WhitePointChromaticityX = reader.ReadFloat(size);
                    break;
                case MatroskaSpecification.WhitePointChromaticityY:
                    model.WhitePointChromaticityY = reader.ReadFloat(size);
                    break;
                default:
                    throw new EbmlDataFormatException($"Unexpected ebml element '{descriptor.Identifier}'");
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void FillScalar(this Projection model, ElementDescriptor descriptor, int size, ref SpanReader reader)
        {
            if (descriptor.Type == ElementType.MasterElement)
                throw new InvalidOperationException("Can't read master elements directly from the reader");
            
            switch (descriptor.Identifier.EncodedValue) {
                case MatroskaSpecification.ProjectionPosePitch:
                    model.ProjectionPosePitch = reader.ReadFloat(size);
                    break;
                case MatroskaSpecification.ProjectionPoseRoll:
                    model.ProjectionPoseRoll = reader.ReadFloat(size);
                    break;
                case MatroskaSpecification.ProjectionPoseYaw:
                    model.ProjectionPoseYaw = reader.ReadFloat(size);
                    break;
                case MatroskaSpecification.ProjectionPrivate:
                    model.ProjectionPrivate = reader.ReadBytes(size);
                    break;
                case MatroskaSpecification.ProjectionType:
                    model.ProjectionType = reader.ReadULong(size);
                    break;
                default:
                    throw new EbmlDataFormatException($"Unexpected ebml element '{descriptor.Identifier}'");
            }
        }

    }
}

