<#@ template language="C#" #>
<#@ import namespace="System.Collections.Generic" #>
<#
    List<string> entityTypeNames = new () {
        "Chat",
        "AudioRecord",
        "VideoRecord",
        "Stream",
        "User"
    };

#>
using System;
using System.Runtime.Serialization;
// ReSharper disable PartialTypeWithSinglePart
#pragma warning disable 618

namespace ActualChat
{
<#
    foreach(var entityTypeName in entityTypeNames)
    {
        var typeName = entityTypeName + "Id";
#>
    [DataContract]
    public readonly partial struct <#=typeName#> : IEquatable<<#=typeName#>>, IIdentifier<string>
    {
        [Obsolete("Use implicit cast to/from string instead")]
        [DataMember(Order = 0)]
        public string Value { get; }

        public <#=typeName#>(string value)
            => Value = value;

        public override string ToString() => Value;

        public static implicit operator <#=typeName#>(string value) => new(value);
        public static implicit operator string(<#=typeName#> id) => id.Value;

        // Equality
        public bool Equals(<#=typeName#> other) => Value == other.Value;
        public override bool Equals(object? obj) => obj is <#=typeName#> other && Equals(other);
        public override int GetHashCode() => Value.GetHashCode();
        public static bool operator ==(<#=typeName#> left, <#=typeName#> right) => left.Equals(right);
        public static bool operator !=(<#=typeName#> left, <#=typeName#> right) => !left.Equals(right);
    }

<#
    }
#>
}
