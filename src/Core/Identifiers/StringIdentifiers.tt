<#@ template language="C#" #>
<#@ import namespace="System.Collections.Generic" #>
<#
    List<string> identifierEntities = new () {
        "Chat",
        "AudioRecord",
        "VideoRecord",
        "Stream",
        "User"
    };
    
#>
using System;
using System.Runtime.Serialization;
// ReSharper disable PartialTypeWithSinglePart
#pragma warning disable 618

namespace ActualChat
{
<#
    foreach(var entity in identifierEntities)
    {
#>
    [DataContract]
    public readonly partial struct <#=entity#>Id : IEquatable<<#=entity#>Id>, IIdentifier<string>
    {
        [Obsolete("Please use implicit cast to/from string")]
        [DataMember(Order = 0)]
        public string Value { get; } 

        private <#=entity#>Id(string value)
            => Value = value;

        public override string ToString() => Value;

        public static implicit operator <#=entity#>Id(string value) => new(value);
        public static implicit operator string(<#=entity#>Id id) => id.Value;

        // Equality
        public bool Equals(<#=entity#>Id other) => Value == other.Value;
        public override bool Equals(object? obj) => obj is <#=entity#>Id other && Equals(other);
        public override int GetHashCode() => Value.GetHashCode();
        public static bool operator ==(<#=entity#>Id left, <#=entity#>Id right) => left.Equals(right);
        public static bool operator !=(<#=entity#>Id left, <#=entity#>Id right) => !left.Equals(right);
    }

<#
    }
#>
}