@using ActualChat.Transcription
@inject ITranscriptStreamer _transcriptStreamer
@inject BlazorCircuitContext _circuitContext
@inject ILogger<ChatMessageTranscript> _log

<span class="content">@_transcript.Text</span>
<Button Size="Size.ExtraSmall" Color="Color.Success" Clicked="@OnPlay">Play</Button>

@code {
    private CancellationTokenSource? _cancellationTokenSource;
    private Transcript _transcript = new() { Text = "â€¦" };

    [Parameter]
    public string StreamId { get; set; } = null!;
    [Parameter]
    public EventCallback<string> OnListen { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        if (_cancellationTokenSource != null) {
            // We should never call those statements
            _cancellationTokenSource.Cancel();
            _cancellationTokenSource.Dispose();
        }
        if (!_circuitContext.IsPrerendering) {
            _cancellationTokenSource = new CancellationTokenSource();
            var transcriptReader = await _transcriptStreamer.GetTranscriptStream(StreamId, _cancellationTokenSource.Token);
            _ = ReadTranscript(transcriptReader, _cancellationTokenSource.Token);
        }

        await base.OnParametersSetAsync();
    }

    private void OnPlay()
    {
        if(OnListen.HasDelegate)
            OnListen.InvokeAsync(StreamId);
    }

    private async Task ReadTranscript(ChannelReader<TranscriptUpdate> transcriptUpdates, CancellationToken cancellationToken)
    {
        try {
            while (await transcriptUpdates.WaitToReadAsync(cancellationToken))
            while (transcriptUpdates.TryRead(out var update)) {
                _transcript = _transcript.WithUpdate(update);
                StateHasChanged();
            }
        }
        catch (Exception e) when (e is not OperationCanceledException) {
            _log.LogError(e, "Error while reading the transcript.");
            throw;
        }
    }
}
