@inject ITranscriptStreamer _transcriptStreamer
@inject BlazorCircuitContext _circuitContext

<span class="content">@Text</span>
<Button Type="@ButtonType.Button" Clicked="@OnListenClick" Color="Color.Link">Listen</Button>

@code {
    private CancellationTokenSource? _cancellationTokenSource;
    private string Text { get; set; } = "...";

    [Parameter]
    public string StreamId { get; set; } = null!;

    [Parameter]
    public EventCallback<string> OnListen { get; set; }


    protected override async Task OnParametersSetAsync()
    {
        if (_cancellationTokenSource != null) {
            // we should never call those statements
            _cancellationTokenSource.Cancel();
            _cancellationTokenSource.Dispose();
        }
        if (!_circuitContext.IsPrerendering) {
            _cancellationTokenSource = new CancellationTokenSource();
            var transcriptReader = await _transcriptStreamer.GetTranscriptStream(StreamId, _cancellationTokenSource.Token);
            _ = ReadTranscript(transcriptReader, _cancellationTokenSource.Token);
        }

        await base.OnParametersSetAsync();
    }

    private void OnListenClick()
    {
        if(OnListen.HasDelegate)
            OnListen.InvokeAsync(StreamId);
    }

    private async Task ReadTranscript(ChannelReader<TranscriptPart> transcriptReader, CancellationToken cancellationToken)
    {
        try {
            while (await transcriptReader.WaitToReadAsync(cancellationToken))
            while (transcriptReader.TryRead(out var message)) {
                cancellationToken.ThrowIfCancellationRequested();

                var (text, index, _, _) = message;
                Text = Text.Length >= index
                    ? $"{Text[..index]}{text}"
                    : $"{Text}{text.PadLeft(index - Text.Length + text.Length)}";

                StateHasChanged();
            }
        }
        catch (ChannelClosedException) { }
        catch (OperationCanceledException) { }
        catch (Exception e) {
            // TODO(AK): remove this dirty hack during exception handling!
            Text = e.Message + e.StackTrace;
            StateHasChanged();
        }
    }
}
