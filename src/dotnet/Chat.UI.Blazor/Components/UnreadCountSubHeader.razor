@namespace ActualChat.Chat.UI.Blazor.Components
@inherits ComputedStateComponent<Trimmed<int>>
@{
    var count = State.Value;
    if (count == 0)
        return;

    var messagesWord = count == 1 ? "message" : "messages";
    var text = $"{count.Format()} unread {messagesWord}";
}

<div class="unread-messages-sub-header" @onclick="@Click">
    @text
</div>

@code {
    private IMutableState<bool> _overrideToZero = null!;

    [Inject] private Session Session { get; init; } = null!;
    [Inject] private ChatUI ChatUI { get; init; } = null!;

    [CascadingParameter] public Chat Chat { get; set; } = null!;
    [Parameter] public EventCallback Click { get; set; }

    protected override void OnInitialized() {
        _overrideToZero = StateFactory.NewMutable(
            false,
            StateCategories.Get(GetType(), nameof(_overrideToZero)));
        base.OnInitialized();
    }

    protected override async Task<Trimmed<int>> ComputeState(CancellationToken cancellationToken) {
        var unreadCount = await ChatUI.GetUnreadCount(Chat.Id, cancellationToken);
        if (unreadCount == 0) {
            _overrideToZero.Value = true;
            return 0;
        }

        if (_overrideToZero.Value) {
            var snapshot = _overrideToZero.Snapshot;
            _ = Task.Delay(TimeSpan.FromSeconds(1), CancellationToken.None)
                .ContinueWith(_ => {
                    if (_overrideToZero.Snapshot == snapshot) // Only first task like this one will "win"
                        _overrideToZero.Value = false;
                }, TaskScheduler.Default);
        }

        var overrideToZero = await _overrideToZero.Use(cancellationToken);
        return overrideToZero ? 0 : unreadCount;
    }
}
