@using ActualChat.Notification
@using System.Timers
@using Timer = System.Timers.Timer
@inherits ComputedStateComponent<Notification.Model>
@implements IDisposable

@{
    var model = State.Value;
    var title = model.Title;
    var content = model.Content;
    var authorId = model.AuthorId;
}

<div class="notification shadow-md bg-01 text-primary-content"
     style="@GetStyle()">
    <div class="notification-body">
        <div class="flex-x flex-nowrap">
            <h2 class="notification-title">@title</h2>
            <div class="notification-filler"></div>
            <div class="notification-close">
                <ButtonSquare Class="rounded-full modal-close"
                              Click="OnClose"
                              IsDisabled="_isClosing || _isClosed"
                              tabindex="-1"
                              aria-label="close">
                    <svg xmlns="http://www.w3.org/2000/svg" class="fill-current w-3 h-3" viewBox="-1 -1 26 26">
                        <path d="M24 20.188l-8.315-8.209 8.2-8.282-3.697-3.697-8.212 8.318-8.31-8.203-3.666 3.666 8.321 8.24-8.206 8.313 3.666 3.666 8.237-8.318 8.285 8.203z"/>
                    </svg>
                </ButtonSquare>
            </div>
        </div>
        <p>@content</p>
    </div>
</div>

@code {
    private bool _isClosed;
    private bool _isClosing;
    private Timer? _closingTimer;

    [Inject] private Session Session { get; set; } = null!;
    [Inject] private INotifications Notifications { get; set; } = null!;
    [Inject] private UriMapper UriMapper { get; set; } = null!;

    [Parameter] public NotificationEntry NotificationEntry { get; set; } = null!;
    [Parameter] public EventCallback Closed { get; set; }
    [Parameter] public TimeSpan? AutoCloseDelay { get; set; }
    [Parameter] public TimeSpan? AnimationTime { get; set; }

    protected override ComputedState<Model>.Options GetStateOptions() => new () {
        InitialValue = Model.None,
    };

    protected override void OnParametersSet() {
        if (_closingTimer != null) {
            _closingTimer.Stop();
            _closingTimer.Elapsed -= OnCloseTimer;
            _closingTimer.Dispose();
        }

        if (!AutoCloseDelay.HasValue) {
            return;
        }

        _closingTimer = new Timer(AutoCloseDelay.Value.TotalMilliseconds);
        _closingTimer.Elapsed += OnCloseTimer;
        _closingTimer.AutoReset = false;
        _closingTimer.Start();
    }

    protected override async Task<Model> ComputeState(CancellationToken cancellationToken) {
        var notification = NotificationEntry;
        var chatId = notification.Message?.ChatId ?? notification.Chat?.ChatId;
        var entryId = notification.Message?.EntryId;
        var authorId = notification.Message?.AuthorId;
        var author = null as Author;
        if (chatId != null) {
            // TODO(AK): Unread message counter
        }
        return new() {
            Title = notification.Title,
            Content = notification.Content,
            NavigateToUrl = chatId.IsNullOrEmpty()
                ? null
                : UriMapper.GetChatUrl(chatId, entryId).ToString(),
            AuthorId = authorId,
        };
    }

    public void Dispose() {
        _closingTimer?.Dispose();
    }

    private async Task Close() {
        if (_isClosing)
            return;
        _isClosing = true;
        if (AnimationTime.HasValue) {
            StateHasChanged();
            await Task.Delay(AnimationTime.Value);
        }
        if (_isClosed)
            return;
        _isClosed = true;
        await Closed.InvokeAsync();
    }

    private async Task OnClose() {
        await Close();
    }

    private string GetStyle() {
        if (!AnimationTime.HasValue) {
            return "";
        }
        return _isClosing || _isClosed
            ? $"animation: fadeout {AnimationTime.Value.TotalMilliseconds}ms ease-out;"
            : $"animation: fadein {AnimationTime.Value.TotalMilliseconds}ms ease-in;";
    }

    private async void OnCloseTimer(object? sender, ElapsedEventArgs e) {
        await InvokeAsync(async () => {
            await Close();
        });
    }

    public sealed record Model {
        public static readonly Model None = new();

        public string Title { get; init; } = "";
        public string Content { get; init; } = "";
        public string? NavigateToUrl { get; init; }
        public string? AuthorId { get; init; }
    }
}
