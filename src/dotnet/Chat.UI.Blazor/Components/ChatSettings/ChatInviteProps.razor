@namespace ActualChat.Chat.UI.Blazor.Components
@using ActualChat.Invite
@inherits ComputedStateComponent<ChatInviteProps.Model>
@{
    var model = State.LatestNonErrorValue;
}

@if (!model.PermanentLink.IsNullOrEmpty()) {
    <div>
        <div class="block text-sm font-medium text-secondary">Permanent invite link</div>
        <div class="mt-2 flex-x">
            <input type="text" value="@model.PermanentLink" disabled
                   class="custom-input input-underlined w-full focus:outline-none focus:border-sky-500"/>
            <ButtonSquare OnClick="_ => CopyToClipboard(model.PermanentLink)" Class="transparent !mx-2">
                <i class="fa fa-files-o w-5 h-5" aria-hidden="true"></i>
            </ButtonSquare>
        </div>
    </div>
} else {
    <div>
        <div class="block text-sm font-medium text-secondary">Invites</div>
    </div>
}
@* <InviteList Invites="model.Invites" LinkFormat="join/{0}" /> *@
<div class="mt-3 flex-x justify-end">
   <Button OnClick="OnManageInvitesClicked">Manage Invites</Button>
</div>

@code {
    [Inject] private Clipboard Clipboard { get; init; } = null!;
    [Inject] private IInvites Invites { get; init; } = null!;
    [Inject] private NavigationManager Nav { get; init; } = null!;
    [Inject] private Session Session { get; init; } = null!;
    [CascadingParameter] public Chat Chat { get; set; } = null!;

    protected override ComputedState<Model>.Options GetStateOptions()
        => new() { InitialValue = Model.None };

    protected override async Task<Model> ComputeState(CancellationToken cancellationToken) {
        var invites = await Invites.GetChatInvites(Session, Chat.Id, cancellationToken);
        var threshold = DateTime.Now.AddDays(-3);
        invites = invites
            .Where(c => c.ExpiresOn > threshold)
            .OrderByDescending(c => c.ExpiresOn)
            .ToImmutableArray();
        var permanentLink = Chat.IsPublic ? Nav.BaseUri + "chat/" + Chat.Id.Value : "";
        return new() { Invites = invites, PermanentLink = permanentLink };
    }

    private void OnManageInvitesClicked()
        => Nav.NavigateTo($"/chat/{Chat.Id}/invite");

    private async Task CopyToClipboard(string link)
        => await Clipboard.WriteText(link);

    public record Model {
        public static Model None { get; } = new();

        public string? PermanentLink { get; set; }
        public IImmutableList<Invite> Invites { get; set; } = ImmutableArray.Create<Invite>();
    }
}
