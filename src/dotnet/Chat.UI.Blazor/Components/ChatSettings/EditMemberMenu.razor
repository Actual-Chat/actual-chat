@namespace ActualChat.Chat.UI.Blazor.Components
@inherits ComputedMenuBase<EditMemberMenu.Model?>

@{
    var m = State.Value;
    if (m == null)
        return;
    var statusText = m.IsOwner ? "Owner" : null;
}

<div class="edit-member-menu">

    <AuthorBadge
        AuthorSid="@AuthorId"
        ShowPresence="true"
        ShowStatusText="@(statusText != null)"
        StatusText="@statusText"/>

    @if (m.CanPromoteToOwner && !m.IsOwner) {
        <MenuEntry
            Icon="icon-star"
            Click="@(() => OnPromoteToOwnerClick(m))">
            <TextContent>
                <div class="flex-y">
                    <div>Promote to Owner</div>
                    <div class="ac-menu-hint">Can appoint new owners, change the community name and URL, delete community</div>
                </div>
            </TextContent>
        </MenuEntry>
    }

    @if (!m.IsOwn) {
        <MenuEntrySeparator/>
        <MenuEntry
            Class="warning-item"
            Icon="icon-minus-circle"
            Text="Remove from group"
            Click="@(() => OnRemoveFromGroupClick(m))">
        </MenuEntry>
    }

</div>

@code {
    [Inject] private Session Session { get; init; } = null!;
    [Inject] private IChats Chats { get; init; } = null!;
    [Inject] private IAuthors Author { get; init; } = null!;
    [Inject] private IRoles Roles { get; init; } = null!;
    [Inject] private UICommander Commander { get; init; } = null!;

    private ToastUI ToastUI => Services.GetRequiredService<ToastUI>();
    private ModalUI ModalUI => Services.GetRequiredService<ModalUI>();

    private AuthorId AuthorId { get; set; }

    protected override async Task OnParametersSetAsync() {
        if (Arguments is not [ var sAuthorId ])
            throw new ArgumentOutOfRangeException(nameof(Arguments));

        AuthorId = new AuthorId(sAuthorId);
        await base.OnParametersSetAsync();
    }

    protected override async Task<Model?> ComputeState(CancellationToken cancellationToken) {
        var chatId = AuthorId.ChatId;
        var author = await Author.Get(Session, chatId, AuthorId, cancellationToken);
        if (author == null)
            return null;
        var chat = await Chats.Get(Session, chatId, cancellationToken);
        var ownerIds = await Roles.ListOwnerIds(Session, chatId, cancellationToken);
        var ownAuthor = await Author.GetOwn(Session, chatId, cancellationToken);
        var isOwn = ownAuthor != null && ownAuthor.Id == author.Id;
        var isOwner = ownerIds.Contains(author.Id);
        var canPromoteToOwner = chat != null && chat.Rules.IsOwner();
        return new Model(author, isOwner, isOwn, canPromoteToOwner);
    }

    private async Task OnRemoveFromGroupClick(Model m) {
        var result = await Commander.Run(new Authors_Exclude(Session, AuthorId));
        if (result.HasError)
            return;
        var authorName = m.Author.Avatar.Name;
        ToastUI.Show($"{authorName} removed", "icon-minus-circle", Undo, "Undo", ToastDismissDelay.Long);

        void Undo() {
            var undoCommand = new Authors_Restore(Session, AuthorId);
            _ = Commander.Run(undoCommand);
        }
    }

    private async Task OnPromoteToOwnerClick(Model m) {
        await WhenClosed;

        var authorName = m.Author.Avatar.Name;
        _ = await ModalUI.Show(new ConfirmModal.Model(
            false,
            $"Are you sure you want to promote '{authorName}' to Owner? This action cannot be undone.",
            () => _ = OnPromoteToOwnerConfirmed(authorName)) {
                Title = "Promote to Owner"
            });
    }

    private async Task OnPromoteToOwnerConfirmed(string authorName) {
        var result = await Commander.Run(new Authors_PromoteToOwner(Session, AuthorId));
        if (result.HasError)
            return;

        ToastUI.Show($"{authorName} is promoted to Owner", "icon-star", ToastDismissDelay.Short);
    }

    // Nested types

    public sealed record Model(
        Author Author,
        bool IsOwner,
        bool IsOwn,
        bool CanPromoteToOwner);
}
