@namespace ActualChat.Chat.UI.Blazor.Components
@inherits ComputedMenuBase<EditMemberModel?>

@{
    var m = State.Value;
    if (m == null)
        return;
    var statusText = m.IsOwner ? "Owner" : null;
}

<div class="edit-member-menu">

    <AuthorBadge
        AuthorSid="@AuthorId"
        ShowPresence="true"
        ShowStatusText="@(statusText != null)"
        StatusText="@statusText"/>

    @if (m.CanPromoteToOwner) {
        <MenuEntry
            Icon="icon-star"
            Click="@(() => OnPromoteToOwnerClick(m.Author))">
            <TextContent>
                <div class="flex-y">
                    <div>Promote to Owner</div>
                    <div class="ac-menu-hint">Can appoint new owners, change the community name and URL, delete community</div>
                </div>
            </TextContent>
        </MenuEntry>
    }

    @if (!m.CanRemoveFromGroup) {
        <MenuEntrySeparator/>
        <MenuEntry
            Class="warning-item"
            Icon="icon-minus-circle"
            Text="Remove from group"
            Click="@(() => OnRemoveFromGroupClick(m.Author))">
        </MenuEntry>
    }

</div>

@code {
    [Inject] private ChatHub ChatHub { get; init; } = null!;

    private AuthorId AuthorId { get; set; }

    protected override async Task OnParametersSetAsync() {
        if (Arguments is not [ var sAuthorId ])
            throw new ArgumentOutOfRangeException(nameof(Arguments));

        AuthorId = new AuthorId(sAuthorId);
        await base.OnParametersSetAsync();
    }

    protected override Task<EditMemberModel?> ComputeState(CancellationToken cancellationToken)
        => EditMemberCommands.ComputeState(ChatHub, AuthorId, cancellationToken);

    private Task OnRemoveFromGroupClick(Author author)
        => EditMemberCommands.OnRemoveFromGroupClick(ChatHub, author);

    private async Task OnPromoteToOwnerClick(Author author) {
        await WhenClosed;
        await EditMemberCommands.OnPromoteToOwnerClick(ChatHub, author);
    }
}
