@namespace ActualChat.Chat.UI.Blazor.Components
@inherits ComputedMenuBase<EditMemberMenu.Model?>

@{
    var m = State.Value;
    if (m == null)
        return;
}

<h3>EditMembersMenu</h3>
<AuthorBadge AuthorSid="@AuthorId" />

@if (!m.IsOwn) {
    <MenuEntrySeparator/>
    <MenuEntry
        Class="warning-item"
        Icon="icon-minus-circle"
        Text="Remove from group"
        Click="@(() => OnRemoveFromGroupClick(m))">
    </MenuEntry>
}

@code {
    [Inject] private Session Session { get; init; } = null!;
    [Inject] private IAuthors Author { get; init; } = null!;
    [Inject] private UICommander Commander { get; init; } = null!;

    private ToastUI ToastUI => Services.GetRequiredService<ToastUI>();

    private AuthorId AuthorId { get; set; }

    protected override async Task OnParametersSetAsync() {
        if (Arguments is not [ var sAuthorId ])
            throw new ArgumentOutOfRangeException(nameof(Arguments));

        AuthorId = new AuthorId(sAuthorId);
        await base.OnParametersSetAsync();
    }

    protected override async Task<Model?> ComputeState(CancellationToken cancellationToken) {
        var author = await Author.Get(Session, AuthorId.ChatId, AuthorId, default);
        if (author == null)
            return null;
        var ownAuthor = await Author.GetOwn(Session, AuthorId.ChatId, cancellationToken);
        var isOwn = ownAuthor != null && ownAuthor.Id == author.Id;
        return new Model(author, isOwn);
    }

    private async Task OnRemoveFromGroupClick(Model m) {
        var result = await Commander.Run(new Authors_Exclude(Session, AuthorId));
        if (result.HasError)
            return;
        var authorName = m.Author.Avatar.Name;
        ToastUI.Show($"{authorName} removed", "icon-minus-circle", Undo, "Undo", autoDismissDelay:300);

        void Undo() {
            var undoCommand = new Authors_Restore(Session, AuthorId);
            _ = Commander.Run(undoCommand);
        }
    }

    public record Model(Author Author, bool IsOwn);
}
