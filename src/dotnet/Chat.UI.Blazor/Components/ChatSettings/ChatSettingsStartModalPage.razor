@namespace ActualChat.Chat.UI.Blazor.Components
@using System.ComponentModel.DataAnnotations
@using ActualChat.Media
@using ActualLab.Generators
@inherits ComputedStateComponent<ChatSettingsStartModalPage.ComputedModel>

@{
    var m = State.Value;
    if (ReferenceEquals(m, ComputedModel.Loading))
        return;

    if (m.Chat == null || !m.Chat.Rules.CanEditProperties()) {
        Context.Close();
        return;
    }
    if (_form == null)
        return;

    Context.ModalDataBag.Set(nameof(ComputedModel.MembersCount), m.MembersCount);
    Context.ModalDataBag.Set(nameof(ComputedModel.IsPublic), m.IsPublic);
    var isPlaceChat = m.IsPlace;
    var publicChatLabel = !isPlaceChat ? "Public" : "Place";
}

<Form Class="h-full" @ref="@_formRef" Model="@_form">
    @{
        _submitButtonInfo.CanExecute = _formRef?.IsValid ?? false;
    }
    <FormBlock Class="chat-settings-header">
        <DataAnnotationsValidator/>

        <div class="c-top">
            <ChatIcon
                Chat="@m.Chat"
                Size="SquareSize.SizeFull"
                IsSquare="@true"
                HideTitle="@true"
                IsBlurred="@true"
                ShowPresence="@false"/>
        </div>
        <div class="c-center">
            <PicUpload
                UploadUrl="@_form.ImageUploadUrl"
                Size="@SquareSize.Size16"
                Title="@_form.Title"
                Picture="@_form.Picture"
                AvatarKind="@_avatarKind"
                AvatarKey="@_avatarKey"
                Picked="@OnImagePicked"/>

            <div class="c-buttons">
                <PicUploadButton
                    UploadUrl="@_form.ImageUploadUrl"
                    Picked="@OnImagePicked"/>

                @if (m.EnableIncompleteUI) {
                    <ButtonRound Class="btn-sm" Click="@OnGenerateAvatarClick">
                        <i class="icon-image text-2xl"></i>
                    </ButtonRound>
                }
            </div>
        </div>
    </FormBlock>

    <FormBlock>
        <DataAnnotationsValidator/>

        <FormSection Class="field-chat-title" For="() => _form.Title" InputId="@_form.TitleId" IsLabelInsideInput="true" Label="Chat title">
            <TextBox
                @bind-Value="@_form.Title"
                Id="@_form.TitleId"
                Placeholder="Chat title*"
                ClearButton="true"/>
        </FormSection>
    </FormBlock>

    <div class="chat-settings-container">
        <TileItem Click="OnManageChatTypeClick" Class="chat-type-tile-item">
            <Icon>
                <i class="icon-key text-xl"></i>
            </Icon>
            <Content>
                Chat type
            </Content>
            <Right>
                @(m.IsPublic ? $"{publicChatLabel}" : "Private")
            </Right>
        </TileItem>

        @if (m.Chat.Rules.CanEditMembers()) {
            @if (!m.Chat.IsPublicPlaceChat()) {
                <TileItem Class="item-manage-members" Click="OnManageMembersClick">
                    <Icon>
                        <i class="icon-people"></i>
                    </Icon>
                    <Content>
                        @m.MembersCount Members
                    </Content>
                    <Right>
                        <i class="icon-chevron-right text-3xl"></i>
                    </Right>
                </TileItem>
            } else {
                <TileItem Class="item-manage-members">
                    <Icon>
                        <i class="icon-people"></i>
                    </Icon>
                    <Content>
                        @m.MembersCount Members
                    </Content>
                    <Caption>
                        Use place settings to edit members
                    </Caption>
                </TileItem>
            }

            @if (m.IsOwner && m.Chat != null && !_isPlaceWelcomeChat) {
                <TileItem Class="item-leave-group" Click="@(() => OnDeleteChatClick(m.Chat))">
                    <Icon><i class="icon-log-out"></i></Icon>
                    <Content>Leave chat & delete</Content>
                </TileItem>
            }
        }
    </div>
</Form>

@code {
    private static RandomStringGenerator IdGenerator { get; } = new(10, Alphabet.AlphaNumeric);
    private Form?_formRef;
    private FormModel? _form;
    private DialogButtonInfo _submitButtonInfo = null!;
    private AvatarKind _avatarKind;
    private string? _avatarKey;
    private PlaceId _placeId;
    private bool _isPlaceWelcomeChat;

    [Inject] private ChatUIHub Hub { get; init; } = null!;
    [Inject] private ComponentIdGenerator ComponentIdGenerator { get; init; } = null!;
    [Inject] private DiffEngine DiffEngine { get; init; } = null!;

    private Session Session => Hub.Session(); // Shortcut

    [CascadingParameter] public DiveInModalPageContext Context { get; set; } = null!;

    private ChatId ChatId { get; set; }

    protected override void OnInitialized() {
        ChatId = Context.GetTypedModel<ChatId>();
        Context.SetTitle("Chat settings");
        if (ChatId.IsPeerChat(out _)) {
            throw StandardError.NotSupported("Peer chat is not supported.");
        }
        _avatarKind = AvatarKind.Marble;
        _avatarKey = ChatId.Value;
        _submitButtonInfo = DialogButtonInfo.CreateSubmitButton("Save", OnSubmit);
        Context.RegisterButtons(DialogButtonInfo.CancelButton, _submitButtonInfo);
        base.OnInitialized();
    }

    protected override async Task OnInitializedAsync() {
        const string formBagKey = "form";
        _form = Context.PageDataBag.Get<FormModel>(formBagKey);
        if (_form != null)
            return;

        var chat = await Hub.Chats.Get(Session, ChatId, default).Require();
        _form = new FormModel(ComponentIdGenerator) {
            Title = chat.Title,
            Picture = chat.Picture?.ToPicture(),
            ImageUploadUrl = $"/api/chat-media/{chat.Id}/upload",
        };
        _placeId = chat.Id.PlaceChatId.PlaceId;
        if (!_placeId.IsNone)
            _isPlaceWelcomeChat = OrdinalEquals(Constants.Chat.SystemTags.Welcome, chat.SystemTag);
        Context.PageDataBag.Set(formBagKey, _form);
    }

    protected override ComputedState<ComputedModel>.Options GetStateOptions()
        => ComputedStateComponent.GetStateOptions(GetType(),
            static t => new ComputedState<ComputedModel>.Options() {
                InitialValue = ComputedModel.Loading,
                UpdateDelayer = FixedDelayer.NextTick,
                Category = ComputedStateComponent.GetStateCategory(t),
            });

    protected override async Task<ComputedModel> ComputeState(CancellationToken cancellationToken) {
        var chatId = ChatId;

        var chat = await Hub.Chats.Get(Session, chatId, cancellationToken).ConfigureAwait(false);
        if (chat == null || !chat.Rules.CanEditProperties())
            return new() { Chat = chat };

        var allAuthorIds = await Hub.Authors.ListAuthorIds(Session, chatId, cancellationToken);
        var isPublic = chat.IsPublic;
        _placeId = chat.Id.PlaceChatId.PlaceId;
        var isPlace = !_placeId.IsNone;
        var enableIncompleteUI = await Hub.Features().Get<Features_EnableIncompleteUI, bool>(cancellationToken);
        return new() {
            Chat = chat,
            IsOwner = chat.Rules.IsOwner(),
            MembersCount = allAuthorIds.Count,
            IsPublic = isPublic,
            IsPlace = isPlace,
            EnableIncompleteUI = enableIncompleteUI,
        };
    }

    private void OnImagePicked(MediaContent mediaContent) {
        _form!.Picture = new (mediaContent);
        StateHasChanged();
    }

    private void OnGenerateAvatarClick() {
        // TODO: To generate an avatar for chat we need the AvatarKey field for the chat avatar
        _avatarKey = DefaultUserPicture.GetAvatarKey(IdGenerator.Next());
        _form!.Picture = new Picture(null, null, _avatarKey);
        StateHasChanged();
    }

    private void OnManageChatTypeClick()
        => Context.StepIn(DiveInDialogPage.New<EditChatTypeModalPage>(ChatId));

    private void OnManageMembersClick()
        => Context.StepIn(DiveInDialogPage.New<EditChatMembersModalPage>(ChatId));

    private void OnDeleteChatClick(Chat chat)
        => Hub.ChatUI.DeleteChat(chat);

    private async Task OnSubmit() {
        if (_formRef == null)
            return;
        if (!_formRef.IsValid)
            return;
        await Save();
        Context.Close();
    }

    private async Task Save() {
        var chat = await Hub.Chats.Get(Session, ChatId, default).Require();
        var newChat = chat with {
            Title = _form!.Title,
            MediaId = _form.Picture?.MediaContent?.MediaId ?? MediaId.None,
        };
        var command = new Chats_Change(Session, chat.Id, chat.Version, new() {
            Update = DiffEngine.Diff<Chat, ChatDiff>(chat, newChat),
        });
        await Hub.UICommander().Run(command);
    }

    // Nested types

    public sealed class FormModel {
        [Required, MinLength(1)]
        public string Title { get; set; } = "";

        public Picture? Picture { get; set; }
        public string ImageUploadUrl { get; init; } = "";

        public string FormId { get; }
        public string TitleId { get; }

        public FormModel(ComponentIdGenerator componentIdGenerator) {
            FormId = componentIdGenerator.Next("new-chat-form");
            TitleId = $"{FormId}-title";
        }
    }

    public sealed record ComputedModel {
        public static readonly ComputedModel Loading = new();

        public Chat? Chat { get; init; }
        public bool IsOwner { get; init; }
        public int MembersCount { get; init; }
        public bool IsPublic { get; init; }
        public bool IsPlace { get; init; }
        public bool EnableIncompleteUI { get; init; }
    }
}
