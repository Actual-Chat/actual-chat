@namespace ActualChat.Chat.UI.Blazor.Components
@using System.ComponentModel.DataAnnotations
@using ActualChat.Invite
@using ActualChat.Media
@inherits ComputedStateComponent<ChatSettingsStartModalPage.ComputedModel>

@{
    var m = State.Value;
    if (ReferenceEquals(m, ComputedModel.Loading))
        return;

    if (m.Chat == null || !m.Chat.Rules.CanEditProperties()) {
        Context.Close();
        return;
    }
    if (_form == null)
        return;

    Context.ModalDataBag.Set(nameof(ComputedModel.MembersCount), m.MembersCount);
}

<Form Class="h-full" @ref="@_formRef" Model="@_form">
    @{
        _submitButtonInfo.CanExecute = _formRef?.IsValid ?? false;
    }
    <FormBlock Class="chat-settings-header">
        <DataAnnotationsValidator/>

        <div class="c-top">
            <ChatIcon
                Chat="@m.Chat"
                Size="SquareSize.SizeFull"
                IsSquare="@true"
                HideTitle="@true"
                IsBlurred="@true"
                ShowPresence="@false"/>
        </div>
        <div class="c-center">
            <PicUpload
                UploadUrl="@_form.ImageUploadUrl"
                Size="@SquareSize.Size16"
                Title="@_form.Title"
                Picture="@_form.Picture"
                AvatarKind="@_avatarKind"
                AvatarKey="@_avatarKey"
                Picked="@OnImagePicked"/>

            <div class="c-buttons">
                <PicUpload
                    UploadUrl="@_form.ImageUploadUrl"
                    Title="@_form.Title"
                    Picture="@_form.Picture"
                    AvatarKind="@_avatarKind"
                    AvatarKey="@_avatarKey"
                    IsButton="@true"
                    Picked="@OnImagePicked"/>
                <ButtonRound Class="btn-sm">
                    <i class="icon-image text-2xl"></i>
                </ButtonRound>
            </div>
        </div>
    </FormBlock>

    <FormBlock>
        <DataAnnotationsValidator/>

        <FormSection Class="field-chat-title" For="() => _form.Title" InputId="@_form.TitleId" IsLabelInsideInput="true" Label="Chat title">
            <TextBox
                @bind-Value="@_form.Title"
                Id="@_form.TitleId"
                Placeholder="Chat title*"
                ClearButton="true"/>
        </FormSection>
    </FormBlock>

    <div class="chat-settings-container">
    <TileItem Click="OnManageChatTypeClick" Class="chat-type-tile-item">
            <Icon>
                <i class="icon-key text-xl"></i>
            </Icon>
            <Content>
                Chat type
            </Content>
            <Right>
                @(m.IsPublic ? "Public" : "Private")
            </Right>
        </TileItem>

        @if (m.Chat.Rules.CanEditMembers()) {
            @if (!m.Chat.IsPublicPlaceChat()) {
                <TileItem Class="item-manage-members" Click="OnManageMembersClick">
                    <Icon>
                        <i class="icon-people"></i>
                    </Icon>
                    <Content>
                        @m.MembersCount Members
                    </Content>
                    <Right>
                        <i class="icon-chevron-right text-3xl"></i>
                    </Right>
                </TileItem>
            } else {
                <TileItem Class="item-manage-members">
                    <Icon>
                        <i class="icon-people"></i>
                    </Icon>
                    <Content>
                        @m.MembersCount Members
                    </Content>
                    <Caption>
                        Use place settings to edit members
                    </Caption>
                </TileItem>
            }

            @if (m.IsOwner && m.Chat != null && !_isPlaceWelcomeChat) {
                <TileItem Class="item-leave-group" Click="@(() => OnDeleteChatClick(m.Chat))">
                    <Icon><i class="icon-log-out"></i></Icon>
                    <Content>Leave chat & delete</Content>
                </TileItem>
            }
        }
    </div>
</Form>

@code {
    private const int MaxInvitesCount = 5;
    private Form?_formRef;
    private FormModel? _form;
    private Symbol _newInviteId = Symbol.Empty;
    private DialogButtonInfo _submitButtonInfo = null!;
    private AvatarKind _avatarKind;
    private string? _avatarKey;
    private bool _isAdmin;
    private PlaceId _placeId;
    private Place? _place;
    private bool _isPlaceWelcomeChat;

    [Inject] private ChatUIHub Hub { get; init; } = null!;
    [Inject] private ComponentIdGenerator ComponentIdGenerator { get; init; } = null!;
    [Inject] private DiffEngine DiffEngine { get; init; } = null!;

    private Session Session => Hub.Session(); // Shortcut

    [CascadingParameter] public DiveInModalPageContext Context { get; set; } = null!;

    private ChatId ChatId { get; set; }

    protected override void OnInitialized() {
        _isAdmin = Hub.AccountUI.OwnAccount.Value.IsAdmin;
        ChatId = Context.GetTypedModel<ChatId>();
        Context.SetTitle("Edit chat settings");
        if (ChatId.IsPeerChat(out _)) {
            _avatarKind = AvatarKind.Beam;
            _avatarKey = null;
        } else {
            _avatarKind = AvatarKind.Marble;
            _avatarKey = ChatId.Value;
        }
        _submitButtonInfo = DialogButtonInfo.CreateSubmitButton("Save", OnSubmit);
        Context.RegisterButtons(DialogButtonInfo.CancelButton, _submitButtonInfo);
        base.OnInitialized();
    }

    protected override async Task OnInitializedAsync() {
        const string formBagKey = "form";
        _form = Context.PageDataBag.Get<FormModel>(formBagKey);
        if (_form != null)
            return;

        var chat = await Hub.Chats.Get(Session, ChatId, default).Require();
        _form = new FormModel(ComponentIdGenerator) {
            Title = chat.Title,
            Picture = chat.Picture?.ToPicture(),
            IsPublic = chat.IsPublic,
            IsTemplate = chat.IsTemplate,
            AllowGuestAuthors = chat.AllowGuestAuthors,
            AllowAnonymousAuthors = chat.AllowAnonymousAuthors,
            ImageUploadUrl = $"/api/chat-media/{chat.Id}/upload",
        };
        _placeId = chat.Id.PlaceChatId.PlaceId;
        if (!_placeId.IsNone) {
            _isPlaceWelcomeChat = OrdinalEquals(Constants.Chat.SystemTags.Welcome, chat.SystemTag);
            _place = await Hub.Places.Get(Hub.Session(), _placeId, default).Require().ConfigureAwait(false);
            if (!_place.Rules.CanApplyPublicChatType())
                _form.IsPublic = false;
        }
        Context.PageDataBag.Set(formBagKey, _form);
    }

    protected override ComputedState<ComputedModel>.Options GetStateOptions()
        => new() {
            InitialValue = ComputedModel.Loading,
            UpdateDelayer = FixedDelayer.NextTick,
            Category = GetStateCategory(),
        };

    protected override async Task<ComputedModel> ComputeState(CancellationToken cancellationToken) {
        var chatId = ChatId;

        var chat = await Hub.Chats.Get(Session, chatId, cancellationToken).ConfigureAwait(false);
        if (chat == null || !chat.Rules.CanEditProperties())
            return new() { Chat = chat };

        var allAuthorIds = await Hub.Authors.ListAuthorIds(Session, chatId, cancellationToken).ConfigureAwait(false);
        var invites = await Hub.Invites.ListChatInvites(Session, chatId, cancellationToken).ConfigureAwait(false);
        var threshold = Hub.Clocks().SystemClock.Now - TimeSpan.FromDays(3);
        var activeInvites = invites
            .Where(c => c.ExpiresOn > threshold)
            .OrderByDescending(c => c.ExpiresOn)
            .ToList();
        var link = Links.Chat(chatId).ToDisplayUrl(Hub.UrlMapper());
        var allowEditIsTemplate = await Hub.Features().Get<Features_EnableTemplateChatUI, bool>(cancellationToken).ConfigureAwait(false);
        var isPublic = chat.IsPublic;
        return new() {
            Chat = chat,
            Link = link,
            Invites = activeInvites,
            AllowEditIsTemplate = allowEditIsTemplate,
            IsOwner = chat.Rules.IsOwner(),
            MembersCount = allAuthorIds.Count,
            IsPublic = isPublic,
        };
    }

    private void OnImagePicked(MediaContent mediaContent) {
        _form!.Picture = new (mediaContent);
        StateHasChanged();
    }

    private async Task OnNewInviteClick() {
        // TODO: make it configurable
        var invite = Invite.New(Constants.Invites.Defaults.ChatRemaining, new ChatInviteOption(ChatId));
        invite = await Hub.UICommander().Run(new Invites_Generate(Session, invite));
        _newInviteId = invite.Id;
    }

    private void OnManageChatTypeClick()
        => Context.StepIn(DiveInDialogPage.New<EditChatTypeModalPage>(ChatId));

    private void OnManageMembersClick()
        => Context.StepIn(DiveInDialogPage.New<EditChatMembersModalPage>(ChatId));

    private void OnDeleteChatClick(Chat chat)
        => Hub.ChatUI.DeleteChat(chat);

    private async Task OnSubmit() {
        if (_formRef == null)
            return;
        if (!_formRef.IsValid)
            return;
        await Save();
        Context.Close();
    }

    private async Task Save() {
        var chat = await Hub.Chats.Get(Session, ChatId, default).Require();
        var isPlaceChat = chat.Id.IsPlaceChat;
        var newChat = chat with {
            Title = _form!.Title,
            IsPublic = _form.IsPublic,
            IsTemplate = !isPlaceChat && _form.IsTemplate,
            AllowGuestAuthors = !isPlaceChat && _form.AllowGuestAuthors,
            AllowAnonymousAuthors = !isPlaceChat && _form.AllowAnonymousAuthors,
            MediaId = _form.Picture?.MediaContent?.MediaId ?? MediaId.None,
            };
        var command = new Chats_Change(Session, chat.Id, chat.Version, new() {
            Update = DiffEngine.Diff<Chat, ChatDiff>(chat, newChat),
        });
        await Hub.UICommander().Run(command);
    }

    public sealed class FormModel {
        [Required, MinLength(1)]
        public string Title { get; set; } = "";

        public string PublicUrl { get; set; } = "";
        public Picture? Picture { get; set; }
        public bool IsPublic { get; set; }
        public bool IsTemplate { get; set; }
        public bool AllowGuestAuthors { get; set; }
        public bool AllowAnonymousAuthors { get; set; }
        public string ImageUploadUrl { get; init; } = "";

        public string FormId { get; }
        public string TitleId { get; }
        public string PictureFormId { get; }
        public string PublicUrlFormId { get; }
        public string IsPublicFormId { get; }
        public string IsPublicTrueFormId { get; }
        public string IsPublicFalseFormId { get; }
        public string IsTemplateFormId { get; }
        public string AllowGuestAuthorsFormId { get; }
        public string AllowAnonymousAuthorsFormId { get; }

        public FormModel(ComponentIdGenerator componentIdGenerator) {
            FormId = componentIdGenerator.Next("new-chat-form");
            TitleId = $"{FormId}-title";
            PictureFormId = $"{FormId}-picture";
            PublicUrlFormId = $"{FormId}-public-url";
            IsPublicFormId = $"{FormId}-is-public";
            IsPublicTrueFormId = IsPublicFormId + "-true";
            IsPublicFalseFormId = IsPublicFormId + "-false";
            IsTemplateFormId = $"{FormId}-is-template";
            AllowGuestAuthorsFormId = $"{FormId}-allows-guests";
            AllowAnonymousAuthorsFormId = $"{FormId}-allows-anonymous";
        }
    }

    public sealed record ComputedModel {
        public static readonly ComputedModel Loading = new();

        public Chat? Chat { get; init; }
        public DisplayUrl? Link { get; init; }
        public List<Invite> Invites { get; init; } = [];
        public bool AllowEditIsTemplate { get; init; }
        public bool IsOwner { get; init; }
        public int MembersCount { get; init; }
        public bool IsPublic { get; init; }
    }
}
