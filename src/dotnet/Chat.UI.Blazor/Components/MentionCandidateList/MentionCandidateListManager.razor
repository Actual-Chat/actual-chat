@namespace ActualChat.Chat.UI.Blazor.Components

<CascadingValue TValue="MentionCandidateListManager" Value="@this" IsFixed="true">
    <div class="absolute left-0 right-0 px-1.5 z-50">
        <div class="relative w-full">
            <div class="absolute bottom-0 w-full text-03">
                <MentionCandidateListView Class="bg-01" @ref="ListView" />
            </div>
        </div>
    </div>
    @ChildContent
</CascadingValue>


@code {
    private string? _lastSearch = null;

    [Inject] protected IStateFactory StateFactory { get; init; } = null!;

    [Parameter] public IMentionCandidateProvider MentionCandidateProvider { get; set; } = TestMentionCandidateProvider.Instance;
    [Parameter] public int Limit { get; set; } = 10;
    [Parameter] public RenderFragment? ChildContent { get; set; }

    public MentionCandidateListView? ListView { get; private set; } = null!;
    public IMutableState<MentionCandidate[]?> Candidates { get; private set; } = null!;
    public event Action<MentionCandidate>? Selected;

    protected override void OnInitialized()
        => Candidates = StateFactory.NewMutable<MentionCandidate[]?>();

    protected override void OnParametersSet()
        => Candidates.Value = null;

    public void TriggerSelected(MentionCandidate mentionCandidate)
        => Selected?.Invoke(mentionCandidate);

    public async Task Show(string search)
    {
        var candidates = Candidates.Value;
        if (candidates != null && OrdinalEquals(_lastSearch, search))
            return;

        Candidates.Value = await MentionCandidateProvider
            .GetMentionCandidates(search, Limit, default)
            .ConfigureAwait(true);
        _lastSearch = search;
    }

    public Task Hide() {
        Candidates.Value = null;
        return Task.CompletedTask;
    }
}
