@namespace ActualChat.Chat.UI.Blazor.Components
@inherits ComputedStateComponent<MentionCandidate[]?>
@{
    var candidates = State.ValueOrDefault;
}

@if (candidates is { Length: > 0 }) {
    var selection = Selection;
    if (selection == null || Array.IndexOf(candidates, selection) < 0)
        _selection = selection = candidates[0];
    <div class="@Class mb-1 p-1 border border-mention rounded-md overflow-y-auto max-h-96 w-full">
        @foreach (var c in candidates) {
            var cls = c == selection ? "bg-04" : "";
            <div class="@cls px-1 rounded hover:cursor-pointer"
                 @onmouseover="_ => Selection = c"
                 @onclick="@(_ => Manager.TriggerSelected(c))">
                @c.Name
            </div>
        }
    </div>
}

@code {
    private MentionCandidate? _selection;

    [CascadingParameter] public MentionCandidateListManager Manager { get; set; } = null!;
    [Parameter] public string Class { get; set; } = "";

    public MentionCandidate[] Candidates
        => State.ValueOrDefault ?? Array.Empty<MentionCandidate>();

    public MentionCandidate? Selection {
        get => _selection;
        set {
            _selection = value;
            StateHasChanged();
        }
    }

    protected override ComputedState<MentionCandidate[]?>.Options GetStateOptions() {
        return new() { UpdateDelayer = UpdateDelayer.MinDelay };
    }

    protected override Task<MentionCandidate[]?> ComputeState(CancellationToken cancellationToken)
        => Manager.Candidates.Use(cancellationToken).AsTask();

    public void MoveSelectionUp() {
        var candidates = Candidates;
        Selection = candidates.GetValueOrDefault(Array.IndexOf(candidates, Selection) - 1);
    }

    public void MoveSelectionDown() {
        var candidates = Candidates;
        Selection = candidates.GetValueOrDefault(Array.IndexOf(candidates, Selection) + 1);
    }
}
