@namespace ActualChat.Chat.UI.Blazor.Components
@inherits ComputedStateComponent<MentionCandidate[]>
@{
    var candidates = Candidates;
    if (candidates.Length < 1)
        return;
    var selection = SelectedCandidate;
}

<div class="@Class mb-1 p-1 border border-mention rounded-md overflow-y-auto max-h-96 w-full">
    @foreach (var c in candidates) {
        var cls = c == selection ? "bg-04" : "";
        <div class="@cls px-1 rounded hover:cursor-pointer"
             @onmouseover="_ => SelectedCandidate = c"
             @onclick="@(_ => Manager.TriggerSelected(c))">
            @c.Name
        </div>
    }
</div>

@code {
    private MentionCandidate? _selectedCandidate;

    [CascadingParameter] public MentionCandidateListManager Manager { get; set; } = null!;
    [Parameter] public string Class { get; set; } = "";

    public MentionCandidate[] Candidates
        => State.LatestNonErrorValue;

    public MentionCandidate? SelectedCandidate {
        get => _selectedCandidate;
        set {
            if (_selectedCandidate == value)
                return;
            _selectedCandidate = value;
            FixSelectedCandidate(Candidates);
            StateHasChanged();
        }
    }

    protected override ComputedState<MentionCandidate[]>.Options GetStateOptions()
        => new() {
            InitialValue = Array.Empty<MentionCandidate>(),
            UpdateDelayer = UpdateDelayer.MinDelay,
        };

    protected override async Task<MentionCandidate[]> ComputeState(CancellationToken cancellationToken) {
        var candidates = await Manager.Candidates.Use(cancellationToken);
        FixSelectedCandidate(candidates);
        return candidates;
    }

    private void FixSelectedCandidate(MentionCandidate[] candidates) {
        if (candidates.Length == 0)
            _selectedCandidate = null;
        else if (_selectedCandidate == null || Array.IndexOf(candidates, _selectedCandidate) < 0)
            _selectedCandidate = candidates[0];
    }

    public void MoveSelectionUp() {
        var candidates = Candidates;
        SelectedCandidate = candidates.GetValueOrDefault(Array.IndexOf(candidates, SelectedCandidate) - 1);
    }

    public void MoveSelectionDown() {
        var candidates = Candidates;
        SelectedCandidate = candidates.GetValueOrDefault(Array.IndexOf(candidates, SelectedCandidate) + 1);
    }
}
