@using ActualChat.Media
@inherits FusionComponentBase
@{
    var chat = Chat;
}

@switch (chat.Kind) {
case ChatKind.Group or ChatKind.Place:
    <Pic
        Title="@chat.Title"
        Picture="@chat.Picture.ToPicture()"
        Size="@Size"
        IsSquare="@IsSquare"
        HideTitle="@HideTitle"
        IsBlurred="@IsBlurred"
        AvatarKind="@AvatarKind.Marble"
        AvatarKey="@chat.Id.Value"/>
    break;
case ChatKind.Peer when !_peerChatUserId.IsNone:
    <AccountCircle
        ShowPresence="@true"
        UserSid="@_peerChatUserId"
        Size="@Size"
        IsBlurred="@IsBlurred"/>
    break;
default:
    <AvatarCircle
        Avatar="@Avatar.None"
        Size="@Size"
        IsBlurred="@IsBlurred" />
    break;
}

@code {
    private UserId _peerChatUserId;

    [Inject] private ChatUIHub Hub { get; init; } = null!;
    private Session Session => Hub.Session();
    private AccountUI AccountUI => Hub.AccountUI;

    [Parameter, EditorRequired] public Chat Chat { get; set; } = null!;
    [Parameter] public bool ShowPresence { get; set; }
    [Parameter] public SquareSize Size { get; set; } = SquareSize.Size10;
    [Parameter] public bool IsSquare { get; set; }
    [Parameter] public bool HideTitle { get; set; }
    [Parameter] public bool IsBlurred { get; set; }

    protected override void OnParametersSet()
        => _peerChatUserId = GetPeerChatUserId();

    private UserId GetPeerChatUserId() {
        if (!Chat.Id.IsPeerChat(out var peerChatId))
            return default;

        var account = AccountUI.OwnAccount.Value;
        return peerChatId.UserIds.OtherThanOrDefault(account.Id);
    }
}
