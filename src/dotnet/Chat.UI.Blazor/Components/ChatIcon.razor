@{
    var chat = Chat;
}

@switch (chat.Kind) {
case ChatKind.Group:
    <Pic Title="@chat.Title" ContentId="@chat.Picture" Size="@Size"/>
    break;
case ChatKind.Peer when !_peerChatUserId.IsNone:
    <AccountCircle ShowPresence="true" UserSid="@_peerChatUserId" Size="@Size"/>
    break;
default:
    <AvatarCircle Avatar="@Avatar.None" Size="@Size" />
    break;
}

@code {
    private UserId _peerChatUserId;

    [Inject] private IAccounts Accounts { get; init; } = null!;
    [Inject] private Session Session { get; init; } = null!;

    [Parameter, EditorRequired] public Chat Chat { get; set; } = null!;
    [Parameter] public bool ShowPresence { get; set; }
    [Parameter] public SquareSize Size { get; set; } = SquareSize.Size10;

    protected override async Task OnParametersSetAsync() {
        _peerChatUserId = await GetPeerChatUserId();
    }

    private async Task<UserId> GetPeerChatUserId() {
        if (!Chat.Id.IsPeerChat(out var peerChatId))
            return default;

        var account = await Accounts.GetOwn(Session, CancellationToken.None);
        return peerChatId.UserIds.OtherThanOrDefault(account.Id);
    }
}
