@switch (Chat.Kind) {
    case ChatKind.Group:
        <Pic Title="@Chat.Title" ContentId="@Chat.Picture" Size="@Size"/>
        break;
    case ChatKind.Peer:
        <AccountCircle ShowPresence="true" UserId="@_peerChatTargetUserId" Size="@Size"/>
        break;
    default:
        <AvatarCircle Avatar="@Avatar.None" Size="@Size" />
        break;
}

@code {
    private Symbol _peerChatTargetUserId;

    [Inject] private IAccounts Accounts { get; init; } = null!;
    [Inject] private Session Session { get; init; } = null!;

    [Parameter, EditorRequired, ParameterComparer(typeof(ByReferenceParameterComparer))]
    public Chat Chat { get; set; } = null!;
    [Parameter] public bool ShowPresence { get; set; }
    [Parameter] public SquareSize Size { get; set; } = SquareSize.Size10;

    protected override async Task OnParametersSetAsync() {
        _peerChatTargetUserId = await GetPeerChatTargetUserId();
    }

    private async Task<Symbol> GetPeerChatTargetUserId() {
        if (Chat.Kind != ChatKind.Peer)
            return Symbol.Empty;

        var account = await Accounts.GetOwn(Session, CancellationToken.None);
        if (account is null)
            return Symbol.Empty;

        return new ChatId(Chat.Id).GetPeerChatTargetUserId(account.Id);
    }
}
