@inherits ComputedStateComponent<ActiveChatsNavbarWidget.Model>
@{
    var m = State.LatestNonErrorValue;
    var title = "Active chats";
    var titleClass = "text-sm font-medium px-2 pb-2";
    if (m.IsCollapsed) {
        title += " are hidden on search";
        titleClass = titleClass.Replace("pb-2", "");
    }
}

@if (m.Chats.Count > 0) {
    <div class="active-chats">
        <div class="@titleClass">@title</div>

        @if (!m.IsCollapsed) {
            <ChatList Kind="ChatListKind.Listening" Chats="@m.Chats"/>
        }
    </div>
}

@code {
    [Inject] private Session Session { get; init; } = null!;
    [Inject] private IAccounts Accounts { get; init; } = null!;
    [Inject] private IChats Chats { get; init; } = null!;
    [Inject] private SearchUI SearchUI { get; init; } = null!;
    [Inject] private ChatUI ChatUI { get; init; } = null!;

    protected override ComputedState<Model>.Options GetStateOptions()
        => new() {
            InitialValue = Model.None,
            UpdateDelayer = FixedDelayer.Instant,
        };

    protected override async Task<Model> ComputeState(CancellationToken cancellationToken) {
        var activeChats = await ChatUI.ActiveContacts.Use(cancellationToken);
        var chats = (await activeChats
            .OrderByDescending(c => c.Recency)
            .Select(c => Chats.Get(Session, c.ChatId, cancellationToken))
            .Collect()
            ).SkipNullItems()
            .ToList();

        var searchText = await SearchUI.Text.Use(cancellationToken);
        return new Model {
            Chats = chats,
            IsCollapsed = searchText.NullIfWhiteSpace() != null,
        };
    }

    public sealed record Model {
        public static Model None { get; } = new();

        public List<Chat> Chats { get; init; } = new ();
        public bool IsCollapsed { get; init; } = false;
    }
}
