@inherits ComputedStateComponent<RecordingSubFooter.Model>
@namespace ActualChat.Chat.UI.Blazor.Components
@using ActualChat.Chat.UI.Blazor.Services
@using ActualChat.MediaPlayback
@{
    var m = State.Value;
    if (m == Model.None)
        return;
}

<div class="recording-sub-footer">
    <div class="c-content">
        @if (m.RecordingChat != null) {
            <div>
                <i class="icon-mic text-2xl"></i>
            </div>
            <div class="c-text shrink-0">
                Recording in
            </div>
            <a class="inline-block c-text truncate" href="@m.RecordingChatUrl">@(m.RecordingChat.Title)</a>
            <div class="c-text">chat!</div>
        }

        @if (m.StopRecordingAt != null) {
            <div class="c-text">Recording is stopping in </div>
            <Countdown StopAt="@m.StopRecordingAt.Value" Class="c-text"/>
        }
    </div>
</div>

@code {
    [Inject] private Session Session { get; init; } = null!;
    [Inject] private IAccounts Accounts { get; init; } = null!;
    [Inject] private IChats Chats { get; init; } = null!;
    [Inject] private ChatUI ChatUI { get; init; } = null!;
    [Inject] private AudioUI AudioUI { get; init; } = null!;

    protected override ComputedState<Model>.Options GetStateOptions()
        => new() {
            InitialValue = Model.None,
            UpdateDelayer = FixedDelayer.Instant,
            Category = GetStateCategory(),
        };

    protected override async Task<Model> ComputeState(CancellationToken cancellationToken) {
        var recordingChat = await GetRecordingChat(cancellationToken);
        var stopRecordingAt = await AudioUI.StopRecordingAt.Use(cancellationToken);
        if (recordingChat == null && stopRecordingAt == null)
            return Model.None;

        return new Model {
            RecordingChat = recordingChat,
            RecordingChatUrl = recordingChat != null ? Links.Chat(recordingChat.Id) : "",
            StopRecordingAt = stopRecordingAt,
        };
    }

    private async Task<Chat?> GetRecordingChat(CancellationToken cancellationToken)
    {
        var recordingChatId = await AudioUI.GetRecordingChatId();
        if (recordingChatId.IsNone)
            return null;

        var selectedChatId = await ChatUI.SelectedChatId.Use(cancellationToken);
        if (selectedChatId == recordingChatId)
            return null;

        return await Chats.Get(Session, recordingChatId, cancellationToken).ConfigureAwait(false);
    }

    private void OnStop()
        => _ = AudioUI.SetRecordingChatId(default);

    public sealed record Model {
        public static Model None { get; } = new();

        public Chat? RecordingChat { get; init; }
        public string? RecordingChatUrl { get; init; }
        public Moment? StopRecordingAt { get; init; }
    }
}
