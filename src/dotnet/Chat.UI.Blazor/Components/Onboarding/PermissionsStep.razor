@namespace ActualChat.Chat.UI.Blazor.Components
@using ActualChat.Audio.UI.Blazor.Components
@using ActualChat.Contacts.UI.Blazor.Services
@using ActualChat.Hosting
@using ActualChat.Notification.UI.Blazor
@using ActualChat.Permissions
@inherits Step;

@if (CurrentStep != this) {
    return;
}

<div class="permissions-step">
    <p class="text-title-1 text-center">Required permissions</p>
    <div class="step-tiles">
        <div class="step-tile"
             @onclick="OnMicrophonePermissionClick">
            <img draggable="false"
                 class="step-tile-icon"
                 alt="Mic"
                 src="/dist/images/onboarding/mic.svg"/>
            <div class="step-tile-body">
                <div class="step-tile-title">
                    Microphone
                </div>
                <div class="step-tile-subtitle">
                    Live-transcribed voice messaging is where Actual Chat shines,
                    but this feature won't work without microphone access.
                </div>
            </div>
            <Checkbox
                IsChecked="@_model.RequestMicrophonePermission"
                Class="!flex-none"
                Change="OnMicrophonePermissionClick"/>
        </div>
        @if (IsMobile) {
            <div class="step-tile"
                 @onclick="OnNotificationsPermissionClick">
                <img draggable="false"
                     class="step-tile-icon"
                     alt="Bell"
                     src="/dist/images/onboarding/bell.svg"/>
                <div class="step-tile-body">
                    <div class="step-tile-title">
                        Notifications
                    </div>
                    <div class="step-tile-subtitle">
                        We send notifications related to the chats you've joined,
                        and you can mute these notifications on a per-chat basis.
                    </div>
                </div>
                <Checkbox
                    IsChecked="@_model.RequestNotificationsPermission"
                    Class="!flex-none"
                    Change="OnNotificationsPermissionClick"/>
            </div>
            <div class="step-tile"
                 @onclick="OnContactsPermissionClick">
                <img draggable="false"
                     class="step-tile-icon"
                     alt="Contacts"
                     src="/dist/images/onboarding/contacts.svg"/>
                <div class="step-tile-body">
                    <div class="step-tile-title">
                        Contacts
                    </div>
                    <div class="step-tile-subtitle">
                        Actual Chat can import your contacts to help you find your friends.
                        We store only the hashes of phone numbers and emails - sufficient for matching,
                        but not for restoring your actual contacts.
                    </div>
                </div>
                <Checkbox
                    IsChecked="@_model.RequestContactsPermission"
                    Class="!flex-none"
                    Change="OnContactsPermissionClick"/>
            </div>
        }
    </div>
</div>

@code {
    private readonly Model _model = new();
    private ElementReference _notificationPermissionHandlerRef;

    [Inject] private Session Session { get; init; } = null!;
    [Inject] private IAccounts Accounts { get; init; } = null!;
    [Inject] private UICommander UICommander { get; init; } = null!;
    [Inject] private OnboardingUI OnboardingUI { get; init; } = null!;
    [Inject] private AudioRecorder AudioRecorder { get; init; } = null!;
    [Inject] private NotificationUI NotificationUI { get; init; } = null!;
    [Inject] private INotificationsPermission NotificationsPermission { get; init; } = null!;
    [Inject] private ContactsPermissionHandler ContactsPermission { get; init; } = null!;
    [Inject] private HostInfo HostInfo { get; init; } = null!;

    [Parameter, EditorRequired] public Mutable<ElementReference> NextButtonRef { get; init; } = null!;

    public override bool IsCompleted => OnboardingUI.LocalSettings.Value.IsPermissionsStepCompleted;

    private bool IsMobile => HostInfo.ClientKind.IsMobile();

    protected override async Task OnInitializedAsync() {
        if (!IsMobile) {
            // NOTE(AY): Requesting mic & notifications in the same event handler doesn't work on web.
            // We should show an extra modal explaining that notification permission request
            // may not appear, so the user has to click on the "Notifications blocked" item
            // in the browser bar to enable them.
            // I disabled this logic for web browser, coz it doesn't work anyway,
            // and we show NotificationsPermissionBanner which allows to enable it later -
            // which, by the way, should use the same popup.
            _model.RequestNotificationsPermission = false;
        }
        await AudioRecorder.MicrophonePermission.Check(CancellationToken.None);
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
        => UpdateNotificationPermissionHandler();

    protected override void MarkCompleted()
        => OnboardingUI.UpdateLocalSettings(OnboardingUI.LocalSettings.Value with { IsPermissionsStepCompleted = true });

    protected override Task<bool> Validate()
        => Task.FromResult(true);

    protected override async Task<bool> Save() {
        if (_model.RequestMicrophonePermission)
            await AudioRecorder.MicrophonePermission.CheckOrRequest();
        if (_model.RequestNotificationsPermission)
            await NotificationsPermission.RequestNotificationPermission(default);
        if (IsMobile && _model.RequestContactsPermission)
            await RequestContactsPermissions();

        return true;
    }

    private Task RequestContactsPermissions()
        => ContactsPermission.CheckOrRequest(true).AsTask();

    private void OnMicrophonePermissionClick()
        => _model.RequestMicrophonePermission = !_model.RequestMicrophonePermission;

    private void OnContactsPermissionClick()
        => _model.RequestContactsPermission = !_model.RequestContactsPermission;

    private Task OnNotificationsPermissionClick() {
        _model.RequestNotificationsPermission = !_model.RequestNotificationsPermission;
        return UpdateNotificationPermissionHandler();
    }

    private async Task UpdateNotificationPermissionHandler() {
        var mustRegisterHandler = CurrentStep == this && _model.RequestNotificationsPermission;
        var nextButtonRef = NextButtonRef.Value;
        var isRegistered = nextButtonRef.Id == _notificationPermissionHandlerRef.Id
            && ReferenceEquals(nextButtonRef.Context, _notificationPermissionHandlerRef.Context);
        if (isRegistered == mustRegisterHandler)
            return;

        if (mustRegisterHandler) {
            await NotificationUI.RegisterRequestNotificationHandler(nextButtonRef);
            _notificationPermissionHandlerRef = nextButtonRef;
        }
        else {
            await NotificationUI.UnregisterRequestNotificationHandler(nextButtonRef);
            _notificationPermissionHandlerRef = default;
        }
    }

    public class Model {
        public bool RequestMicrophonePermission { get; set; } = true;
        public bool RequestNotificationsPermission { get; set; } = true;
        public bool RequestContactsPermission { get; set; } = true;
    }
}
