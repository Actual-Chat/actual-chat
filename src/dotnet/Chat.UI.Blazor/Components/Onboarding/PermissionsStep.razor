@namespace ActualChat.Chat.UI.Blazor.Components
@using ActualChat.Audio.UI.Blazor.Components
@using ActualChat.Contacts.UI.Blazor.Services
@using ActualChat.Hosting
@using ActualChat.Notification.UI.Blazor
@using ActualChat.Permissions
@inherits Step;
@{
    var m = _model;
    if (CurrentStep != this || m == null)
        return;
}

<div class="permissions-step">
    <p class="text-title-1 text-center">Required permissions</p>
    <div class="step-tiles">
        @if (m.SkipEverything) {
            <div class="step-tile">
                <div class="step-tile-body">
                    <div class="step-tile-subtitle">
                        All necessary permissions are already granted.
                    </div>
                </div>
            </div>
        }
        @if (!m.SkipMicrophonePermission) {
            <div class="step-tile"
                 @onclick="OnMicrophonePermissionClick">
                <img draggable="false"
                     class="step-tile-icon"
                     alt="Mic"
                     src="/dist/images/onboarding/mic.svg"/>
                <div class="step-tile-body">
                    <div class="step-tile-title">
                        Microphone
                    </div>
                    <div class="step-tile-subtitle">
                        Live-transcribed voice messaging is where Actual Chat shines,
                        but this feature won't work without microphone access.
                    </div>
                </div>
                <Checkbox
                    IsChecked="@m.RequestMicrophonePermission"
                    Class="!flex-none"
                    Change="OnMicrophonePermissionClick"/>
            </div>
        }
        @if (!m.SkipNotificationsPermission) {
            <div class="step-tile"
                 @onclick="OnNotificationsPermissionClick">
                <img draggable="false"
                     class="step-tile-icon"
                     alt="Bell"
                     src="/dist/images/onboarding/bell.svg"/>
                <div class="step-tile-body">
                    <div class="step-tile-title">
                        Notifications
                    </div>
                    <div class="step-tile-subtitle">
                        We send notifications related to the chats you've joined,
                        and you can mute these notifications on a per-chat basis.
                    </div>
                </div>
                <Checkbox
                    IsChecked="@m.RequestNotificationsPermission"
                    Class="!flex-none"
                    Change="OnNotificationsPermissionClick"/>
            </div>
        }
        @if (!m.SkipContactsPermission) {
            <div class="step-tile"
                 @onclick="OnContactsPermissionClick">
                <img draggable="false"
                     class="step-tile-icon"
                     alt="Contacts"
                     src="/dist/images/onboarding/contacts.svg"/>
                <div class="step-tile-body">
                    <div class="step-tile-title">
                        Contacts
                    </div>
                    <div class="step-tile-subtitle">
                        Actual Chat can import your contacts to help you find your friends.
                        We store only the hashes of phone numbers and emails - sufficient for matching,
                        but not for restoring your actual contacts.
                    </div>
                </div>
                <Checkbox
                    IsChecked="@m.RequestContactsPermission"
                    Class="!flex-none"
                    Change="OnContactsPermissionClick"/>
            </div>
        }
    </div>
</div>

@code {
    private PermissionStepModel? _model;
    private ElementReference _notificationPermissionHandlerRef;

    [Inject] private IServiceProvider Services { get; init; } = null!;
    [Inject] private OnboardingUI OnboardingUI { get; init; } = null!;
    [Inject] private NotificationUI NotificationUI { get; init; } = null!;

    [Parameter, EditorRequired] public Mutable<ElementReference> NextButtonRef { get; init; } = null!;

    public override bool IsCompleted => OnboardingUI.LocalSettings.Value.IsPermissionsStepCompleted;

    protected override async Task OnInitializedAsync()
        => _model = await PermissionStepModel.New(Services);

    protected override async Task OnAfterRenderAsync(bool firstRender)
        => await UpdateNotificationPermissionHandler();

    protected override Task<bool> Validate()
        => Task.FromResult(_model != null);

    protected override void MarkCompleted()
        => _model?.MarkCompleted();

    protected override async Task<bool> Save() {
        if (_model is not { } m)
            return false;

        if (m.RequestMicrophonePermission)
            await m.MicrophonePermission.CheckOrRequest();
        if (m.RequestNotificationsPermission)
            await m.NotificationsPermission.RequestNotificationPermission(default);
        if (m.RequestContactsPermission)
            await m.ContactsPermission.CheckOrRequest();
        return true;
    }

    private void OnMicrophonePermissionClick()
        => _model!.RequestMicrophonePermission = !_model.RequestMicrophonePermission;

    private void OnContactsPermissionClick()
        => _model!.RequestContactsPermission = !_model.RequestContactsPermission;

    private Task OnNotificationsPermissionClick() {
        _model!.RequestNotificationsPermission = !_model.RequestNotificationsPermission;
        return UpdateNotificationPermissionHandler();
    }

    private async Task UpdateNotificationPermissionHandler() {
        if (_model is not { } m)
            return;

        var mustRegisterHandler = CurrentStep == this && m.RequestNotificationsPermission;
        var nextButtonRef = NextButtonRef.Value;
        var isRegistered = nextButtonRef.Id == _notificationPermissionHandlerRef.Id
            && ReferenceEquals(nextButtonRef.Context, _notificationPermissionHandlerRef.Context);
        if (isRegistered == mustRegisterHandler)
            return;

        if (mustRegisterHandler) {
            await NotificationUI.RegisterRequestNotificationHandler(nextButtonRef);
            _notificationPermissionHandlerRef = nextButtonRef;
        }
        else {
            await NotificationUI.UnregisterRequestNotificationHandler(nextButtonRef);
            _notificationPermissionHandlerRef = default;
        }
    }

}
