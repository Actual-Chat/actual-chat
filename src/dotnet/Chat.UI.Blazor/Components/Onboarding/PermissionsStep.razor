@namespace ActualChat.Chat.UI.Blazor.Components
@using ActualChat.Audio.UI.Blazor.Components
@using ActualChat.Contacts.UI.Blazor.Services
@using ActualChat.Hosting
@using ActualChat.Notification.UI.Blazor
@using ActualChat.Permissions
@inherits Step;

@if (CurrentStep != this) {
    return;
}

<div class="permissions-step">
    <p class="text-title-1 text-center">Required permissions</p>
    <div class="step-tiles">
        <div class="step-tile"
             @onclick="OnMicrophonePermissionClick">
            <img draggable="false"
                 class="step-tile-icon"
                 alt="Mic"
                 src="/dist/images/onboarding/mic.svg"/>
            <div class="step-tile-body">
                <div class="step-tile-title">
                    Microphone
                </div>
                <div class="step-tile-subtitle">
                    Live-transcribed voice messaging is where Actual Chat shines,
                    but this feature won't work without microphone access.
                </div>
            </div>
            <Checkbox
                IsChecked="@_stepModel.RequestMicrophonePermissions"
                Class="!flex-none"
                Change="OnMicrophonePermissionClick"/>
        </div>
        <div class="step-tile"
             @onclick="OnNotificationsPermissionClick">
            <img draggable="false"
                 class="step-tile-icon"
                 alt="Bell"
                 src="/dist/images/onboarding/bell.svg"/>
            <div class="step-tile-body">
                <div class="step-tile-title">
                    Notifications
                </div>
                <div class="step-tile-subtitle">
                    We send notifications related to the chats you've joined,
                    and you can mute these notifications on a per-chat basis.
                </div>
            </div>
            <Checkbox
                IsChecked="@_stepModel.RequestNotificationsPermissions"
                Class="!flex-none"
                Change="OnNotificationsPermissionClick"/>
        </div>
        @if (IsMobile) {
            <div class="step-tile"
                 @onclick="OnContactsPermissionClick">
                <img draggable="false"
                     class="step-tile-icon"
                     alt="Contacts"
                     src="/dist/images/onboarding/contacts.svg"/>
                <div class="step-tile-body">
                    <div class="step-tile-title">
                        Contacts
                    </div>
                    <div class="step-tile-subtitle">
                        Actual Chat can import your contacts to help you find your friends.
                        We store only the hashes of phone numbers and emails - sufficient for matching,
                        but not for restoring your actual contacts.
                    </div>
                </div>
                <Checkbox
                    IsChecked="@_stepModel.RequestContactsPermissions"
                    Class="!flex-none"
                    Change="OnContactsPermissionClick"/>
            </div>
        }
    </div>
</div>

@code {
    private readonly SetChatsStepModel _stepModel = new();
    private bool _isHandlerRegistered = false;

    [Inject] private Session Session { get; init; } = null!;
    [Inject] private IAccounts Accounts { get; init; } = null!;
    [Inject] private UICommander UICommander { get; init; } = null!;
    [Inject] private OnboardingUI OnboardingUI { get; init; } = null!;
    [Inject] private AudioRecorder AudioRecorder { get; init; } = null!;
    [Inject] private NotificationUI NotificationUI { get; init; } = null!;
    [Inject] private INotificationPermissions NotificationPermissions { get; init; } = null!;
    [Inject] private ContactsPermissionHandler ContactPermissions { get; init; } = null!;
    [Inject] private HostInfo HostInfo { get; init; } = null!;

    [Parameter, EditorRequired] public Mutable<ElementReference> NextButtonRef { get; init; } = null!;

    public override bool IsCompleted => OnboardingUI.Settings.Value.IsPermissionsStepCompleted;

    private bool IsMobile => HostInfo is { AppKind: AppKind.MauiApp, ClientKind: ClientKind.Ios or ClientKind.Android };

    protected override Task OnInitializedAsync()
        => AudioRecorder.MicrophonePermission.Check(CancellationToken.None);

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (CurrentStep == this) {
            if (!_isHandlerRegistered) {
                await NotificationUI.RegisterRequestNotificationHandler(NextButtonRef.Value);
                _isHandlerRegistered = true;
            }
        } else {
            if (_isHandlerRegistered) {
                await NotificationUI.UnregisterRequestNotificationHandler(NextButtonRef.Value);
                _isHandlerRegistered = false;
            }
        }
    }

    protected override void MarkCompleted()
        => OnboardingUI.UpdateSettings(OnboardingUI.Settings.Value with { IsPermissionsStepCompleted = true });

    protected override Task<bool> Validate()
        => Task.FromResult(true);

    protected override async Task<bool> Save() {
        if (_stepModel.RequestMicrophonePermissions) {
            await AudioRecorder.MicrophonePermission.CheckOrRequest();
        }

        if (_stepModel.RequestNotificationsPermissions) {
            await NotificationPermissions.RequestNotificationPermission(default);
        }

        if (IsMobile && _stepModel.RequestContactsPermissions) {
            await RequestContactsPermissions();
        }

        return true;
    }

    private async Task RequestContactsPermissions() {
        var state = await ContactPermissions.Check(CancellationToken.None);
        switch (state)
        {
            case false:
                await ContactPermissions.OpenSettings();
                break;
            case null:
                await ContactPermissions.CheckOrRequest(true);
                break;
        }
    }

    private void OnMicrophonePermissionClick()
        => _stepModel.RequestMicrophonePermissions = !_stepModel.RequestMicrophonePermissions;

    private void OnContactsPermissionClick()
        => _stepModel.RequestContactsPermissions = !_stepModel.RequestContactsPermissions;

    private async Task OnNotificationsPermissionClick() {
        _stepModel.RequestNotificationsPermissions = !_stepModel.RequestNotificationsPermissions;
        if (_stepModel.RequestNotificationsPermissions) {
            await NotificationUI.RegisterRequestNotificationHandler(NextButtonRef.Value);
        } else {
            await NotificationUI.UnregisterRequestNotificationHandler(NextButtonRef.Value);
        }
    }

    public class SetChatsStepModel {
        public bool RequestMicrophonePermissions { get; set; } = true;
        public bool RequestNotificationsPermissions { get; set; } = true;
        public bool RequestContactsPermissions { get; set; } = true;
    }
}
