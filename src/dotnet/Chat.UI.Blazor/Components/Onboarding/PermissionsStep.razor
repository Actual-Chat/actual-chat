@namespace ActualChat.Chat.UI.Blazor.Components
@using ActualChat.Audio.UI.Blazor.Components
@using ActualChat.Notification.UI.Blazor
@inherits Step;

@if (CurrentStep != this) {
    return;
}

<div class="permissions-step">
    <p class="text-title-1 text-center">Permissions needed</p>
    <div class="step-tiles">
        <div class="step-tile"
             @onclick="OnMicrophonePermissionClick">
            <img draggable="false"
                 class="step-tile-icon"
                 alt="Mic"
                 src="/dist/images/onboarding/mic.svg"/>
            <div class="step-tile-body">
                <div class="step-tile-title">
                    Microphone
                </div>
                <div class="step-tile-subtitle">
                    Allow us to use your mic to enjoy recording voice messages
                </div>
            </div>
            <Checkbox
                IsChecked="@_stepModel.RequestMicrophonePermissions"
                Class="!flex-none"
                Change="OnMicrophonePermissionClick"/>
        </div>
        <div class="step-tile"
             @onclick="OnNotificationsPermissionClick">
            <img draggable="false"
                 class="step-tile-icon"
                 alt="Friends"
                 src="/dist/images/onboarding/bell.svg"/>
            <div class="step-tile-body">
                <div class="step-tile-title">
                    Notifications
                </div>
                <div class="step-tile-subtitle">
                    Allow us to send notifications of new messages in chats
                </div>
            </div>
            <Checkbox
                IsChecked="@_stepModel.RequestNotificationsPermissions"
                Class="!flex-none"
                Change="OnNotificationsPermissionClick"/>
        </div>
    </div>
</div>

@code {
    private readonly SetChatsStepModel _stepModel = new();
    private bool _isHandlerRegistered = false;

    [Inject] private Session Session { get; init; } = null!;
    [Inject] private IAccounts Accounts { get; init; } = null!;
    [Inject] private UICommander UICommander { get; init; } = null!;
    [Inject] private OnboardingUI OnboardingUI { get; init; } = null!;
    [Inject] private AudioRecorder AudioRecorder { get; init; } = null!;
    [Inject] private NotificationUI NotificationUI { get; init; } = null!;
    [Inject] private INotificationPermissions NotificationPermissions { get; init; } = null!;

    [Parameter, EditorRequired] public ForwardRef NextButtonRef { get; init; } = null!;

    public override bool IsCompleted => OnboardingUI.Settings.Value.IsPermissionsStepCompleted;

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (CurrentStep == this) {
            if (!_isHandlerRegistered) {
                await NotificationUI.RegisterRequestNotificationHandler(NextButtonRef.Current);
                _isHandlerRegistered = true;
            }
        } else {
            if (_isHandlerRegistered) {
                await NotificationUI.UnregisterRequestNotificationHandler(NextButtonRef.Current);
                _isHandlerRegistered = false;
            }
        }
    }

    protected override void MarkCompleted()
        => OnboardingUI.UpdateSettings(OnboardingUI.Settings.Value with { IsPermissionsStepCompleted = true });

    protected override Task<bool> Validate()
        => Task.FromResult(true);

    protected override async Task<bool> Save() {
        if (_stepModel.RequestMicrophonePermissions) {
            AudioRecorder.MicrophonePermission.CheckOrRequest().SilentAwait();
        }

        if (_stepModel.RequestNotificationsPermissions) {
            await NotificationPermissions.RequestNotificationPermission(default);
        }

        return true;
    }

    private void OnMicrophonePermissionClick()
        => _stepModel.RequestMicrophonePermissions = !_stepModel.RequestMicrophonePermissions;

    private async Task OnNotificationsPermissionClick() {
        _stepModel.RequestNotificationsPermissions = !_stepModel.RequestNotificationsPermissions;
        if (_stepModel.RequestNotificationsPermissions) {
            await NotificationUI.RegisterRequestNotificationHandler(NextButtonRef.Current);
        } else {
            await NotificationUI.UnregisterRequestNotificationHandler(NextButtonRef.Current);
        }
    }

    public class SetChatsStepModel {
        public bool RequestMicrophonePermissions { get; set; } = true;
        public bool RequestNotificationsPermissions { get; set; } = true;
    }
}
