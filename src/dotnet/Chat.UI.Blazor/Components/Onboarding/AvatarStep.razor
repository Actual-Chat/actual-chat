@namespace ActualChat.Chat.UI.Blazor.Components
@using System.ComponentModel.DataAnnotations
@using ActualChat.Media
@using ActualChat.UI.Blazor.Components.FileUpload
@using Microsoft.Toolkit.HighPerformance
@using Stl.Generators
@inherits Step;

@if (CurrentStep != this) {
    return;
}

<div>
    <p class="text-title-1 text-center">Your user name and avatar</p>
    <Form
        @ref="_formRef"
        Model="@_stepModel">
        <DataAnnotationsValidator/>
        <div class="flex-none flex-x my-8">
            <Pic Title="@_stepModel.Name" Picture="@_stepModel.Picture" Size="SquareSize.Size24">
                <NoPicture>
                    <AnonymousIcon Class="w-24 h-24"/>
                </NoPicture>
            </Pic>
            <div class="flex-y">
                <Button Class="transparent border-none" Click="OnGenerateAvatarClick">
                    <div class="flex min-w-10 items-center justify-center">
                        <i class="icon-sync text-xl text-primary"></i>
                    </div>
                    <div class="flex items-center text-headline-1 text-primary">
                        Generate random avatar
                    </div>
                </Button>
                <FileUpload
                    @key="@_stepModel.AvatarId.Value"
                    id="fileUpload"
                    UploadUrl="@("/api/avatars/upload-picture")"
                    Uploaded="OnImagePicked"
                    MaxSize="Constants.Attachments.FileSizeLimit"
                    accept="image/*"
                    hidden>
                </FileUpload>
                <Button Class="transparent border-none">
                    <label for="fileUpload" class="flex-x">
                        <div class="flex min-w-10 items-center justify-center">
                            <i class="icon-image text-xl text-primary"></i>
                        </div>
                        <div class="flex items-center text-headline-1 text-primary">
                            Upload your photo
                        </div>
                    </label>
                </Button>
            </div>
        </div>
        <FormSection
            For="() => _stepModel.Name"
            InputId="name"
            Label="First name"
            IsLabelInsideInput="true"
            IsRequired="true">
            <InputText id="name" @bind-Value="_stepModel.Name"/>
        </FormSection>
        <FormSection
            For="() => _stepModel.LastName"
            InputId="lastName"
            Label="Last name (optional)"
            IsLabelInsideInput="true">
            <InputText id="lastName" @bind-Value="_stepModel.LastName"/>
        </FormSection>
    </Form>
</div>

@code {
    private static RandomStringGenerator IdGenerator { get; } = new(10, Alphabet.AlphaNumeric);
    private readonly AvatarStepModel _stepModel = new();
    private Form? _formRef;

    [Inject] private Session Session { get; init; } = null!;
    [Inject] private IAccounts Accounts { get; init; } = null!;
    [Inject] private IAvatars Avatars { get; init; } = null!;
    [Inject] private UICommander UICommander { get; init; } = null!;
    [Inject] private OnboardingUI OnboardingUI { get; init; } = null!;

    public override bool IsCompleted => OnboardingUI.Settings.Value.IsAvatarStepCompleted;

    protected override void MarkCompleted()
        => OnboardingUI.UpdateSettings(OnboardingUI.Settings.Value with { IsAvatarStepCompleted = true });

    protected override async Task OnInitializedAsync() {
        var account = await Accounts.GetOwn(Session, CancellationToken.None);
        _stepModel.Name = account.Name;
        _stepModel.LastName = account.LastName;

        if (!account.Avatar.Id.IsEmpty) {
            _stepModel.Picture = account.Avatar.Picture!;
            _stepModel.AvatarId = account.Avatar.Id;
            return;
        }

        var createAvatarCommand = new Avatars_Change(Session, Symbol.Empty, null, new Change<AvatarFull> {
            Create = new AvatarFull(account.Id).WithMissingPropertiesFrom(account.Avatar),
        });
        var (newAvatar, error) = await UICommander.Run(createAvatarCommand);
        if (error != null)
            return;

        _stepModel.AvatarId = newAvatar.Id;
        _stepModel.Picture = newAvatar.Picture! with { ExternalUrl = account.Avatar.PictureUrl };
        var setDefaultAvatarCommand = new Avatars_SetDefault(Session, newAvatar.Id);
        await UICommander.Run(setDefaultAvatarCommand);
    }

    protected override Task<bool> Validate() {
        var isValid = _formRef?.EditContext?.Validate() ?? false;
        return Task.FromResult(isValid);
    }

    protected override async Task<bool> Save() {
        var account = await Accounts.GetOwn(Session, default);
        var updateAccountCommand = new Accounts_Update(
            Session,
            account with {
                Name = _stepModel.Name,
                LastName = _stepModel.LastName,
            },
            account.Version);
        await UICommander.Run(updateAccountCommand);

        var avatar = await Avatars.GetOwn(Session, _stepModel.AvatarId, default).Require();
        var updateAvatarCommand = new Avatars_Change(
            Session,
            _stepModel.AvatarId,
            avatar.Version,
            new Change<AvatarFull> {
                Update = avatar.WithPicture(_stepModel.Picture) with {
                    Name = $"{_stepModel.Name} {_stepModel.LastName}".Trim(),
                },
            });
        var (_, error) = await UICommander.Run(updateAvatarCommand);
        return error is null;
    }

    private void OnImagePicked(MediaContent mediaContent) {
        _stepModel.Picture = new (mediaContent);
    }

    private void OnGenerateAvatarClick() {
        _stepModel.Picture = new(null, DefaultUserPicture.GetBoringAvatar(IdGenerator.Next()));
    }

    public class AvatarStepModel {
        [Required] public string Name { get; set; } = "";
        public string LastName { get; set; } = "";
        public Symbol AvatarId { get; set; } = "";
        public Picture Picture { get; set; } = null!;
    }
}
