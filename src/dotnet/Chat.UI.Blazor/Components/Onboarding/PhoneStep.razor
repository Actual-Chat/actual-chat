@namespace ActualChat.Chat.UI.Blazor.Components
@using System.ComponentModel.DataAnnotations
@inherits Step;

@if (CurrentStep != this) {
    return;
}

<div>
    <p class="text-title-1 text-center">Welcome to Actual Chat!</p>
    <p class="text-headline-1 mt-6">
        Please confirm your country code and enter your phone number.
        We collect this information to help you find your friends here.
    </p>
    <Form
        @ref="_formRef"
        Class="mt-6"
        Model="@_stepModel">
        <DataAnnotationsValidator/>
        @if (!_hasPhoneIdentity) {
            <FormSection
                For="() => _stepModel.Country"
                InputId="country"
                Label="Country"
                IsLabelInsideInput="true"
                IsRequired="@(!_hasPhoneIdentity)">
                <InputSelect id="country" @bind-Value="_stepModel.Country">
                    @foreach (var phoneCode in PhoneCodes.List)
                    {
                        <option value="@phoneCode.Country">@phoneCode.Country</option>
                    }
                </InputSelect>
            </FormSection>
        }
        <div class="flex-x gap-x-1">
            <FormSection
                For="() => _stepModel.Code"
                InputId="phoneCode"
                Label="Code"
                Class="w-20"
                IsLabelInsideInput="true"
                IsRequired="@(!_hasPhoneIdentity)">
                <InputText
                    id="phoneCode"
                    @bind-Value="_stepModel.Code"
                    autocomplete="tel-country-code"
                    disabled="@_hasPhoneIdentity"/>
            </FormSection>
            <FormSection
                For="() => _stepModel.Number"
                InputId="phoneNumber"
                Label="Phone number"
                Class="grow"
                IsLabelInsideInput="true"
                IsRequired="@(!_hasPhoneIdentity)">
                <InputText
                    id="phoneNumber"
                    @bind-Value="_stepModel.Number"
                    autocomplete="tel-national"
                    type="number"
                    pattern="[0-9]*"
                    inputmode="numeric"
                    disabled="@_hasPhoneIdentity"/>
            </FormSection>
        </div>
        <FormSection
            For="() => _stepModel.Email"
            InputId="email"
            Label="Email"
            IsRequired="@_hasPhoneIdentity"
            IsLabelInsideInput="true">
            <InputText id="email" @bind-Value="_stepModel.Email" disabled="@(!_hasPhoneIdentity)"/>
        </FormSection>
    </Form>
</div>

@code {
    private readonly PhoneStepModel _stepModel = new();
    private Form? _formRef;
    private bool _hasPhoneIdentity;

    [Inject] private Session Session { get; init; } = null!;
    [Inject] private IAccounts Accounts { get; init; } = null!;
    [Inject] private UICommander UICommander { get; init; } = null!;
    [Inject] private OnboardingUI OnboardingUI { get; init; } = null!;

    public override bool IsCompleted => OnboardingUI.Settings.Value.IsPhoneStepCompleted;

    protected override void MarkCompleted()
        => OnboardingUI.UpdateSettings(OnboardingUI.Settings.Value with { IsPhoneStepCompleted = true });

    protected override async Task OnInitializedAsync() {
        var account = await Accounts.GetOwn(Session, CancellationToken.None);
        _hasPhoneIdentity = account.User.HasPhoneIdentity();
        _stepModel.Email = account.Email;
        if (!account.Phone.IsNone) {
            var phoneCode = PhoneCodes.GetByCode(account.Phone.Code);
            if (phoneCode != null) {
                _stepModel.Code = phoneCode.DisplayCode;
                _stepModel.Country = phoneCode.Country;
                _stepModel.Number = account.Phone.Number;
            } else {
                _stepModel.Number = account.Phone.Number;
            }
        }
    }

    protected override Task<bool> Validate() {
        var isValid = _formRef?.EditContext?.Validate() ?? false;
        return Task.FromResult(isValid);
    }

    protected override async Task<bool> Save() {
        // TODO: verify email for phone sign in
        // TODO: verify phone for email signin
        var account = await Accounts.GetOwn(Session, default);
        var command = new Accounts_Update(
            Session,
            account with {
                Phone = new (_stepModel.Code!, _stepModel.Number!),
            },
            account.Version);
        var (_, error) = await UICommander.Run(command);
        return error is null;
    }

    public class PhoneStepModel {
        private string _country = PhoneCodes.Default.Country;

        [Required]
        public string Country {
            get => _country;
            set {
                _country = value;
                Code = PhoneCodes.List.First(x => x.Country == value).DisplayCode;
            }
        }

        [Required]
        public string? Code { get; set; } = PhoneCodes.Default.DisplayCode;

        [Required]
        [Phone]
        public string? Number { get; set; }

        [Required]
        [EmailAddress]
        public string? Email { get; set; }
    }
}
