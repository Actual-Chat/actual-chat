@namespace ActualChat.Chat.UI.Blazor.Components
@using System.ComponentModel.DataAnnotations
@inherits Step;

@if (CurrentStep != this) {
    return;
}

<div>
    @if (Stepper.CurrentStepIndex == 0) {
        <p class="text-title-1 text-center">Welcome to Actual Chat!</p>
    }
    <p class="text-headline-1 mt-6">
        Please confirm your phone number.
    </p>
    <p class="text-headline-1 mt-2">
        We collect this information to help you find friends in your contacts list who are already using Actual Chat.
    </p>
    <Form
        @ref="_formRef"
        Class="mt-6"
        Model="@_stepModel">
        <DataAnnotationsValidator/>
        <FormSection
            For="() => _stepModel.Phone"
            InputId="phone"
            Label="Phone"
            Class="grow"
            IsLabelInsideInput="true"
            IsRequired="true">
            <ChildContent>
                <InputText
                    id="phone"
                    @bind-Value="_stepModel.Phone"
                    autocomplete="tel"
                    type="tel"
                    inputmode="tel"/>
            </ChildContent>
            <Right>
                @if (_showVerificationStatus) {
                    <VerificationStatus
                        IsVerified="_isVerified ?? false"
                        Class="w-8 h-8" />
                }
            </Right>
        </FormSection>
    </Form>
</div>

@code {
    private readonly Model _stepModel = new();
    private Form? _formRef;
    private bool _showVerificationStatus;
    private bool? _isVerified;
    private bool? _skipped;

    [Inject] private Session Session { get; init; } = null!;
    [Inject] private IAccounts Accounts { get; init; } = null!;
    [Inject] private UICommander UICommander { get; init; } = null!;
    [Inject] private OnboardingUI OnboardingUI { get; init; } = null!;
    [Inject] private ModalUI ModalUI { get; init; } = null!;

    [Parameter, EditorRequired] public AccountFull Account { get; set; } = null!;

    public override bool CanSkip => _isVerified is null or false;

    public override bool IsCompleted {
        get {
            if (Account.HasVerifiedPhone())
                return true;

            // Can move forward if already verified in case when Skip and Back were pressed
            if (_isVerified is true)
                return true;

            // Can't move forward if skipped in case when Skip and Back were pressed
            if (_skipped is true)
                return false;

            return OnboardingUI.Settings.Value.IsVerifyPhoneStepCompleted;
        }
    }

    protected override void MarkCompleted()
        => OnboardingUI.UpdateSettings(OnboardingUI.Settings.Value with { IsVerifyPhoneStepCompleted = true });

    protected override async Task OnInitializedAsync() {
        var account = await Accounts.GetOwn(Session, CancellationToken.None);
        _showVerificationStatus = !account.HasVerifiedPhone();
        if (!account.Phone.IsNone)
            _stepModel.Phone = account.Phone.ToReadable();
    }

    protected override Task<bool> Validate() {
        var isValid = _formRef?.EditContext?.Validate() ?? false;
        return Task.FromResult(isValid);
    }

    protected override ValueTask OnSkip() {
        _skipped = true;
        return ValueTask.CompletedTask;
    }

    protected override async Task<bool> Save() {
        var phone = PhoneFormatterExt.FromReadable(_stepModel.Phone);
        var account = await Accounts.GetOwn(Session, default);
        var command = new Accounts_Update(Session, account with { Phone = phone }, account.Version);
        var (_, error) = await UICommander.Run(command);
        if (error is not null)
            return false;

        if (!account.HasVerifiedPhone()) {
            var verificationModel = new PhoneVerificationModal.Model(phone);
            var modalRef = await ModalUI.Show(verificationModel);
            await modalRef.WhenClosed;
            _showVerificationStatus = verificationModel.IsVerified;
            _isVerified = verificationModel.IsVerified;
            if (verificationModel is { IsVerified: false, CanSkip: false })
                return false;
            _showVerificationStatus = true;
        }

        return true;
    }

    public class Model {
        [Required, PhoneNumber] public string Phone { get; set; } = PhoneCodes.Default.DisplayCode;
    }
}
