@namespace ActualChat.Chat.UI.Blazor.Components
@using System.ComponentModel.DataAnnotations
@inherits Step;

@if (CurrentStep != this) {
    return;
}

<div>
    <p class="text-title-1 text-center">Welcome to Actual Chat!</p>
    <p class="text-headline-1 mt-6">
        Please confirm your country code and enter your phone number.
        We collect this information to help you find your friends here.
    </p>
    <Form
        @ref="_formRef"
        Class="mt-6"
        Model="@_stepModel">
        <DataAnnotationsValidator/>
        <FormSection
            For="() => _stepModel.Country"
            InputId="country"
            Label="Country"
            IsLabelInsideInput="true"
            IsRequired="true">
            <InputSelect id="country" @bind-Value="_stepModel.Country">
                @foreach (var phoneCode in PhoneCodes.List)
                {
                    <option value="@phoneCode.Country">@phoneCode.Country</option>
                }
            </InputSelect>
        </FormSection>
        <div class="flex-x gap-x-1">
            <FormSection
                For="() => _stepModel.Code"
                InputId="phoneCode"
                Label="Code"
                Class="w-20"
                IsLabelInsideInput="true"
                IsRequired="true">
                <InputText id="phoneCode" @bind-Value="_stepModel.Code" autocomplete="tel-country-code"/>
            </FormSection>
            <FormSection
                For="() => _stepModel.Number"
                InputId="phoneNumber"
                Label="Phone number"
                Class="grow"
                IsLabelInsideInput="true"
                IsRequired="true">
                <InputText id="phoneNumber" @bind-Value="_stepModel.Number" autocomplete="tel-national"/>
            </FormSection>
        </div>
        <FormSection
            For="() => _stepModel.Email"
            InputId="email"
            Label="Email"
            IsLabelInsideInput="true">
            <InputText id="email" @bind-Value="_stepModel.Email" disabled/>
        </FormSection>
    </Form>
</div>

@code {
    private readonly PhoneStepModel _stepModel = new();
    private Form? _formRef;

    [Inject] private Session Session { get; init; } = null!;
    [Inject] private IAccounts Accounts { get; init; } = null!;
    [Inject] private UICommander UICommander { get; init; } = null!;
    [Inject] private OnboardingUI OnboardingUI { get; init; } = null!;

    public override bool IsCompleted => OnboardingUI.Settings.Value.IsPhoneStepCompleted;

    protected override void MarkCompleted()
        => OnboardingUI.UpdateSettings(OnboardingUI.Settings.Value with { IsPhoneStepCompleted = true });

    protected override async Task OnInitializedAsync() {
        var account = await Accounts.GetOwn(Session, CancellationToken.None);
        _stepModel.Email = account.Email;
    }

    protected override Task<bool> Validate() {
        var isValid = _formRef?.EditContext?.Validate() ?? false;
        return Task.FromResult(isValid);
    }

    protected override async Task Save() {
        var account = await Accounts.GetOwn(Session, default);
        var command = new IAccounts.UpdateCommand(
            Session,
            account with {
                Phone = $"{_stepModel.Code} {_stepModel.Number}",
            },
            account.Version);
        await UICommander.Run(command);
    }

    public class PhoneStepModel {
        private string _country = PhoneCodes.Default.Country;

        [Required]
        public string Country {
            get => _country;
            set {
                _country = value;
                Code = PhoneCodes.List.First(x => x.Country == value).Code;
            }
        }

        [Required] public string? Code { get; set; } = PhoneCodes.Default.Code;
        [Required] public string? Number { get; set; }
        public string? Email { get; set; }
    }
}
