@namespace ActualChat.Chat.UI.Blazor.Components
@using System.ComponentModel.DataAnnotations
@inherits Step;

@if (CurrentStep != this) {
    return;
}

<div>
    <p class="text-title-1 text-center">Welcome to Actual Chat!</p>
    <p class="text-headline-1 mt-6">
        Please confirm your country code and enter your phone number.
        We collect this information to help you find your friends here.
    </p>
    <Form
        @ref="_formRef"
        Class="mt-6"
        Model="@_stepModel">
        <DataAnnotationsValidator/>
        <FormSection
            For="() => _stepModel.Phone"
            InputId="phone"
            Label="Phone"
            Class="grow"
            IsLabelInsideInput="true"
            IsRequired="@(!_hasPhoneIdentity)">
            <InputText
                id="phone"
                @bind-Value="_stepModel.Phone"
                autocomplete="tel"
                type="tel"
                inputmode="tel"
                disabled="@_hasPhoneIdentity"/>
        </FormSection>

        <FormSection
            For="() => _stepModel.Email"
            InputId="email"
            Label="Email"
            IsRequired="@(!_hasEmail)"
            IsLabelInsideInput="true">
            <InputText
                id="email"
                @bind-Value="_stepModel.Email"
                disabled="@(_hasEmail)"
                autocomplete="email"
                type="email"
                inputmode="email"/>
        </FormSection>
    </Form>
</div>

@code {
    private readonly PhoneStepModel _stepModel = new();
    private Form? _formRef;
    private bool _hasPhoneIdentity;
    private bool _hasEmail;

    [Inject] private Session Session { get; init; } = null!;
    [Inject] private IAccounts Accounts { get; init; } = null!;
    [Inject] private UICommander UICommander { get; init; } = null!;
    [Inject] private OnboardingUI OnboardingUI { get; init; } = null!;

    public override bool IsCompleted => OnboardingUI.Settings.Value.IsPhoneStepCompleted;

    protected override void MarkCompleted()
        => OnboardingUI.UpdateSettings(OnboardingUI.Settings.Value with { IsPhoneStepCompleted = true });

    protected override async Task OnInitializedAsync() {
        var account = await Accounts.GetOwn(Session, CancellationToken.None);
        _hasPhoneIdentity = account.User.HasPhoneIdentity();
        _hasEmail = !account.Email.IsNullOrEmpty();
        _stepModel.Email = account.Email;
        if (!account.Phone.IsNone) {
            _stepModel.Phone = account.Phone.ToReadable();
        }
    }

    protected override Task<bool> Validate() {
        var isValid = _formRef?.EditContext?.Validate() ?? false;
        return Task.FromResult(isValid);
    }

    protected override async Task<bool> Save() {
        // TODO: verify email for phone sign in
        // TODO: verify phone for email signin
        var account = await Accounts.GetOwn(Session, default);
        var command = new Accounts_Update(
            Session,
            account with {
                Phone = PhoneFormatterExt.FromReadable(_stepModel.Phone),
                Email = _hasEmail ? account.Email : _stepModel.Email,
            },
            account.Version);
        var (_, error) = await UICommander.Run(command);
        return error is null;
    }

    public class PhoneStepModel {
        [Required, PhoneNumber] public string Phone { get; set; } = PhoneCodes.Default.DisplayCode;
        [Required, EmailAddress] public string Email { get; set; } = "";
    }
}
