@namespace ActualChat.Chat.UI.Blazor.Components
@implements IModalView<OnboardingModal.Model>
@inherits ComputedStateComponent<AccountFull>
@{
    var account = State.Value;
    if (account.IsGuestOrNone) {
        Modal.Close(true);
        return;
    }
}

<DialogFrame
    Class="onboarding-modal"
    HasHeader="false">
    <Body>
        <Stepper Context="stepper">
            <Steps>
                <PhoneStep Account="account"/>
                <EmailStep Account="account"/>
                <AvatarStep/>
                <SetChatsStep/>
            </Steps>
            <Header>
                @if (stepper.CanMoveBack) {
                    <HeaderButton Click="stepper.MoveBack">
                        <i class="icon-arrow-left text-2xl"></i>
                    </HeaderButton>
                    <div class="text-xl md:text-lg font-semibold md:font-medium">Back</div>
                }
                <div class="grow"></div>
                @if (ModalModel.CanBeClosed) {
                    <HeaderButton Click="() => Modal.Close()">
                        <i class="icon-close"></i>
                    </HeaderButton>
                }
            </Header>
            <Footer>
                <div class="btn-group">
                    @if (stepper.CanSkip) {
                        <Button
                            Class=""
                            Click="() => OnSkipClick(stepper)">
                            Skip
                        </Button>
                    }
                    <Button
                        Class="btn-primary"
                        Click="() => OnMoveForwardClick(stepper)">
                        @if (stepper.CanSkip) {
                            <span>Verify</span>
                        } else if (stepper.IsLastStep) {
                            <span>Start messaging</span>
                        } else if (stepper.CanMoveForward) {
                            <span>Next</span>
                        } else {
                            Modal.Close(true);
                        }
                    </Button>
                </div>
                <div class="flex w-full justify-center mt-6">
                    <LineProgress
                        StepCount="stepper.StepCount"
                        CurrentStepIndex="stepper.CurrentStepIndex"
                        Decoration="LineProgress.LineProgressDecoration.Blue">
                    </LineProgress>
                </div>
            </Footer>
        </Stepper>
    </Body>
</DialogFrame>

@code {
    [Inject] private AccountUI AccountUI { get; init; } = null!;

    [CascadingParameter] public Modal Modal { get; set; } = null!;
    [Parameter] public Model ModalModel { get; set; } = null!;

    protected override ComputedState<AccountFull>.Options GetStateOptions() => new() {
        InitialValue = AccountUI.OwnAccount.Value,
        Category = GetStateCategory(),
    };

    protected override Task<AccountFull> ComputeState(CancellationToken cancellationToken)
        => AccountUI.OwnAccount.Use(cancellationToken).AsTask();

    // Event handlers

    private async Task OnMoveForwardClick(Stepper stepper) {
        var wasAtTheLastStep = stepper.CurrentStepIndex == stepper.LastStepIndex;
        if (!await stepper.TryMoveForward())
            return;

        if (wasAtTheLastStep) {
            ModalModel.CanBeClosed = true;
            Modal.Close(true);
        }
    }

    private async Task OnSkipClick(Stepper stepper) {
        var wasAtTheLastStep = stepper.CurrentStepIndex == stepper.LastStepIndex;
        await stepper.Skip();
        if (wasAtTheLastStep) {
            ModalModel.CanBeClosed = true;
            Modal.Close(true);
        }
    }

    public sealed record Model : IOptionallyClosable {
        public bool CanBeClosed { get; set; }
    }
}
