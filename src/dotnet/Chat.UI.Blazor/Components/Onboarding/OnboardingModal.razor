@namespace ActualChat.Chat.UI.Blazor.Components
@using Stl.Extensibility
@implements IModalView<OnboardingModal.Model>
@attribute [MatchFor(typeof(Model), typeof(IModalView))]

<DialogFrame
    Class="onboarding-modal"
    NoNarrowHeader="true"
    HasHeader="false">
    <Body>
    <Stepper Context="stepper">
        <HeaderContent>
            @if (stepper.CanMoveBack) {
                <ButtonRound
                    Class="transparent"
                    Click="stepper.MoveBack">
                    <i class="icon-arrow-left text-2xl"></i>
                </ButtonRound>
                <div class="text-xl md:text-lg font-semibold md:font-medium">Back</div>
            }
            <div class="grow"></div>
            <ButtonX Click="@(() => Modal.Close())"/>
        </HeaderContent>
        <ChildContent>
            <PhoneStep/>
            <AvatarStep/>
        </ChildContent>
        <FooterContent>
            @if (stepper.IsLast) {
                <Button
                    Class="btn-primary btn-w-full"
                    Click="() => OnLastStepComplete(stepper)">
                    Start messaging
                </Button>
            } else if (stepper.CanMoveForward) {
                <Button
                    Class="btn-primary btn-w-full"
                    Click="stepper.MoveForward">
                    Next
                </Button>
            }
            <div class="flex w-full justify-center mt-6">
                <LineProgress
                    TotalSteps="stepper.TotalSteps"
                    CurrentStep="stepper.CurrentStepIndex"
                    Decoration="LineProgress.LineProgressDecoration.Blue">
                </LineProgress>
            </div>
            @* RoundProgress example *@
            @* <div class="flex w-full justify-center mt-6"> *@
            @*     <RoundProgress *@
            @*         TotalSteps="stepper.TotalSteps" *@
            @*         CurrentStep="stepper.CurrentStepIndex"> *@
            @*         @if (stepper.IsLast) { *@
            @*             <ButtonRound *@
            @*                 Class="absolute text-xl" *@
            @*                 ContentClass="!bg-08" *@
            @*                 Click="() => OnLastStepComplete(stepper)"> *@
            @*                 <i class="icon-arrow-right text-2xl text-04"></i> *@
            @*             </ButtonRound> *@
            @*         } else if (stepper.CanMoveForward) { *@
            @*             <ButtonRound *@
            @*                 Class="transparent absolute text-xl" *@
            @*                 Click="stepper.MoveForward"> *@
            @*                 <i class="icon-arrow-right text-2xl text-primary"></i> *@
            @*             </ButtonRound> *@
            @*         } *@
            @*     </RoundProgress> *@
            @* </div> *@
        </FooterContent>
    </Stepper>
    </Body>
</DialogFrame>

@code {
    [CascadingParameter] public Modal Modal { get; set; } = null!;
    [Parameter] public Model ModalModel { get; set; } = null!;

    private async Task OnLastStepComplete(Stepper stepper) {
        var stepCompleted = await stepper.MoveForward();
        if (!stepCompleted)
            return;

        Modal.Close();
    }

    public sealed record Model;
}
