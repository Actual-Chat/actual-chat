@namespace ActualChat.Chat.UI.Blazor.Components
@implements IModalView<OnboardingModal.Model>
@inherits ComputedStateComponent<OnboardingModal.ViewModel>
@{
    var m = State.Value;
    if (m.AccountFull == AccountFull.Loading)
        return;
    if (m.AccountFull.IsGuestOrNone) {
        Modal.Close(true);
        return;
    }
}

<DialogFrame
    Class="onboarding-modal"
    HasHeader="false">
    <Body>
        <Stepper Context="stepper" CurrentStepChanged="@OnCurrentStepChanged">
            <Steps>
                <PhoneStep Account="m.AccountFull"/>
                <EmailStep Account="m.AccountFull"/>
                <TimeZoneStep Account="m.AccountFull"/>
                <AvatarStep/>
                <PermissionsStep NextButtonRef="@_nextButtonRef"/>
                <CreateChatsStep/>
            </Steps>
            <Header>
                @if (stepper.CanMoveBack) {
                    <HeaderButton Class="blackout" Click="@(_ => stepper.MoveBack())">
                        <i class="icon-arrow-left text-2xl"></i>
                    </HeaderButton>
                    <div class="text-headline-7 text-02">Back</div>
                }
                <div class="grow"></div>
                @if (ModalModel.CanBeClosed) {
                    <HeaderButton Click="() => Modal.Close()">
                        <i class="icon-close"></i>
                    </HeaderButton>
                }
            </Header>
            <Footer>
                <div class="btn-group">
                    @if (stepper.CanSkip) {
                        <Button
                            Class="btn-cancel"
                            Click="@(async _ => await stepper.Skip())">
                            Skip
                        </Button>
                    }
                    <Button
                        Class="btn-primary"
                        ButtonRef="@_nextButtonRef"
                        Click="@(async _ => await stepper.TryMoveForward())">
                        @if (stepper.CurrentStep is PhoneStep or EmailStep) {
                            <span>Verify</span>
                        } else if (stepper.IsLastStep) {
                            <span>Start messaging</span>
                        } else if (stepper.CanMoveForward) {
                            <span>Next</span>
                        } else {
                            Modal.Close(true);
                        }
                    </Button>
                </div>
                <div class="flex w-full justify-center mt-6">
                    <LineProgress
                        StepCount="stepper.StepCount"
                        CurrentStepIndex="stepper.CurrentStepIndex"
                        Decoration="LineProgress.LineProgressDecoration.Blue">
                    </LineProgress>
                </div>
            </Footer>
        </Stepper>
    </Body>
</DialogFrame>

@code {
    private readonly Mutable<ElementReference> _nextButtonRef = new();

    [Inject] private AccountUI AccountUI { get; init; } = null!;
    [Inject] private Features Features { get; init; } = null!;

    [CascadingParameter] public Modal Modal { get; set; } = null!;
    [Parameter] public Model ModalModel { get; set; } = null!;

    protected override ComputedState<ViewModel>.Options GetStateOptions()
        => ComputedStateComponent.GetStateOptions(GetType(),
            static t => new ComputedState<ViewModel>.Options() {
                InitialValue = ViewModel.None,
                Category = ComputedStateComponent.GetStateCategory(t),
            });

    protected override async Task<ViewModel> ComputeState(CancellationToken cancellationToken) {
        var account = await AccountUI.OwnAccount.Use(cancellationToken).ConfigureAwait(false);
        var enableIncompleteUI = await Features.Get<Features_EnableIncompleteUI, bool>(cancellationToken).ConfigureAwait(false);
        return new() {
            AccountFull = account,
            EnableIncompleteUI = enableIncompleteUI,
        };
    }

    // Event handlers

    private void OnCurrentStepChanged(bool isCompleted) {
        if (!isCompleted)
            return;

        ModalModel.CanBeClosed = true;
        Modal.Close(true);
    }

    // Nested types

    public sealed record ViewModel {
        public static readonly ViewModel None = new() {
            AccountFull = AccountFull.Loading,
            EnableIncompleteUI = false,
        };

        public AccountFull AccountFull { get; init; } = null!;
        public bool EnableIncompleteUI { get; init; }
    }

    public sealed record Model : IOptionallyClosable {
        public bool CanBeClosed { get; set; }
    }
}
