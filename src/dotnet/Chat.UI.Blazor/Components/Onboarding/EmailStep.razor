@namespace ActualChat.Chat.UI.Blazor.Components
@using System.ComponentModel.DataAnnotations
@inherits Step;

@if (CurrentStep != this) {
    return;
}

<div>
    @if (Stepper.CurrentStepIndex == 0) {
        <p class="text-title-1 text-center">Welcome to Actual Chat!</p>
    }
    <p class="text-headline-1 mt-6">
        Please confirm your email.
    </p>
    <p class="text-headline-1 mt-2">
        We will let you sign in with this email address as long as it's associated with your Apple ID or Google Account.
    </p>
    <Form
        @ref="_formRef"
        Class="mt-6"
        Model="@_model">
        <DataAnnotationsValidator/>
        <FormSection
            For="() => _model.Email"
            InputId="email"
            Label="Email"
            IsRequired="true"
            IsLabelInsideInput="true">
            <InputText
                id="email"
                @bind-Value="_model.Email"
                autocomplete="email"
                type="email"
                inputmode="email"/>
        </FormSection>
    </Form>
</div>

@code {
    private readonly Model _model = new();
    private Form? _formRef;

    [Inject] private Session Session { get; init; } = null!;
    [Inject] private AccountUI AccountUI { get; init; } = null!;
    [Inject] private UICommander UICommander { get; init; } = null!;
    [Inject] private OnboardingUI OnboardingUI { get; init; } = null!;

    [Parameter, EditorRequired] public AccountFull Account { get; set; } = null!;

    public override bool CanSkip => true;

    public override bool IsCompleted {
        get {
            if (Account.HasVerifiedEmail())
                return true;

            return OnboardingUI.UserSettings.Value.IsEmailStepCompleted;
        }
    }

    protected override void MarkCompleted()
        => OnboardingUI.UpdateUserSettings(OnboardingUI.UserSettings.Value with { IsEmailStepCompleted = true });

    protected override async Task OnInitializedAsync() {
        var account = await AccountUI.OwnAccount.Use();
        _model.Email = account.Email;
    }

    protected override Task<bool> Validate() {
        var isValid = _formRef?.EditContext?.Validate() ?? false;
        return Task.FromResult(isValid);
    }

    protected override async Task<bool> Save() {
        var account = await AccountUI.OwnAccount.Use();
        var command = new Accounts_Update(Session, account with { Email = _model.Email }, account.Version);
        var (_, error) = await UICommander.Run(command);
        return error is null;
    }

    public class Model {
        [Required, EmailAddress] public string Email { get; set; } = "";
    }
}
