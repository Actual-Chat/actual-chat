@namespace ActualChat.Chat.UI.Blazor.Components
@using System.ComponentModel.DataAnnotations
@inherits Step;

@if (CurrentStep != this) {
    return;
}

<div>
    @if (Stepper.CurrentStepIndex == 0) {
        <p class="text-title-1 text-center">Welcome to Actual Chat!</p>
    }
    <p class="text-headline-1 mt-6">
        Please confirm your email.
    </p>
    <p class="text-headline-1 mt-2">
        We collect this information to send you notifications about latest activities.
    </p>
    <Form
        @ref="_formRef"
        Class="mt-6"
        Model="@_model">
        <DataAnnotationsValidator/>
        <FormSection
            For="() => _model.Email"
            InputId="email"
            Label="Email"
            Class="grow"
            IsRequired="true"
            IsLabelInsideInput="true">
            <ChildContent>
                <InputText
                    id="email"
                    @bind-Value="_model.Email"
                    autocomplete="email"
                    type="email"
                    inputmode="email"/>
            </ChildContent>
            <Right>
                @if (_showVerificationStatus) {
                    <VerificationStatus
                        IsVerified="_isVerified ?? false"
                        Class="w-8 h-8" />
                }
            </Right>
        </FormSection>
    </Form>
</div>

@code {
    private readonly Model _model = new();
    private Form? _formRef;
    private bool _showVerificationStatus;
    private bool? _isVerified;

    [Inject] private Session Session { get; init; } = null!;
    [Inject] private AccountUI AccountUI { get; init; } = null!;
    [Inject] private UICommander UICommander { get; init; } = null!;
    [Inject] private OnboardingUI OnboardingUI { get; init; } = null!;
    [Inject] private ModalUI ModalUI { get; init; } = null!;

    [Parameter, EditorRequired] public AccountFull Account { get; set; } = null!;

    public override bool CanSkip => true;

    public override bool IsCompleted {
        get {
            if (Account.HasVerifiedEmail())
                return true;

            return OnboardingUI.UserSettings.Value.IsEmailStepCompleted;
        }
    }

    protected override void MarkCompleted()
        => OnboardingUI.UpdateUserSettings(OnboardingUI.UserSettings.Value with { IsEmailStepCompleted = true });

    protected override async Task OnInitializedAsync() {
        var account = await AccountUI.OwnAccount.Use();
        _model.Email = account.Email;
    }

    protected override Task<bool> Validate() {
        var isValid = _formRef?.EditContext?.Validate() ?? false;
        return Task.FromResult(isValid);
    }

    protected override async Task<bool> Save() {
        var account = await AccountUI.OwnAccount.Use();
        var command = new Accounts_Update(Session, account with { Email = _model.Email }, account.Version);
        var (_, error) = await UICommander.Run(command);
        if (error is not null)
            return false;

        var verificationModel = new EmailVerificationModal.Model(_model.Email);
        var modalRef = await ModalUI.Show(verificationModel);
        await modalRef.WhenClosed;
        _showVerificationStatus = verificationModel.IsVerified;
        _isVerified = verificationModel.IsVerified;
        return verificationModel.IsVerified;
    }

    public class Model {
        [Required, EmailAddress] public string Email { get; set; } = "";
    }
}
