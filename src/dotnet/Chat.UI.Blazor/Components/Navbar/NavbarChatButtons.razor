@using ActualChat.Media;
@using ActualChat.Chat.UI.Blazor.Module
@using ActualChat.Kvas;
@namespace ActualChat.Chat.UI.Blazor.Components
@inherits ComputedStateComponent<NavbarChatButtons.Model>
@{
    var m = State.Value;
    var chats = m.Chats;
    var iconSize = ScreenSize.IsNarrow() ? SquareSize.Size10 : SquareSize.Size12;
}

@if (chats.Any()) {
    <div class=c-delimiter></div>
}

<div @ref="Ref" class="navbar-chat-buttons">
    @foreach (var chatInfo in chats) {
        var attributes = new Dictionary<string, object> {
            { "data-chat-id", chatInfo.Id },
        };
        if (!Hub.BrowserInfo.IsTouchCapable) {
            attributes.Add("data-menu", MenuRef.New<ChatMenu>(chatInfo.Id, ChatListKind.All.Format()).ToString());
            attributes.Add("data-menu-placement", FloatingPosition.Right.ToPositionString());
        }
        <NavbarGroupSelectionButton
            @key="@chatInfo.Id"
            CanMove="@(!Hub.BrowserInfo.IsTouchCapable)"
            Title="@chatInfo.Chat.Title"
            AdditionalAttributes="@attributes"
            Id="@chatInfo.Id.GetNavbarGroupId()">
            <ChildContent>
                <ChatIcon Chat="chatInfo.Chat" ShowPresence="@true" Size="@iconSize"/>
            </ChildContent>
            <BadgeContent>
                <UnreadCount
                    Value="@chatInfo.UnreadCount"
                    HasMentions="@chatInfo.HasUnreadMentions"
                    NotificationMode="@chatInfo.UserSettings.NotificationMode"/>
            </BadgeContent>
        </NavbarGroupSelectionButton>
    }
</div>

@code {
    private static readonly string JSCreateMethod = $"{ChatBlazorUIModule.ImportName}.NavbarChatButtons.create";

    private DotNetObjectReference<NavbarChatButtons> BlazorRef { get; set; } = null!;
    private IJSObjectReference JSRef { get; set; } = null!;
    private ElementReference Ref { get; set; }

    [Inject] private ChatUIHub Hub { get; init; } = null!;
    [Inject] private IJSRuntime JS { get; init; } = null!;

    [CascadingParameter] private ScreenSize ScreenSize { get; set; }

    public override async ValueTask DisposeAsync() {
        await JSRef.DisposeSilentlyAsync("dispose");
        JSRef = null!;
        BlazorRef.DisposeSilently();
        BlazorRef = null!;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (firstRender) {
            BlazorRef = DotNetObjectReference.Create(this);
            JSRef = await JS.InvokeAsync<IJSObjectReference>(JSCreateMethod, Ref, BlazorRef);
        }
    }

    protected override ComputedState<Model>.Options GetStateOptions()
        => ComputedStateComponent.GetStateOptions(GetType(),
            static t => new ComputedState<Model>.Options() {
                InitialValue = new Model(),
                Category = ComputedStateComponent.GetStateCategory(t),
            });

    protected override async Task<Model> ComputeState(CancellationToken cancellationToken) {
        var navbarSettings = await Hub.ChatUI.NavbarSettings.Use(cancellationToken).ConfigureAwait(false);
        var chats = (await navbarSettings.PinnedChats
                .Select(id => Hub.ChatUI.Get(id, cancellationToken))
                .Collect()
                .ConfigureAwait(false))
            .SkipNullItems()
            .ToList();

        return new() {
            Chats = chats,
        };
    }

    [JSInvokable]
    public void OnOrderChanged(ChatId[] chats)
        => Hub.ChatUI.SetNavbarPinnedChats(chats);

    // Nested types

    public record Model {
        public List<ChatInfo> Chats { get; init; } = [];
    }
}
