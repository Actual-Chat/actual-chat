@namespace ActualChat.Chat.UI.Blazor.Components
@using ActualChat.Hosting
@using ActualChat.UI.Blazor.Services
@{
    var selectedClass = IsSelected ? "selected" : "";
    var buttonClass = $"{(IsSelected ? "on" : "")}";
}

<NavbarButton
    Class="@selectedClass"
    ButtonClass="@buttonClass"
    TooltipPosition="@TooltipPosition"
    Tooltip="@Tooltip"
    Click="OnClick"
    ChildContent="@ChildContent"
    CanMove="@CanMove"
    AdditionalAttributes="@AdditionalAttributes">
    <Ending>
        <LeftLine/>
        <div class="right-line"></div>
        @BadgeContent
    </Ending>
</NavbarButton>

@code {
    [Inject] private NavbarUI NavbarUI { get; init; } = null!;
    [Inject] private TuneUI TuneUI { get; init; } = null!;

    [Parameter, EditorRequired] public string Id { get; set; } = "";
    [Parameter, EditorRequired] public string Title { get; set; } = "";
    [Parameter] public string Tooltip { get; set; } = "";
    [Parameter] public bool CanMove { get; set; }
    [Parameter] public bool IsSelected { get; set; }
    [Parameter] public FloatingPosition TooltipPosition { get; set; } = FloatingPosition.Right;
    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Parameter] public RenderFragment? BadgeContent { get; set; }
    [Parameter(CaptureUnmatchedValues = true)]
    public IReadOnlyDictionary<string, object>? AdditionalAttributes { get; set; }

    private void OnClick() {
        NavbarUI.SelectGroup(Id, true);
        _ = TuneUI.Play(Tune.SelectNavbarItem).SilentAwait();
    }
}
