@using ActualChat.Hosting
@using ActualChat.UI.Blazor.Services
@using ActualChat.Users
@namespace ActualChat.Chat.UI.Blazor.Components
@inherits ComputedStateComponent<NavbarButtons.Model>
@{
    var m = State.Value;
    var ownAccount = m.OwnAccount;
}

@if (ownAccount.IsActive()) {
    @if (m.EnablePlacesUI) {
        <NavbarButton
            data-bubble="@(BubbleRef.New<CreateChatBubble>())"
            data-bubble-priority="201"
            data-bubble-placement="@(FloatingPosition.RightStart.ToPositionString())"
            data-menu="@(MenuRef.New<CreateMenu>().ToString())"
            data-menu-trigger="@MenuTrigger.Primary"
            data-menu-placement="@(FloatingPosition.RightStart.ToPositionString())">
            <ChildContent>
                <i class="icon-plus text-2xl font-medium"></i>
            </ChildContent>
            <Ending>
                <LeftLine/>
                <div class="right-line"></div>
            </Ending>
        </NavbarButton>
    } else {
        <NavbarButton
            Tooltip="Create"
            data-bubble="@(BubbleRef.New<CreateChatBubble>())"
            data-bubble-priority="201"
            data-bubble-placement="@(FloatingPosition.RightStart.ToPositionString())"
            Click="OnCreateChatClick">
            <ChildContent>
                <i class="icon-plus text-2xl font-medium"></i>
            </ChildContent>
            <Ending>
                <LeftLine/>
                <div class="right-line"></div>
            </Ending>
        </NavbarButton>
    }
}

<NavbarGroupSelectionButton
    Id="@NavbarGroupIds.Chats"
    Title="@NavbarGroupIds.ChatsTitle"
    Tooltip="Chats">
    <ChildContent>
        <i class="icon-message-ellipse text-2xl font-medium"></i>
    </ChildContent>
    <BadgeContent>
        <ChatsNavbarButtonBadge PlaceId="@PlaceId.None" />
    </BadgeContent>
</NavbarGroupSelectionButton>

<div class="navbar-buttons">
    @if (m.EnablePlacesUI) {
        <NavbarPlaceButtons/>
    }

    <NavbarChatButtons/>
</div>

@if (ownAccount.IsAdmin) {
    <NavbarGroupSelectionButton
        Title="Administration"
        Id="@NavbarGroupIds.Administration"
        Tooltip="Administration">
        <i class="icon-adminx-1 text-2xl font-medium"></i>
    </NavbarGroupSelectionButton>
}
@if (ownAccount.IsAdmin) {
    <NavbarGroupSelectionButton
        Title="Test Pages"
        Id="@NavbarGroupIds.TestPages"
        Tooltip="Test Pages">
        <i class="icon-alert-triangle text-2xl font-medium"></i>
    </NavbarGroupSelectionButton>

    <NavbarButton
        Class="mt-auto"
        Tooltip="Reload UI"
        Click="@OnReloadUIClick">
        <ChildContent>
            <i class="icon-refresh text-2xl font-medium"></i>
        </ChildContent>
        <Ending>
            <LeftLine/>
            <div class="right-line"></div>
        </Ending>
    </NavbarButton>
}

@code {
    [Inject] protected UIHub Hub { get; init; } = null!;
    protected AccountUI AccountUI => Hub.AccountUI;
    protected HostInfo HostInfo => Hub.HostInfo();
    protected Features Features => Hub.Features();
    protected ModalUI ModalUI => Hub.ModalUI;
    protected NavbarUI NavbarUI => Hub.NavbarUI;
    protected PanelsUI PanelsUI => Hub.PanelsUI;

    protected override void OnInitialized() {
        NavbarUI.SelectedGroupChanged += OnNavbarSelectedGroupChanged;
        base.OnInitialized();
    }

    public override ValueTask DisposeAsync() {
        NavbarUI.SelectedGroupChanged -= OnNavbarSelectedGroupChanged;
        return base.DisposeAsync();
    }

    protected override ComputedState<Model>.Options GetStateOptions()
        => new() {
            InitialValue = new (AccountUI.OwnAccount.Value, false),
            Category = GetStateCategory(),
        };

    protected override async Task<Model> ComputeState(CancellationToken cancellationToken) {
        var ownAccount = await AccountUI.OwnAccount.Use(cancellationToken);
        var enablePlacesUI = await Features.Get<Features_EnablePlacesUI, bool>(cancellationToken);
        return new Model(ownAccount, enablePlacesUI);
    }

    private Task OnCreateChatClick()
        => ModalUI.Show(new NewChatModal.Model(PlaceId.None));

    private void OnReloadUIClick()
        => Services.GetRequiredService<ReloadUI>().Reload();

    private void OnNavbarSelectedGroupChanged(object? s, EventArgs e) {
        if (PanelsUI.Left.IsSearchMode)
            PanelsUI.Left.SearchToggle();
        if (NavbarUI.IsPinnedChatSelected(out _))
            PanelsUI.HidePanels();
    }

    public record Model(AccountFull OwnAccount, bool EnablePlacesUI);
}
