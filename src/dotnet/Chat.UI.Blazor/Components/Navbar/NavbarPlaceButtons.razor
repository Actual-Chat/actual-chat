@using ActualChat.Media;
@namespace ActualChat.Chat.UI.Blazor.Components
@inherits ComputedStateComponent<NavbarPlaceButtons.Model>
@{
    var m = State.Value;
    var places = m.Places;
    if (places.Count == 0)
        return;
}

@if (places.Count > 0) {
    <div class="navbar-place-buttons">
        @foreach (var place in places) {
            var groupId = place.Id.GetNavbarGroupId();
            Hub.NavbarUI.UpdateTitle(groupId, place.Title);
            <NavbarGroupSelectionButton
                Title="@place.Title"
                Id="@groupId"
                Tooltip="@place.Title">
                <ChildContent>
                    <Pic
                        Title="@place.Title"
                        Picture="@place.Picture.ToPicture()"
                        Size="@SquareSize.Size8"
                        AvatarKind="@AvatarKind.Marble"
                        AvatarKey="@place.Id.Value"/>
                </ChildContent>
                <BadgeContent>
                    <ChatsNavbarButtonBadge PlaceSid="@place.Id"/>
                </BadgeContent>
            </NavbarGroupSelectionButton>
        }
    </div>
}

@code {
    [Inject] private ChatUIHub Hub { get; init; } = null!;
    private Session Session => Hub.Session();

    protected override ComputedState<Model>.Options GetStateOptions()
        => new() {
            InitialValue = new Model(),
            Category = GetStateCategory(),
        };

    protected override async Task<Model> ComputeState(CancellationToken cancellationToken) {
        var enableIncompleteUI = await Hub.Features().Get<Features_EnableIncompleteUI, bool>(cancellationToken);
        if (!enableIncompleteUI)
            return new Model();

        var placeIds = await Hub.Contacts.ListPlaceIds(Session, cancellationToken);
        var selectedChatId = await Hub.ChatUI.SelectedChatId.Use(cancellationToken);
        if (selectedChatId.IsPlaceChat && !placeIds.Contains(selectedChatId.PlaceId))
            placeIds = placeIds.Add(selectedChatId.PlaceId, true);
        var places = (await placeIds
            .Select(id => Hub.Places.Get(Session, id, cancellationToken))
            .Collect())
            .SkipNullItems()
            .OrderBy(c => c.CreatedAt)
            .ToApiArray();

        return new Model {
            Places = places
        };
    }

    public record Model {
        public ApiArray<Place> Places { get; init; } = ApiArray.Empty<Place>();
    }
}
