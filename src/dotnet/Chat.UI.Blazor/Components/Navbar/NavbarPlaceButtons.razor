@using ActualChat.Media;
@using ActualChat.Chat.UI.Blazor.Module
@using ActualChat.Kvas;
@namespace ActualChat.Chat.UI.Blazor.Components
@inherits ComputedStateComponent<NavbarPlaceButtons.Model>
@{
    var m = State.Value;
    var places = m.Places;
    var size = ScreenSize.IsNarrow() ? SquareSize.Size10 : SquareSize.Size12;
}

<div @ref="Ref" class="navbar-place-buttons">
    @foreach (var place in places) {
        <NavbarGroupSelectionButton
            @key="@place.Id"
            AdditionalAttributes="@(new Dictionary<string, object>() { {"data-place-id", place.Id} })"
            CanMove="@true"
            Title="@place.Title"
            Id="@place.Id.GetNavbarGroupId()"
            Tooltip="@place.Title">
            <ChildContent>
                <Pic
                    Title="@place.Title"
                    Picture="@place.Picture.ToPicture()"
                    Size="@size"
                    IsSquare="true"
                    AvatarKind="@AvatarKind.Marble"
                    AvatarKey="@place.Id.Value"/>
            </ChildContent>
            <BadgeContent>
                <ChatsNavbarButtonBadge PlaceSid="@place.Id"/>
            </BadgeContent>
        </NavbarGroupSelectionButton>
    }
</div>

@code {
    private static readonly string JSCreateMethod = $"{ChatBlazorUIModule.ImportName}.NavbarPlaceButtons.create";
    private DotNetObjectReference<NavbarPlaceButtons> BlazorRef { get; set; } = null!;
    private IJSObjectReference JSRef { get; set; } = null!;
    private ElementReference Ref { get; set; }

    [Inject] private ChatUIHub Hub { get; init; } = null!;
    [Inject] private IJSRuntime JS { get; init; } = null!;

    private Session Session => Hub.Session();

    private PlacesSettings? _placesSettings;
    private PlacesSettings PlacesSettings => _placesSettings ??= new(Hub.Services, Hub.AccountSettings());

    [CascadingParameter] ScreenSize ScreenSize { get; set; }

    public override async ValueTask DisposeAsync() {
        await JSRef.DisposeSilentlyAsync("dispose");
        JSRef = null!;
        BlazorRef.DisposeSilently();
        BlazorRef = null!;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (firstRender) {
            BlazorRef = DotNetObjectReference.Create(this);
            JSRef = await JS.InvokeAsync<IJSObjectReference>(JSCreateMethod, Ref, BlazorRef);
        }
    }

    protected override ComputedState<Model>.Options GetStateOptions()
        => new() {
            InitialValue = new Model(),
            Category = GetStateCategory(),
        };

    protected override async Task<Model> ComputeState(CancellationToken cancellationToken) {
        var placeIds = await Hub.Contacts.ListPlaceIds(Session, cancellationToken);

        var selectedChatId = await Hub.ChatUI.SelectedChatId.Use(cancellationToken);
        if (selectedChatId.IsPlaceChat && !placeIds.Contains(selectedChatId.PlaceId))
            placeIds = placeIds.Add(selectedChatId.PlaceId, true);

        var placesOrdered = await PlacesSettings.GetPlacesOrder(Session, placeIds.Items, cancellationToken);

        var places = (await placesOrdered
                .Select(id => Hub.Places.Get(Session, id, cancellationToken))
                .Collect())
            .SkipNullItems()
            .ToApiArray();

        return new Model {
            Places = places,
        };
    }

    [JSInvokable]
    public Task StorePlacesOrder(PlaceId[] placeIds)
        => PlacesSettings.SetPlacesOrder(Session, placeIds);

    public record Model {
        public ApiArray<Place> Places { get; init; } = ApiArray.Empty<Place>();
    }
}
