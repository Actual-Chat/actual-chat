@namespace ActualChat.Chat.UI.Blazor.Components
@implements IDisposable
@using ActualChat.Hosting
@using ActualChat.UI.Blazor.Services
@{
    var isActive = NavbarUI.ActiveGroupId == Id;
    var cls = isActive ? "on" : "";
    var btnClass = $"navbar-group-toggle {cls} {Class}";
    var lineClass = isActive ? "bg-primary" : "bg-transparent";
}

<div class="flex-x">
    <div class="@lineClass left-line">
    </div>
    <ButtonSquare
        Click="@OnClick"
        Class="@btnClass"
        Tooltip="@Tooltip"
        ContentClass="navbar-navigation-button"
        TooltipPosition="@TooltipPosition">
        @ChildContent
    </ButtonSquare>
    <div class="w-[5px]">
    </div>
</div>

@code {
    [Inject] private NavbarUI NavbarUI { get; init; } = null!;
    [Inject] private HostInfo HostInfo { get; init; } = null!;

    [Parameter] public string? Class { get; set; } = "";
    [Parameter] public string ViewBox { get; set; } = "0 0 24 24";
    [Parameter, EditorRequired] public string Title { get; set; } = "";
    [Parameter, EditorRequired] public string Id { get; set; } = "";
    [Parameter] public RenderFragment ChildContent { get; set; } = null!;
    [Parameter] public string Tooltip { get; set; } = "";
    [Parameter] public TooltipPosition TooltipPosition { get; set; }

    protected override void OnInitialized() {
        NavbarUI.ActiveGroupChanged += OnNavbarActiveGroupChanged;
    }

    public void Dispose()
        => NavbarUI.ActiveGroupChanged -= OnNavbarActiveGroupChanged;

    private void OnClick() {
        NavbarUI.ActivateGroup(Id, Title);
    }

    private void OnNavbarActiveGroupChanged(object? s, EventArgs e)
        => InvokeAsync(StateHasChanged);
}
