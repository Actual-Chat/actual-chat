@namespace ActualChat.Chat.UI.Blazor.Components
@implements IDisposable
@using ActualChat.Hosting
@using ActualChat.UI.Blazor.Services
@{
    var isActive = NavbarUI.ActiveGroupId == Id;
    var cls = isActive ? "on" : "";
    var btnClass = $"{cls} {Class}";
    var lineClass = isActive ? "h-8" : "invisible";
}

<div class="flex-x relative">
    <LeftLine Class="@lineClass"/>
    <ButtonSquare
        Click="@OnClick"
        Class="@btnClass"
        Tooltip="@Tooltip"
        ContentClass="navbar-navigation-button"
        FloatingPosition="@FloatingPosition">
        @ChildContent
    </ButtonSquare>
    <div class="w-[5px]">
    </div>
    @if (ShowBadge) {
        <Badge Class="navbar-group-toggle-chats-badge">@BadgeContent</Badge>
    }
</div>

@code {
    [Inject] private NavbarUI NavbarUI { get; init; } = null!;
    [Inject] private HostInfo HostInfo { get; init; } = null!;

    [Parameter] public string? Class { get; set; } = "";
    [Parameter] public string ViewBox { get; set; } = "0 0 24 24";
    [Parameter, EditorRequired] public string Title { get; set; } = "";
    [Parameter, EditorRequired] public string Id { get; set; } = "";
    [Parameter] public RenderFragment ChildContent { get; set; } = null!;
    [Parameter] public string Tooltip { get; set; } = "";
    [Parameter] public FloatingPosition FloatingPosition { get; set; }
    [Parameter] public bool ShowBadge { get; set; }
    [Parameter] public RenderFragment? BadgeContent { get; set; }

    protected override void OnInitialized() {
        NavbarUI.ActiveGroupChanged += OnNavbarActiveGroupChanged;
    }

    public void Dispose()
        => NavbarUI.ActiveGroupChanged -= OnNavbarActiveGroupChanged;

    private void OnClick() {
        NavbarUI.ActivateGroup(Id, Title);
    }

    private void OnNavbarActiveGroupChanged(object? s, EventArgs e)
        => InvokeAsync(StateHasChanged);
}
