@namespace ActualChat.Chat.UI.Blazor.Components
@inherits ComputedStateComponent<ChatsNavbarButtonBadge.Model>
@{
    var m = State.Value;
    _rendered = m;
    if (m.Count <= 0)
        return;
}

<Badge>@m.Count</Badge>

@code {
    private Model? _rendered;

    [Inject] private ChatListUI ChatListUI { get; init; } = null!;

    [Parameter, EditorRequired] public PlaceId PlaceId { get; set; }

    protected override ComputedState<Model>.Options GetStateOptions()
        => ComputedStateComponent.GetStateOptions(GetType(),
            static t => new ComputedState<Model>.Options() {
                UpdateDelayer = FixedDelayer.Get(0.1),
                Category = ComputedStateComponent.GetStateCategory(t),
            });

    protected override async Task<Model> ComputeState(CancellationToken cancellationToken) {
        var count = await ChatListUI.GetUnmutedUnreadChatCount(PlaceId, cancellationToken).ConfigureAwait(false);
        return new(count);
    }

    protected override bool ShouldRender()
        => State.HasError || State.Value != _rendered;

    // Nested types

    public record struct Model(Trimmed<int> Count);
}
