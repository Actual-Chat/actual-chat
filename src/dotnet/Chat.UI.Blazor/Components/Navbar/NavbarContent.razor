@using ActualChat.Hosting
@using ActualChat.UI.Blazor.Services
@using ActualChat.Users
@namespace ActualChat.Chat.UI.Blazor.Components
@inherits ComputedStateComponent<NavbarContent.Model>
@{
    var m = State.Value;
    if (m == Model.None)
        return;
    var placeId = PlaceId.None;
    var isChats = NavbarUI.IsGroupSelected(NavbarGroupIds.Chats) || NavbarUI.IsPlaceSelected(out placeId);
    if (NavbarUI.IsPinnedChatSelected(out var pinnedChatId)) {
        isChats = true;
        placeId = pinnedChatId.PlaceId;
    }
    var isAdministration = m.SelectedNavbarGroupId == NavbarGroupIds.Administration;
    var isTestPages = m.SelectedNavbarGroupId == NavbarGroupIds.TestPages;
    var cls = isChats ? "navbar-chats" : "navbar-pages";
}

<div class="navbar-content">
    <div class="navbar-group @cls">
        @if (isChats) {
            <ChatListNavbarWidget PlaceId="@placeId" />
        }
        else if (isAdministration && m.AccountFull.IsAdmin) {
            <NavbarItem ReplaceOnPrefix="/admin/" Url="/admin/user-invites">Invite Users</NavbarItem>
            <NavbarItem ReplaceOnPrefix="/admin/" Url="/admin/move-chat2place">Move chat to place</NavbarItem>
        }
        else if (isTestPages && m.AccountFull.IsAdmin) {
            <NavbarItem ReplaceOnPrefix="/test/" Url="/test/virtual-list">Virtual List</NavbarItem>
            <NavbarItem ReplaceOnPrefix="/test/" Url="/test/audio-player">Audio Player</NavbarItem>
            <NavbarItem ReplaceOnPrefix="/test/" Url="/test/audio-recorder">Audio Recorder</NavbarItem>
            <NavbarItem ReplaceOnPrefix="/test/" Url="/test/render-slot">Render Slot</NavbarItem>
            <NavbarItem ReplaceOnPrefix="/test/" Url="/test/ui-colors">UI Colors</NavbarItem>
            <NavbarItem ReplaceOnPrefix="/test/" Url="/test/error-barrier">Error Barrier</NavbarItem>
            <NavbarItem ReplaceOnPrefix="/test/" Url="/test/error-toast">Error Toast</NavbarItem>
            <NavbarItem ReplaceOnPrefix="/test/" Url="/test/toast">Toast</NavbarItem>
            <NavbarItem ReplaceOnPrefix="/test/" Url="/test/dive-in-modal-test">Dive-in Modal</NavbarItem>
            <NavbarItem ReplaceOnPrefix="/test/" Url="/test/reconnect-overlay">Reconnect Overlay</NavbarItem>
            <NavbarItem ReplaceOnPrefix="/test/" Url="/test/svg-cats">SVG Cats</NavbarItem>
            <NavbarItem ReplaceOnPrefix="/test/" Url="/test/loading-overlay">Loading Overlay</NavbarItem>
            <NavbarItem ReplaceOnPrefix="/test/" Url="/test/mic-permission-guides">Mic Permission Guides</NavbarItem>
            <NavbarItem ReplaceOnPrefix="/test/" Url="/test/skeletons">Skeletons</NavbarItem>
            <NavbarItem ReplaceOnPrefix="/test/" Url="/test/requirements">Requirements</NavbarItem>
            <NavbarItem ReplaceOnPrefix="/test/" Url="/test/features">Features</NavbarItem>
            <NavbarItem ReplaceOnPrefix="/test/" Url="/test/compute-state">Compute State</NavbarItem>
            <NavbarItem ReplaceOnPrefix="/test/" Url="/test/markup-editor">Markup Editor</NavbarItem>
            <NavbarItem ReplaceOnPrefix="/test/" Url="/test/auth">Authentication</NavbarItem>
            <NavbarItem ReplaceOnPrefix="/test/" Url="/test/blazor">Blazor</NavbarItem>
            <NavbarItem ReplaceOnPrefix="/test/" Url="/test/js">JavaScript</NavbarItem>
            <NavbarItem ReplaceOnPrefix="/test/" Url="/test/embedded">Embedded</NavbarItem>
            <NavbarItem ReplaceOnPrefix="/test/" Url="/test/totp">Totp</NavbarItem>
            @if (HostInfo.HostKind != HostKind.MauiApp && HostInfo.IsDevelopmentInstance) {
                <NavbarItem ReplaceOnPrefix="/test/" Url="/test/external-contacts">External Contacts</NavbarItem>
            }
            @if (HostInfo.HostKind == HostKind.MauiApp) {
                <NavbarItem ReplaceOnPrefix="/test/" Url="/test/maui">Maui</NavbarItem>
            }
            <NavbarItem ReplaceOnPrefix="/test/" Url="/test/system">System</NavbarItem>
        }
    </div>
</div>

@code {
    [Inject] private NavbarUI NavbarUI { get; init; } = null!;
    [Inject] protected AccountUI AccountUI { get; init; } = null!;
    [Inject] protected HostInfo HostInfo { get; init; } = null!;

    protected override ComputedState<Model>.Options GetStateOptions()
        => new() {
            InitialValue = Model.None,
            Category = GetStateCategory(),
        };

    protected override async Task<Model> ComputeState(CancellationToken cancellationToken) {
        var selectedNavbarGroupId = await NavbarUI.SelectedNavbarGroupId.Use(cancellationToken).ConfigureAwait(false);
        var accountFull = await AccountUI.OwnAccount.Use(cancellationToken).ConfigureAwait(false);
        return new Model(accountFull, selectedNavbarGroupId);
    }

    public sealed record Model(
        AccountFull AccountFull,
        Symbol SelectedNavbarGroupId)
    {
        public static readonly Model None = new(AccountFull.None, "");
    }
}
