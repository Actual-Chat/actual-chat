@using ActualChat.Notification.UI.Blazor
@namespace ActualChat.Chat.UI.Blazor.Components
@implements IDisposable
@{
    var activeClass = IsSelected ? "active" : "inactive";
    _isCurrent = CalculateIsCurrent();
}

<div class="@Class @activeClass navbar-item group" data-test-url="@Url" data-test-local-url="@History.LocalUrl.Value" @attributes="@Attributes">
    @if (Url.IsNullOrEmpty()) { /* IsSelected is needed to make sure click events work on iOS */
        <div class="navbar-item-content">
            @ChildContent
        </div>
    } else if (_isCurrent) {
        <div class="navbar-item-content" @onclick="@OnCurrentClick">
            @ChildContent
        </div>
    } else {
        <div class="navbar-item-content" data-href="@Url" data-replace-on-prefix="@ReplaceOnPrefix" data-href-tune="@Tune.SelectNavbarItem.ToString()">
            @ChildContent
        </div>
    }
    <div class="navbar-item-ending">
        @Ending
    </div>
</div>

@code {
    private bool _isCurrent;

    [Inject] private ChatUIHub Hub { get; init; } = null!;
    private History History => Hub.History;
    private PanelsUI PanelsUI => Hub.PanelsUI;
    private TuneUI TuneUI => Hub.TuneUI;

    [Parameter] public string Class { get; set; } = "";
    [Parameter] public bool IsSelected { get; set; }
    [Parameter] public string Url { get; set; } = "";
    [Parameter] public string ReplaceOnPrefix { get; set; } = "";
    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Parameter] public RenderFragment? Ending { get; set; }
    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object> Attributes { get; set; } = new();

    protected override void OnInitialized() {
        if (Url.IsNullOrEmpty())
            return;
        History.LocationChanged += HistoryOnLocationChanged;
    }

    public void Dispose()
        => History.LocationChanged -= HistoryOnLocationChanged;

    private void HistoryOnLocationChanged(object? sender, LocationChangedEventArgs e) {
        if (CalculateIsCurrent() != _isCurrent)
            StateHasChanged();
    }

    private void OnCurrentClick() {
        // Navigation doesn't happen when we click on the current URL,
        // but we still need to pretend it is happening.
        PanelsUI.HidePanels();
        _ = TuneUI.Play(Tune.SelectNavbarItem);
    }

    private bool CalculateIsCurrent()
        => History.LocalUrl.Value == Url;
}
