@using ActualChat.Notification.UI.Blazor
@namespace ActualChat.Chat.UI.Blazor.Components
@{
    var activeClass = IsSelected ? "active" : "inactive";
    var statusClass = IsOnline switch { true  => "status-online", false  => "status-offline", _ => "status-unknown" };
}

<div class="@Class @activeClass @statusClass navbar-item group"
     @attributes="InputAttributes">
    <div class="navbar-item-status"></div>
    <div class="navbar-item-content">
        @if (Url.IsNullOrEmpty()) {
            @ChildContent
        } else {
            <a class="unfocusable cursor-pointer" data-href="@Url">@ChildContent</a>
        }
    </div>
    <div class="navbar-item-ending">
        @Ending
    </div>
</div>

@code {
    [Parameter] public string Class { get; set; } = "";
    [Parameter] public bool? IsOnline { get; set; }
    [Parameter] public bool IsSelected { get; set; }
    [Parameter] public string Url { get; set; } = "";
    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Parameter] public RenderFragment? Ending { get; set; }
    [Parameter(CaptureUnmatchedValues = true)] public Dictionary<string, object> InputAttributes { get; set; } = new();
}
