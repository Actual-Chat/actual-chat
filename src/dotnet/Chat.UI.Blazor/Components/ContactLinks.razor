@using System.Net
@inherits ComputedStateComponent<ContactLinks.Model>

@{
    var model = State.LatestNonErrorValue;
    var contacts = model.Contacts;
}

<NavbarGroup Title="Contacts" Class="navbar-contacts" Id="contacts">
    <ChildContent>
    @foreach(var (contact, url) in contacts) {
        var encodedUrl = WebUtility.UrlEncode(url);
        <NavbarLink Title="@contact.Name" Url="@($"/direct/{encodedUrl}")" IsOnline="true" />
    }
    </ChildContent>
</NavbarGroup>

@code {
    public class Model
    {
        public (UserContact, string)[] Contacts { get; set; } = new (UserContact, string)[0];
    }

    [Inject] private Session Session { get; set; } = null!;
    [Inject] private IUserContacts Contacts { get; set; } = null!;
    [Inject] private IChatAuthors ChatAuthors { get; set; } = null!;

    protected override ComputedState<Model>.Options GetStateOptions()
        => new() { InitialValue = new () };

    protected override async Task<Model> ComputeState(CancellationToken cancellationToken) {
        var contacts = await Contacts.GetContacts(Session, cancellationToken).ConfigureAwait(false);
        var list = new List<(UserContact, string)>();
        foreach (var contact in contacts.OrderBy(c => c.Name)) {
            string url = contact.Id;
            var isAuthorsPeerChat = contact.TargetUserId.Value.Contains(":");
            if (isAuthorsPeerChat) {
                ActualChat.Chat.ChatAuthor.Parse(contact.TargetUserId.Value, out var chatId, out var localId);
                var chatAuthor = await ChatAuthors.GetChatAuthor(Session, chatId, default);
                ActualChat.Chat.ChatAuthor.Parse(chatAuthor!.Id, out _, out var localId2);
                url = PeerChatExt.CreateAuthorsPeerChatId(chatId, localId, localId2);
            }
            list.Add((contact, url));
        }
        return new () {
            Contacts = list.ToArray(),
        };
    }
}
