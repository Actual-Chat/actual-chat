@namespace ActualChat.Chat.UI.Blazor.Components
@using ActualChat.Chat.UI.Blazor.Module
@inherits ComputedStateComponent<MentionSearchResult[]>
@{
    var mentions = Mentions;
    var listCls = "";
    if (mentions.Length == 0)
        listCls += " hidden";
    var selection = Selection;
}

<div @ref="Ref" class="@Class @listCls mention-list custom-scrollbar">
    @foreach (var mention in mentions) {
        var cls = mention == selection ? "selected" : "";
        var pictureUrl = UrlMapper.PicturePreview128Url(mention.Picture);
        <div class="@cls mention-list-item"
             data-editor-focus="true"
             @onmouseover="@(_ => Selection = mention)"
             @onclick="@(_ => Manager.SelectMention(mention))">
            <div class="flex-x gap-x-2 px-4 items-center h-9">
                <img draggable="false" class="flex-none w-7 h-7 rounded-full" src="@pictureUrl" alt="avatar"/>
                <div class="flex-auto text-ellipsis whitespace-nowrap overflow-hidden text-headline-1 text-02">
                    <SearchMatchHighlighter Match="@mention.SearchMatch"/>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private static readonly string JSCreateMethod = $"{ChatBlazorUIModule.ImportName}.MentionList.create";

    private string? _lastFilter;
    private MentionSearchResult? _selection;
    private DotNetObjectReference<MentionList> BlazorRef { get; set; } = null!;
    private IJSObjectReference JSRef { get; set; } = null!;
    private ElementReference Ref { get; set; }

    [Inject] private IJSRuntime JS { get; init; } = null!;
    [Inject] private UrlMapper UrlMapper { get; init; } = null!;

    [CascadingParameter] public MentionListManager Manager { get; set; } = null!;
    [Parameter] public string Class { get; set; } = "";

    public IMutableState<string?> Filter { get; private set; } = null!;
    public MentionSearchResult[] Mentions => State.Value;
    public MentionSearchResult? Selection {
        get => _selection;
        set {
            if (_selection == value)
                return;
            _selection = FixSelection(value, Mentions);
            StateHasChanged();
        }
    }

    protected override void OnInitialized() {
        Filter = StateFactory.NewMutable(
            (string?)null,
            StateCategories.Get(GetType(), nameof(Filter)));
        base.OnInitialized();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (firstRender) {
            BlazorRef = DotNetObjectReference.Create(this);
            JSRef = await JS.InvokeAsync<IJSObjectReference>(JSCreateMethod, Ref, BlazorRef);
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    protected override ComputedState<MentionSearchResult[]>.Options GetStateOptions()
        => new() {
            InitialValue = Array.Empty<MentionSearchResult>(),
            UpdateDelayer = FixedDelayer.Instant,
            Category = GetStateCategory(),
        };

    protected override async Task<MentionSearchResult[]> ComputeState(CancellationToken cancellationToken) {
        var filter = await Filter.Use(cancellationToken);
        var mentions = filter != null
            ? await Manager.SearchProvider.Find(filter, Manager.Limit, cancellationToken)
            : Array.Empty<MentionSearchResult>();
        _selection = FixSelection(filter == _lastFilter ? _selection : null, mentions);
        _lastFilter = filter;
        return mentions;
    }

    public void MoveSelection(int offset) {
        var mentions = Mentions;
        var selection = FixSelection(_selection, mentions);
        var selectionIndex = Array.IndexOf(mentions, selection) + offset;
        if (selectionIndex < 0 || selectionIndex >= mentions.Length)
            return;
        _selection = mentions[selectionIndex];
        StateHasChanged();
    }

    public override async ValueTask DisposeAsync() {
        await JSRef.DisposeSilentlyAsync("dispose");
        JSRef = null!;
        BlazorRef.DisposeSilently();
        BlazorRef = null!;
        await base.DisposeAsync();
    }

    // Private methods

    private MentionSearchResult? FixSelection(MentionSearchResult? selection, MentionSearchResult[] mentions) {
        if (mentions.Length == 0)
            return null;
        var firstMention = mentions[0];
        selection ??= firstMention;
        return mentions.FirstOrDefault(o => o.MentionId == selection.MentionId) ?? firstMention;
    }
}
