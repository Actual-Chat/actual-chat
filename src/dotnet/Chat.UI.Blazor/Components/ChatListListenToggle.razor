@namespace ActualChat.Chat.UI.Blazor.Components
@inherits ComputedStateComponent<SingleChatPlaybackState>
@{
    var m = State.LatestNonErrorValue;
    var playingHistoricalClass = m.IsPlayingHistorical ? "opacity-60" : "";
    var cls = $"play {(m.IsListening ? "on" : "off")} {playingHistoricalClass} {Class}";
}

<Tooltip Text="@(m.IsListening ? "Unlisten" : "Listen")" Position="TooltipPosition.Top">
    <ButtonRound
        Class="@cls"
        Click="@OnListenClick">
        <i class="icon-listen text-2xl"></i>
    </ButtonRound>
</Tooltip>

@code {
    [Inject] private ChatPlayers ChatPlayers { get; init; } = null!;
    [Inject] private ChatUI ChatUI { get; init; } = null!;

    [Parameter] public string Class { get; set; } = "";
    [Parameter, EditorRequired] public string ChatId { get; set; } = "";

    private void OnListenClick()
        => _ = ChatUI.SetListeningState(ChatId, !State.LatestNonErrorValue.IsListening);

    protected override ComputedState<SingleChatPlaybackState>.Options GetStateOptions()
        => new() {
            InitialValue = SingleChatPlaybackState.None,
            UpdateDelayer = UpdateDelayer.ZeroDelay,
        };

    protected override Task<SingleChatPlaybackState> ComputeState(CancellationToken cancellationToken)
        => ChatUI.GetSingleChatPlaybackState(ChatId, cancellationToken);
}
