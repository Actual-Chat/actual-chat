@namespace ActualChat.Chat.UI.Blazor.Components
@using ActualChat.Kvas
@inherits ComputedStateComponent<PlacePeopleBanner.Model>
@{
    var m = State.Value;
    if (ReferenceEquals(m, Model.Loading))
        return;
}

<Banner
    Class="place-people-banner"
    IsVisible="@m.IsVisible"
    Severity="BannerSeverity.Info"
    ShowDismissButton="@true"
    Dismiss="@OnDismiss">
    <Icon>@* Empty on purpose *@</Icon>
    <Body>"People" tab shows members of this Place you've chatted with.</Body>
</Banner>

@code {
    private IStoredState<bool> _dismissed = null!;

    [Inject] private ChatUIHub Hub { get; init; } = null!;

    private AccountSettings AccountSettings => Hub.AccountSettings();

    protected override void OnInitialized() {
        _dismissed = StateFactory.NewKvasStored<bool>(new(AccountSettings, "PlacePeopleBanner_Dismissed"));
        base.OnInitialized();
    }

    protected override ComputedState<Model>.Options GetStateOptions()
        => new() {
            InitialValue = Model.Loading,
            UpdateDelayer = FixedDelayer.Instant,
            Category = GetStateCategory(),
        };

    protected override async Task<Model> ComputeState(CancellationToken cancellationToken) {
        if (!_dismissed.WhenRead.IsCompleted)
            await _dismissed.WhenRead;
        var dismissed = await _dismissed.Use(cancellationToken);
        return new Model(!dismissed);
    }

    private void OnDismiss()
        => _dismissed.Value = true;

    public sealed record Model(bool IsVisible) {
        public static readonly Model Loading = new(false);
    }
}
