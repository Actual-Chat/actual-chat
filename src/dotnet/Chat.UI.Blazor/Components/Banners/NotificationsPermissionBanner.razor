@namespace ActualChat.Chat.UI.Blazor.Components
@using ActualChat.Notification.UI.Blazor
@using ActualChat.Notification.UI.Blazor.Module
@using ActualChat.Hosting
@using ActualChat.Kvas
@using ActualChat.Notification
@inherits ComputedStateComponent<NotificationsPermissionBanner.Model>
@{
    var m = State.Value;
    if (ReferenceEquals(m, Model.Loading))
        return;

    var isVisible = m is { State: PermissionState.Prompt, IsDismissed: false };
}

@if (isVisible) {
    <RenderIntoSlot Name="PermissionBanner">
        <Banner @key="GetType()" IsVisible="@isVisible" Severity="BannerSeverity.Info" ShowDismissButton="true" Dismiss="OnDismiss">
            <Body>
                Actual Chat can <strong>notify</strong> you about new messages
            </Body>
            <Buttons>
                <Button
                    Class="btn-transparent on"
                    Click="@OnConfigureClick"
                    Rendered="@OnConfigureRendered">Configure</Button>
            </Buttons>
        </Banner>
    </RenderIntoSlot>
}


@code {
    private IStoredState<Moment> _dismissedAt = null!;
    private ILogger? _log = null;

    private ILogger Log => _log ??= Services.LogFor(GetType());

    [Inject] private HostInfo HostInfo { get; init; } = null!;
    [Inject] private Session Session { get; init; } = null!;
    [Inject] private INotificationsPermission NotificationsPermission { get; init; } = null!;
    [Inject] private LocalSettings LocalSettings { get; init; } = null!;
    [Inject] private NotificationUI NotificationUI { get; init; } = null!;
    [Inject] private UICommander UICommander { get; init; } = null!;
    [Inject] private IJSRuntime JS { get; init; } = null!;
    [Inject] private MomentClockSet Clocks { get; init; } = null!;

    protected override void OnInitialized() {
        _dismissedAt = StateFactory.NewKvasStored<Moment>(new (LocalSettings, "Permissions.Notifications.DismissedAt"));
        base.OnInitialized();
    }

    protected override ComputedState<Model>.Options GetStateOptions()
        => new() {
            InitialValue = Model.Loading,
            UpdateDelayer = FixedDelayer.Instant,
            Category = GetStateCategory(),
        };

    protected override async Task<Model> ComputeState(CancellationToken cancellationToken) {
        if (!_dismissedAt.WhenRead.IsCompleted)
            await _dismissedAt.WhenRead
                .WaitAsync(TimeSpan.FromSeconds(3), cancellationToken)
                .SilentAwait();

        var permissionState = await NotificationUI.PermissionState.Use(cancellationToken);
        // Log.LogWarning("ComputeState: {Value} @ #{Hash}", permissionState, NotificationUI.GetHashCode());

        // NOTE(AY): We intentionally don't use IFusionTime here - prob. fine to don't show it back on timer
        var dismissedAt = await _dismissedAt.Use(cancellationToken);
        var dismissPeriod = Clocks.SystemClock.Now - dismissedAt;
        var isDismissed = dismissPeriod < Constants.Notification.PermissionRequestDismissPeriod;
        return new(permissionState, isDismissed);
    }

    // Event handlers

    private void OnDismiss()
        => _dismissedAt.Value = Clocks.SystemClock.Now;

    private Task OnConfigureClick(MouseEventArgs arg)
        => NotificationsPermission.RequestNotificationPermission(CancellationToken.None);

    private Task OnConfigureRendered(ElementReference buttonRef) {
        _ = NotificationUI.RegisterRequestNotificationHandler(buttonRef);
        return Task.CompletedTask;
    }

    // Nested types

    public sealed record Model(
        PermissionState State,
        bool IsDismissed
    ) {
        public static readonly Model Loading = new(PermissionState.Denied, true);
    }
}
