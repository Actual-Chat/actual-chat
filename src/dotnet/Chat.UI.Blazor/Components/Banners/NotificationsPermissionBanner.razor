@namespace ActualChat.Chat.UI.Blazor.Components
@using ActualChat.Notification.UI.Blazor
@using ActualChat.Hosting
@using ActualChat.Kvas
@inherits ComputedStateComponent<NotificationsPermissionBanner.Model>
@{
    var m = State.Value;
    if (ReferenceEquals(m, Model.Loading))
        return;

    var isVisible = m is { IsGranted: not true, IsDismissed: false };
}

@if (isVisible) {
    <RenderIntoSlot Name="PermissionBanner">
        <Banner
            @key="@GetType()"
            IsVisible="@isVisible"
            Severity="BannerSeverity.Info"
            ShowDismissButton="true"
            Dismiss="@OnDismiss">
            <Icon>
                <i class="icon-bell text-2xl"></i>
            </Icon>
            <Body>
                Actual Chat can <strong>notify</strong> you about new messages
            </Body>
            <Buttons>
                <Button
                    Class="btn-transparent unhovered"
                    Click="@OnConfigureClick"
                    Rendered="@OnConfigureRendered">Configure</Button>
            </Buttons>
        </Banner>
    </RenderIntoSlot>
}


@code {
    private IStoredState<Moment> _dismissedAt = null!;
    private ILogger? _log = null;

    [Inject] private ChatUIHub Hub { get; set; } = null!;
    [Inject] private INotificationsPermission NotificationsPermission { get; init; } = null!;
    private HostInfo HostInfo => Hub.HostInfo();
    private Session Session => Hub.Session();
    private LocalSettings LocalSettings => Hub.LocalSettings();
    private MomentClockSet Clocks => Hub.Clocks();
    private NotificationUI NotificationUI => Hub.NotificationUI;
    private UICommander UICommander => Hub.UICommander();
    private IJSRuntime JS => Hub.JSRuntime();
    private ILogger Log => _log ??= Services.LogFor(GetType());

    protected override void OnInitialized()
        => _dismissedAt = StateFactory.NewKvasStored<Moment>(new (LocalSettings, "Permissions.Notifications.DismissedAt"));

    protected override ComputedState<Model>.Options GetStateOptions()
        => ComputedStateComponent.GetStateOptions(GetType(),
            static t => new ComputedState<Model>.Options() {
                InitialValue = Model.Loading,
                UpdateDelayer = FixedDelayer.NextTick,
                Category = ComputedStateComponent.GetStateCategory(t),
            });

    protected override async Task<Model> ComputeState(CancellationToken cancellationToken) {
        if (HostInfo.HostKind.IsMauiApp() && HostInfo.AppKind == AppKind.Windows)
            return new(true, false);

        if (!_dismissedAt.WhenRead.IsCompleted)
            await _dismissedAt.WhenRead
                .WaitAsync(TimeSpan.FromSeconds(3), cancellationToken)
                .SilentAwait();

        var permissionState = await NotificationUI.PermissionState.Use(cancellationToken).ConfigureAwait(false);
        // Log.LogWarning("ComputeState: {Value} @ #{Hash}", permissionState, NotificationUI.GetHashCode());

        // NOTE(AY): We intentionally don't use IFusionTime here - prob. fine to don't show it back on timer
        var dismissedAt = await _dismissedAt.Use(cancellationToken).ConfigureAwait(false);
        var dismissPeriod = Clocks.SystemClock.Now - dismissedAt;
        var isDismissed = dismissPeriod < Constants.Notification.PermissionRequestDismissPeriod;
        return new(permissionState, isDismissed);
    }

    // Event handlers

    private void OnDismiss()
        => _dismissedAt.Value = Clocks.SystemClock.Now;

    private void OnConfigureClick()
        => NotificationsPermission.Request();

    private Task OnConfigureRendered(ElementReference buttonRef) {
        _ = NotificationUI.RegisterRequestNotificationHandler(buttonRef);
        return Task.CompletedTask;
    }

    // Nested types

    public sealed record Model(
        bool? IsGranted,
        bool IsDismissed
    ) {
        public static readonly Model Loading = new(null, true);
    }
}
