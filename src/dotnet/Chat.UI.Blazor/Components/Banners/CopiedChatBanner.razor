@namespace ActualChat.Chat.UI.Blazor.Components
@inherits ComputedStateComponent<CopiedChatBanner.Model>
@{
    var m = State.Value;
    if (!m.IsVisible)
        return;

    var copiedChat = m.CopiedChat!;
}

<Banner Severity="BannerSeverity.Info">
    <Body>
        This chat has been copied to the place.
    </Body>
    <Buttons>
        <Button Class="btn-transparent btn-secondary on" Click="@(() => OnUpdateClick(copiedChat))">Update</Button>
        <Button IsDisabled="@(!copiedChat.IsCopiedSuccessfully)" Class="btn-transparent on" Click="@(() => OnPublishClick(copiedChat))">Publish</Button>
    </Buttons>
</Banner>

@code {
    [Parameter, EditorRequired] public ChatContext ChatContext { get; set; } = null!;

    private ChatUIHub Hub => ChatContext.Hub;
    private Session Session => Hub.Session();
    private IChats Chats => Hub.Chats;
    private UICommander UICommander => Hub.UICommander();
    private ModalUI ModalUI => Hub.ModalUI;
    private ToastUI ToastUI => Hub.ToastUI;

    protected override ComputedState<Model>.Options GetStateOptions()
        => new() {
            InitialValue = Model.Hidden,
            UpdateDelayer = FixedDelayer.Instant,
            Category = GetStateCategory(),
        };

    protected override async Task<Model> ComputeState(CancellationToken cancellationToken) {
        var hasChat = ChatContext.HasChat;
        var chat = ChatContext.Chat;
        if (!hasChat || !chat.Id.IsPlaceChat || !chat.Rules.IsOwner())
            return Model.Hidden;

        var copiedChat = await Chats.GetCopiedChat(Session, chat.Id, cancellationToken).ConfigureAwait(false);
        if (copiedChat == null)
            return Model.Hidden;

        if (copiedChat.IsPublished)
            return Model.Hidden;

        return new Model(true, copiedChat);
    }

    private async Task OnPublishClick(CopiedChat copiedChat) {
        var chatTitle = ChatContext.Chat.Title;
        var message = $"You are about to publish copied chat '{chatTitle}'. Do you want to proceed?";
        await ModalUI.Show(new ConfirmModal.Model(false, message, () => _ = PublishInternal()));

        async Task PublishInternal() {
            var command = new Chat_PublishCopiedChat(Session, copiedChat.Id, copiedChat.SourceChatId);
            var (_, error) = await UICommander.Run(command);
            if (error != null)
                return;
            ToastUI.Show($"Chat '{chatTitle}' was successfully published.", ToastDismissDelay.Long);
        }
    }

    private Task OnUpdateClick(CopiedChat copiedChat) {
        throw new NotImplementedException();
    }

    public sealed record Model(bool IsVisible, CopiedChat? CopiedChat) {
        public static readonly Model Hidden = new (false, null);
    }
}
