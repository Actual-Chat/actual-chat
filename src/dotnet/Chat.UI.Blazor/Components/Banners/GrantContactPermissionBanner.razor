@namespace ActualChat.Chat.UI.Blazor.Components
@using ActualChat.Kvas
@using ActualChat.Contacts.UI.Blazor.Services
@using ActualChat.Permissions
@inherits ComputedStateComponent<GrantContactPermissionBanner.Model>
@{
    var m = State.Value;
    if (ReferenceEquals(m, Model.Loading))
        return;

    var isVisible = m is { IsPermissionGranted: false or null, IsDismissed: false };
}

@if (isVisible) {
    <RenderIntoSlot Name="PermissionBanner">
        <Banner
            @key="GetType()"
            IsVisible="@isVisible"
            Severity="BannerSeverity.Info"
            ShowDismissButton="true"
            Dismiss="OnDismiss">
            <Body>
                Import contacts to find your friends
            </Body>
            <Buttons>
                <Button
                    Class="btn-transparent on"
                    Click="@OnConfigureClick">Configure</Button>
            </Buttons>
        </Banner>
    </RenderIntoSlot>
}

@code {
    private IStoredState<Moment> _dismissedAt = null!;

    [Inject] private LocalSettings LocalSettings { get; init; } = null!;
    [Inject] private DeviceContacts DeviceContacts { get; init; } = null!;
    [Inject] private ContactsPermissionHandler ContactPermissions { get; init; } = null!;
    [Inject] private MomentClockSet Clocks { get; init; } = null!;
    [Inject] private ILogger<GrantContactPermissionBanner> Log { get; init; } = null!;

    protected override void OnInitialized() {
        _dismissedAt = StateFactory.NewKvasStored<Moment>(new(LocalSettings, "ContactPermission_DismissedAt"));
        base.OnInitialized();
    }

    protected override async Task OnInitializedAsync()
        => await ContactPermissions.Check(CancellationToken.None);

    protected override ComputedState<Model>.Options GetStateOptions()
        => new() {
            InitialValue = Model.Loading,
            UpdateDelayer = FixedDelayer.Instant,
            Category = GetStateCategory(),
        };

    protected override async Task<Model> ComputeState(CancellationToken cancellationToken) {
        if (!_dismissedAt.WhenRead.IsCompleted)
            await _dismissedAt.WhenRead;

        var permissionState = await ContactPermissions.Cached.Use(cancellationToken);
        // NOTE(AY): I intentionally don't use IFusionTime here - prob. fine to don't show it back on timer
        var dismissedAt = await _dismissedAt.Use(cancellationToken);
        var dismissPeriod = Clocks.SystemClock.Now - dismissedAt;
        var isDismissed = dismissPeriod < Constants.Contacts.PermissionRequestDismissPeriod;
        return new(permissionState, isDismissed);
    }

    // Event handlers

    private void OnDismiss()
        => _dismissedAt.Value = Clocks.SystemClock.Now;

    private async Task OnConfigureClick(MouseEventArgs e) {
        switch (ContactPermissions.Cached.Value)
        {
            case false:
                await ContactPermissions.OpenSettings();
                break;
            case null:
                await ContactPermissions.CheckOrRequest(true);
                break;
        }
    }

    // Nested types

    public sealed record Model(
        bool? IsPermissionGranted,
        bool IsDismissed
    ) {
        public static readonly Model Loading = new(null, true);
    }
}
