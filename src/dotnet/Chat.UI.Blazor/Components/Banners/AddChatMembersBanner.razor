@namespace ActualChat.Chat.UI.Blazor.Components
@using ActualChat.Contacts
@using ActualChat.Kvas
@inherits ComputedStateComponent<bool>

<Banner
    Class="add-members-banner"
    IsVisible="@State.Value"
    ShowDismissButton="true"
    Dismiss="OnDismiss">
    <Icon>@* Intentionally empty *@</Icon>
    <Body>
        <Button Class="btn-transparent" Click="OnInviteClick">
            <i class="text-2xl icon-person-add"></i>
            Add members
        </Button>
    </Body>
</Banner>

@code {
    private IStoredState<bool> _dismissed = null!;
    private ILogger? _log;

    private Session Session => ChatContext.Hub.Session();
    private Chat Chat => ChatContext.Chat;
    private IRoles Roles => ChatContext.Hub.Roles;
    private IAuthors Authors => ChatContext.Hub.Authors;
    private AccountSettings AccountSettings => ChatContext.Hub.AccountSettings();
    private ChatListUI ChatListUI => ChatContext.Hub.ChatListUI;
    private ModalUI ModalUI => ChatContext.Hub.ModalUI;
    private ILogger Log => _log ??= Services.LogFor(GetType());

    [Parameter, EditorRequired] public ChatContext ChatContext { get; set; } = null!;

    protected override void OnInitialized() {
        var chatId = Chat.Id;
        var key = $"AddChatMembersBanner_Dismissed_{chatId.Value}";
        _dismissed = StateFactory.NewKvasStored<bool>(new(AccountSettings, key));
        base.OnInitialized();
    }

    protected override ComputedState<bool>.Options GetStateOptions()
        => new() {
            InitialValue = false,
            UpdateDelayer = FixedDelayer.Instant,
            Category = GetStateCategory(),
        };

    protected override async Task<bool> ComputeState(CancellationToken cancellationToken) {
        if (!_dismissed.WhenRead.IsCompleted)
            await _dismissed.WhenRead;
        if (!Chat.CanInvite())
            return false;

        var dismissed = await _dismissed.Use(cancellationToken);
        if (dismissed)
            return false;

        var allAuthorIds = await Authors.ListAuthorIds(Session, Chat.Id, cancellationToken);
        if (allAuthorIds.Count > 1)
            return false;
        var ownerIds = await Roles.ListOwnerIds(Session, Chat.Id, cancellationToken);
        var hasRegularMembers = allAuthorIds.Except(ownerIds).Any();
        if (hasRegularMembers)
            return false;
        var peopleContacts = await ChatListUI.ListAllUnordered(ChatListFilter.People, cancellationToken);
        return peopleContacts.Count > 0;
    }

    // Event handlers

    private void OnDismiss()
        => _dismissed.Value = true;

    private void OnInviteClick()
        => ModalUI.Show(new AddMemberModal.Model(Chat.Id));
}
