@using ActualChat.UI.Blazor.Module
@using Stl.Rpc
@namespace ActualChat.UI.Blazor.Components
@inherits StatefulComponentBase<IState<RpcPeerState>>
@{
    var m = State.Value;
    if (m.Kind == RpcPeerStateKind.Connected)
        return;

    _isVisible = m.Kind is RpcPeerStateKind.Disconnected;
    // Services.LogFor(GetType()).LogInformation("State: {State}", m);
}

<Banner Class="reconnect-banner" IsVisible="@_isVisible">
    <Icon>
        <i class="icon-cloud-disconnected"></i>
    </Icon>
    <Body>
        @if (m.Kind == RpcPeerStateKind.JustConnected) {
            <div class="c-main-text">Connected!</div>
        } else { // JustDisconnected or Disconnected
            <div class="c-main-text">Connection lost.</div>
            @if (m.ReconnectsIn == default) {
                <div class="c-secondary-text">Reconnecting...</div>
            } else {
                <div class="c-secondary-text">
                    Will reconnect in
                    <Countdown
                        Class="reconnect-countdown"
                        EndsAt="@(ReconnectUI.Now + m.ReconnectsIn)"
                        Format="{0:mm\:ss}"/>
                </div>
            }
        }
    </Body>
    <Buttons>
        @if (m.ReconnectsIn != default) {
            <Button Class="btn-transparent on" Click="@(_ => ReconnectUI.ReconnectIfDisconnected())">Retry</Button>
        }
    </Buttons>
</Banner>

@code {
    private bool _isVisible = false;

    [Inject] private ReconnectUI ReconnectUI { get; init; } = null!;

    protected override void OnInitialized() {
        State = ReconnectUI.State;
        base.OnInitialized();
    }

    public override ValueTask DisposeAsync()
        => default; // Shouldn't dispose State!
}
