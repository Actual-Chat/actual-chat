@using ActualChat.UI.Blazor.Module
@using Stl.Rpc
@namespace ActualChat.UI.Blazor.Components
@inherits ComputedStateComponent<RpcPeerState?>
@{
    var m = State.Value ?? ReconnectUI.ConnectedState;
    if (m.IsConnected) {
        _isVisible = false;
        return;
    }

    var now = ReconnectUI.Clock.Now;
    var isReconnecting = m.ReconnectsAt <= now;
    if (_isVisible || m.ReconnectsAt > now + TimeSpan.FromSeconds(1))
        _isVisible = true;
}

<Banner Class="reconnect-banner" IsVisible="@_isVisible">
    <Icon>
        <i class="icon-cloud-disconnected"></i>
    </Icon>
    <Body>
        <div class="c-main-text">Connection lost.</div>
        @if (isReconnecting) {
            <div class="c-secondary-text">Reconnecting...</div>
        } else {
            <div class="c-secondary-text">
                Will reconnect in
                <Countdown Class="reconnect-countdown" EndsAt="@(m.ReconnectsAt + TimeSpan.FromSeconds(1))" Format="{0:mm\:ss}"/>
            </div>

        }
    </Body>
    <Buttons>
        @if (!isReconnecting) {
            <Button Class="btn-transparent on" Click="@(_ => ReconnectUI.ReconnectIfDisconnected())">Retry</Button>
        }
    </Buttons>
</Banner>

@code {
    private bool _isVisible = false;

    [Inject] private ReconnectUI ReconnectUI { get; init; } = null!;

    protected override ComputedState<RpcPeerState?>.Options GetStateOptions()
        => new() {
            UpdateDelayer = FixedDelayer.Instant,
            Category = GetStateCategory(),
        };

    protected override async Task<RpcPeerState?> ComputeState(CancellationToken cancellationToken)
    {
        try {
            return await ReconnectUI.UseState(cancellationToken);
        }
        catch (Exception e) when (e is not OperationCanceledException) {
            return null;
        }
    }
}
