@using ActualChat.UI.Blazor.Module
@using Stl.Rpc
@namespace ActualChat.UI.Blazor.Components
@inherits ComputedStateComponent<RpcPeerState?>
@{
    var m = State.Value ?? DefaultState;
    var isReconnecting = !m.IsConnected && m.ReconnectsAt <= Clock.Now;
}

<Banner Class="reconnect-banner" IsVisible="@(!m.IsConnected)">
    <Icon>
        <i class="icon-cloud-disconnected"></i>
    </Icon>
    <Body>
        <div class="c-main-text">Connection lost.</div>
        @if (isReconnecting) {
            <div>Reconnecting...</div>
        } else {
            <div class="c-secondary-text">
                Will reconnect in
                <Countdown Class="reconnect-countdown" EndsAt="@(m.ReconnectsAt + TimeSpan.FromSeconds(1))" Format="{0:mm\:ss}"/>
            </div>

        }
    </Body>
    <Buttons>
        @if (!isReconnecting) {
            <Button Class="btn-transparent on" Click="@(_ => ReconnectDelayer.CancelDelays())">Retry</Button>
        }
    </Buttons>
</Banner>

@code {
    private static readonly RpcPeerState DefaultState = new(true);

    private RpcPeerStateMonitor? _monitor;

    [Inject] private RpcClientPeerReconnectDelayer ReconnectDelayer { get; init; } = null!;
    private IMomentClock Clock => ReconnectDelayer.Clock;

    protected override void OnInitialized()
    {
        _monitor = Services.GetService<RpcPeerStateMonitor>();
        base.OnInitialized();
    }

    protected override ComputedState<RpcPeerState?>.Options GetStateOptions()
        => new() {
            UpdateDelayer = FixedDelayer.Instant,
            Category = GetStateCategory(),
        };

    protected override async Task<RpcPeerState?> ComputeState(CancellationToken cancellationToken)
    {
        try {
            return _monitor == null ? null
                : await _monitor.State.Use(cancellationToken).ConfigureAwait(false);
        }
        catch (Exception e) when (e is not OperationCanceledException) {
            return null;
        }
    }
}
