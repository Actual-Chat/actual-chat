@namespace ActualChat.Chat.UI.Blazor.Components
@using ActualChat.Notification.UI.Blazor
@using ActualChat.Notification.UI.Blazor.Module
@using ActualChat.Hosting
@inherits ComputedStateComponent<GrantNotificationPermissionBanner.Model>
@{
    var m = State.Value;
}
<Banner IsVisible="m.State==PermissionState.Prompt" Severity="BannerSeverity.Info">
    <Body>
    Actual Chat can notify you about new messages
    </Body>
    <Buttons>
        <Button @ref="_configureButton" Class="btn-transparent on">Configure</Button>
    </Buttons>
</Banner>

@code {
    private Button? _configureButton = null!;
    private bool _hasHandlerRegistered;

    [Inject] private Session Session { get; init; } = null!;
    [Inject] private NotificationUI NotificationUI { get; init; } = null!;
    [Inject] private UICommander UICommander { get; init; } = null!;
    [Inject] private IJSRuntime JS { get; init; } = null!;
    [Inject] private HostInfo HostInfo { get; init; } = null!;

    [CascadingParameter] public Chat Chat { get; set; } = null!;

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (HostInfo.AppKind == AppKind.Maui)
            return;

        if (_hasHandlerRegistered)
            return;

        // it can be null if state is not Prompt
        if (_configureButton == null)
            return;

        await JS.InvokeVoidAsync(
            $"{NotificationBlazorUIModule.ImportName}.NotificationUI.registerRequestNotificationHandler",
            _configureButton.ButtonRef
            );
        _hasHandlerRegistered = true;
    }

    protected override ComputedState<Model>.Options GetStateOptions()
        => new() { InitialValue = Model.None };

    protected override async Task<Model> ComputeState(CancellationToken cancellationToken) {
        var permissionState = await NotificationUI.State.Use(cancellationToken);
        return new(permissionState);
    }

    public sealed record Model(PermissionState State) {
        public  static readonly Model None = new(PermissionState.Denied);
    }
}
