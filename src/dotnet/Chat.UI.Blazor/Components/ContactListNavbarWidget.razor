@using System.Net
@inherits ComputedStateComponent<ContactListNavbarWidget.Model>
@{
    var m = State.LatestNonErrorValue;
    var contacts = m.Contacts;
}

<NavbarGroup Title="Contacts" Class="navbar-contacts" Id="contacts">
    <ChildContent>
        @foreach(var contact in contacts) {
            var peerChatId = PeerChatExt.CreateShortPeerChatId(contact.UserContact.TargetUserId);
            <NavbarItem Url="@($"/chat/{peerChatId.UrlEncode()}")" IsOnline="@contact.IsOnline">@contact.UserContact.Name</NavbarItem>
        }
    </ChildContent>
</NavbarGroup>

@code {
    [Inject] private Session Session { get; init; } = null!;
    [Inject] private IUserContacts Contacts { get; init; } = null!;
    [Inject] private IUserPresences UserPresences { get; init; } = null!;

    protected override ComputedState<Model>.Options GetStateOptions()
        => new() { InitialValue = Model.None };

    protected override async Task<Model> ComputeState(CancellationToken cancellationToken) {
        var userContacts = await Contacts.GetAll(Session, cancellationToken).ConfigureAwait(false);
        var resolvePresence = userContacts
            .Select(async userContact => {
                var presence = await UserPresences.Get(userContact.TargetUserId, cancellationToken).ConfigureAwait(false);
                return new Contact(
                    userContact,
                    presence is Presence.Online or Presence.Recording
                );
            })
            .ToArray();
        var contacts = await Task.WhenAll(resolvePresence).ConfigureAwait(false);

        return new () {
            Contacts = contacts.OrderBy(c => c.UserContact.Name).ToArray(),
        };
    }

    public sealed record Model {
        public static Model None { get; } = new();

        public Contact[] Contacts { get; init; } = Array.Empty<Contact>();
    }

    public sealed record Contact(UserContact UserContact, bool IsOnline);
}
