@inherits ComputedStateComponent<ContactListNavbarWidget.Model>
@{
    var m = State.LatestNonErrorValue ?? Model.None;
    var mustPlayPinned = m.MustPlayPinned;
    var isPlaying = mustPlayPinned && m.IsPlaying;
    var mustPlayPinnedClass = "pin-toggle play-pinned"
        + (mustPlayPinned ? "" : " opacity-50")
        + (isPlaying ? " on" : mustPlayPinned ? "" : " off");

    RenderFragment RenderItem(ContactModel c) =>
        @<NavbarItem
             Url="@($"/chat/{c.ShortChatId.UrlEncode()}")"
             IsOnline="@c.IsOnline"
             IsActive="@(m.ActiveChatId == c.ShortChatId || m.ActiveChatId == c.FullChatId)">
            <ChildContent>@c.Contact.Name</ChildContent>
            <Ending>
                <ChatListPinToggle ChatId="@c.FullChatId"/>
                <ChatListRecordingToggle ChatId="@c.FullChatId"/>
            </Ending>
        </NavbarItem>;
}

<NavbarGroup Title="Contacts" Class="navbar-contacts" Id="contacts">
    <ChildContent>
        @if (m.PinnedContacts.Length > 0) {
            <NavbarSubgroup Class="first">
                <ChildContent>Pinned</ChildContent>
                <Ending>
                    <ButtonSquare
                        Class="@mustPlayPinnedClass"
                        Click="@(() => ChatUI.MustPlayPinnedContactChats.Value = !mustPlayPinned)"
                        Title="When listening, also listen all pinned contact chats">
                        <svg class="fill-current w-5 h-5" xmlns="http://www.w3.org/2000/svg" viewBox="-4 -4 32 32">
                            @if (mustPlayPinned) {
                                <path d="M 0 24 C 0 17.021 7.555 12.66 13.599 16.149 C 16.403 17.768 18.131 20.762 18.131 24 L 0 24 Z M 9.065 13.802 C 5.309 13.802 2.266 10.759 2.266 7.002 C 2.266 3.246 5.309 0.203 9.065 0.203 C 12.823 0.203 15.864 3.246 15.864 7.002 C 15.864 10.759 12.823 13.802 9.065 13.802 Z M 19.543 2.678 C 20.109 4.049 20.399 5.518 20.398 7.002 C 20.399 8.485 20.109 9.955 19.543 11.326 L 17.643 9.944 C 17.967 8.997 18.132 8.003 18.131 7.002 C 18.133 6.002 17.968 5.007 17.644 4.06 L 19.543 2.678 Z M 23.285 -0.042 C 24.371 2.147 24.934 4.559 24.93 7.002 C 24.93 9.533 24.338 11.925 23.285 14.047 L 21.42 12.691 C 22.242 10.907 22.667 8.966 22.664 7.002 C 22.664 4.971 22.219 3.044 21.42 1.313 L 23.285 -0.042 Z" style=""></path>
                            } else {
                                <path d="M 23.285 -0.042 C 24.371 2.1470000000000002 24.934 4.559 24.93 7.002 C 24.93 9.533 24.338 11.925 23.285 14.047 L 21.42 12.691 C 22.242 10.907 22.667 8.966 22.664 7.002 C 22.664 4.971 22.219 3.044 21.42 1.313 L 23.285 -0.042 Z M 19.543 2.678 C 20.109 4.049 20.399 5.518 20.398 7.002 C 20.399 8.485 20.109 9.955 19.543 11.326 L 17.643 9.944 C 17.967 8.997 18.132 8.003 18.131 7.002 C 18.133 6.002 17.968 5.007 17.644 4.06 L 19.543 2.678 Z M 9.065 13.802 C 5.309 13.802 2.266 10.759 2.266 7.002 C 2.266 3.246 5.309 0.203 9.065 0.203 C 12.823 0.203 15.864 3.246 15.864 7.002 C 15.864 10.759 12.823 13.802 9.065 13.802 Z M 11.428 15.146 L 11.428 24 L 0 24 C -0.001 18.022 5.639 13.651 11.428 15.146 Z M 9.142 13.714 C 5.355 13.714 2.286 10.645 2.286 6.8580000000000005 C 2.286 3.069 5.355 0 9.142 0 C 12.931000000000001 0 15.999 3.069 15.999 6.8580000000000005 C 15.999 10.645 12.931000000000001 13.714 9.142 13.714 Z M 15.999 18.286 L 15.999 14.857 L 18.284 14.857 L 18.284 18.286 L 21.713 18.286 L 21.713 20.571 L 18.284 20.571 L 18.284 24 L 15.999 24 L 15.999 20.571 L 12.571 20.571 L 12.571 18.286 L 15.999 18.286 Z" style=""></path>
                            }
                        </svg>
                    </ButtonSquare>
                </Ending>
            </NavbarSubgroup>
            foreach (var c in m.PinnedContacts)
                @RenderItem(c)
            if (m.UnpinnedContacts.Length > 0) {
                <NavbarSubgroup>Unpinned</NavbarSubgroup>
                foreach (var c in m.UnpinnedContacts)
                    @RenderItem(c)
            }
        } else {
            foreach (var c in m.UnpinnedContacts)
                @RenderItem(c)
        }
    </ChildContent>
</NavbarGroup>

@code {
    [Inject] private Session Session { get; init; } = null!;
    [Inject] private IUserContacts Contacts { get; init; } = null!;
    [Inject] private IUserPresences UserPresences { get; init; } = null!;
    [Inject] private ChatUI ChatUI { get; init; } = null!;

    protected override ComputedState<Model>.Options GetStateOptions()
        => new() {
            InitialValue = Model.None,
            UpdateDelayer = UpdateDelayer.MinDelay,
        };

    protected override async Task<Model> ComputeState(CancellationToken cancellationToken) {
        var userContacts = await Contacts.GetAll(Session, cancellationToken).ConfigureAwait(false);
        var contactTasks = userContacts
            .Select(async userContact => {
                var presence = await UserPresences.Get(userContact.TargetUserId, cancellationToken).ConfigureAwait(false);
                return new ContactModel(userContact) {
                    IsOnline = presence is Presence.Online or Presence.Recording,
                    FullChatId = ChatId.FormatFullPeerChatId(userContact.OwnerUserId, userContact.TargetUserId),
                    ShortChatId = ChatId.FormatShortPeerChatId(userContact.TargetUserId),
                };
            });
        var contacts = await Task.WhenAll(contactTasks).ConfigureAwait(false);

        var pinnedChatIds = await ChatUI.PinnedChatIds.Use(cancellationToken).ConfigureAwait(false);
        var pinnedContacts = contacts
            .Where(c => pinnedChatIds.Contains(c.FullChatId))
            .OrderBy(c => c.Contact.Name)
            .ToArray();
        var unpinnedContacts = contacts
            .Where(c => !pinnedChatIds.Contains(c.FullChatId))
            .OrderBy(c => c.Contact.Name)
            .ToArray();

        var activeChatId = await ChatUI.ActiveChatId.Use(cancellationToken).ConfigureAwait(false);
        var isPlaying = await ChatUI.IsPlaying.Use(cancellationToken).ConfigureAwait(false);
        var mustPlayPinned = await ChatUI.MustPlayPinnedContactChats.Use(cancellationToken).ConfigureAwait(false);

        return new Model() {
            PinnedContacts = pinnedContacts,
            UnpinnedContacts = unpinnedContacts,
            ActiveChatId = activeChatId,
            IsPlaying = isPlaying,
            MustPlayPinned = mustPlayPinned,
        };
    }

    public sealed record Model {
        public static Model None { get; } = new();

        public ContactModel[] PinnedContacts { get; init; } = Array.Empty<ContactModel>();
        public ContactModel[] UnpinnedContacts { get; init; } = Array.Empty<ContactModel>();
        public Symbol ActiveChatId { get; init; }
        public bool IsPlaying { get; init; }
        public bool MustPlayPinned { get; init; }
    }

    public sealed record ContactModel(UserContact Contact) {
        public string FullChatId { get; init; } = "";
        public string ShortChatId { get; init; } = "";
        public bool IsOnline { get; init; }
    };
}
