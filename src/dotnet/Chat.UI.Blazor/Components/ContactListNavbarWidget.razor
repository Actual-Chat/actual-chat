@using ActualChat.Users.UI.Blazor.Services
@inherits ComputedStateComponent<ContactListNavbarWidget.Model>
@{
    var m = State.LatestNonErrorValue;

    RenderFragment RenderTab(TabId tabId, string title) =>
        @<Tab
             Title="@title" Id="@tabId.ToString()"
             Class="flex-y self-start relative overflow-y-auto custom-scrollbar h-full contacts-tab">
            <div class="h-full flex-y my-2">
                <ContactList Contacts="m.PinnedContacts" Kind="ContactListKind.Pinned"/>
                <ContactList Contacts="m.UnpinnedContacts" Kind="ContactListKind.Unpinned"/>
            </div>
        </Tab>;
}

<NavbarGroup Title="Contacts" Class="navbar-contacts" Id="@NavbarGroupId">
    <ChildContent>
        <div class="-flex-y w-full h-full">
            <ActiveChatsNavbarWidget/>

            <TabPanel
                BottomHill="true"
                Class="overflow-y-hidden"
                TabsClass="left-panel-tabs"
                ActiveTabChanged="OnActiveTabChanged">

                @RenderTab(TabId.Recent, "Recent")
                @RenderTab(TabId.All, "A-Z")
                @* @RenderTab(ContactTab.Favorites, "Favorites") *@
            </TabPanel>
        </div>
        <ContactMenu/>
    </ChildContent>
</NavbarGroup>

@code {
    public const string NavbarGroupId = "contacts";
    private TabId _activeTabId;

    [Inject] private Session Session { get; init; } = null!;
    [Inject] private IAccounts Accounts { get; init; } = null!;
    [Inject] private IUserContacts Contacts { get; init; } = null!;
    [Inject] private ChatUI ChatUI { get; init; } = null!;
    [Inject] private SearchUI SearchUI { get; init; } = null!;
    [Inject] private IRecentEntries RecentEntries { get; init; } = null!;

    protected override ComputedState<Model>.Options GetStateOptions()
        => new() {
            InitialValue = Model.None,
            UpdateDelayer = FixedDelayer.Instant,
        };

    protected override async Task<Model> ComputeState(CancellationToken cancellationToken) {
        var account = await Accounts.Get(Session, cancellationToken).ConfigureAwait(false);
        if (!account.IsActive())
            return Model.None;

        var contacts = await ListContacts(_activeTabId, cancellationToken).ConfigureAwait(false);

        var searchPhrase = await SearchUI.GetSearchPhrase(cancellationToken).ConfigureAwait(false);
        if (!searchPhrase.IsEmpty) {
            var activeChatId = await ChatUI.ActiveChatId.Use(cancellationToken);
            var activeContactId = GetActiveContactId(activeChatId);
            contacts = (
                from contact in contacts
                let rank = searchPhrase.GetMatchRank(contact.Name)
                where rank > 0 || contact.TargetUserId == activeContactId
                orderby rank descending
                select contact
                ).ToList();
        }

        var pinnedChatIds = await ChatUI.PinnedChatIds.Use(cancellationToken).ConfigureAwait(false);
        var pinnedContacts = contacts
            .Where(c => pinnedChatIds.ContainsKey(c.GetFullPeerChatId()))
            .ToList();
        var unpinnedContacts = contacts
            .Where(c => !pinnedChatIds.ContainsKey(c.GetFullPeerChatId()))
            .ToList();

        return new Model {
            PinnedContacts = pinnedContacts,
            UnpinnedContacts = unpinnedContacts,
        };

        Symbol GetActiveContactId(string activeChatId) {
            var targetUserId = ParsedChatId.TryParse(activeChatId, out var parsedChatId)
                ? parsedChatId.GetPeerChatTargetUserId(account.User.Id)
                : Symbol.Empty;
            return contacts.All(c => c.TargetUserId != targetUserId)
                ? Symbol.Empty
                : // No active contact in the current group
                targetUserId;
        }
    }

    private async Task<List<UserContact>> ListContacts(TabId tabId, CancellationToken cancellationToken) {
        var contacts = await Contacts.List(Session, cancellationToken);
        return tabId switch {
            TabId.All => contacts.ToList(),
            TabId.Favorites => contacts.Where(x => x.IsFavorite).ToList(),
            TabId.Recent => await RecentEntries
                .OrderByRecency(Session, contacts, RecencyScope.UserContact, Constants.Contact.MaxRecentContacts, cancellationToken)
                .ConfigureAwait(false),
            _ => throw new ArgumentOutOfRangeException(nameof(tabId)),
        };
    }

    private void OnActiveTabChanged(Tab? tab) {
        if (!Enum.TryParse(tab?.Id ?? "", out _activeTabId))
            _activeTabId = default;
        _ = State.Recompute();
    }

    public enum TabId {
        Recent,
        All,
        Favorites,
    }

    public sealed record Model {
        public static Model None { get; } = new() {
            PinnedContacts = new List<UserContact>(),
            UnpinnedContacts = new List<UserContact>(),
        };

        public List<UserContact> PinnedContacts { get; init; } = null!;
        public List<UserContact> UnpinnedContacts { get; init; } = null!;
    }
}
