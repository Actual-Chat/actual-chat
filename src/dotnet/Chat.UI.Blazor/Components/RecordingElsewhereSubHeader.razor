@inherits ComputedStateComponent<RecordingElsewhereSubHeader.Model>
@namespace ActualChat.Chat.UI.Blazor.Components
@using ActualChat.Chat.UI.Blazor.Services
@using ActualChat.MediaPlayback
@{
    var m = State.ValueOrDefault;
    if (m?.RecordingChat == null)
        return;
}

<div class="recording-elsewhere-sub-header">
    <div class="recording-elsewhere-sub-header-content">
        <div class="c-icons">
            <i class="icon-mic text-2xl"></i>
        </div>
        <div class="c-text shrink-0">
            Recording is on in
        </div>
        <a class="inline-block c-text truncate" href="@m.RecordingChatUrl">"@(m.RecordingChat.Title)"</a>
        <div class="c-text">chat!</div>
    </div>
</div>

@code {
    [Inject] private Session Session { get; init; } = null!;
    [Inject] private IAccounts Accounts { get; init; } = null!;
    [Inject] private IChats Chats { get; init; } = null!;
    [Inject] private ChatUI ChatUI { get; init; } = null!;

    [CascadingParameter] public Chat Chat { get; set; } = null!;

    protected override ComputedState<Model>.Options GetStateOptions()
        => new() {
            InitialValue = Model.None,
            UpdateDelayer = UpdateDelayer.Instant,
        };

    protected override async Task<Model> ComputeState(CancellationToken cancellationToken) {
        if (await ChatUI.IsRecording(Chat.Id))
            return Model.None;

        var recordingChatId = await ChatUI.RecordingChatId.Use(cancellationToken).ConfigureAwait(false);
        var recordingChat = await Chats.Get(Session, recordingChatId, cancellationToken).ConfigureAwait(false);
        if (recordingChat == null)
            return Model.None;

        if (recordingChat.ChatType == ChatType.Group)
            return new Model {
                RecordingChat = recordingChat,
                RecordingChatUrl = Links.ChatPage(recordingChat.Id),
            };

        var account = await Accounts.Get(Session, cancellationToken).ConfigureAwait(false);
        if (account == null)
            return Model.None;

        var parsedChatId = new ParsedChatId(recordingChat.Id);
        return new Model {
            RecordingChat = recordingChat,
            RecordingChatUrl = Links.ChatPage(parsedChatId.Shorten(account.Id)),
        };
    }

    private void OnStop()
        => _ = ChatUI.SetRecordingState(Symbol.Empty);

    public sealed record Model {
        public static Model None { get; } = new();

        public Chat? RecordingChat { get; init; }
        public string? RecordingChatUrl { get; init; }
    }
}
