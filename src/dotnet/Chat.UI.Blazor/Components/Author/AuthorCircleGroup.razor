@namespace ActualChat.Chat.UI.Blazor.Components
@{
    var authorIds = AuthorIds;
    if (authorIds.Length == 0)
        return;
    var maxLength = MaxIconCount > authorIds.Length ? authorIds.Length : MaxIconCount;
}

<div class="author-circle-group @Class">
    @{
        var zIndex = 1;
        for (var i = 0; i < maxLength; i++) {
            var authorId = authorIds[i];
            <div class="author-circle-group-item" style="z-index: @zIndex;">
                <AuthorCircle Id="@authorId" Size="@Size" />
            </div>
            zIndex++;
        }
        if (authorIds.Length > MaxIconCount) {
            <div class="author-circle-group-item" style="z-index: @(maxLength + 1);">
                @{
                    var avatarText = authorIds.Length < 11
                        ? "+" + (authorIds.Length - MaxIconCount)
                        : "...";
                }
                <AvatarText Size="@Size" Text="@avatarText" />
            </div>
        }
    }
</div>

@code {
    [Inject] private IAuthors Authors { get; init; } = null!;
    [Inject] private ChatActivity ChatActivity { get; init; } = null!;

    private IChatRecordingActivity? ChatRecordingActivity { get; set; }

    [Parameter] public string Class { get; set; } = "";
    [Parameter] public int MaxIconCount { get; set; } = 5;
    [Parameter] public SquareSize Size { get; set; } = SquareSize.Size6;
    [Parameter] public ImmutableArray<Symbol> AuthorIds { get; set; }
}
