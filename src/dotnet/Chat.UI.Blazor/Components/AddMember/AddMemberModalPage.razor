@namespace ActualChat.Chat.UI.Blazor.Components
@inherits FusionComponentBase
@implements IDisposable

<FormBlock>
    <MemberSelector
        @ref="_memberSelector"
        DataProvider="@_backend"
        Changed="OnSelectionChanged" />
</FormBlock>

@code {
    private DialogButtonInfo _submitButtonInfo = null!;
    private IMemberSelector _backend = null!;
    private MemberSelector? _memberSelector;

    private CancellationTokenSource DisposeTokenSource { get; set; } = null!;
    private CancellationToken DisposeToken { get; set; }
    private bool CanInvite {
        set => _submitButtonInfo.CanExecute = value;
    }
    private IReadOnlySet<UserId> SelectedUserIds
        => _memberSelector?.SelectedUserIds.Value ?? ImmutableHashSet<UserId>.Empty;

    [Inject] private ChatUIHub Hub { get; init; } = null!;
    [CascadingParameter] public DiveInModalPageContext Context { get; set; } = null!;

    protected override void OnInitialized() {
        DisposeTokenSource = new();
        DisposeToken = DisposeTokenSource.Token;

        _submitButtonInfo = DialogButtonInfo.CreateSubmitButton("Add", OnAdd);
        _submitButtonInfo.CanExecute = false;
        if (Context.Model is ChatId chatId)
            _backend = new NewChatMemberSelector(Hub, chatId);
        else if (Context.Model is PlaceId placeId)
            _backend = new NewPlaceMemberSelector(Hub, placeId);
        else
            throw StandardError.NotSupported("Not supported model type");
        Context.SetTitle("Add members");
        Context.SetClass("add-member-modal-content");
        Context.RegisterButtons(DialogButtonInfo.CancelButton, _submitButtonInfo);
    }

    public void Dispose()
        => DisposeTokenSource.CancelAndDisposeSilently();

    private async Task OnAdd() {
        CanInvite = false;

        var userIds = SelectedUserIds.ToArray();
        var error = await _backend.Invite(userIds, DisposeToken);
        if (error != null)
            return;

        OnCancel();
    }

    private void OnCancel()
        => Context.Close();

    private void OnSelectionChanged()
        => CanInvite = SelectedUserIds.Count > 0;
}
