@namespace ActualChat.Chat.UI.Blazor.Components
@inherits ComputedStateComponent<AuthorRules>
@{
    var m = State.Value;
}

<div class="flex-x px-2 md:pl-5 md:pr-2 min-h-14 border-b border-bg-04">
    <ButtonRound Click="OnHideRightPanelClick" Class="md:!hidden transparent">
        <i class="icon-arrow-left text-2xl"></i>
    </ButtonRound>
    <div class="flex grow text-02 text-title-1 self-center">Chat Settings</div>
    @if (m.CanEditProperties()) {
        <ButtonRound
            Class="transparent"
            Click="@OnEditChatSettingsClick"
            Tooltip="Edit"
            TooltipPosition="FloatingPosition.Bottom">
            <i class="icon-edit text-2xl"></i>
        </ButtonRound>
    }
</div>

@code {
    [Inject] private FeedbackUI FeedbackUI { get; init; } = null!;
    [Inject] private RightPanelUI RightPanelUI { get; init; } = null!;
    [Inject] private Session Session { get; init; } = null!;
    [Inject] private IChats Chats { get; init; } = null!;
    [Inject] private ModalUI ModalUI { get; init; } = null!;

    [CascadingParameter] public Chat Chat { get; set; } = null!;

    protected override ComputedState<AuthorRules>.Options GetStateOptions()
        => new() {
            InitialValue = AuthorRules.None(Chat.Id),
            UpdateDelayer = FixedDelayer.Instant,
        };

    protected override Task<AuthorRules> ComputeState(CancellationToken cancellationToken)
        => Chats.GetRules(Session, Chat.Id, default);

    private void OnHideRightPanelClick()
        => RightPanelUI.ChangeVisibility(false);

    private Task OnEditChatSettingsClick()
        => ModalUI.Show(new ChatSettingsModal.Model(Chat));
}
