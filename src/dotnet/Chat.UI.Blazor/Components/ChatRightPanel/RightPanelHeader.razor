@namespace ActualChat.Chat.UI.Blazor.Components
@inherits ComputedStateComponent<AuthorRules>
@{
    var m = State.Value;
}

<div class="c-header">
    <HeaderButton Click="OnHideRightPanelClick" Class="md:!hidden">
        <i class="icon-arrow-left"></i>
    </HeaderButton>
    <div class="c-center">
        <div class="c-title">Chat Settings</div>
        @if (m.CanEditProperties()) {
            <HeaderButton
                Click="@OnEditChatSettingsClick"
                Tooltip="Edit"
                TooltipPosition="FloatingPosition.Bottom">
                <i class="icon-edit"></i>
            </HeaderButton>
        }
    </div>
    <HeaderButton Click="OnHideRightPanelClick" Class="!hidden md:!flex">
        <i class="icon-layout"></i>
    </HeaderButton>
</div>

@code {
    private Session Session => ChatContext.Session;
    private Chat Chat => ChatContext.Chat;
    private IChats Chats => ChatContext.Chats;
    private FeedbackUI FeedbackUI => ChatContext.FeedbackUI;
    private PanelsUI PanelsUI => ChatContext.PanelsUI;
    private ModalUI ModalUI => ChatContext.ModalUI;

    [Parameter, EditorRequired] public ChatContext ChatContext { get; set; } = null!;

    protected override ComputedState<AuthorRules>.Options GetStateOptions()
        => new() {
            InitialValue = AuthorRules.None(Chat.Id),
            UpdateDelayer = FixedDelayer.Instant,
            Category = GetStateCategory(),
        };

    protected override Task<AuthorRules> ComputeState(CancellationToken cancellationToken)
        => Chats.GetRules(Session, Chat.Id, default);

    private void OnHideRightPanelClick()
        => PanelsUI.Right.SetIsVisible(false);

    private Task OnEditChatSettingsClick()
        => ModalUI.Show(new ChatSettingsModal.Model(Chat.Id));
}
