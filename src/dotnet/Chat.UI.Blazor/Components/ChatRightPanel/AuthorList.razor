@namespace ActualChat.Chat.UI.Blazor.Components
@using ActualChat.Chat.UI.Blazor.Module
@using ActualChat.UI.Blazor.Events
@inherits ComputedStateComponent<AuthorList.Model>
@{
    var m = State.LatestNonErrorValue;
}

<div class="flex flex-col w-full h-full px-5 py-3 people-tab">
    <div class="flex-auto flex-y gap-y-1">
        <div class="text-02">Active — @m.ActiveAuthorIds.Length</div>
        @foreach (var authorId in m.ActiveAuthorIds) {
            @if (authorId == _ownAuthor?.Id) {
                <AuthorBadge
                    AuthorId="@authorId"
                    ShowsPresence="true"
                    Click="OnSelfClick"
                    TextClass="font-medium text-02 select-none"/>
            } else {
                <AuthorBadge
                    AuthorId="@authorId"
                    ShowsPresence="true"
                    Click="() => OnAuthorClick(Chat.Id, authorId)"
                    TextClass="font-medium text-02 select-none"/>
            }
        }
        <div class="text-02">Offline — @m.OfflineAuthorIds.Length</div>
        @foreach (var authorId in m.OfflineAuthorIds) {
            <AuthorBadge
                AuthorId="@authorId"
                ShowsPresence="true"
                Click="() => OnAuthorClick(Chat.Id, authorId)"
                TextClass="font-medium text-02 select-none"/>
        }
    </div>
</div>

@code {
    [Inject] private IAuthors Authors { get; init; } = null!;
    [Inject] private Session Session { get; init; } = null!;
    [Inject] private ModalUI ModalUI { get; init; } = null!;
    [Inject] private UIEventHub UIEventHub { get; init; } = null!;

    [CascadingParameter] public Chat Chat { get; set; } = null!;

    private AuthorFull? _ownAuthor;

    protected override ComputedState<Model>.Options GetStateOptions()
        => new() { InitialValue = Model.None };

    protected override async Task<Model> ComputeState(CancellationToken cancellationToken) {
        var allAuthorIds = await Authors.ListAuthorIds(Session, Chat.Id, cancellationToken);
        _ownAuthor = await Authors.GetOwn(Session, Chat.Id, cancellationToken);
        var activeAuthorIds = new List<Symbol>();
        var inactiveAuthorIds = new List<Symbol>();
        var presences = await allAuthorIds
            .Select(async authorId => {
                var presence = await Authors.GetAuthorPresence(Session, Chat.Id, authorId, cancellationToken).ConfigureAwait(false);
                return (authorId, presence);
            })
            .Collect();
        foreach (var (authorId, presence) in presences) {
            if (presence is Presence.Online or Presence.Recording) {
                activeAuthorIds.Add(authorId);
            } else {
                inactiveAuthorIds.Add(authorId);
            }
        }

        return new() {
            ActiveAuthorIds = activeAuthorIds.ToImmutableArray(),
            OfflineAuthorIds = inactiveAuthorIds.ToImmutableArray(),
        };
    }

    private void OnAuthorClick(Symbol chatId, Symbol authorId)
        => ModalUI.Show(new AuthorModal.Model(chatId, authorId));

    private void OnSelfClick()
        => _ = UIEventHub.Publish(new ShowSettingsEvent());

    public sealed class Model {
        public static Model None { get; } = new();
        public ImmutableArray<Symbol> ActiveAuthorIds { get; init; } = ImmutableArray<Symbol>.Empty;
        public ImmutableArray<Symbol> OfflineAuthorIds { get; init; } = ImmutableArray<Symbol>.Empty;
    }
}
