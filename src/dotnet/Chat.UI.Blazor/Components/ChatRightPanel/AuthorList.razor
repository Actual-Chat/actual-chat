@namespace ActualChat.Chat.UI.Blazor.Components
@using ActualChat.Chat.UI.Blazor.Module
@using ActualChat.UI.Blazor.Events
@inherits ComputedStateComponent<AuthorList.Model>
@{
    var m = State.Value;
}

<div class="author-list-tab">
    <div class="c-content">
        <div class="c-group-title">Online — @m.OnlineAuthorIds.Count</div>
        @foreach (var authorId in m.OnlineAuthorIds) {
            <AuthorBadge
                @key="@authorId"
                AuthorSid="@authorId"
                ShowPresence="true"
                Click="@(_ => AuthorUI.Show(authorId))"/>
        }
        <div class="c-group-title">Offline — @m.OfflineAuthorIds.Count</div>
        @foreach (var authorId in m.OfflineAuthorIds) {
            <AuthorBadge
                @key="@authorId"
                AuthorSid="@authorId"
                ShowPresence="true"
                Click="@(_ => AuthorUI.Show(authorId))"/>
        }
    </div>
</div>

@code {
    [Inject] private IAuthors Authors { get; init; } = null!;
    [Inject] private Session Session { get; init; } = null!;
    [Inject] private AuthorUI AuthorUI { get; init; } = null!;
    [Inject] private UIEventHub UIEventHub { get; init; } = null!;

    [Parameter, EditorRequired] public Chat Chat { get; set; } = null!;

    protected override ComputedState<Model>.Options GetStateOptions()
        => new() {
            InitialValue = Model.None,
            Category = GetStateCategory(),
        };

    protected override async Task<Model> ComputeState(CancellationToken cancellationToken) {
        var allAuthorIds = await Authors.ListAuthorIds(Session, Chat.Id, cancellationToken);
        var onlineAuthors = new List<(AuthorId,string)>();
        var offlineAuthors = new List<(AuthorId,string)>();
        var presences = await allAuthorIds
            .Select(async authorId => {
                var presenceTask = Authors.GetPresence(Session, Chat.Id, authorId, cancellationToken);
                var authorTask = Authors.Get(Session, Chat.Id, authorId, cancellationToken);
                var presence = await presenceTask.ConfigureAwait(false);
                var author = await authorTask.ConfigureAwait(false);
                var authorName = author?.Avatar.Name ?? "";
                return (authorId, presence, authorName);
            })
            .Collect(); // Add concurrency
        foreach (var (authorId, presence, authorName) in presences) {
            if (presence is Presence.Online or Presence.Recording or Presence.Away) {
                onlineAuthors.Add((authorId, authorName));
            } else {
                offlineAuthors.Add((authorId, authorName));
            }
        }

        Comparison<(AuthorId, string)> comparison = (info1, info2)
            => String.Compare(info1.Item2, info2.Item2, StringComparison.Ordinal);
        onlineAuthors.Sort(comparison);
        offlineAuthors.Sort(comparison);

        return new() {
            OnlineAuthorIds = onlineAuthors.Select(c => c.Item1).ToApiArray(),
            OfflineAuthorIds = offlineAuthors.Select(c => c.Item1).ToApiArray(),
        };
    }

    public sealed class Model {
        public static Model None { get; } = new();
        public ApiArray<AuthorId> OnlineAuthorIds { get; init; } = ApiArray<AuthorId>.Empty;
        public ApiArray<AuthorId> OfflineAuthorIds { get; init; } = ApiArray<AuthorId>.Empty;
    }
}
