@namespace ActualChat.Chat.UI.Blazor.Components
@using Microsoft.AspNetCore.Components.Web.Virtualization
@inherits ComputedStateComponent<AuthorList.Model>

@{
    var m = State.Value;
    var isPeerChat = Chat.Id.IsPeerChat(out _);
    var hideMembers = false;
    if (!isPeerChat && m.AllAreAnonymous) {
        // Hide members in anonymous chat if there are less than 5 members.
        // Do not hide members for Owners since they anyway can see joined people in 'Add members' dialog.
        if (!m.IsOwner && m.AllAuthorIds.Count < 5)
            hideMembers = true;
    }
}

<div class="author-list-tab">
    <div class="c-content">
        @if (hideMembers) {
            <div class="note-hidden-members">
                There are <b>@m.AllAuthorIds.Count</b> members now. Anonymous chat members are hidden unless there are at least 5 of them.
            </div>
        }
        else if (isPeerChat) {
            var authorIds = m.AllAuthorIds.OrderBy(c => c.Equals(m.OwnAuthorId) ? 0 : 1);
            @foreach (var authorId in authorIds) {
                <AuthorBadge
                    @key="@authorId"
                    AuthorSid="@authorId"
                    ShowPresence="true"
                    ShowPresenceText="true"
                    Click="@_onClickCallback"/>
            }
        } else {
            var groups = new List<(string, ICollection<AuthorId>, bool)>();
            if (m.OwnerAuthorIds.Count > 0)
                groups.Add(("Owners", m.OwnerAuthorIds, false));
            if (m.AllAreAnonymous) {
                if (m.UnreportedAuthorIds.Count > 0)
                    groups.Add(("Unreported", m.UnreportedAuthorIds, false));
            } else {
                groups.Add(("Online", m.OnlineAuthorIds, false));
                if (m.UnreportedAuthorIds.Count > 0)
                    groups.Add(("Unreported", m.UnreportedAuthorIds, false));
                groups.Add(("Offline", m.OfflineAuthorIds, true));
            }

            foreach (var (name, authorIds, isCollapsed) in groups) {
                var title = $"{name} â€” {authorIds.Count}";
                <Collapsed @key="@name" Title="@title" IsCollapsed="@isCollapsed">
                    <Virtualize Items="@authorIds" Context="authorId">
                        <AuthorBadge
                            @key="@authorId"
                            AuthorSid="@authorId"
                            ShowPresence="true"
                            ShowPresenceText="true"
                            Click="@_onClickCallback"/>
                    </Virtualize>
                </Collapsed>
            }
        }
    </div>
</div>

@code {
    private EventCallback<AuthorId> _onClickCallback;

    private Session Session => ChatContext.Hub.Session();
    private Chat Chat => ChatContext.Chat;
    private IRoles Roles => ChatContext.Hub.Roles;
    private IAuthors Authors => ChatContext.Hub.Authors;
    private AuthorUI AuthorUI => ChatContext.Hub.AuthorUI;

    [Parameter, EditorRequired] public ChatContext ChatContext { get; set; } = null!;

    protected override void OnInitialized() {
        _onClickCallback = NoStateHasChanged.EventCallback<AuthorId>(OnAuthorBadgeClick);
        base.OnInitialized();
    }

    protected override ComputedState<Model>.Options GetStateOptions()
        => ComputedStateComponent.GetStateOptions(GetType(),
            static t => new ComputedState<Model>.Options() {
                InitialValue = Model.None,
                UpdateDelayer = FixedDelayer.Get(0.1),
                Category = ComputedStateComponent.GetStateCategory(t),
            });

    protected override async Task<Model> ComputeState(CancellationToken cancellationToken) {
        var chatId = Chat.Id;

        // Code below doesn't use any component prop, so we can use .ConfigureAwait(false)
        var allAuthorIds = await Authors.ListAuthorIds(Session, chatId, cancellationToken).ConfigureAwait(false);
        var ownerIds = !chatId.IsPeerChat(out _)
            ? [..await Roles.ListOwnerIds(Session, chatId, cancellationToken).ConfigureAwait(false)]
            : new HashSet<AuthorId>();
        var ownerAuthors = new List<AuthorInfo>();
        var onlineAuthors = new List<AuthorInfo>();
        var offlineAuthors = new List<AuthorInfo>();
        var unreportedAuthors = new List<AuthorInfo>();
        var ownAuthor = await Authors.GetOwn(Session, chatId, cancellationToken).ConfigureAwait(false);
        var authorInfos = await allAuthorIds
            .Select(async authorId => {
                var presenceTask = Authors.GetPresence(Session, chatId, authorId, cancellationToken);
                var authorTask = Authors.Get(Session, chatId, authorId, cancellationToken);
                await Task.WhenAll(presenceTask, authorTask).ConfigureAwait(false);
                var presence = await presenceTask.ConfigureAwait(false);
                var author = await authorTask.ConfigureAwait(false);
                if (author == null || author.HasLeft)
                    return (authorId: AuthorId.None, isAnonymous: false, presence: Presence.Unknown, authorName: "");

                var isAnonymous = author.IsAnonymous;
                var authorName = author.Avatar.Name ?? "";
                return (authorId, isAnonymous, presence, authorName);
            })
            .Collect(256)
            .ConfigureAwait(false);
        foreach (var (authorId, isAnonymous, presence, authorName) in authorInfos) {
            if (authorId.IsNone)
                continue;

            var collection = ownerIds.Contains(authorId)
                ? ownerAuthors
                : isAnonymous
                    ? unreportedAuthors
                    : presence is Presence.Online or Presence.Recording or Presence.Away
                        ? onlineAuthors
                        : offlineAuthors;
            collection.Add(new (authorId, authorName));
        }

        Comparison<AuthorInfo> comparison = (a, b)
            => (info1: a, info2: b) switch {
                (_, _) when a.Id == ownAuthor?.Id => -1,
                (_, _) when b.Id == ownAuthor?.Id => 1,
                _ => string.Compare(a.Name, b.Name, StringComparison.Ordinal),
            };

        ownerAuthors.Sort(comparison);
        onlineAuthors.Sort(comparison);
        offlineAuthors.Sort(comparison);
        unreportedAuthors.Sort(comparison);

        var allAreAnonymous = authorInfos.Length > 0 && authorInfos.All(c => c.isAnonymous);
        return new() {
            AllAuthorIds = allAuthorIds,
            OwnAuthorId = ownAuthor?.Id ?? AuthorId.None,
            OwnerAuthorIds = ownerAuthors.Select(c => c.Id).ToList(),
            OnlineAuthorIds = onlineAuthors.Select(c => c.Id).ToList(),
            OfflineAuthorIds = offlineAuthors.Select(c => c.Id).ToList(),
            UnreportedAuthorIds = unreportedAuthors.Select(c => c.Id).ToList(),
            AllAreAnonymous = allAreAnonymous,
        };
    }

    private void OnAuthorBadgeClick(AuthorId authorId)
        => _ = AuthorUI.Show(authorId);

    // Nested types

    public sealed class Model {
        public static readonly Model None = new();

        public AuthorId OwnAuthorId { get; init; } = AuthorId.None;
        public IReadOnlyList<AuthorId> AllAuthorIds { get; init; } = [];
        public List<AuthorId> OwnerAuthorIds { get; init; } = [];
        public List<AuthorId> OnlineAuthorIds { get; init; } = [];
        public List<AuthorId> OfflineAuthorIds { get; init; } = [];
        public List<AuthorId> UnreportedAuthorIds { get; init; } = [];
        public bool AllAreAnonymous { get; init; }
        public bool IsOwner => !OwnAuthorId.IsNone && OwnerAuthorIds.Contains(OwnAuthorId);
    }

    public record struct AuthorInfo(AuthorId Id, string Name);
}
