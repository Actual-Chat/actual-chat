@namespace ActualChat.Chat.UI.Blazor.Components
@using ActualChat.Chat.UI.Blazor.Module
@using ActualChat.UI.Blazor.Events
@inherits ComputedStateComponent<AuthorList.Model>
@{
    var m = State.Value;
    var isPeerChat = Chat.Id.IsPeerChat(out _);
}

<div class="author-list-tab">
    <div class="c-content">
        @if (isPeerChat) {
            var authorIds = m.AllAuthorIds.OrderBy(c => c.Equals(m.OwnAuthorId) ? 0 : 1);
            @foreach (var authorId in authorIds) {
                <AuthorBadge
                    @key="@authorId"
                    AuthorSid="@authorId"
                    ShowPresence="true"
                    Click="@(_ => AuthorUI.Show(authorId))"/>
            }
        } else {
            var groups = new List<(string,IReadOnlyCollection<AuthorId>, bool)> {
                ("Owners", m.OwnerAuthorIds, false),
                ("Online", m.OnlineAuthorIds, false),
                ("Offline", m.OfflineAuthorIds, true)
            };
            foreach (var group in groups) {
                var title = $"{group.Item1} â€” {group.Item2.Count}";
                <Collapsed Title="@title" IsCollapsed="@group.Item3">
                    @foreach (var authorId in group.Item2) {
                        <AuthorBadge
                            @key="@authorId"
                            AuthorSid="@authorId"
                            ShowPresence="true"
                            Click="@(_ => AuthorUI.Show(authorId))"/>
                    }
                </Collapsed>
            }
        }
    </div>
</div>

@code {
    private Session Session => ChatContext.Session;
    private Chat Chat => ChatContext.Chat;
    private IRoles Roles => ChatContext.Roles;
    private IAuthors Authors => ChatContext.Authors;
    private AuthorUI AuthorUI => ChatContext.AuthorUI;

    [Parameter, EditorRequired] public ChatContext ChatContext { get; set; } = null!;

    protected override ComputedState<Model>.Options GetStateOptions()
        => new() {
            InitialValue = Model.None,
            Category = GetStateCategory(),
        };

    protected override async Task<Model> ComputeState(CancellationToken cancellationToken) {
        var allAuthorIds = await Authors.ListAuthorIds(Session, Chat.Id, cancellationToken);
        var ownerIds = !Chat.Id.IsPeerChat(out _)
            ? await Roles.ListOwnerIds(Session, Chat.Id, cancellationToken)
            : ApiArray<AuthorId>.Empty;
        var ownerAuthors = new List<(AuthorId,string)>();
        var onlineAuthors = new List<(AuthorId,string)>();
        var offlineAuthors = new List<(AuthorId,string)>();
        var presences = await allAuthorIds
            .Select(async authorId => {
                var presenceTask = Authors.GetPresence(Session, Chat.Id, authorId, cancellationToken);
                var authorTask = Authors.Get(Session, Chat.Id, authorId, cancellationToken);
                var presence = await presenceTask.ConfigureAwait(false);
                var author = await authorTask.ConfigureAwait(false);
                var authorName = author?.Avatar.Name ?? "";
                return (authorId, presence, authorName);
            })
            .Collect(); // Add concurrency
        foreach (var (authorId, presence, authorName) in presences) {
            var collection = ownerIds.Contains(authorId)
                ? ownerAuthors
                : presence is Presence.Online or Presence.Recording or Presence.Away
                    ? onlineAuthors
                    : offlineAuthors;
            collection.Add((authorId, authorName));
        }

        Comparison<(AuthorId, string)> comparison = (info1, info2)
            => String.Compare(info1.Item2, info2.Item2, StringComparison.Ordinal);
        ownerAuthors.Sort(comparison);
        onlineAuthors.Sort(comparison);
        offlineAuthors.Sort(comparison);

        var ownAuthor = await Authors.GetOwn(Session, Chat.Id, cancellationToken).ConfigureAwait(false);
        return new() {
            AllAuthorIds = allAuthorIds,
            OwnAuthorId = ownAuthor?.Id ?? AuthorId.None,
            OwnerAuthorIds = ownerAuthors.Select(c => c.Item1).ToApiArray(),
            OnlineAuthorIds = onlineAuthors.Select(c => c.Item1).ToApiArray(),
            OfflineAuthorIds = offlineAuthors.Select(c => c.Item1).ToApiArray(),
        };
    }

    public sealed class Model {
        public static readonly Model None = new();

        public AuthorId OwnAuthorId { get; init; } = AuthorId.None;
        public ApiArray<AuthorId> AllAuthorIds { get; init; }
        public ApiArray<AuthorId> OwnerAuthorIds { get; init; }
        public ApiArray<AuthorId> OnlineAuthorIds { get; init; }
        public ApiArray<AuthorId> OfflineAuthorIds { get; init; }
    }
}
