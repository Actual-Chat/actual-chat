@namespace ActualChat.Chat.UI.Blazor.Components
@inherits ComputedStateComponent<ChatTab.Model>
@{
    var m = State.LatestNonErrorValue;
}

<div class="flex-y text-secondary">
    @if (m.CanEdit) {
        <ChatBasicSettings/>
    }
    @if (m.CanInvite) {
        if (m.CanEdit) {
            <div class="mt-3 mb-4 h-0 border-b bg-primary"></div>
        }
        <ChatInviteSettings/>
    }
</div>

@code {
    [Inject] private Session Session { get; init; } = null!;
    [Inject] private IChats Chats { get; init; } = null!;
    [CascadingParameter] public Chat Chat { get; set; } = null!;

    protected override ComputedState<Model>.Options GetStateOptions()
        => new() { InitialValue = Model.None };

    protected override async Task<Model> ComputeState(CancellationToken cancellationToken) {
        var permissions = await Chats.GetPermissions(Session, Chat.Id, default);
        var canEdit = permissions.HasFlag(ChatPermissions.Admin);
        var canInvite = permissions.HasFlag(ChatPermissions.Invite);
        return new Model(canEdit, canInvite);
    }

    public sealed record Model(bool CanEdit, bool CanInvite) {
        public static Model None { get; } = new(false, false);
    };
}
