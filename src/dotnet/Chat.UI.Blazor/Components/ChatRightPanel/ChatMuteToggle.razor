@namespace ActualChat.Chat.UI.Blazor.Components
@using ActualChat.Notification
@inherits ComputedStateComponent<ChatNotificationStatus>
@{
    var m = State.LatestNonErrorValue;
}

<Toggle Id="@(_id ??= ComponentIdGenerator.Next("chat-mute"))"
        Label="@Label"
        Value="@(!m.IsSubscribed)" ValueChanged="OnValueChanged" />

@code {
    private string? _id;

    [Inject] private Session Session { get; init; } = null!;
    [Inject] private INotifications Notifications { get; init; } = null!;
    [Inject] private UICommander UICommander { get; init; } = null!;
    [Inject] private ComponentIdGenerator ComponentIdGenerator { get; init; } = null!;

    [Parameter] public string ChatId { get; set; } = "";
    [Parameter] public string Label { get; set; } = "Mute notifications";

    protected override ComputedState<ChatNotificationStatus>.Options GetStateOptions()
        => new() { InitialValue = ChatNotificationStatus.NotSubscribed };

    protected override Task<ChatNotificationStatus> ComputeState(CancellationToken cancellationToken)
        => Notifications.GetStatus(Session, ChatId, cancellationToken);

    private Task OnValueChanged(bool isMuted)
        => UICommander.Run(new INotifications.SetStatusCommand(Session, ChatId, !isMuted));
}
