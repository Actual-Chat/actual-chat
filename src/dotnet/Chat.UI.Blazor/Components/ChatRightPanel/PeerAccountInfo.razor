@namespace ActualChat.Chat.UI.Blazor.Components
@inherits ComputedStateComponent<PeerAccountInfo.Model>

@{
    var m = State.Value;
}
<span class="c-bio">
    @m.Bio
</span>

@code {
    private Chat Chat => ChatContext.Chat;
    private Session Session => ChatContext.Hub.Session();
    private IAuthors Authors => ChatContext.Hub.Authors;

    [Parameter, EditorRequired] public ChatContext ChatContext { get; set; } = null!;

    protected override ComputedState<Model>.Options GetStateOptions()
        => new() {
            InitialValue = Model.Loading,
            Category = GetStateCategory(),
        };

    protected override async Task<Model> ComputeState(CancellationToken cancellationToken) {
        var ownAccount = ChatContext.OwnAccount;
        var session = Session;
        if (!Chat.Id.IsPeerChat(out var peerChatId))
            return Model.Loading;

        var peerAccountId = peerChatId.UserIds.OtherThanOrDefault(ownAccount.Id);
        if (peerAccountId.IsNone)
            return Model.Loading;


        var ownAuthor = await Authors.GetOwn(session, peerChatId, cancellationToken).ConfigureAwait(false);
        var anotherAuthorId = new AuthorId(peerChatId, ownAuthor != null && peerChatId.UserId1 == ownAuthor.UserId ? 2 : 1, AssumeValid.Option);
        var anotherAuthor = await Authors.Get(session, peerChatId, anotherAuthorId, cancellationToken).ConfigureAwait(false);

        if (anotherAuthor == null)
            return Model.Loading;

        var bio = anotherAuthor.Avatar.Bio;
        return new() {
            Bio = bio,
        };
    }

    public sealed record Model {
        public static readonly Model Loading = new();

        public string Bio { get; init; } = "";
    }
}
