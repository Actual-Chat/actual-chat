@namespace ActualChat.Chat.UI.Blazor.Components
@using ActualChat.Notification
@using ActualChat.Invite
@inherits ComputedStateComponent<RightPanelChatInfo.Model>
@{
    var m = State.Value;
    if (m.Title == null)
        return;
    var isPublicGroupChat = Chat is { Kind: ChatKind.Group, IsPublic: true };
}

<div class="c-chat-info">
    <RightPanelChatInfoItem
        Content="@m.Title"
        Hint="@(isPublicGroupChat ? "Public" : "Private")">
        <Icon>
            <ChatIcon Chat="Chat" Size="SquareSize.Size16"/>
        </Icon>
    </RightPanelChatInfoItem>

    @if (!m.HideNotificationsToggle) {
        <RightPanelChatInfoItem
            Click="@(_ => OnValueChanged(m.NotificationMode != ChatNotificationMode.Muted))"
            Content="Notifications"
            Hint="@(m.NotificationMode != ChatNotificationMode.Muted ? "On" : "Off")">
            <Icon>
                <i class="text-2xl text-icons-03 icon-bell"></i>
            </Icon>
            <Right>
                <Toggle Class="mr-2" IsChecked="@(m.NotificationMode != ChatNotificationMode.Muted)"/>
            </Right>
        </RightPanelChatInfoItem>
    }

    @if (m.Link is { } publicUrl) {
        <RightPanelChatInfoItem
            Click="@(() => OnShareClick(publicUrl.AbsoluteUrl, m.IsJoinLink))"
            ContentClass="text-accent"
            Content="Share">
            <Icon>
                <i class="text-2xl icon-share text-accent"></i>
            </Icon>
        </RightPanelChatInfoItem>
    }

    @if (m.Rules.CanInvite()) {
        <RightPanelChatInfoItem
            Click="@OnInviteClick"
            ContentClass="text-accent"
            Content="Add members">
            <Icon>
                <i class="text-2xl icon-person-add text-accent"></i>
            </Icon>
        </RightPanelChatInfoItem>
    }
</div>

@code {
    [Inject] private Session Session { get; init; } = null!;
    [Inject] private AccountSettings AccountSettings { get; init; } = null!;
    [Inject] private IChats Chats { get; init; } = null!;
    [Inject] private IAccounts Accounts { get; init; } = null!;
    [Inject] private IRoles Roles { get; init; } = null!;
    [Inject] private UICommander UICommander { get; init; } = null!;
    [Inject] private UrlMapper UrlMapper { get; init; } = null!;
    [Inject] private IInvites Invites { get; init; } = null!;

    private ModalUI ModalUI => Services.GetRequiredService<ModalUI>();
    private ShareUI ShareUI => Services.GetRequiredService<ShareUI>();

    [Parameter, EditorRequired] public Chat Chat { get; set; } = null!;
    [CascadingParameter] public ScreenSize ScreenSize { get; set; }

    protected override ComputedState<Model>.Options GetStateOptions()
        => new() {
            InitialValue = Model.None,
            Category = GetStateCategory(),
        };

    protected override async Task<Model> ComputeState(CancellationToken cancellationToken) {
        var rules = await Chats.GetRules(Session, Chat.Id, default);
        var (link, isJoinLink) = await GetLink(rules, cancellationToken);
        var userChatSettings = await AccountSettings.GetUserChatSettings(Chat.Id, cancellationToken);
        return new() {
            Title = Chat.Title,
            Link = link?.ToDisplayUrl(UrlMapper),
            IsJoinLink = isJoinLink,
            NotificationMode = userChatSettings.NotificationMode,
            HideNotificationsToggle = Chat.HasSingleAuthor,
            Rules = rules,
        };
    }

    private async Task<(LocalUrl?, bool)> GetLink(AuthorRules rules, CancellationToken cancellationToken) {
        var account = await Accounts.GetOwn(Session, cancellationToken);
        if (Chat.Id.IsPeerChat(out var peerChatId)) {
            var otherUserId = peerChatId.UserIds.OtherThan(account.Id);
            return (Links.User(otherUserId), false);
        }
        if (Chat.IsPublic)
            return (Links.Chat(Chat.Id), false);
        if (rules.CanInvite()) {
            var invite = await Invites.GetOrGenerateChatInvite(Session, Chat.Id, cancellationToken);
            if (invite != null)
                return (Links.Invite(Links.InviteLinkFormat.JoinChat, invite.Id), true);
        }
        return (null, false);
    }

    private Task OnValueChanged(bool isMuted)
        => UICommander.RunLocal(async cancellationToken => {
            var userChatSettings = await AccountSettings.GetUserChatSettings(Chat.Id, cancellationToken).ConfigureAwait(false);
            userChatSettings = userChatSettings with {
                NotificationMode = isMuted ? ChatNotificationMode.Muted : ChatNotificationMode.Default,
                };
            await AccountSettings.SetUserChatSettings(Chat.Id, userChatSettings, cancellationToken).ConfigureAwait(false);
        });

    private Task OnInviteClick()
        => ModalUI.Show(new AddMemberModal.Model(Chat.Id));

    private void OnShareClick(string link, bool isJoinLink) {
        var description = isJoinLink
            ? $"\"{Chat.Title}\" on Actual Chat join link"
            : $"\"{Chat.Title}\" on Actual Chat";
        ShareUI.ShareLink(link, "Share chat", description);
    }

    public sealed record Model {
        public static Model None { get; } = new();

        public string? Title { get; init; }
        public DisplayUrl? Link { get; init; }
        public bool IsJoinLink { get; init; }
        public ChatNotificationMode NotificationMode { get; init; }
        public bool HideNotificationsToggle { get; init; }
        public AuthorRules Rules { get; init; } = null!;
    }
}
