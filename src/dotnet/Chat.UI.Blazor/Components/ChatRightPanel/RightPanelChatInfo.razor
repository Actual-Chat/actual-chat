@namespace ActualChat.Chat.UI.Blazor.Components
@using ActualChat.Notification
@using ActualChat.Invite
@using ActualChat.Kvas
@inherits ComputedStateComponent<RightPanelChatInfo.Model>
@{
    var m = State.Value;
    if (ReferenceEquals(m, Model.Loading))
        return;
}

<div class="c-chat-info">
    @if (m.PeerAuthor != null && !(m.PeerAuthor?.Avatar.Bio).IsNullOrEmpty()) {
        <RightPanelChatInfoItem
            Content="@m.PeerAuthor.Avatar.Bio"
            Hint="Bio">
            <Icon>
                <i class="text-2xl text-03 icon-info"></i>
            </Icon>
        </RightPanelChatInfoItem>
    }
    @if (!m.HideNotificationsToggle) {
        <RightPanelChatInfoItem
            Click="@(_ => OnValueChanged(m.NotificationMode != ChatNotificationMode.Muted))"
            Content="Notifications"
            Hint="@(m.NotificationMode != ChatNotificationMode.Muted ? "On" : "Off")">
            <Icon>
                <i class="text-2xl text-03 icon-bell"></i>
            </Icon>
            <Right>
                <Toggle Class="mr-2" IsChecked="@(m.NotificationMode != ChatNotificationMode.Muted)"/>
            </Right>
        </RightPanelChatInfoItem>
    }
</div>

@code {
    private Session Session => ChatContext.Hub.Session();
    private Chat Chat => ChatContext.Chat;
    private IChats Chats => ChatContext.Hub.Chats;
    private IInvites Invites => ChatContext.Hub.Invites;
    private IAccounts Accounts => ChatContext.Hub.Accounts;
    private AccountSettings AccountSettings => ChatContext.Hub.AccountSettings();
    private ModalUI ModalUI => ChatContext.Hub.ModalUI;
    private UICommander UICommander => ChatContext.Hub.UICommander();
    private IAuthors Authors => ChatContext.Hub.Authors;

    [Parameter, EditorRequired] public ChatContext ChatContext { get; set; } = null!;
    [CascadingParameter] public ScreenSize ScreenSize { get; set; }

    protected override ComputedState<Model>.Options GetStateOptions()
        => new() {
            InitialValue = Model.Loading,
            Category = GetStateCategory(),
        };

    protected override async Task<Model> ComputeState(CancellationToken cancellationToken) {
        var userChatSettings = await AccountSettings.GetUserChatSettings(Chat.Id, cancellationToken);
        var anotherAuthor = await GetPeerAuthor(cancellationToken);
        return new() {
            NotificationMode = userChatSettings.NotificationMode,
            HideNotificationsToggle = Chat.HasSingleAuthor,
            PeerAuthor = anotherAuthor,
        };
    }

    private async Task<Author?> GetPeerAuthor(CancellationToken cancellationToken) {
        var ownAccount = ChatContext.OwnAccount;
        if (!Chat.Id.IsPeerChat(out var peerChatId))
            return null;
        var peerAccountId = peerChatId.UserIds.OtherThanOrDefault(ownAccount.Id);
        if (peerAccountId.IsNone)
            return null;
        var ownAuthor = await Authors.GetOwn(Session, peerChatId, cancellationToken);
        var anotherAuthorId = new AuthorId(peerChatId, ownAuthor != null && peerChatId.UserId1 == ownAuthor.UserId ? 2 : 1, AssumeValid.Option);
        var anotherAuthor = await Authors.Get(Session, peerChatId, anotherAuthorId, cancellationToken);
        return anotherAuthor;
    }

    private Task OnValueChanged(bool isMuted)
        => UICommander.RunLocal(async cancellationToken => {
            var userChatSettings = await AccountSettings.GetUserChatSettings(Chat.Id, cancellationToken).ConfigureAwait(false);
            userChatSettings = userChatSettings with {
                NotificationMode = isMuted ? ChatNotificationMode.Muted : ChatNotificationMode.Default,
            };
            await AccountSettings.SetUserChatSettings(Chat.Id, userChatSettings, cancellationToken).ConfigureAwait(false);
        });

    private Task OnInviteClick()
        => ModalUI.Show(new AddMemberModal.Model(Chat.Id));

    public sealed record Model {
        public static readonly Model Loading = new();

        public ChatNotificationMode NotificationMode { get; init; }
        public bool HideNotificationsToggle { get; init; }
        public Author? PeerAuthor { get; init; }
    }
}
