@namespace ActualChat.Chat.UI.Blazor.Components
@using ActualChat.Notification
@inherits ComputedStateComponent<RightPanelChatInfo.Model>
@{
    var m = State.Value;
    if (m.Title == null)
        return;
    var isPublicGroupChat = Chat is { Kind: ChatKind.Group, IsPublic: true };
}

<div class="px-5 py-3 space-y-3">
    <div class="flex-x">
        <div class="mr-3">
            <ChatIcon Chat="Chat" Size="SquareSize.Size16"/>
        </div>
        <div class="flex-y min-w-0 self-center">
            <div class="text-01 text-title-1 truncate">
                @m.Title
            </div>
            <div class="text-03 text-caption-2">
                @(isPublicGroupChat ? "Public" : "Private")
            </div>
        </div>
    </div>

    @if (m.Link is { } publicUrl) {
        <div class="flex-x overflow-hidden cursor-pointer hover:bg-round-hover rounded-lg"
            @onclick="@(_ => OnPublicUrlClick(publicUrl))">
            <div class="flex min-w-14 min-h-14 mr-3 items-center justify-center">
                <i class="icon-link-2 text-2xl text-icons-03"></i>
            </div>
            <div class="flex-y min-w-0 self-center">
                <div class="text-01 text-headline-1 truncate">
                    @publicUrl.ShortLocalUrl
                </div>
                <div class="text-03 text-caption-2">
                    @(isPublicGroupChat ? "Public join link" : "User link")
                </div>
            </div>
        </div>
    }

    <div class="flex-x overflow-hidden cursor-pointer hover:bg-round-hover rounded-lg"
         @onclick="@(_ => OnValueChanged(m.NotificationMode != ChatNotificationMode.Muted))"
         @onclick:preventDefault="true">
        <div class="flex min-w-14 min-h-14 mr-3 items-center justify-center">
            <i class="icon-bell text-2xl text-icons-03"></i>
        </div>
        <div class="flex-y min-w-0 self-center grow">
            <div class="text-01 text-headline-1 truncate">
                Notifications
            </div>
            <div class="text-03 text-caption-2">
                @(m.NotificationMode != ChatNotificationMode.Muted ? "On" : "Off")
            </div>
        </div>
        <div class="flex-x self-center pr-2">
            <Toggle IsChecked="@(m.NotificationMode != ChatNotificationMode.Muted)" />
        </div>
    </div>
</div>

@code {
    [Inject] private Session Session { get; init; } = null!;
    [Inject] private AccountSettings AccountSettings { get; init; } = null!;
    [Inject] private IAccounts Accounts { get; init; } = null!;
    [Inject] private ImageViewerUI ImageViewerUI { get; init; } = null!;
    [Inject] private ClipboardUI ClipboardUI { get; init; } = null!;
    [Inject] private UICommander UICommander { get; init; } = null!;
    [Inject] private UrlMapper UrlMapper { get; init; } = null!;

    [CascadingParameter] public Chat Chat { get; set; } = null!;

    protected override ComputedState<Model>.Options GetStateOptions()
        => new() {
            InitialValue = Model.None,
            Category = GetStateCategory(),
        };

    protected override async Task<Model> ComputeState(CancellationToken cancellationToken) {
        var link = await GetLink(cancellationToken);
        var userChatSettings = await AccountSettings.GetUserChatSettings(Chat.Id, cancellationToken);
        return new() {
            Title = Chat.Title,
            Link = link?.ToDisplayUrl(UrlMapper),
            NotificationMode = userChatSettings.NotificationMode,
        };
    }

    private async Task<LocalUrl?> GetLink(CancellationToken cancellationToken) {
        var account = await Accounts.GetOwn(Session, cancellationToken);
        if (Chat.Id.IsPeerChat(out var peerChatId)) {
            var otherUserId = peerChatId.UserIds.OtherThan(account.Id);
            return Links.User(otherUserId);
        }

        return Chat.IsPublic ? Links.Chat(Chat.Id) : (LocalUrl?)null;
    }

    private ValueTask OnPublicUrlClick(DisplayUrl publicUrl)
        => ClipboardUI.WriteText(publicUrl.AbsoluteUrl);

    private Task OnValueChanged(bool isMuted)
        => UICommander.RunLocal(async cancellationToken => {
            var userChatSettings = await AccountSettings.GetUserChatSettings(Chat.Id, cancellationToken).ConfigureAwait(false);
            userChatSettings = userChatSettings with {
                NotificationMode = isMuted ? ChatNotificationMode.Muted : ChatNotificationMode.Default,
                };
            await AccountSettings.SetUserChatSettings(Chat.Id, userChatSettings, cancellationToken).ConfigureAwait(false);
        });

    public sealed record Model {
        public static Model None { get; } = new();

        public string? Title { get; init; }
        public DisplayUrl? Link { get; init; }
        public ChatNotificationMode NotificationMode { get; init; }
    }
}
