@namespace ActualChat.Chat.UI.Blazor.Components
@using ActualChat.Notification
@inherits ComputedStateComponent<RightPanelChatInfo.Model>
@{
    var m = State.Value;
    if (m.Title == null)
        return;
    var isPublicGroupChat = Chat is { Kind: ChatKind.Group, IsPublic: true };
}

<div class="flex-y gap-y-1 p-4">
    <div class="flex-x">
        <div class="mr-3">
            <ChatIcon Chat="Chat" Size="SquareSize.Size16"/>
        </div>
        <div class="flex-y min-w-0 self-center">
            <div class="text-01 text-title-1 truncate">
                @m.Title
            </div>
            <div class="text-03 text-caption-2">
                @(isPublicGroupChat ? "Public" : "Private")
            </div>
        </div>
    </div>

    @if (m.Owners is not null) {
        @foreach (var owner in m.Owners) {
            <RightPanelChatInfoItem
                Click="@(_ => OnOwnerClick(owner.AuthorId))"
                Icon="icon-person text-icons-03"
                Content="@owner.AvatarName"
                Hint="Owner" />
        }
    }

    <RightPanelChatInfoItem
        Click="@(_ => OnValueChanged(m.NotificationMode != ChatNotificationMode.Muted))"
        Icon="icon-bell text-icons-03"
        Content="Notifications"
        Hint="@(m.NotificationMode != ChatNotificationMode.Muted ? "On" : "Off")">
        <Right>
            <Toggle Class="mr-2" IsChecked="@(m.NotificationMode != ChatNotificationMode.Muted)"/>
        </Right>
    </RightPanelChatInfoItem>

    @if (m.Link is { } publicUrl) {
        <RightPanelChatInfoItem
            Click="@(() => OnShareClick(publicUrl.AbsoluteUrl))"
            Icon="icon-share text-accent"
            ContentClass="text-accent"
            Content="Share" />
    }

    @if (m.Rules.CanInvite()) {
        <RightPanelChatInfoItem
            Click="@OnInviteClick"
            Icon="icon-person-add text-accent"
            ContentClass="text-accent"
            Content="Add members" />
    }
</div>

@code {
    [Inject] private Session Session { get; init; } = null!;
    [Inject] private AccountSettings AccountSettings { get; init; } = null!;
    [Inject] private IChats Chats { get; init; } = null!;
    [Inject] private IAuthors Authors { get; init; } = null!;
    [Inject] private IAccounts Accounts { get; init; } = null!;
    [Inject] private IRoles Roles { get; init; } = null!;
    [Inject] private VisualMediaViewerUI VisualMediaViewerUI { get; init; } = null!;
    [Inject] private ClipboardUI ClipboardUI { get; init; } = null!;
    [Inject] private AuthorUI AuthorUI { get; init; } = null!;
    [Inject] private UICommander UICommander { get; init; } = null!;
    [Inject] private UrlMapper UrlMapper { get; init; } = null!;
    [Inject] private Features Features { get; init; } = null!;

    private ModalUI ModalUI => Services.GetRequiredService<ModalUI>();
    private ShareUI ShareUI => Services.GetRequiredService<ShareUI>();

    [Parameter, EditorRequired] public Chat Chat { get; set; } = null!;
    [CascadingParameter] public ScreenSize ScreenSize { get; set; }

    protected override ComputedState<Model>.Options GetStateOptions()
        => new() {
            InitialValue = Model.None,
            Category = GetStateCategory(),
        };

    protected override async Task<Model> ComputeState(CancellationToken cancellationToken) {
        List<OwnerModel>? owners = null;
        if (!Chat.Id.IsPeerChat(out _)) {
            var authorIds = await Roles.ListOwnerIds(Session, Chat.Id, cancellationToken);
            var accounts = await authorIds
                .Select(async authorId => {
                    var account = await Authors.GetAccount(Session, Chat.Id, authorId, cancellationToken);
                    if (account == null)
                        return null;

                    return new OwnerModel {
                        AuthorId = authorId,
                        AvatarName = account.Avatar.Name,
                        Link = Links.User(account.Id).ToDisplayUrl(UrlMapper),
                    };
                })
                .Collect()
                .ConfigureAwait(false);

            owners = accounts
                .SkipNullItems()
                .ToList();
        }

        var rules = await Chats.GetRules(Session, Chat.Id, default);
        var link = await GetLink(cancellationToken);
        var userChatSettings = await AccountSettings.GetUserChatSettings(Chat.Id, cancellationToken);
        return new() {
            Title = Chat.Title,
            Link = link?.ToDisplayUrl(UrlMapper),
            Owners = owners,
            NotificationMode = userChatSettings.NotificationMode,
            Rules = rules,
            EnableIncompleteUI = await Features.Get<Features_EnableIncompleteUI, bool>(cancellationToken),
        };
    }

    private async Task<LocalUrl?> GetLink(CancellationToken cancellationToken) {
        var account = await Accounts.GetOwn(Session, cancellationToken);
        if (Chat.Id.IsPeerChat(out var peerChatId)) {
            var otherUserId = peerChatId.UserIds.OtherThan(account.Id);
            return Links.User(otherUserId);
        }

        return Chat.IsPublic ? Links.Chat(Chat.Id) : (LocalUrl?)null;
    }

    private Task OnOwnerClick(AuthorId id)
        => AuthorUI.Show(id);

    private Task OnValueChanged(bool isMuted)
        => UICommander.RunLocal(async cancellationToken => {
            var userChatSettings = await AccountSettings.GetUserChatSettings(Chat.Id, cancellationToken).ConfigureAwait(false);
            userChatSettings = userChatSettings with {
                NotificationMode = isMuted ? ChatNotificationMode.Muted : ChatNotificationMode.Default,
                };
            await AccountSettings.SetUserChatSettings(Chat.Id, userChatSettings, cancellationToken).ConfigureAwait(false);
        });

    private Task OnInviteClick()
        => ModalUI.Show(new InviteAuthorModal.Model(Chat));

    private void OnShareClick(string link)
        => ShareUI.ShareLink(link, "Share chat", $"\"{Chat.Title}\" on Actual Chat");

    public sealed record Model {
        public static Model None { get; } = new();

        public string? Title { get; init; }
        public DisplayUrl? Link { get; init; }
        public ChatNotificationMode NotificationMode { get; init; }
        public List<OwnerModel>? Owners { get; init; }
        public AuthorRules Rules { get; init; } = null!;
        public bool EnableIncompleteUI { get; init; }
    }

    public sealed record OwnerModel {
        public DisplayUrl Link { get; init; }
        public AuthorId AuthorId { get; init; }
        public string AvatarName { get; init; } = "";
    }
}
