@namespace ActualChat.Chat.UI.Blazor.Components
@using ActualChat.Notification
@using ActualChat.Invite
@inherits ComputedStateComponent<RightPanelChatInfo.Model>
@{
    var m = State.Value;
    if (m.Title == null)
        return;

    var isPublicGroupChat = Chat is { Kind: ChatKind.Group, IsPublic: true };
}

<div class="c-chat-info">
    <RightPanelChatInfoItem
        Content="@m.Title"
        Hint="@(isPublicGroupChat ? "Public" : "Private")">
        <Icon>
            <ChatIcon Chat="Chat" Size="SquareSize.Size16"/>
        </Icon>
    </RightPanelChatInfoItem>

    @if (!m.HideNotificationsToggle) {
        <RightPanelChatInfoItem
            Click="@(_ => OnValueChanged(m.NotificationMode != ChatNotificationMode.Muted))"
            Content="Notifications"
            Hint="@(m.NotificationMode != ChatNotificationMode.Muted ? "On" : "Off")">
            <Icon>
                <i class="text-2xl text-icons-03 icon-bell"></i>
            </Icon>
            <Right>
                <Toggle Class="mr-2" IsChecked="@(m.NotificationMode != ChatNotificationMode.Muted)"/>
            </Right>
        </RightPanelChatInfoItem>
    }

    @if (m.ShareModel is { } shareModel) {
        <RightPanelChatInfoItem
            Click="@(() => OnShareClick(shareModel))"
            ContentClass="text-accent"
            Content="Share">
            <Icon>
                <i class="text-2xl icon-share text-accent"></i>
            </Icon>
        </RightPanelChatInfoItem>
    }

    @if (m.Rules.CanInvite()) {
        <RightPanelChatInfoItem
            Click="@OnInviteClick"
            ContentClass="text-accent"
            Content="Add members">
            <Icon>
                <i class="text-2xl icon-person-add text-accent"></i>
            </Icon>
        </RightPanelChatInfoItem>
    }
</div>

@code {
    private Session Session => ChatContext.Session;
    private Chat Chat => ChatContext.Chat;
    private IChats Chats => ChatContext.Chats;
    private IInvites Invites => ChatContext.Invites;
    private IAccounts Accounts => ChatContext.Accounts;
    private AccountSettings AccountSettings => ChatContext.AccountSettings;
    private ShareUI ShareUI => ChatContext.ShareUI;
    private ModalUI ModalUI => ChatContext.ModalUI;
    private UICommander UICommander => ChatContext.UICommander;

    [Parameter, EditorRequired] public ChatContext ChatContext { get; set; } = null!;
    [CascadingParameter] public ScreenSize ScreenSize { get; set; }

    protected override ComputedState<Model>.Options GetStateOptions()
        => new() {
            InitialValue = Model.None,
            Category = GetStateCategory(),
        };

    protected override async Task<Model> ComputeState(CancellationToken cancellationToken) {
        var rules = await Chats.GetRules(Session, Chat.Id, default);
        var userChatSettings = await AccountSettings.GetUserChatSettings(Chat.Id, cancellationToken);
        var shareModel = await ShareUI.GetModel(Chat.Id, cancellationToken);
        return new() {
            Title = Chat.Title,
            ShareModel = shareModel,
            NotificationMode = userChatSettings.NotificationMode,
            HideNotificationsToggle = Chat.HasSingleAuthor,
            Rules = rules,
        };
    }

    private Task OnValueChanged(bool isMuted)
        => UICommander.RunLocal(async cancellationToken => {
            var userChatSettings = await AccountSettings.GetUserChatSettings(Chat.Id, cancellationToken).ConfigureAwait(false);
            userChatSettings = userChatSettings with {
                NotificationMode = isMuted ? ChatNotificationMode.Muted : ChatNotificationMode.Default,
                };
            await AccountSettings.SetUserChatSettings(Chat.Id, userChatSettings, cancellationToken).ConfigureAwait(false);
        });

    private Task OnInviteClick()
        => ModalUI.Show(new AddMemberModal.Model(Chat.Id));

    private void OnShareClick(ShareModalModel shareModel)
        => ShareUI.Share(shareModel);

    public sealed record Model {
        public static readonly Model None = new();

        public string? Title { get; init; }
        public ShareModalModel? ShareModel { get; init; }
        public ChatNotificationMode NotificationMode { get; init; }
        public bool HideNotificationsToggle { get; init; }
        public AuthorRules Rules { get; init; } = null!;
    }
}
