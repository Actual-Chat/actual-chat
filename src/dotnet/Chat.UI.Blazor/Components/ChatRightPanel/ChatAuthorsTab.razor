@namespace ActualChat.Chat.UI.Blazor.Components
@using ActualChat.Chat.UI.Blazor.Module
@implements IRightPanelSearchBackend
@inherits ComputedStateComponent<ChatAuthorsTab.Model>
@{
    var m = State.LatestNonErrorValue;
    var parsedChatId = new ParsedChatId(Chat.Id);
    var isPeerChat = parsedChatId.IsValid && parsedChatId.Kind.IsPeer();
}

<div @ref="Ref" class="chat-author-tab">
    @if (!isPeerChat) {
        <div class="flex-x right-1 -my-1 gap-x-4">
                <ButtonSquare Click="OnInviteClick" Title="Invite users" Class="add-user-btn">
                    <svg xmlns="http://www.w3.org/2000/svg" class="fill-current w-5 h-5" viewBox="0 0 24 24">
                        <path d="M9.602 3.7c-1.154 1.937-.635 5.227 1.424 9.025.93 1.712.697 3.02.338 3.815-.982 2.178-3.675 2.799-6.525 3.456-1.964.454-1.839.87-1.839 4.004h-1.995l-.005-1.241c0-2.52.199-3.975 3.178-4.663 3.365-.777 6.688-1.473 5.09-4.418-4.733-8.729-1.35-13.678 3.732-13.678 3.321 0 5.97 2.117 5.97 6.167 0 3.555-1.949 6.833-2.383 7.833h-2.115c.392-1.536 2.499-4.366 2.499-7.842 0-5.153-5.867-4.985-7.369-2.458zm13.398 15.3h-3v-3h-2v3h-3v2h3v3h2v-3h3v-2z"/>
                    </svg>
                </ButtonSquare>
                <div class="search-contacts w-full">
                    <input type="text" placeholder="search..."/>
                    <ButtonSquare Click="OnSearchClick">
                        <svg xmlns="http://www.w3.org/2000/svg" class="fill-current w-4 h-4" viewBox="0 0 24 24">
                            <path d="M21.172 24l-7.387-7.387c-1.388.874-3.024 1.387-4.785 1.387-4.971 0-9-4.029-9-9s4.029-9 9-9 9 4.029 9 9c0 1.761-.514 3.398-1.387 4.785l7.387 7.387-2.828 2.828zm-12.172-8c3.859 0 7-3.14 7-7s-3.141-7-7-7-7 3.14-7 7 3.141 7 7 7z"/>
                        </svg>
                    </ButtonSquare>
                </div>
        </div>
    }
    <div class="border-t-2 border-accent"></div>
    @if (m.RequestAuthor is {Id.IsEmpty: false }) {
        <div class="py-2">
            <ChatAuthorBadge
                AuthorId="@m.RequestAuthor.Id"
                Size="SquareSize.Size9"
                ShowsPresence="true"
                Click="OnSelfClick"
                TextClass="font-medium text-primary select-none"/>
        </div>
        }
        <div class="flex-auto flex-y overflow-y-auto custom-scrollbar">
        @foreach (var authorId in m.AuthorIds) {
            <ChatAuthorBadge
                AuthorId="@authorId"
                Size="SquareSize.Size9"
                ShowsPresence="true"
                Click="() => OnChatAuthorClick(authorId)"
                TextClass="font-medium text-primary select-none"/>
        }
    </div>
</div>

@code {
    [Inject] private IChatAuthors Authors { get; init; } = null!;
    [Inject] private Session Session { get; init; } = null!;
    [Inject] private ModalUI ModalUI { get; init; } = null!;
    [Inject] private IJSRuntime JS { get; init; } = null!;

    private DotNetObjectReference<IRightPanelSearchBackend> BlazorRef { get; set; } = null!;
    private IJSObjectReference JSRef { get; set; } = null!;
    private ElementReference Ref { get; set; }

    [CascadingParameter] public Chat Chat { get; set; } = null!;

    public override async ValueTask DisposeAsync()
    {
        await base.DisposeAsync().ConfigureAwait(true);
        await JSRef.DisposeSilentlyAsync().ConfigureAwait(true);
        // ReSharper disable once ConstantConditionalAccessQualifier
        BlazorRef?.Dispose();
    }

    protected override ComputedState<Model>.Options GetStateOptions()
        => new() { InitialValue = Model.None };

    protected override async Task<Model> ComputeState(CancellationToken cancellationToken) {
        var allAuthorIds = await Authors.ListAuthorIds(Session, Chat.Id, cancellationToken);
        var requestAuthor = await Authors.GetOwnAuthor(Session, Chat.Id, cancellationToken).ConfigureAwait(false);
        var authorIds = requestAuthor == null ? allAuthorIds : allAuthorIds.Remove(requestAuthor.Id.ToString());
        return new() {
            AuthorIds = authorIds,
            RequestAuthor = requestAuthor,
        };
    }

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (firstRender) {
            BlazorRef = DotNetObjectReference.Create<IRightPanelSearchBackend>(this);
            // NOTE(AY): Commented out, coz it triggers JS errors in new peer chats with zero people
            /*
            JSRef = await JS.InvokeAsync<IJSObjectReference>(
                $"{ChatBlazorUIModule.ImportName}.RightPanelSearch.create",
                Ref, BlazorRef
                ).ConfigureAwait(true);
            */
        }
    }

    private void OnInviteClick()
        => ModalUI.Show(new InviteChatAuthor.Model(Chat));

    private void OnChatAuthorClick(string authorId)
        => ModalUI.Show(new ChatAuthorDialog.Model(authorId));

    private void OnSelfClick()
        => ModalUI.Show(new AuthorSettingsModal.Model(Chat));

    private void OnSearchClick() {
        // TODO need some method
    }

    public sealed class Model {
        public static Model None { get; } = new();
        public ImmutableArray<Symbol> AuthorIds { get; init; } = ImmutableArray<Symbol>.Empty;
        public ChatAuthor? RequestAuthor { get; init; }
    }
}
