@namespace ActualChat.Chat.UI.Blazor.Components
@inherits ComputedStateComponent<ChatAuthorsTab.Model>
@{
    var m = State.LatestNonErrorValue;
    var isPeerChat = ChatIdExt.GetChatIdKind(Chat.Id) == ChatIdKind.PeerFull;
}

<div class="flex-y w-full space-y-3">
    @if (!isPeerChat) {
        <div class="flex-x w-full justify-between">
            <div class="flex-auto"></div>
            <div class="flex-none">
                <Button Click="OnInviteClick" Title="Invite users">
                    <i class="fa fa-user-plus p-1 pl-0" aria-hidden="true"></i>
                    Invite users
                </Button>
            </div>
        </div>
    }
    @foreach (var authorId in m.AuthorIds) {
        <ChatAuthorBadge
            AuthorId="@authorId"
            Size="PersonCircleSize.Size12"
            ShowsPresence="true"
            Click="() => OnChatAuthorClick(authorId)"
            TextClass="font-medium text-primary select-none"/>
    }
</div>

@code {
    [Inject] private IChatAuthors Authors { get; init; } = null!;
    [Inject] private Session Session { get; init; } = null!;
    [Inject] private ModalUI ModalUI { get; init; } = null!;

    [CascadingParameter] public Chat Chat { get; set; } = null!;

    protected override ComputedState<Model>.Options GetStateOptions()
        => new() { InitialValue = Model.None };

    protected override async Task<Model> ComputeState(CancellationToken cancellationToken) {
        var authorIds = await Authors.GetAuthorIds(Session, Chat.Id, cancellationToken);
        return new() {
            AuthorIds = authorIds,
        };
    }

    private void OnInviteClick()
        => ModalUI.Show(new InviteChatAuthor.Model(Chat));

    private void OnChatAuthorClick(string authorId)
        => ModalUI.Show(new ChatAuthorDialog.Model(authorId));

    public sealed class Model {
        public static Model None { get; } = new();
        public ImmutableArray<string> AuthorIds { get; init; } = ImmutableArray<string>.Empty;
    }
}
