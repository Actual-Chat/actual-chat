@namespace ActualChat.Chat.UI.Blazor.Components
@inherits ComputedStateComponent<string>

@{
    var m = State.Value;
}
@m

@code {
    private Chat Chat => ChatContext.Chat;
    private Session Session => ChatContext.Session;
    private IAuthors Authors => ChatContext.Authors;

    [Parameter] public ChatContext ChatContext { get; set; } = null!;

    protected override ComputedState<string>.Options GetStateOptions()
        => new() {
            UpdateDelayer = FixedDelayer.Instant,
            Category = GetStateCategory(),
        };

    protected override async Task<string> ComputeState(CancellationToken cancellationToken) {
        var ownAccount = ChatContext.OwnAccount;
        if (!Chat.Id.IsPeerChat(out var peerChatId))
            return "";
        var peerAccountId = peerChatId.UserIds.OtherThanOrDefault(ownAccount.Id);
        if (peerAccountId.IsNone)
            return "";

        var ownAuthor = await Authors.GetOwn(Session, peerChatId, CancellationToken.None);
        var anotherAuthorId = new AuthorId(peerChatId, ownAuthor != null && peerChatId.UserId1 == ownAuthor.UserId ? 2 : 1, AssumeValid.Option);
        var anotherAuthor = await Authors.Get(Session, peerChatId, anotherAuthorId, CancellationToken.None);

        if (anotherAuthor == null)
            return "";
        var presenceTask = Authors.GetPresence(Session, Chat.Id, anotherAuthor.Id, CancellationToken.None);
        var presence = await presenceTask.ConfigureAwait(false);

        var status = presence switch {
            Presence.Offline => "Offline",
            Presence.Away => "Away",
            Presence.Online => "Online",
            Presence.Recording => "Online",
            _ => "",
        };
        return status;
    }
}
