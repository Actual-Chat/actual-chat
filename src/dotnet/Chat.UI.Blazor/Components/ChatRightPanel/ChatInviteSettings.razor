@namespace ActualChat.Chat.UI.Blazor.Components
@using ActualChat.Invite
@inherits ComputedStateComponent<ChatInviteSettings.Model>
@{
    var m = State.LatestNonErrorValue;
}

@if (!m.PublicUrl.IsNullOrEmpty()) {
    <h4 class="section">Public join link</h4>
    <CopyToClipboard Class="px-1 pl-2" Text="@m.PublicUrl"/>
}
@if (m.Invites.Count > 0 || m.PublicUrl.IsNullOrEmpty()) {
    <h4 class="section">Private join links</h4>
    <InviteList Invites="m.Invites" LinkFormat="join/{0}"/>
    <div class="mt-2 @(new FlexMode(FlexAlignment.End))">
        <Button Click="OnNewInviteClick" Class="btn-success">New private invite link</Button>
    </div>
}

@code {
    [CascadingParameter] public Chat Chat { get; set; } = null!;

    [Inject] private Session Session { get; init; } = null!;
    [Inject] private IInvites Invites { get; init; } = null!;
    [Inject] private MomentClockSet Clocks { get; init; } = null!;
    [Inject] private UICommandRunner Cmd { get; init; } = null!;
    [Inject] private NavigationManager Nav { get; init; } = null!;

    protected override ComputedState<Model>.Options GetStateOptions()
        => new() { InitialValue = Model.None };

    protected override async Task<Model> ComputeState(CancellationToken cancellationToken) {
        var invites = await Invites.GetChatInvites(Session, Chat.Id, cancellationToken);
        var threshold = Clocks.SystemClock.Now - TimeSpan.FromDays(3);
        invites = invites
            .Where(c => c.ExpiresOn > threshold)
            .OrderByDescending(c => c.ExpiresOn)
            .ToImmutableArray();
        var publicUrl = Chat.IsPublic ? Nav.BaseUri + "chat/" + Chat.Id.Value : "";
        return new() {
            PublicUrl = publicUrl,
            Invites = invites,
        };
    }

    private async Task OnNewInviteClick() {
        var invite = new Invite {
            Details = new InviteDetails { Chat = new(Chat.Id) },
            Remaining = 10, // TODO: configurable
        };
        _ = await Cmd.Run(new IInvites.GenerateCommand(Session, invite));
    }

    public record Model {
        public static Model None { get; } = new();

        public string PublicUrl { get; set; } = "";
        public IImmutableList<Invite> Invites { get; set; } = ImmutableArray.Create<Invite>();
    }
}
