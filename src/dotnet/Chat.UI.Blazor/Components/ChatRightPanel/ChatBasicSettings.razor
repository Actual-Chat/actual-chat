@namespace ActualChat.Chat.UI.Blazor.Components
@using System.ComponentModel.DataAnnotations

<EditForm Model="@_model" OnValidSubmit="@OnSave">
    <DataAnnotationsValidator/>

    <div class="flex-x items-center">
        <label for="ChatTitle" class="block text-sm font-medium text-secondary">Chat title</label>
        <div class="ml-4 grow">
            <TextBox @bind-Value="@_model.Title" id="ChatTitle"
                     class="input-underlined w-full focus:outline-none focus:border-sky-500"/>
        </div>
    </div>

    <div class="mt-3 flex-x items-center">
        <label for="IsPrivateChatToggle" class="block text-sm font-medium text-secondary mr-2">Private chat</label>
        <ToggleEdit Id="IsPrivateChatToggle" @bind-Value="_model.IsPrivate" />
    </div>

    <div class="mt-3 flex-x justify-end">
        <Button Type="@ButtonType.Submit" IsDisabled="@(!context.Validate())">Save</Button>
    </div>
</EditForm>


@code {
    private Chat? _chat;
    private readonly Model _model = new();

    [CascadingParameter] public Chat Chat { get; set; } = null!;

    [Inject] private Session Session { get; init; } = null!;
    [Inject] private IChats Chats { get; init; } = null!;
    [Inject] private UICommandRunner Cmd { get; init; } = null!;

    protected override Task OnParametersSetAsync() {
        _chat = Chat;
        _model.Title = _chat.Title;
        _model.IsPrivate = !_chat.IsPublic;
        return Task.CompletedTask;
    }

    private async Task OnSave() {
        var newChat = Chat with {
            Title = _model.Title,
            IsPublic = !_model.IsPrivate
        };
        await Cmd.Run(new IChats.UpdateChatCommand(Session, newChat));
    }

    public sealed class Model
    {
        [Required] public string Title { get; set; } = "";
        public bool IsPrivate { get; set; }
    }
}
