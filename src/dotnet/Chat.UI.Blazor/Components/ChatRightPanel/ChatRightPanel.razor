@namespace ActualChat.Chat.UI.Blazor.Components
@using ActualChat.UI.Blazor.Components.SideNav
@inherits ComputedStateComponent<ChatRightPanel.Model>
@{
    var m = State.LatestNonErrorValue;
}

<SideNav Direction="SideNavDirection.RightToLeft"
         Open="() => RightPanelUI.IsVisible.Value = true"
         Closed="() => RightPanelUI.IsVisible.Value = false"
         IsOpen="@m.IsRightPanelVisible">
    <div class="flex-y w-full h-full border-l border-bg-04">
        <RightPanelHeader/>
        <RightPanelChatInfo/>
        <div class="flex w-full min-h-2 bg-04"></div>
        <div class="flex flex-col w-full h-full overflow-hidden">
            <TabPanel TabsClass="wide-left-panel-tabs" BottomHill="true">
                <Tab Title="Members">
                    <ChatAuthors/>
                </Tab>
                @if (m.EnableIncompleteUI) {
                    <Tab Title="Media">
                        <ToBeDone/>
                    </Tab>
                    <Tab Title="Files">
                        <ToBeDone/>
                    </Tab>
                    <Tab Title="Links">
                        <ToBeDone/>
                    </Tab>
                }
            </TabPanel>
        </div>
    </div>
</SideNav>

@code {
    [Inject] private RightPanelUI RightPanelUI { get; init; } = null!;
    [Inject] private Features Features { get; init; } = null!;

    [CascadingParameter] public Chat Chat { get; set; } = null!;

    protected override ComputedState<Model>.Options GetStateOptions()
        => new() {
            InitialValue = Model.None,
            UpdateDelayer = UpdateDelayer.MinDelay,
        };

    protected override async Task<Model> ComputeState(CancellationToken cancellationToken) {
        var isRightPanelVisible = await RightPanelUI.IsVisible.Use(cancellationToken).ConfigureAwait(false);
        var enableIncompleteUI = await Features.Get<UIFeatures.EnableIncompleteUI, Boolean>(cancellationToken).ConfigureAwait(false);
        return new () {
            IsRightPanelVisible = isRightPanelVisible,
            EnableIncompleteUI = enableIncompleteUI,
        };
    }

    public sealed record Model {
        public static Model None { get; } = new();
        public bool IsRightPanelVisible { get; init; }
        public bool EnableIncompleteUI { get; init; }
    }
}
