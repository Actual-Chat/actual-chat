@namespace ActualChat.Chat.UI.Blazor.Components
@using ActualChat.UI.Blazor.Components.SideNav
@inherits ComputedStateComponent<ChatRightPanel.Model>
@{
    var m = State.Value;
    if (ReferenceEquals(m, Model.Loading))
        return;
}

<SideNav
    Side="SideNavSide.Right"
    IsOpen="@m.IsVisible"
    VisibilityChanged="@(isOpen => PanelsUI.Right.SetIsVisible(isOpen))">
    <div class="flex-y md:w-80 h-full border-l border-bg-04">
        <RightPanelHeader/>
        <div class="flex flex-col overflow-y-auto custom-scrollbar">
            <RightPanelChatInfo/>
            <div class="flex flex-col border-t-4 border-bg-04">
                @if (m.ShowMembers || m.EnableIncompleteUI) {
                    <TabPanel
                        @key="@Chat.Id.Value"
                        TabsClass="left-panel-tabs wide-left-panel-tabs"
                        BottomHill="true">

                        @if (m.ShowMembers) {
                            <Tab @key="@("members")" Id="members" Title="Members" Order="0">
                                <AuthorList/>
                            </Tab>
                        }
                        @if (m.EnableIncompleteUI) {
                            <Tab @key="@("media")" Id="media" Title="Media" Order="1">
                                <ToBeDone/>
                            </Tab>
                            <Tab @key="@("files")" Id="files" Title="Files" Order="2">
                                <ToBeDone/>
                            </Tab>
                            <Tab @key="@("links")" Id="links" Title="Links" Order="3">
                                <ToBeDone/>
                            </Tab>
                        }
                    </TabPanel>
                }
            </div>
        </div>
    </div>
</SideNav>

@code {
    [Inject] private PanelsUI PanelsUI { get; init; } = null!;
    [Inject] private Features Features { get; init; } = null!;
    [Inject] private IChats Chats { get; init; } = null!;
    [Inject] private Session Session { get; init; } = null!;

    [CascadingParameter] public Chat Chat { get; set; } = null!;
    [CascadingParameter] public ScreenSize ScreenSize { get; set; }

    protected override ComputedState<Model>.Options GetStateOptions()
        => new() {
            InitialValue = Model.Loading,
            UpdateDelayer = FixedDelayer.Instant,
            Category = GetStateCategory(),
        };

    protected override async Task<Model> ComputeState(CancellationToken cancellationToken) {
        var isVisible = await PanelsUI.Right.IsVisible.Use(cancellationToken);
        var rules = await Chats.GetRules(Session, Chat.Id, cancellationToken);
        var showMembers = rules.CanSeeMembers();
        var enableIncompleteUI = await Features.Get<UIFeatures.EnableIncompleteUI, bool>(cancellationToken);
        return new () {
            IsVisible = isVisible,
            ShowMembers = showMembers,
            EnableIncompleteUI = enableIncompleteUI,
        };
    }

    public sealed record Model {
        public static Model Loading { get; } = new();

        public bool IsVisible { get; init; }
        public bool ShowMembers { get; init; }
        public bool EnableIncompleteUI { get; init; }
    }
}
