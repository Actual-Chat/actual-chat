@namespace ActualChat.Chat.UI.Blazor.Components
@using ActualChat.UI.Blazor.Components.SideNav
@inherits ComputedStateComponent<ChatRightPanel.Model>
@{
    var m = State.Value;
    if (ReferenceEquals(m, Model.Loading))
        return;
}

<SideNav
    Side="SideNavSide.Right"
    IsOpen="@m.IsVisible"
    VisibilityChanged="@(isOpen => PanelsUI.Right.SetIsVisible(isOpen))">
    <div class="right-chat-panel">
        @if (m.RenderContent) {
            <RightPanelHeader ChatContext="@ChatContext"/>
            <div class="c-panel-content">
                <RightPanelChatInfo ChatContext="@ChatContext"/>
                <div class="c-panel-tabs">
                    @if (m.ShowMembers || m.EnableIncompleteUI) {
                        <TabPanel
                            @key="@Chat.Id.Value"
                            TabsClass="left-panel-tabs wide-left-panel-tabs"
                            BottomHill="true">

                            @if (m.ShowMembers) {
                                <Tab @key="@("members")" Id="members" Title="Members" Order="0">
                                    <AuthorList ChatContext="@ChatContext"/>
                                </Tab>
                            }
                            @if (m.EnableIncompleteUI) {
                                <Tab @key="@("media")" Id="media" Title="Media" Order="1">
                                    <ToBeDone/>
                                </Tab>
                                <Tab @key="@("files")" Id="files" Title="Files" Order="2">
                                    <ToBeDone/>
                                </Tab>
                                <Tab @key="@("links")" Id="links" Title="Links" Order="3">
                                    <ToBeDone/>
                                </Tab>
                            }
                        </TabPanel>
                    }
                </div>
            </div>
        }
    </div>
</SideNav>

@code {
    private bool _wasEverVisible;

    private Session Session => ChatContext.Session;
    private Chat Chat => ChatContext.Chat;
    private IChats Chats => ChatContext.Chats;
    private PanelsUI PanelsUI => ChatContext.PanelsUI;
    private Features Features => ChatContext.Features;

    [Parameter, EditorRequired] public ChatContext ChatContext { get; set; } = null!;
    [CascadingParameter] public ScreenSize ScreenSize { get; set; }

    protected override ComputedState<Model>.Options GetStateOptions()
        => new() {
            InitialValue = Model.Loading,
            UpdateDelayer = FixedDelayer.Instant,
            Category = GetStateCategory(),
        };

    protected override async Task<Model> ComputeState(CancellationToken cancellationToken) {
        var isVisible = await PanelsUI.Right.IsVisible.Use(cancellationToken);
        var rules = await Chats.GetRules(Session, Chat.Id, cancellationToken);
        var showMembers = rules.CanSeeMembers();
        var enableIncompleteUI = await Features.Get<Features_EnableIncompleteUI, bool>(cancellationToken);
        _wasEverVisible |= isVisible;
        return new () {
            IsVisible = isVisible,
            RenderContent = true,
            ShowMembers = showMembers,
            EnableIncompleteUI = enableIncompleteUI,
        };
    }

    // Nested types

    public sealed record Model {
        public static readonly Model Loading = new();

        public bool IsVisible { get; init; }
        public bool ShowMembers { get; init; }
        public bool EnableIncompleteUI { get; init; }
        public bool RenderContent { get; init; }
    }
}
