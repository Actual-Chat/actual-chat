@namespace ActualChat.Chat.UI.Blazor.Components
@using System.ComponentModel.DataAnnotations
@using ActualChat.Invite
@implements IModalView<ChatSettingsModal.Model>
@inherits ComputedStateComponent<ChatSettingsModal.ComputedModel>
@{
    var m = State.Value;
}

<Form @ref="@_formRef" Model="@_form" OnSubmit="@OnSave">
    <DialogFrame Title="Edit chat settings" Class="edit-chat-settings-modal" HasCloseButton="true">
        <Body>
        <div class="flex-y text-03 p-3 overflow-y-auto custom-scrollbar">
            @if (m.Rules != null) {
                @if (m.Rules.CanEditProperties()) {
                    <DataAnnotationsValidator/>

                    <div class="pb-2 mb-4 border-b border-bg-03">
                        <FormSection For="() => ModalModel.Chat">
                            <ChatMuteToggle Chat="@ModalModel.Chat" />
                        </FormSection>
                    </div>

                    <PicUpload
                        ImageUploadUrl="@_form.ImageUploadUrl"
                        ImagePicked="OnImagePicked"
                        Size="SquareSize.Size20"
                        Title="@_form.Title"
                        ContentId="@_form.Picture">
                    </PicUpload>

                    <FormSection For="() => _form.Title" Label="Chat title" InputId="@_form.TitleId" IsRequired="true">
                        <TextBox @bind-Value="@_form.Title" id="@_form.TitleId" Autofocus="true" Class="right-panel-input"/>
                    </FormSection>

                    <FormSection For="() => _form.IsPublic" Class="flex h-12 md:h-8 justify-center">
                        <ToggleEdit Id="@_form.IsPublicFormId" Label="Public chat &ndash; anyone can join" @bind-Value="_form.IsPublic"/>
                    </FormSection>

                    @if (m.AllowEditJoinAnonymouslyProps) {
                        <FormSection For="() => _form.AllowGuestAuthors" Class="flex h-12 md:h-8 justify-center">
                            <ToggleEdit Id="@_form.AllowGuestAuthorsFormId" Label="Allow guest users to join" @bind-Value="_form.AllowGuestAuthors"/>
                        </FormSection>

                        <FormSection For="() => _form.AllowAnonymousAuthors" Class="flex h-12 md:h-8 justify-center">
                            <ToggleEdit Id="@_form.AllowAnonymousAuthorsFormId" Label="Allow signed-in users to join anonymously" @bind-Value="_form.AllowAnonymousAuthors"/>
                        </FormSection>
                    }
                }
                @if (_form.IsPublic) {
                    @if (m.Link is { } publicUrl) {
                        <h4 class="section">Public join link</h4>
                        <CopyToClipboard Caption="@publicUrl.ShortLocalUrl" Text="@publicUrl.AbsoluteUrl" ShowInput="true"/>
                    }
                } else {
                    @if (m.Rules.CanInvite()) {
                        <h4 class="section">Private join links</h4>
                        @if (m.Invites.Length > 0) {
                            <InviteList Invites="m.Invites" LinkFormat="join/{0}"/>
                        }
                        <div class="@(new FlexMode(FlexAlignment.End)) mt-2">
                            <Button Click="OnNewInviteClick" Class="btn-primary">New private join link</Button>
                        </div>
                    }
                }
            }
        </div>
        </Body>
        <Buttons>
            <div class="btn-group">
                @{
                    var submitClass = $"btn-primary {(_formRef.IsValid ? "" : "disabled")}";
                }
                <Button Type="@ButtonType.Button" Class="btn-cancel" Click="OnCancel">Cancel</Button>
                <Button Type="@ButtonType.Submit" Class="@submitClass">Save</Button>
            </div>
        </Buttons>
    </DialogFrame>
</Form>

@code {
    private Form _formRef = null!;
    private FormModel _form = null!;

    [Inject] private Session Session { get; init; } = null!;
    [Inject] private IChats Chats { get; init; } = null!;
    [Inject] private IInvites Invites { get; init; } = null!;
    [Inject] private ComponentIdGenerator ComponentIdGenerator { get; init; } = null!;
    [Inject] private VisualMediaViewerUI VisualMediaViewerUI { get; init; } = null!;
    [Inject] private UICommander UICommander { get; init; } = null!;
    [Inject] private UrlMapper UrlMapper { get; init; } = null!;
    [Inject] private DiffEngine DiffEngine { get; init; } = null!;
    [Inject] private MomentClockSet Clocks { get; init; } = null!;
    [Inject] private Features Features { get; init; } = null!;

    [CascadingParameter] public Modal Modal { get; set; } = null!;
    [Parameter] public Model ModalModel { get; set; } = null!;

    protected override ComputedState<ComputedModel>.Options GetStateOptions()
        => new() {
            InitialValue = ComputedModel.None,
            UpdateDelayer = FixedDelayer.Instant,
            Category = GetStateCategory(),
        };

    protected override async Task OnParametersSetAsync() {
        var chat = await Chats.Get(Session, ModalModel.Chat.Id, default).Require();
        _form ??= new(ComponentIdGenerator);
        _form.Title = chat.Title;
        _form.Picture = chat.Picture?.ContentId ?? "";
        _form.IsPublic = chat.IsPublic;
        _form.AllowGuestAuthors = chat.AllowGuestAuthors;
        _form.AllowAnonymousAuthors = chat.AllowAnonymousAuthors;
        _form.ImageUploadUrl = $"/api/chats/{chat.Id}/upload-picture";
    }

    protected override async Task<ComputedModel> ComputeState(CancellationToken cancellationToken) {
        var rules = await Chats.GetRules(Session, ModalModel.Chat.Id, cancellationToken);
        var invites = await Invites.ListChatInvites(Session, ModalModel.Chat.Id, cancellationToken);
        var threshold = Clocks.SystemClock.Now - TimeSpan.FromDays(3);
        invites = invites
            .Where(c => c.ExpiresOn > threshold)
            .OrderByDescending(c => c.ExpiresOn)
            .ToImmutableArray();
        var link = Links.Chat(ModalModel.Chat.Id).ToDisplayUrl(UrlMapper);
        var allowEditJoinAnonymouslyProps = await Features.Get<UIFeatures.AllowEditJoinAnonymouslyChatProps, bool>(cancellationToken);
        return new() {
            Rules = rules,
            Link = link,
            Invites = invites,
            AllowEditJoinAnonymouslyProps = allowEditJoinAnonymouslyProps,
        };
    }

    private void OnCancel()
        => Modal.Close();

    private async Task OnSave() {
        var chat = await Chats.Get(Session, ModalModel.Chat.Id, default).Require();
        var newChat = chat with {
            Title = _form.Title,
            IsPublic = _form.IsPublic,
            AllowGuestAuthors = _form.AllowGuestAuthors,
            AllowAnonymousAuthors = _form.AllowAnonymousAuthors,
            MediaId = _form.PictureId,
        };
        var command = new IChats.ChangeCommand(Session, chat.Id, chat.Version, new() {
            Update = DiffEngine.Diff<Chat, ChatDiff>(chat, newChat),
        });
        await UICommander.Run(command);
        Modal.Close();
    }

    private void OnImagePicked(MediaContent mediaContent) {
        _form.Picture = mediaContent.ContentId;
        _form.PictureId = mediaContent.MediaId;
        StateHasChanged();
    }

    private async Task OnNewInviteClick() {
        var invite = new Invite {
            Remaining = 10, // TODO: make it configurable
            Details = new ChatInviteOption(ModalModel.Chat.Id),
        };
        _ = await UICommander.Run(new IInvites.GenerateCommand(Session, invite));
    }

    public sealed class FormModel
    {
        [Required, MinLength(1)]
        public string Title { get; set; } = "";
        public string Picture { get; set; } = "";
        public MediaId PictureId { get; set; } = MediaId.None;
        public bool IsPublic { get; set; }
        public bool AllowGuestAuthors { get; set; }
        public bool AllowAnonymousAuthors { get; set; }
        public string ImageUploadUrl { get; set; } = "";

        public string FormId { get; }
        public string TitleId { get; }
        public string PictureFormId { get; }
        public string IsPublicFormId { get; }
        public string AllowGuestAuthorsFormId { get; }
        public string AllowAnonymousAuthorsFormId { get; }

        public FormModel(ComponentIdGenerator componentIdGenerator) {
            FormId = componentIdGenerator.Next("new-chat-form");
            TitleId = $"{FormId}-title";
            PictureFormId = $"{FormId}-picture";
            IsPublicFormId = $"{FormId}-is-public";
            AllowGuestAuthorsFormId = $"{FormId}-allows-guests";
            AllowAnonymousAuthorsFormId = $"{FormId}-allows-anonymous";
        }
    }

    public sealed record ComputedModel {
        public static ComputedModel None { get; } = new();

        public AuthorRules? Rules { get; init; }
        public DisplayUrl? Link { get; init; }
        public ImmutableArray<Invite> Invites { get; init; } = ImmutableArray.Create<Invite>();
        public bool AllowEditJoinAnonymouslyProps { get; init; }
    }

    public sealed record Model(Chat Chat);
}
