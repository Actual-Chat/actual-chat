@namespace ActualChat.Chat.UI.Blazor.Components
@{
    if (!_areReactionsEnabled)
        return;
}
<ul class="reaction-select">
    @foreach (var emoji in _emojis) {
        <MenuEntry
            OnClick="_ => React(emoji.Code)"
            Class="reaction-select-reaction">
            <IconContent>
                <EmojiIcon Code="@emoji.Code" class="reaction-select-reaction-emoji"/>
            </IconContent>
        </MenuEntry>
    }
</ul>

@code {
    private const int MaxReactionCount = 7;
    private bool _areReactionsEnabled;
    private Emoji[] _emojis = null!;

    [Inject] private Session Session { get; init; } = null!;
    [Inject] private UICommander UICommander { get; init; } = null!;
    [Inject] private Features Features { get; init; } = null!;
    [Parameter, EditorRequired] public ChatEntry ChatEntry { get; set; } = null!;
    [Parameter] public bool ShowDefaultReaction { get; set; } = true;

    protected override async Task OnInitializedAsync() {
        _areReactionsEnabled = await Features.Get<UIFeatures.EnableMessageReactions, bool>(CancellationToken.None);
    }

    protected override void OnParametersSet() {
        var skipCount = ShowDefaultReaction ? 0 : 1;
        _emojis = Emoji.All.Skip(skipCount).Take(MaxReactionCount).ToArray();
    }

    private Task React(string emoji) {
        var command = new IReactions.ReactCommand(Session, new Reaction {
            ChatId = ChatEntry.ChatId, EntryId = ChatEntry.Id, Emoji = emoji,
        });
        return UICommander.Run(command);
    }
}
