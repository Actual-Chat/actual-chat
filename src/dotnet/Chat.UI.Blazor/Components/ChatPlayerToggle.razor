@namespace ActualChat.Chat.UI.Blazor.Components
@inherits ComputedStateComponent<bool>
@using ActualChat.Chat.UI.Blazor.Services
@using ActualChat.MediaPlayback

@{
    var isPlaying = State.ValueOrDefault;
    var cls = $"toggle-button{(isPlaying ? "-on" : "")}";
}
<button onclick="@Toggle"
        class="@(_class ??= this.DefaultClass()) p-1 transition-all duration-150">
    <svg class="fill-current w-8 h-8 @cls" xmlns="http://www.w3.org/2000/svg" viewBox="-2 -2 28 28">
        <path d="M6 23v-11c-4.036 0-6 2.715-6 5.5 0 2.807 1.995 5.5 6 5.5zm18-5.5c0-2.785-1.964-5.5-6-5.5v11c4.005 0 6-2.693 6-5.5zm-12-13.522c-3.879-.008-6.861 2.349-7.743 6.195-.751.145-1.479.385-2.161.716.629-5.501 4.319-9.889 9.904-9.889 5.589 0 9.29 4.389 9.916 9.896-.684-.334-1.415-.575-2.169-.721-.881-3.85-3.867-6.205-7.747-6.197z"/>    </svg>
</button>

@code {
    private static string? _class;

    [Inject] private MomentClockSet Clocks { get; set; } = null!;
    [Parameter] public ChatPlayer Player { get; set; } = null!;

    protected override ComputedState<bool>.Options GetStateOptions()
        => new() { UpdateDelayer = UpdateDelayer.MinDelay };

    protected override async Task<bool> ComputeState(CancellationToken cancellationToken) {
        var playback = await Player.PlaybackState.Use(cancellationToken).ConfigureAwait(false);
        if (playback == null)
            return false;
        var isStopped = await playback.IsStoppedState.Use(cancellationToken).ConfigureAwait(false);
        return !isStopped;
    }

    private Task Toggle() {
        var isPlaying = Player.PlaybackState.Value is { IsStopped: false };
        return isPlaying ? Stop() : Play();
    }

    private Task Play()
        => Player.Play(Clocks.SystemClock.Now);

    private Task Stop()
        => Player.Stop();
}
