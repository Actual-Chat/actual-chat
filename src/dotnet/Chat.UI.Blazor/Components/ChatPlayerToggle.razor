@namespace ActualChat.Chat.UI.Blazor.Components
@inherits ComputedStateComponent<bool>
@using ActualChat.Chat.UI.Blazor.Services
@using ActualChat.MediaPlayback

@{
    var isPlaying = State.ValueOrDefault;
    var cls = $"toggle-button{(isPlaying ? "-on" : "")}";
}
<button onclick="@Toggle"
        class="@(_class ??= this.DefaultClass()) p-1 transition-all duration-150">
    <svg class="fill-current w-8 h-8 @cls" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16">
        <path id="headphones" d="M14.486 8.65V7.56a6.487 6.487 0 00-12.972 0v1.093A2.076 2.076 0 000 10.643v2.206c0 1.147.93 2.077 2.076 2.077h1.41a.567.567 0 00.566-.567V9.133a.566.566 0 00-.566-.566h-.84V7.56a5.354 5.354 0 1110.708 0v1.007h-.84a.567.567 0 00-.568.566v5.226c0 .313.254.567.568.567h1.408c1.148 0 2.078-.93 2.078-2.077v-2.207a2.078 2.078 0 00-1.514-1.991z"/>
    </svg>
</button>

@code {
    private static string? _class;

    [Inject] private MomentClockSet Clocks { get; set; } = null!;
    [Parameter] public ChatPlayer Player { get; set; } = null!;

    protected override ComputedState<bool>.Options GetStateOptions()
        => new() { UpdateDelayer = UpdateDelayer.MinDelay };

    protected override async Task<bool> ComputeState(CancellationToken cancellationToken) {
        var playback = await Player.PlaybackState.Use(cancellationToken).ConfigureAwait(false);
        if (playback == null)
            return false;
        var isStopped = await playback.IsStoppedState.Use(cancellationToken).ConfigureAwait(false);
        return !isStopped;
    }

    private Task Toggle() {
        var isPlaying = Player.PlaybackState.Value is { IsStopped: false };
        return isPlaying ? Stop() : Play();
    }

    private Task Play()
        => Player.Play(Clocks.SystemClock.Now);

    private Task Stop()
        => Player.Stop();
}
