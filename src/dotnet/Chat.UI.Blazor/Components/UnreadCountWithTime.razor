@namespace ActualChat.Chat.UI.Blazor.Components
@inherits FusionComponentBase
@implements IDisposable
@{
    _lastRenderTime = Clock.Now;
    if (Value == 0 && !HasMentions)
        return;

    var timestamp = "";
    if (LastEntry != null) {
        timestamp = DateTimeConverter.ToLocalTime(LastEntry.BeginsAt).ToShortTimeString();
    }
    var text = HasMentions ? "@" : Value == 0 ? "" : Value.FormatK();
    var isMuted = NotificationMode switch {
        ChatNotificationMode.ImportantOnly => !HasMentions,
        ChatNotificationMode.Muted => true
        ,_ => false,
        };
    var bgColor = isMuted ? "bg-counter" : "bg-primary";
    var cursorClass = Click.HasDelegate ? "cursor-pointer" : "";
    var cssClass = $"message-counter-badge {cursorClass}";
}

<div class="message-counter-with-time">
    @if (!HideLastEntryTime) {
        <div class="text-xs mr-1">@timestamp</div>
    }
    <Badge Class="@cssClass" Color="@bgColor" Click="@Click">@text</Badge>
</div>


@code {
    private Moment _lastRenderTime;
    private CancellationTokenSource? _cancelRenderDelayCts;

    [Inject] private ChatUIHub Hub { get; set; } = null!;
    private MomentClockSet Clocks => Hub.Clocks();
    private DateTimeConverter DateTimeConverter => Hub.DateTimeConverter;

    [Parameter, EditorRequired] public Trimmed<int> Value { get; set; }
    [Parameter] public ChatEntry? LastEntry { get; set; }
    [Parameter] public bool HideLastEntryTime { get; set; }
    [Parameter] public bool HasMentions { get; set; }
    [Parameter] public ChatNotificationMode NotificationMode { get; set; }
    [Parameter] public TimeSpan UpdateDelay { get; set; } = TimeSpan.FromSeconds(0.5);
    [Parameter] public EventCallback Click { get; set; }

    private MomentClock Clock => Clocks.CoarseCpuClock;

    public void Dispose() {
        _cancelRenderDelayCts.CancelAndDisposeSilently();
        _cancelRenderDelayCts = null;
    }

    protected override bool ShouldRender() {
        _cancelRenderDelayCts.CancelAndDisposeSilently();
        _cancelRenderDelayCts = null;

        var now = Clock.Now;
        var remainingDelay = _lastRenderTime + UpdateDelay - now;
        if (remainingDelay <= TickSource.Default.Period)
            return true;

        _cancelRenderDelayCts = new CancellationTokenSource();
        var cancelDelayToken = _cancelRenderDelayCts.Token;
        Clock.Delay(remainingDelay, cancelDelayToken).ContinueWith(_ => {
            if (cancelDelayToken.IsCancellationRequested)
                return;

            this.NotifyStateHasChanged();
        }, TaskScheduler.Current);
        return false;
    }
}
