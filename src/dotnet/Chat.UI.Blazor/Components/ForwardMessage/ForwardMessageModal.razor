@namespace ActualChat.Chat.UI.Blazor.Components
@implements IModalView<ForwardMessageModal.Model>
@using ActualChat.Search
@{
    var canSend = SelectedChatIds.Count != 0;
    _viewSettings.CanSubmit = canSend;
}

<DialogFrame
    Class="forward-message-modal"
    Title="Forward message"
    HasCloseButton="true"
    NarrowViewSettings="_viewSettings">
    <Body>
    <FormBlock>
        <ContactSelector
            @ref="@_contactSelectorRef"
            ExcludeChatIds="@ModalModel.ExcludedChatIds"
            ChatListPreOrder="@ChatListPreOrder.NotesFirst"
            SearchPhrase="@_searchPhrase"
            Changed="@StateHasChanged">
            <SearchBoxNew
                Placeholder="Who would you like to share with"
                MaxLength="@Constants.Chat.MaxSearchFilterLength"
                TextChanged="@OnFilter"/>
            <ContactSelectorListView/>
        </ContactSelector>
    </FormBlock>
    </Body>
    <Buttons>
        <Button
            Type="@ButtonType.Button"
            Class="btn-modal"
            Click="@(() => Modal.Close())">
            Cancel
        </Button>
        <Button
            Type="@ButtonType.Submit"
            Class="btn-modal btn-primary"
            IsDisabled="@(!canSend)"
            Click="OnSend">
            Send
        </Button>
    </Buttons>
</DialogFrame>

@code {
    private ContactSelector? _contactSelectorRef;
    private SearchPhrase _searchPhrase = SearchPhrase.None;
    private DialogFrameNarrowViewSettings _viewSettings = null!;

    private ImmutableHashSet<ChatId> SelectedChatIds
        => _contactSelectorRef?.SelectedChatIds.Value ?? ImmutableHashSet<ChatId>.Empty;

    [CascadingParameter] public Modal Modal { get; set; } = null!;
    [Parameter] public Model ModalModel { get; set; } = null!;

    protected override void OnInitialized()
        => _viewSettings = DialogFrameNarrowViewSettings.SubmitButton(OnSend, "Send");

    private void OnSend() {
        ModalModel.SelectedChatIds = SelectedChatIds;
        Modal.Close();
    }

    private void OnFilter(string filter) {
        _searchPhrase = filter.ToSearchPhrase(true, false);
        StateHasChanged();
    }

    // Nested types

    public sealed class Model(IReadOnlySet<ChatId> excludedChatIds) {

        public IReadOnlySet<ChatId> ExcludedChatIds { get; } = excludedChatIds;
        public ImmutableHashSet<ChatId> SelectedChatIds { get; set; } = ImmutableHashSet<ChatId>.Empty;

        public Model(ChatId chatId) : this(ImmutableHashSet.Create(chatId)) { }
    };
}
