@namespace ActualChat.Chat.UI.Blazor.Components
@implements IModalView<ForwardMessageModal.Model>
@using ActualChat.Search
@{
    var canSend = _selectedChats?.Any() == true;
    _viewSettings.CanSubmit = canSend;
}

<DialogFrame
    Class="forward-message-modal"
    Title="Forward message"
    HasCloseButton="true"
    NarrowViewSettings="_viewSettings">
    <Body>
    <FormBlock>
        <SearchBoxNew
            Placeholder="Who would you like to share with"
            MaxLength="@Constants.Chat.MaxSearchFilterLength"
            TextChanged="@OnFilter"/>
        <ContactSelect
            ContactsToExclude="@ModalModel.ContactsToExclude"
            SearchPhrase="_searchPhrase"
            SelectionChanged="OnSelectionChanged"/>
    </FormBlock>
    </Body>
    <Buttons>
        <Button
            Type="@ButtonType.Button"
            Class="btn-cancel"
            Click="OnCancel">
            Cancel
        </Button>
        <Button
            Type="@ButtonType.Submit"
            Class="btn-primary"
            IsDisabled="@(!canSend)"
            Click="OnSend">
            Send
        </Button>
    </Buttons>
</DialogFrame>

@code {
    private SearchPhrase _searchPhrase = "".ToSearchPhrase(true, false);
    private IReadOnlyCollection<ChatId>? _selectedChats;
    private DialogFrameNarrowViewSettings _viewSettings = null!;

    [Inject] private ChatListUI ChatListUI { get; init; } = null!;

    [CascadingParameter] public Modal Modal { get; set; } = null!;
    [Parameter] public Model ModalModel { get; set; } = null!;

    public sealed record Model(
        IReadOnlyCollection<ChatId> ContactsToExclude,
        Action<IReadOnlyCollection<ChatId>> ChatsSelected);

    protected override void OnInitialized()
        => _viewSettings = DialogFrameNarrowViewSettings.SubmitButton(OnSend, "Send");

    private void OnCancel() {
        Modal.Close();
    }

    private void OnSend() {
        if (_selectedChats?.Any() == true)
            ModalModel.ChatsSelected(_selectedChats);

        Modal.Close();
    }

    private void OnFilter(string filter) {
        _searchPhrase = filter.ToSearchPhrase(true, false);
        StateHasChanged();
    }

    private void OnSelectionChanged(IReadOnlyCollection<ChatId> selectedChats) {
        _selectedChats = selectedChats;
    }
}
