@namespace ActualChat.Chat.UI.Blazor.Components
@inherits ComputedStateComponent<ChatMessageModel?>

@{
    var model = State.LatestNonErrorValue;
}
@if (model != null) {
    <div class="flex-x bg-quote md:mx-4 md:rounded-t-lg outline-none mt-1">
        <Quote Message="@model"/>
    </div>
}

@code {
    [Inject] private ChatUI ChatUI { get; init; } = null!;
    [Inject] private IMarkupParser MarkupParser { get; init; } = null!;

    protected override async Task<ChatMessageModel?> ComputeState(CancellationToken cancellationToken) {
        var chatEntry = await ChatUI.RepliedChatEntry.Use(cancellationToken).ConfigureAwait(false);
        if (chatEntry == null) {
            return null;
        }

        var chatMessage = new ChatMessageModel(chatEntry) {
            IsBlockStart = true,
            IsQuote = true,
        };
        return chatMessage;
    }
}
