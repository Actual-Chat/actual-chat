@namespace ActualChat.Chat.UI.Blazor.Components
@implements IChatMessageEditorBackend
@using ActualChat.Chat.UI.Blazor.Services
@using ActualChat.Audio.UI.Blazor.Components
@using ActualChat.Chat.UI.Blazor.Module
@using ActualChat.Hosting
@using ActualChat.MediaPlayback
@implements IAsyncDisposable
@inject IChats _chatService
@inject Session _session
@inject UICommandRunner _cmd
@inject IJSRuntime _js
@inject MomentClockSet _clocks
@inject HostInfo _hostInfo

<div @ref="EditorRef" class="@(_class ??= this.DefaultClass()) chat-message-editor sticky bottom-0 self-end bg-secondary w-full px-2">
    <div class="flex flex-row justify-between px-1">
        <div class="flex flex-row justify-center items-center justify-items-center outline-none bg-accent rounded-md w-full overflow-hidden mr-3">
            <AttachDropdown/>
            <div class="message-input flex-1 overflow-y-auto max-h-36 md:max-h-72 break-words py-2 md:mx-2 outline-none hover:cursor-text text-primary block"
                 autocomplete="off" autocorrect="off" spellcheck="true" aria-expanded="false" aria-autocomplete="list"
                 aria-multiline="true" aria-label="Message" dir="auto" contenteditable="true" role="textbox" data-text="#@(Chat.Title)">
            </div>
            <div class="audio-wave flex-row w-full py-2 pr-2 outline-none justify-items-stretch hidden">
            </div>
            <button class="post-message sticky self-end outline-none text-secondary p-1 hidden"
                    @onclick="_ => Post()">
                <svg class="w-8 h-8 text-secondary fill-current" viewBox="-4 -4 32 32" id="icon" xmlns="http://www.w3.org/2000/svg">
                    <path d="M24 0l-6 22-8.129-7.239 7.802-8.234-10.458 7.227-7.215-1.754 24-12zm-15 16.668v7.332l3.258-4.431-3.258-2.901z"/>
                </svg>
            </button>
        </div>
        <div class="flex flex-1 flex-row justify-center outline-none items-end">
            <div class="sticky bottom-0 flex flex-row justify-center items-center max-h-10 bg-accent rounded-md py-2">
                <div class="chat-control-button language-button p-1 w-1/2 hidden">
                    <ChatLanguageToggle/>
                </div>
                <div class="chat-control-button recorder-button w-1/2 flex animate-display-from-right md:animate-none">
                    @*
                        new EventCallback<bool>(null, ...) prevents StateHasChanged call
                        and thus re-rendering of a parent (this) component.
                    *@
                    <AudioRecorder ChatId="@Chat.Id"
                                   RecordingStateChanged="@(new EventCallback<bool>(null, RecordingStateChanged))"/>
                </div>
                @if (Player != null!) {
                    <div class="chat-control-button player-button w-1/2 flex">
                        <ChatPlayerToggle Player="Player"/>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@code {
    private static string? _class;

    [Inject] private ChatController ChatController { get; set; } = null!;
    private ElementReference EditorRef { get; set; }
    private IJSObjectReference JSRef { get; set; } = null!;
    private DotNetObjectReference<IChatMessageEditorBackend> BlazorRef { get; set; } = null!;
    private ChatPlayer Player { get; set; } = null!;
    // TODO(AY): Add some store that remembers typed messages
    private string Text { get; set; } = "";

    [CascadingParameter]
    public Chat Chat { get; set; } = null!;

    // TODO: fix
    protected override async Task OnInitializedAsync()
        => Player = ChatController.GetPlayer(Chat.Id);

    public async ValueTask DisposeAsync()
    {
        if (JSRef != null!)
            await JSRef.DisposeSilentlyAsync("dispose").ConfigureAwait(true);
        // ReSharper disable once ConstantConditionalAccessQualifier
        BlazorRef?.Dispose();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (firstRender) {
            BlazorRef = DotNetObjectReference.Create<IChatMessageEditorBackend>(this);
            JSRef = await _js.InvokeAsync<IJSObjectReference>(
                $"{ChatBlazorUIModule.ImportName}.ChatMessageEditor.create",
                EditorRef, BlazorRef
                ).ConfigureAwait(true);
            await JSRef.InvokeVoidAsync("setText", Text).ConfigureAwait(true);
        }
    }

    [JSInvokable]
    public void UpdateClientSideState(string? text) {
        Text = text ?? "";
    }

    [JSInvokable]
    public async Task Post(string? text = null)
    {
        if (text != null)
        Text = text;
        if (Text.IsNullOrEmpty())
            return;

        var (_, ce) = await _cmd.Run(new IChats.CreateTextEntryCommand(_session, Chat.Id, Text)).ConfigureAwait(true);
        if (!ce.IsFailed)
            await JSRef.InvokeVoidAsync("setText", "").ConfigureAwait(true);
    }

    private Task RecordingStateChanged(bool isRecording) {
        if (isRecording == false)
            return Task.CompletedTask;
        var isPlaying = Player.Playback is { PlaybackState.Value: PlaybackKind.Realtime };
        if (isPlaying)
            return Task.CompletedTask;
        // We don't need to await for this here
        _ = Player.Play(_clocks.SystemClock.Now, isRealtime: true, default);
        return Task.CompletedTask;
    }
}
