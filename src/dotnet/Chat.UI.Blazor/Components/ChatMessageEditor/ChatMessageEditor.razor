@namespace ActualChat.Chat.UI.Blazor.Components
@implements IChatMessageEditorBackend
@using ActualChat.Chat.UI.Blazor.Services
@using ActualChat.Audio.UI.Blazor.Components
@using ActualChat.Chat.UI.Blazor.Module
@using ActualChat.Hosting
@implements IAsyncDisposable
@inject IChats _chatService
@inject Session _session
@inject UICommandRunner _cmd
@inject IJSRuntime _js
@inject MomentClockSet _clocks
@inject HostInfo _hostInfo

<div @ref="EditorRef" class="@(_class ??= this.DefaultClass()) chat-message-editor sticky bottom-0 self-end bg-secondary w-full px-2">
    <div class="flex flex-row justify-between px-1">
        <div class="flex flex-col outline-none bg-accent rounded-md w-full mr-3">
            @if (_attachments.Length > 0) {
                <ul class="message-attachments flex ml-1 mb-1 pt-4 pb-2 px-2 gap-5 overflow-x-auto">
                    @foreach (var attachment in _attachments) {
                        <li class="attachment_item p-1.5 bg-zinc-100 rounded-md inline-flex flex-col box-content">
                            <div class="h-full flex flex-col relative">
                                <div class="mt-auto h-full flex justify-center relative min-h-0">
                                    @if (attachment.IsImage) {
                                        <img class="object-contain rounded-md max-w-full" src="@attachment.Url" alt="upload image"/>
                                    }
                                </div>
                                <div class="mt-auto">
                                    <div class="mt-3 overflow-hidden text-ellipsis whitespace-nowrap text-secondary">
                                        @attachment.FileName
                                    </div>
                                </div>
                                <div class="absolute top-0 right-0">
                                    <div class="absolute right-0 z-10 translate-x-1/4 -translate-y-1/4">
                                        <Menu Orientation="Orientation.Horizontal">
                                            <MenuItem Title="Remove" OnItemClick="@(() => RemoveAttachment(attachment))">
                                                <Icon>
                                                    <svg class="w-5 h-5 fill-current" xlmns="http://www.w3.org/2000/svg" viewBox="-3 -5 30 30">
                                                        <path d="M19 24h-14c-1.104 0-2-.896-2-2v-16h18v16c0 1.104-.896 2-2 2m-9-14c0-.552-.448-1-1-1s-1 .448-1 1v9c0 .552.448 1 1 1s1-.448 1-1v-9zm6 0c0-.552-.448-1-1-1s-1 .448-1 1v9c0 .552.448 1 1 1s1-.448 1-1v-9zm6-5h-20v-2h6v-1.5c0-.827.673-1.5 1.5-1.5h5c.825 0 1.5.671 1.5 1.5v1.5h6v2zm-12-2h4v-1h-4v1z"/>
                                                    </svg>
                                                </Icon>
                                            </MenuItem>
                                        </Menu>
                                    </div>
                                </div>
                            </div>
                        </li>
                    }
                </ul>
                <div class="divider h-0 border-t border-stone-300"></div>
            }
            <div class="flex flex-row justify-center items-center justify-items-center">
                <AttachDropdown/>
                <div class="message-input flex-1 overflow-y-auto max-h-36 md:max-h-72 break-words py-2 md:mx-2 outline-none hover:cursor-text text-primary block"
                     autocomplete="off" autocorrect="off" spellcheck="true" aria-expanded="false" aria-autocomplete="list"
                     aria-multiline="true" aria-label="Message" dir="auto" contenteditable="true" role="textbox" data-text="#@(Chat.Title)">
                </div>
                <div class="audio-wave flex-row w-full py-2 pr-2 outline-none justify-items-stretch hidden">
                </div>
                <button class="post-message sticky self-end outline-none text-secondary p-1 hidden"
                        @onclick="_ => Post()">
                    <svg class="w-8 h-8 text-secondary fill-current" viewBox="-4 -4 32 32" id="icon" xmlns="http://www.w3.org/2000/svg">
                        <path d="M24 0l-6 22-8.129-7.239 7.802-8.234-10.458 7.227-7.215-1.754 24-12zm-15 16.668v7.332l3.258-4.431-3.258-2.901z"/>
                    </svg>
                </button>
            </div>
        </div>
        <div class="flex flex-1 flex-row justify-center outline-none items-end">
            <div class="sticky bottom-0 flex flex-row justify-center items-center max-h-10 bg-accent rounded-md py-2">
                <div class="chat-control-button language-button p-1 w-1/2 hidden">
                    <ChatLanguageToggle/>
                </div>
                <div class="chat-control-button recorder-button w-1/2 flex animate-display-from-right md:animate-none">
                    @*
                        new EventCallback<bool>(null, ...) prevents StateHasChanged call
                        and thus re-rendering of a parent (this) component.
                    *@
                    <AudioRecorder ChatId="@Chat.Id"
                                   RecordingStateChanged="@(new EventCallback<bool>(null, RecordingStateChanged))"/>
                </div>
                @if (RealtimePlayer != null!) {
                    <div class="chat-control-button player-button w-1/2 flex">
                        <ChatPlayerToggle Player="RealtimePlayer"/>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@code {
    private class MessageAttachment {
        public string Url { get; set; } = "";
        public string FileName { get; set; } = "";
        public string FileType { get; set; } = "";
        public int Length { get; set; }
        public bool IsImage => FileType?.StartsWith("image", StringComparison.OrdinalIgnoreCase) ?? false;
        public string Id { get; set; } = "";
    }

    private static string? _class;

    [Inject] private ChatPlayers ChatPlayers { get; set; } = null!;
    private ElementReference EditorRef { get; set; }
    private IJSObjectReference JSRef { get; set; } = null!;
    private DotNetObjectReference<IChatMessageEditorBackend> BlazorRef { get; set; } = null!;
    private RealtimeChatPlayer RealtimePlayer { get; set; } = null!;
    // TODO(AY): Add some store that remembers typed messages
    private string Text { get; set; } = "";
    private ImmutableArray<MessageAttachment> _attachments = ImmutableArray<MessageAttachment>.Empty;

    [CascadingParameter]
    public Chat Chat { get; set; } = null!;

    protected override async Task OnInitializedAsync() {
        RealtimePlayer = await ChatPlayers.GetRealtimePlayer(Chat.Id);
        //AddAttachment("https://i.pinimg.com/736x/44/50/32/44503273af87d55ad6576e0429d33448--ship-paintings-pirate-ships.jpg", "pirate-ship.jpg", "image/jpg", 1);
        //AddAttachment("https://kartinkin.net/uploads/posts/2021-07/1625258587_8-kartinkin-com-p-piratskii-korabl-fon-krasivie-foni-10.jpg", "pirate-ship.jpg", "image/jpg", 1);
    }

    public async ValueTask DisposeAsync()
    {
        if (JSRef != null!)
            await JSRef.DisposeSilentlyAsync("dispose").ConfigureAwait(true);
        // ReSharper disable once ConstantConditionalAccessQualifier
        BlazorRef?.Dispose();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (firstRender) {
            BlazorRef = DotNetObjectReference.Create<IChatMessageEditorBackend>(this);
            JSRef = await _js.InvokeAsync<IJSObjectReference>(
                $"{ChatBlazorUIModule.ImportName}.ChatMessageEditor.create",
                EditorRef, BlazorRef
                ).ConfigureAwait(true);
            await JSRef.InvokeVoidAsync("setText", Text).ConfigureAwait(true);
        }
    }

    [JSInvokable]
    public void UpdateClientSideState(string? text) {
        Text = text ?? "";
    }

    [JSInvokable]
    public async Task Post(string? text = null)
    {
        if (text != null)
            Text = text;
        if (Text.IsNullOrEmpty() && !_attachments.Any())
            return;

        // if (!await CreateTextEntry())
        //     return;
        await JSRef.InvokeAsync<string>("postMessage", Chat.Id).ConfigureAwait(true);
    }

    [JSInvokable]
    public async Task OnPostMessageCompleted(bool succeeded, string result) {
        if (!succeeded)
            return;
        await JSRef.InvokeVoidAsync("onPostSucceeded").ConfigureAwait(true);
        _attachments = _attachments.Clear();
        await InvokeAsync(StateHasChanged);
    }

    private async Task<bool> CreateTextEntry()
    {
        var contentTasks = _attachments.ToDictionary(c => c, GetAttachmentContent);
        await Task.WhenAll(contentTasks.Values).ConfigureAwait(true);
        var uploads = contentTasks.Keys
            .Select(c => new TextEntryUpload(c.FileName, c.FileType, contentTasks[c].Result))
            .ToImmutableArray();
        var command = new IChats.CreateTextEntryCommand(_session, Chat.Id, Text) { Uploads = uploads };
        var (_, ce) = await _cmd.Run(command).ConfigureAwait(true);
        return ce.IsCompletedSuccessfully;
    }

    [JSInvokable]
    public void AddAttachment(string id, string url, string? fileName, string? fileType, int length) {
        _attachments = _attachments.Add(new MessageAttachment {
            Id = id,
            Url = url,
            FileName = fileName ?? "",
            FileType = fileType ?? "",
            Length = length,
        });
        StateHasChanged();
    }

    private async Task<byte[]> GetAttachmentContent(MessageAttachment messageAttachment) {
        var bytes = await JSRef.InvokeAsync<byte[]>("getAttachmentContent", messageAttachment.Id).ConfigureAwait(true);
        return bytes;
    }

    private async Task RemoveAttachment(MessageAttachment attachment) {
        await JSRef.InvokeVoidAsync("removeAttachment", attachment.Id).ConfigureAwait(true);
        _attachments = _attachments.Remove(attachment);
    }

    private Task RecordingStateChanged(bool isRecording) {
        if (isRecording == false)
            return Task.CompletedTask;
        var isPlaying = RealtimePlayer.Playback is { IsStopped: false };
        if (isPlaying)
            return Task.CompletedTask;
        // We don't need to await for this here
        _ = RealtimePlayer.Play(_clocks.SystemClock.Now);
        return Task.CompletedTask;
    }
}
