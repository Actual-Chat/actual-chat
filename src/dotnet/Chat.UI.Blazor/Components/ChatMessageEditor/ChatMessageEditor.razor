@namespace ActualChat.Chat.UI.Blazor.Components
@implements IChatMessageEditorBackend
@implements IAsyncDisposable
@using ActualChat.Chat.UI.Blazor.Services
@using ActualChat.Audio.UI.Blazor.Components
@using ActualChat.Chat.UI.Blazor.Module
@using ActualChat.Events
@using ActualChat.Hosting
@using ActualChat.MediaPlayback

<EventHandler TEvent="@FocusChatMessageEditor" Handler="OnFocusRequested" />
<div @ref="Ref" class="chat-message-editor min-h-auto">
    <MentionCandidateListManager MentionCandidateProvider="@MentionCandidateProvider" @key="@("MentionCandidateProvider")">
        <AttachmentListPreview @ref="AttachmentListPreviewRef"
                               RemoveRequested="@(RemoveAttachment)"
                               ClearAllRequested="@(ClearAttachments)"
                               Post="@(_ => OnPosted(clearEditor:true))"/>
        <div class="flex-none flex-x justify-items-stretch items-stretch w-full bg-01">
            <div class="-flex-y w-full bg-01 mr-1.5 overflow-x-hidden">
                <div class="flex-x gap-x-1.5">
                    <AttachDropdown UploadFilesRequested="OnUploadFilesRequested"/>
                    <div class="post-panel flex-x justify-between outline-none w-full border-bg-01">
                        <input class="files-picker" type="file" hidden multiple/>
                        <label for="message-input" class="flex-1 flex-x justify-items-stretch items-center">
                            <SlateEditor @ref="SlateEditorRef" Id="message-input"
                                         Class="message-input -flex-y"
                                         Autofocus="true"
                                         Placeholder="@("#" + Chat.Title)"
                                         Posted="text => OnPosted(text)" Rendered="OnSlateEditorRendered"/>
                            <button class="btn btn-round post-message"
                                    @onclick="_ => OnPosted(clearEditor: true)">
                                <svg class="fill-current w-8 h-8" viewBox="-1 -1 26 26" id="icon" xmlns="http://www.w3.org/2000/svg">
                                    <path id="Union" fill-rule="evenodd" clip-rule="evenodd" d="M15 17.835L13.144 12.268L18.712 6.699L15 17.835ZM17.298 5.285L11.73 10.853L6.162 8.997L17.298 5.285ZM21.99 2.945C21.985 2.852 21.968 2.762 21.937 2.675C21.927 2.644 21.916 2.614 21.902 2.584C21.854 2.477 21.793 2.376 21.707 2.29C21.621 2.204 21.52 2.143 21.412 2.095C21.383 2.081 21.354 2.07 21.323 2.06C21.234 2.029 21.143 2.011 21.048 2.006C21.026 2.005 21.006 2 20.983 2C20.883 2.002 20.782 2.016 20.684 2.048L2.684 8.048C2.275 8.185 2 8.566 2 8.997C2 9.428 2.275 9.81 2.684 9.946L11.209 12.788L14.052 21.314C14.188 21.722 14.569 21.997 15 21.997C15.431 21.997 15.812 21.722 15.948 21.314L21.948 3.314C21.98 3.215 21.995 3.115 21.996 3.015C21.997 2.991 21.991 2.969 21.99 2.945Z"/>
                                </svg>
                            </button>
                        </label>
                    </div>
                </div>
                <ActiveReply/>
            </div>
            <RecorderPanel/>
        </div>
    </MentionCandidateListManager>
</div>

@code {
    [Inject] private IJSRuntime JS { get; init; } = null!;
    [Inject] private ErrorUI ErrorUI { get; init; } = null!;
    [Inject] private ChatUI ChatUI { get; init; } = null!;
    [Inject] private IChats Chats { get; init; } = null!;
    [Inject] private ChatPlayers ChatPlayers { get; init; } = null!;
    [Inject] private Session Session { get; init; } = null!;
    [Inject] private HostInfo HostInfo { get; init; } = null!;
    [Inject] private MomentClockSet Clocks { get; init; } = null!;

    private DotNetObjectReference<IChatMessageEditorBackend> BlazorRef { get; set; } = null!;
    private IJSObjectReference JSRef { get; set; } = null!;
    private ElementReference Ref { get; set; }
    private SlateEditor SlateEditorRef { get; set; } = null!;
    private AttachmentListPreview AttachmentListPreviewRef { get; set; } = null!;
    private IMentionCandidateProvider MentionCandidateProvider { get; set; } = null!;
    private IPersistentState<long>? LastReadEntryId { get; set; }

    [CascadingParameter] public Chat Chat { get; set; } = null!;

    protected override async Task OnInitializedAsync() {
        LastReadEntryId = await ChatUI.GetLastReadEntryId(Chat.Id, default).ConfigureAwait(false);

    }

    public async ValueTask DisposeAsync()
    {
        await JSRef.DisposeSilentlyAsync("dispose").ConfigureAwait(true);
        JSRef = null!;
        BlazorRef.DisposeSilently();
        BlazorRef = null!;
        if (LastReadEntryId != null)
            await LastReadEntryId.DisposeAsync();
    }

    protected override void OnParametersSet()
        => MentionCandidateProvider = new ChatMentionCandidateProvider(Session, Chat.Id, Chats);

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (firstRender) {
            BlazorRef = DotNetObjectReference.Create<IChatMessageEditorBackend>(this);
            JSRef = await JS.InvokeAsync<IJSObjectReference>(
                $"{ChatBlazorUIModule.ImportName}.ChatMessageEditor.create",
                Ref, BlazorRef
                ).ConfigureAwait(true);
        }
    }

    private async Task OnPosted(string? text = null, bool clearEditor = false) {
        if (text == null)
            text = await SlateEditorRef.GetText().ConfigureAwait(true);
        var attachments = AttachmentListPreviewRef.GetAttachments();
        if (text.IsNullOrEmpty() && !attachments.Any())
            return;

        try {
            if (clearEditor) {
                await SlateEditorRef.Clear().ConfigureAwait(true);
            }
            AttachmentListPreviewRef.Clear();
            StateHasChanged();
            var repliedChatEntry = await ChatUI.RepliedChatEntry.Use().ConfigureAwait(false);
            ChatUI.RepliedChatEntry.Value = null;
            var entryId = await JSRef.InvokeAsync<long>("postMessage", Chat.Id, text, repliedChatEntry?.Id).ConfigureAwait(true);
            await JSRef.InvokeVoidAsync("onPostSucceeded").ConfigureAwait(true);

            if (LastReadEntryId != null)
                LastReadEntryId.Value = entryId;
        }
        catch (Exception e) {
            ErrorUI.ShowError(e);
        }
    }

    private Task OnFocusRequested(FocusChatMessageEditor @event, CancellationToken cancellationToken) => SlateEditorRef.Focus(cancellationToken);

    [JSInvokable]
    public bool AddAttachment(int id, string url, string? fileName, string? fileType, int length)
        => AttachmentListPreviewRef.AddAttachment(id, url, fileName, fileType, length);

    private async Task OnSlateEditorRendered() {
        await JSRef.InvokeVoidAsync("onSlateEditorRendered").ConfigureAwait(true);
    }

    private async Task RemoveAttachment(Attachment attachment) {
        await JSRef.InvokeVoidAsync("removeAttachment", attachment.Id).ConfigureAwait(true);
    }

    private async Task ClearAttachments(ImmutableArray<Attachment> attachments) {
        await JSRef.InvokeVoidAsync("clearAttachments", attachments).ConfigureAwait(true);
    }

    private async Task OnUploadFilesRequested() {
        await JSRef.InvokeVoidAsync("showFilesPicker").ConfigureAwait(true);
    }

}
