@namespace ActualChat.Chat.UI.Blazor.Components
@implements IChatMessageEditorBackend
@using ActualChat.Chat.UI.Blazor.Services
@using ActualChat.Audio.UI.Blazor.Components
@using ActualChat.Chat.UI.Blazor.Module
@using ActualChat.Hosting
@using ActualChat.MediaPlayback
@implements IAsyncDisposable

<div @ref="EditorRef" class="chat-message-editor flex-none flex flex-row justify-items-stretch items-stretch w-full bg-secondary">
    <div class="flex flex-col justify-between outline-none bg-accent rounded-xl w-full">
        <input class="files-picker" type="file" hidden multiple/>
        @if (_attachments.Length > 0) {
            <ul class="message-attachments flex ml-1 mb-1 pt-4 pb-2 px-2 gap-5 overflow-x-auto">
                @foreach (var attachment in _attachments) {
                    <li class="attachment-item p-1.5 bg-zinc-100 rounded-md inline-flex flex-col box-content">
                        <div class="h-full flex flex-col relative">
                            <div class="mt-auto h-full flex justify-center relative min-h-0">
                                @if (attachment.IsImage) {
                                    <img class="object-contain rounded-md max-w-full" src="@attachment.Url" alt="image"/>
                                } else {
                                    <div class="h-40 flex">
                                        <svg class="text-secondary fill-current h-20 w-20 self-center" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
                                            <path d="M11.362 2c4.156 0 2.638 6 2.638 6s6-1.65 6 2.457v11.543h-16v-20h7.362zm.827-2h-10.189v24h20v-14.386c0-2.391-6.648-9.614-9.811-9.614zm4.811 13h-3v-1h3v1zm0 2h-3v1h3v-1zm0 3h-10v1h10v-1zm-5-6h-5v4h5v-4z"/>
                                        </svg>
                                    </div>
                                }
                            </div>
                            <div class="mt-auto">
                                <div class="mt-3 overflow-hidden text-ellipsis whitespace-nowrap text-secondary">
                                    @attachment.FileName
                                </div>
                            </div>
                            <div class="absolute top-0 right-0">
                                <div class="absolute right-0 z-10 translate-x-1/4 -translate-y-1/4">
                                    <Menu Class="h-8 rounded-md overflow-hidden" ItemClass="p-1" Orientation="Orientation.Horizontal">
                                        <MenuItem Title="Remove" OnItemClick="@(() => RemoveAttachment(attachment))">
                                            <Icon>
                                                <svg class="w-5 h-5 text-red-500 fill-current" xlmns="http://www.w3.org/2000/svg" viewBox="-3 -5 30 30">
                                                    <path d="M19 24h-14c-1.104 0-2-.896-2-2v-16h18v16c0 1.104-.896 2-2 2m-9-14c0-.552-.448-1-1-1s-1 .448-1 1v9c0 .552.448 1 1 1s1-.448 1-1v-9zm6 0c0-.552-.448-1-1-1s-1 .448-1 1v9c0 .552.448 1 1 1s1-.448 1-1v-9zm6-5h-20v-2h6v-1.5c0-.827.673-1.5 1.5-1.5h5c.825 0 1.5.671 1.5 1.5v1.5h6v2zm-12-2h4v-1h-4v1z"/>
                                                </svg>
                                            </Icon>
                                        </MenuItem>
                                    </Menu>
                                </div>
                            </div>
                        </div>
                    </li>
                }
            </ul>
            <div class="divider h-0 border-t border-primary"></div>
        }
        <div class="flex-1 flex flex-row justify-items-stretch items-stretch">
            <div class="flex-none self-center m-3 mr-0">
                <AttachDropdown UploadFilesRequested="OnUploadFilesRequested"/>
            </div>
            <div class="message-input flex-1 overflow-y-auto max-h-36 md:max-h-72 m-3 break-words outline-none hover:cursor-text text-primary block"
                 autocomplete="off" autocorrect="off" spellcheck="true" aria-expanded="false" aria-autocomplete="list"
                 aria-multiline="true" aria-label="Message" dir="auto" contenteditable="true" role="textbox" data-text="#@(Chat.Title)">
            </div>
            <button class="post-message sticky self-end outline-none text-secondary p-2 mt-3 mb-1 hidden"
                    @onclick="_ => Post()">
                <svg class="w-8 h-8 text-secondary fill-current" viewBox="-4 -4 32 32" id="icon" xmlns="http://www.w3.org/2000/svg">
                    <path d="M24 0l-6 22-8.129-7.239 7.802-8.234-10.458 7.227-7.215-1.754 24-12zm-15 16.668v7.332l3.258-4.431-3.258-2.901z"/>
                </svg>
            </button>
        </div>
    </div>
    <div class="recorder-buttons flex-none self-end flex flex-row justify-end items-stretch rounded-xl bg-accent ml-2">
        <div class="language-button flex hidden">
            <ChatLanguageToggle/>
        </div>
        <div class="recorder-button flex">
            <AudioRecorderToggle ChatId="@Chat.Id"
                RecordingStateChanged="@(new EventCallback<bool>(null, RecordingStateChanged))"/>
        </div>
    </div>
</div>

@code {
    [Inject] private IChats Chats { get; init; } = null!;
    [Inject] private ChatPlayers ChatPlayers { get; init; } = null!;
    [Inject] private Session Session { get; init; } = null!;
    [Inject] private UICommandRunner Cmd { get; init; } = null!;
    [Inject] private MomentClockSet Clocks { get; init; } = null!;
    [Inject] private HostInfo HostInfo { get; init; } = null!;
    [Inject] private IJSRuntime JS { get; init; } = null!;

    private ElementReference EditorRef { get; set; }
    private IJSObjectReference JSRef { get; set; } = null!;
    private DotNetObjectReference<IChatMessageEditorBackend> BlazorRef { get; set; } = null!;
    // TODO(AY): Add some store that remembers typed messages
    private string Text { get; set; } = "";
    private ImmutableArray<Attachment> _attachments = ImmutableArray<Attachment>.Empty;

    [CascadingParameter] public Chat Chat { get; set; } = null!;

    public async ValueTask DisposeAsync()
    {
        if (JSRef != null!)
            await JSRef.DisposeSilentlyAsync("dispose").ConfigureAwait(true);
        // ReSharper disable once ConstantConditionalAccessQualifier
        BlazorRef?.Dispose();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (firstRender) {
            BlazorRef = DotNetObjectReference.Create<IChatMessageEditorBackend>(this);
            JSRef = await JS.InvokeAsync<IJSObjectReference>(
                $"{ChatBlazorUIModule.ImportName}.ChatMessageEditor.create",
                EditorRef, BlazorRef
                ).ConfigureAwait(true);
            await JSRef.InvokeVoidAsync("setText", Text).ConfigureAwait(true);
        }
    }

    [JSInvokable]
    public void UpdateClientSideState(string? text) {
        Text = text ?? "";
    }

    [JSInvokable]
    public async Task Post(string? text = null)
    {
        if (text != null)
            Text = text;
        if (Text.IsNullOrEmpty() && !_attachments.Any())
            return;

        try {
            var response = await JSRef.InvokeAsync<string>("postMessage", Chat.Id).ConfigureAwait(true);
            await JSRef.InvokeVoidAsync("onPostSucceeded").ConfigureAwait(true);
            _attachments = _attachments.Clear();
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception e) {
            ShowError(e);
        }
    }

    [JSInvokable]
    public bool AddAttachment(int id, string url, string? fileName, string? fileType, int length) {
        if (length > Constants.Attachments.FileSizeLimit) {
            ShowError("File is too big. Max file size: 8Mb.");
            return false;
        }
        if (_attachments.Length >= Constants.Attachments.FilesNumberLimit) {
            ShowError("Too many files. Max allowed number is 10.");
            return false;
        }

        _attachments = _attachments.Add(new Attachment {
            Id = id,
            Url = url,
            FileName = fileName ?? "",
            FileType = fileType ?? "",
            Length = length,
        });
        StateHasChanged();
        return true;
    }

    private async Task RemoveAttachment(Attachment attachment) {
        await JSRef.InvokeVoidAsync("removeAttachment", attachment.Id).ConfigureAwait(true);
        _attachments = _attachments.Remove(attachment);
    }

    private async Task OnUploadFilesRequested() {
        await JSRef.InvokeVoidAsync("showFilesPicker").ConfigureAwait(true);
    }

    private Task RecordingStateChanged(bool isRecording) {
        if (isRecording == false)
            return Task.CompletedTask;
        ChatPlayers.StartRealtimePlayback();
        return Task.CompletedTask;
    }

    private void ShowError(string error)
        => ShowError(new Exception(error));

    private void ShowError(Exception e) {
    // use command error reporting approach
        var result = Result.Error<string>(e);
        var command = new PostChatMessageSurrogateCommand();
        var completedEvent = new UICommandEvent(command, result);
        _ = Cmd.UICommandTracker.ProcessEvent(completedEvent);
    }

    private class Attachment {
        public string Url { get; set; } = "";
        public string FileName { get; set; } = "";
        public string FileType { get; set; } = "";
        public int Length { get; set; }
        public bool IsImage => FileType?.StartsWith("image", StringComparison.OrdinalIgnoreCase) ?? false;
        public int Id { get; set; }
    }
}
