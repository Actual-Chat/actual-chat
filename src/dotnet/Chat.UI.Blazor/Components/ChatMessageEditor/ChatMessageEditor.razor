@namespace ActualChat.Chat.UI.Blazor.Components
@implements IChatMessageEditorBackend
@using ActualChat.Chat.UI.Blazor.Services
@using ActualChat.Audio.UI.Blazor.Components
@using ActualChat.Chat.UI.Blazor.Module
@implements IAsyncDisposable
@inject IChats _chatService
@inject Session _session
@inject UICommandRunner _cmd
@inject IJSRuntime _js

<div class="@(_class ??= this.DefaultClass())">
    <div class="flex flex-row justify-between mx-3 my-2">
        @if (RealtimePlayer != null) {
            <ChatPlayerToggle Player="RealtimePlayer"/>
        }
        <button class="plus-button">
                <svg class="plus-button-svg" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20">
                <path d="M11 9h4v2h-4v4H9v-4H5V9h4V5h2v4zm-1 11a10 10 0 1 1 0-20 10 10 0 0 1 0 20zm0-2a8 8 0 1 0 0-16 8 8 0 0 0 0 16z" />
                </svg>
        </button>
        <div @ref="Ref" class="message-input" autocomplete="off" autocorrect="off" spellcheck="true" aria-expanded="false" aria-autocomplete="list" aria-multiline="true" aria-label="Message" dir="auto" contenteditable="true" role="textbox">        </div>
        <div class="post-recorder-buttons">
            <button @onclick="_ => Post()" class="post-message">
                <svg class="items-center fill-current" xmlns="http://www.w3.org/2000/svg" width="28" height="28" viewBox="-2 -2 28 28">
                    <path d="M24 0l-6 22-8.129-7.239 7.802-8.234-10.458 7.227-7.215-1.754 24-12zm-15 16.668v7.332l3.258-4.431-3.258-2.901z"/>
                </svg>
            </button>
            <AudioRecorder ChatId="@Chat.Id"/>
        </div>
    </div>
</div>

@code {
    private static string? _class;

    [Inject] private ChatPlayers ChatPlayers { get; set; } = null!;
    private ElementReference Ref { get; set; }
    private IJSObjectReference JSRef { get; set; } = null!;
    private DotNetObjectReference<IChatMessageEditorBackend> BlazorRef { get; set; } = null!;
    private ChatPlayer? RealtimePlayer { get; set; }
    // TODO(AY): Add some store that remembers typed messages
    private string Text { get; set; } = "";

    [Parameter, EditorRequired, ParameterComparer(typeof(ByReferenceParameterComparer))]
    public Chat Chat { get; set; } = null!;

    protected override async Task OnInitializedAsync()
        => RealtimePlayer = await ChatPlayers.GetRealtimePlayer(Chat.Id);

    public async ValueTask DisposeAsync() {
        if (JSRef != null!)
            await JSRef.DisposeSilentlyAsync().ConfigureAwait(true);
    // ReSharper disable once ConstantConditionalAccessQualifier
        BlazorRef?.Dispose();
    }

    public override Task SetParametersAsync(ParameterView parameters)
        => this.HasChangedParameters(parameters) ? base.SetParametersAsync(parameters) : Task.CompletedTask;

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (firstRender) {
            BlazorRef = DotNetObjectReference.Create<IChatMessageEditorBackend>(this);
            JSRef = await _js.InvokeAsync<IJSObjectReference>(
                $"{ChatBlazorUIModule.ImportName}.ChatMessageEditor.create",
                Ref, BlazorRef
                ).ConfigureAwait(true);
            await JSRef.InvokeVoidAsync("setText", Text).ConfigureAwait(true);
        }
    }

    [JSInvokable]
    public void UpdateClientSideState(string? text) {
        Text = text ?? "";
    }

    [JSInvokable]
    public async Task Post(string? text = null)
    {
        if (text != null)
            Text = text;
        if (Text.IsNullOrEmpty())
            return;

        var (_, ce) = await _cmd.Run(new IChats.CreateEntryCommand(_session, Chat.Id, Text)).ConfigureAwait(true);
        if (!ce.IsFailed)
            await JSRef.InvokeVoidAsync("setText", "").ConfigureAwait(true);
    }
}
