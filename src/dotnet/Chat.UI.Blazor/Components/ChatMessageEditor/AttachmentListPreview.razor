@namespace ActualChat.Chat.UI.Blazor.Components

@if (_attachments.Length > 0) {
    <div class="relative flex-x bg-01 pr-2">
        <ul class="attachment-list custom-scrollbar-x">
            @foreach (var attachment in _attachments) {
                <li class="attachment-wrapper">
                    <div class="flex-y relative">
                        <div class="-flex-x overflow-hidden h-8 bg-04 rounded-full m-1">
                            <ButtonRound Click="@(() => OnRemoveItemClicked(attachment))" Class="remove-attachment-btn">
                                <svg class="w-5 h-5 fill-current" xlmns="http://www.w3.org/2000/svg" viewBox="0 1 24 24">
                                    <path id="Union" fill-rule="evenodd" clip-rule="evenodd" d="M10 16C10 16.55 9.55 17 9 17C8.45 17 8 16.55 8 16V12C8 11.45 8.45 11 9 11C9.55 11 10 11.45 10 12V16ZM16 16C16 16.55 15.55 17 15 17C14.45 17 14 16.55 14 16V12C14 11.45 14.45 11 15 11C15.55 11 16 11.45 16 12V16ZM18 19C18 19.551 17.552 20 17 20H7C6.448 20 6 19.551 6 19V8H18V19ZM10 4.328C10 4.173 10.214 4 10.5 4H13.5C13.786 4 14 4.173 14 4.328V6H10V4.328ZM21 6H20H16V4.328C16 3.044 14.879 2 13.5 2H10.5C9.121 2 8 3.044 8 4.328V6H4H3C2.45 6 2 6.45 2 7C2 7.55 2.45 8 3 8H4V19C4 20.654 5.346 22 7 22H17C18.654 22 20 20.654 20 19V8H21C21.55 8 22 7.55 22 7C22 6.45 21.55 6 21 6Z"/>
                                </svg>
                            </ButtonRound>
                            <div class="flex-1 float-left truncate text-03 text-sm text-center self-center w-full m-2 cursor-default" title="@attachment.FileName">
                                @attachment.FileName
                            </div>

                        </div>
                        <div class="mt-auto flex justify-center relative min-h-0 attachment-item custom-scrollbar">
                            @if (attachment.IsImage) {
                                <img class="object-contain rounded-md" src="@attachment.Url" alt="image"/>
                            } else {
                                <div class="justify-center">
                                    <svg class="text-03 fill-current h-24 w-24 self-center" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
                                        <path d="M11.362 2c4.156 0 2.638 6 2.638 6s6-1.65 6 2.457v11.543h-16v-20h7.362zm.827-2h-10.189v24h20v-14.386c0-2.391-6.648-9.614-9.811-9.614zm4.811 13h-3v-1h3v1zm0 2h-3v1h3v-1zm0 3h-10v1h10v-1zm-5-6h-5v4h5v-4z"/>
                                    </svg>
                                </div>
                            }
                        </div>
                    </div>
                </li>
            }
        </ul>
        <div class="relative flex-y self-center gap-y-8">
            <ButtonRound Click="@(OnClearAllClicked)" Class="clear-attachments-btn" Title="Clear All">
                <svg class="w-6 h-6 fill-current" xlmns="http://www.w3.org/2000/svg" viewBox="0 1 24 24">
                    <path id="Union" fill-rule="evenodd" clip-rule="evenodd" d="M10 16C10 16.55 9.55 17 9 17C8.45 17 8 16.55 8 16V12C8 11.45 8.45 11 9 11C9.55 11 10 11.45 10 12V16ZM16 16C16 16.55 15.55 17 15 17C14.45 17 14 16.55 14 16V12C14 11.45 14.45 11 15 11C15.55 11 16 11.45 16 12V16ZM18 19C18 19.551 17.552 20 17 20H7C6.448 20 6 19.551 6 19V8H18V19ZM10 4.328C10 4.173 10.214 4 10.5 4H13.5C13.786 4 14 4.173 14 4.328V6H10V4.328ZM21 6H20H16V4.328C16 3.044 14.879 2 13.5 2H10.5C9.121 2 8 3.044 8 4.328V6H4H3C2.45 6 2 6.45 2 7C2 7.55 2.45 8 3 8H4V19C4 20.654 5.346 22 7 22H17C18.654 22 20 20.654 20 19V8H21C21.55 8 22 7.55 22 7C22 6.45 21.55 6 21 6Z"/>
                </svg>
            </ButtonRound>
            <ButtonRound Click="@(Post)" Class="post-attachments-btn" Title="Clear All">
                <svg class="w-6 h-6 fill-current" xlmns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
                    <path id="Union" fill-rule="evenodd" clip-rule="evenodd" d="M15 17.835L13.144 12.268L18.712 6.699L15 17.835ZM17.298 5.285L11.73 10.853L6.162 8.997L17.298 5.285ZM21.99 2.945C21.985 2.852 21.968 2.762 21.937 2.675C21.927 2.644 21.916 2.614 21.902 2.584C21.854 2.477 21.793 2.376 21.707 2.29C21.621 2.204 21.52 2.143 21.412 2.095C21.383 2.081 21.354 2.07 21.323 2.06C21.234 2.029 21.143 2.011 21.048 2.006C21.026 2.005 21.006 2 20.983 2C20.883 2.002 20.782 2.016 20.684 2.048L2.684 8.048C2.275 8.185 2 8.566 2 8.997C2 9.428 2.275 9.81 2.684 9.946L11.209 12.788L14.052 21.314C14.188 21.722 14.569 21.997 15 21.997C15.431 21.997 15.812 21.722 15.948 21.314L21.948 3.314C21.98 3.215 21.995 3.115 21.996 3.015C21.997 2.991 21.991 2.969 21.99 2.945Z"/>
                </svg>
            </ButtonRound>
        </div>
    </div>
}

@code {
    private ImmutableArray<Attachment> _attachments = ImmutableArray<Attachment>.Empty;

    [Inject] private ErrorUI ErrorUI { get; init; } = null!;
    [Parameter] public EventCallback<Attachment> RemoveRequested { get; set; }
    [Parameter] public EventCallback<ImmutableArray<Attachment>> ClearAllRequested { get; set; }
    [Parameter] public EventCallback Post { get; set; }

    public IReadOnlyCollection<Attachment> GetAttachments()
        => _attachments;

    public void OnClearAllClicked() {
        ClearAllRequested.InvokeAsync(_attachments);
        Clear();
    }

    public void Clear() {
        if (_attachments.Length == 0)
            return;
        _attachments = _attachments.Clear();
        StateHasChanged();
    }

    public bool AddAttachment(int id, string url, string? fileName, string? fileType, int length) {
        if (length > Constants.Attachments.FileSizeLimit) {
            ErrorUI.ShowError("File is too big. Max file size: 8Mb.");
            return false;
        }
        if (_attachments.Length >= Constants.Attachments.FileCountLimit) {
            ErrorUI.ShowError("Too many files. Max allowed number is 10.");
            return false;
        }

        _attachments = _attachments.Add(new Attachment {
            Id = id,
            Url = url,
            FileName = fileName ?? "",
            FileType = fileType ?? "",
            Length = length,
        });
        StateHasChanged();
        return true;
    }

    private void OnRemoveItemClicked(Attachment attachment) {
        RemoveRequested.InvokeAsync(attachment);
        _attachments = _attachments.Remove(attachment);
    }
}
