@namespace ActualChat.Chat.UI.Blazor.Components

@if (_attachments.Length > 0) {
    <ul class="message-attachments flex ml-1 mb-1 pt-4 pb-2 px-2 gap-5 overflow-x-auto">
        @foreach (var attachment in _attachments) {
            <li class="attachment-item p-1.5 bg-zinc-100 rounded-md inline-flex-y box-content">
                <div class="h-full flex-y relative">
                    <div class="mt-auto h-full flex justify-center relative min-h-0">
                        @if (attachment.IsImage) {
                            <img class="object-contain rounded-md max-w-full" src="@attachment.Url" alt="image"/>
                        } else {
                            <div class="h-40 flex">
                                <svg class="text-secondary fill-current h-20 w-20 self-center" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
                                    <path d="M11.362 2c4.156 0 2.638 6 2.638 6s6-1.65 6 2.457v11.543h-16v-20h7.362zm.827-2h-10.189v24h20v-14.386c0-2.391-6.648-9.614-9.811-9.614zm4.811 13h-3v-1h3v1zm0 2h-3v1h3v-1zm0 3h-10v1h10v-1zm-5-6h-5v4h5v-4z"/>
                                </svg>
                            </div>
                        }
                    </div>
                    <div class="mt-auto">
                        <div class="mt-3 overflow-hidden text-ellipsis whitespace-nowrap text-secondary">
                            @attachment.FileName
                        </div>
                    </div>
                    <div class="absolute top-0 right-0">
                        <div class="absolute right-0 z-10 translate-x-1/4 -translate-y-1/4">
                            <Menu Class="h-8 rounded-md overflow-hidden" ItemClass="p-1" Orientation="Orientation.Horizontal">
                                <MenuItem Title="Remove" OnItemClick="@(() => OnRemoveItemClicked(attachment))">
                                    <Icon>
                                        <svg class="w-5 h-5 text-red-500 fill-current" xlmns="http://www.w3.org/2000/svg" viewBox="-3 -5 30 30">
                                            <path d="M19 24h-14c-1.104 0-2-.896-2-2v-16h18v16c0 1.104-.896 2-2 2m-9-14c0-.552-.448-1-1-1s-1 .448-1 1v9c0 .552.448 1 1 1s1-.448 1-1v-9zm6 0c0-.552-.448-1-1-1s-1 .448-1 1v9c0 .552.448 1 1 1s1-.448 1-1v-9zm6-5h-20v-2h6v-1.5c0-.827.673-1.5 1.5-1.5h5c.825 0 1.5.671 1.5 1.5v1.5h6v2zm-12-2h4v-1h-4v1z"/>
                                        </svg>
                                    </Icon>
                                </MenuItem>
                            </Menu>
                        </div>
                    </div>
                </div>
            </li>
        }
    </ul>
    <div class="divider h-0 border-t border-accent"></div>
}

@code {
    private ImmutableArray<Attachment> _attachments = ImmutableArray<Attachment>.Empty;

    [Inject] private ErrorUI ErrorUI { get; init; } = null!;
    [Parameter] public EventCallback<Attachment> RemoveRequested { get; set; }

    public IReadOnlyCollection<Attachment> GetAttachments()
        => _attachments;

    public void Clear() {
        if (_attachments.Length == 0)
            return;
        _attachments = _attachments.Clear();
        StateHasChanged();
    }

    public bool AddAttachment(int id, string url, string? fileName, string? fileType, int length) {
        if (length > Constants.Attachments.FileSizeLimit) {
            ErrorUI.ShowError("File is too big. Max file size: 8Mb.");
            return false;
        }
        if (_attachments.Length >= Constants.Attachments.FilesNumberLimit) {
            ErrorUI.ShowError("Too many files. Max allowed number is 10.");
            return false;
        }

        _attachments = _attachments.Add(new Attachment {
            Id = id,
            Url = url,
            FileName = fileName ?? "",
            FileType = fileType ?? "",
            Length = length,
        });
        StateHasChanged();
        return true;
    }

    private void OnRemoveItemClicked(Attachment attachment) {
        RemoveRequested.InvokeAsync(attachment);
        _attachments = _attachments.Remove(attachment);
    }
}
