@using ActualChat.Chat.UI.Blazor.Module
@namespace ActualChat.Chat.UI.Blazor.Components

@if (Attachments.Length > 0) {
    <div class="attachment-list-wrapper">
        <div class="flex-1 flex-x justify-between p-2 pb-0">
            <span class="flex font-medium items-center min-h-6">
                @Attachments.Length file@(Attachments.Length == 0 ? "" : "s")
            </span>
            <Button Class="btn-sm clear-attachments-btn" Click="@ClearClick">
                Remove all
            </Button>
        </div>
        <ul class="attachment-list custom-scrollbar-x">
            @foreach (var attachment in Attachments) {
                <li class="attachment-wrapper">
                    <div class="flex-y relative">
                        <div class="attachment-item">
                            <ButtonSquare Click="@(() => RemoveClick.InvokeAsync(attachment))" Class="remove-attachment-btn">
                                <i class="icon-trash03 text-2xl font-thin text-04"></i>
                            </ButtonSquare>
                            @if (attachment.IsImage) {
                                <img class="min-h-34" src="@attachment.Url" alt="image"/>
                            } else {
                                <div class="flex items-center justify-center p-3">
                                    <img src="/dist/images/attachment.svg" alt="attachment" class="h-12">
                                </div>
                            }
                        </div>
                        <div class="attachment-filename" title="@attachment.FileName">
                            @attachment.FileName
                        </div>
                    </div>
                </li>
            }
            @if (Attachments.Length < 10) {
                <li class="attachment-wrapper flex min-w-34 justify-center">
                    <ButtonRound Class="add-attachment" Click="@(() => ShowFilePicker())">
                        <i class="icon-plus text-2xl text-icons-01"></i>
                    </ButtonRound>
                </li>
            }
        </ul>
    </div>
}

@code {
    private ImmutableArray<Attachment> _attachments = ImmutableArray<Attachment>.Empty;

    [Inject] private ErrorUI ErrorUI { get; init; } = null!;

    [Parameter] public EventCallback<Attachment> RemoveClick { get; set; }
    [Parameter] public EventCallback ClearClick { get; set; }
    [Parameter] public EventCallback PostClick { get; set; }
    [Parameter] public IJSObjectReference JSRef { get; set; } = null!;

    public ImmutableArray<Attachment> Attachments {
        get => _attachments;
        set {
            if (_attachments == value)
                return;
            _attachments = value;
            StateHasChanged();
        }
    }

    public bool Add(int id, string url, string? fileName, string? fileType, int length) {
        if (length > Constants.Attachments.FileSizeLimit) {
            ErrorUI.ShowError("File is too big. Max file size: 8Mb.");
            return false;
        }
        if (Attachments.Length >= Constants.Attachments.FileCountLimit) {
            ErrorUI.ShowError("Too many files. Max allowed number is 10.");
            return false;
        }

        Attachments = Attachments.Add(new Attachment {
            Id = id,
            Url = url,
            FileName = fileName ?? "",
            FileType = fileType ?? "",
            Length = length,
        });
        StateHasChanged();
        return true;
    }

    private ValueTask ShowFilePicker()
        => JSRef.InvokeVoidAsync("showFilePicker");
}
