@using ActualChat.Chat.UI.Blazor.Module
@namespace ActualChat.Chat.UI.Blazor.Components
@inherits ComputedStateComponent<ImmutableArray<Attachment>>
@{
    var attachments = State.Value;
}

@if (attachments.Length > 0) {
    <div class="attachment-list-wrapper">
        <div class="flex-1 flex-x justify-between p-2 pb-0">
            <span class="flex font-medium items-center min-h-6">
                @attachments.Length file@(attachments.Length == 0 ? "" : "s")
            </span>
            <Button Class="btn-sm clear-attachments-btn" Click="@ClearClick">
                Remove all
            </Button>
        </div>
        <ul class="attachment-list custom-scrollbar-x">
            @foreach (var attachment in attachments) {
                var uploadStyle = $"width: {attachment.Progress}%;";
                var uploadProgressClass = "attachment-upload-progress";
                if (attachment.Uploaded) {
                    uploadProgressClass += " attachment-upload-completed";
                }
                <li class="attachment-wrapper">
                    <div class="flex-y relative">
                        <div class="attachment-item">
                            <ButtonSquare Click="@(() => RemoveClick.InvokeAsync(attachment))" Class="remove-attachment-btn">
                                <i class="icon-trash03 text-2xl font-thin text-04"></i>
                            </ButtonSquare>
                            @if (attachment.IsImage) {
                                <img src="@attachment.Url" alt="image"/>
                            } else {
                                <div class="flex items-center justify-center p-3">
                                    <img src="/dist/images/attachment.svg" alt="attachment" class="h-12">
                                </div>
                            }
                        </div>
                        <div class="attachment-filename" title="@attachment.FileName">
                            @attachment.FileName
                        </div>
                        <div class="@uploadProgressClass" style="@uploadStyle"></div>
                    </div>
                </li>
            }
            @if (attachments.Length < 10) {
                <li class="attachment-wrapper flex min-w-34 justify-center">
                    <ButtonRound Class="add-attachment" Click="@(() => ShowFilePicker())">
                        <i class="icon-plus text-2xl text-icons-01"></i>
                    </ButtonRound>
                </li>
            }
        </ul>
    </div>
}

@code {
    [Inject] private ChatAttachmentsUI ChatAttachmentsUI { get; init; } = null!;

    [Parameter] public EventCallback<Attachment> RemoveClick { get; set; }
    [Parameter] public EventCallback ClearClick { get; set; }
    [Parameter] public EventCallback PostClick { get; set; }
    [Parameter] public IJSObjectReference JSRef { get; set; } = null!;

    // TODO: decouple from parent JSRef - use UI event
    private ValueTask ShowFilePicker()
        => JSRef.InvokeVoidAsync("showFilePicker");

    protected override ComputedState<ImmutableArray<Attachment>>.Options GetStateOptions()
        => new() { InitialValue = ImmutableArray<Attachment>.Empty, Category = GetStateCategory() };

    protected override Task<ImmutableArray<Attachment>> ComputeState(CancellationToken cancellationToken)
        => ChatAttachmentsUI.GetEditorAttachments(cancellationToken);
}
