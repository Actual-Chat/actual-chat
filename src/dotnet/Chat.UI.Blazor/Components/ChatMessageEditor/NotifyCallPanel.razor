@namespace ActualChat.Chat.UI.Blazor.Components
@inject FeedbackUI FeedbackUI;
@{
    var panelCls = _panelState switch {
        PanelState.Closed => "panel-closed",
        PanelState.Opening => "panel-opening",
        PanelState.Closing => "panel-closing",
        _ => "",
    };
}

<div class="@panelCls notify-call-panel">
    @if (_enableIncompleteUI) {
        <ButtonRound Class="notify-call-toggle blackout" Click="OnClick">
            <i class="icon-hand text-2xl"></i>
        </ButtonRound>
    }
    <div class="notify-call-content">
        <div class="actions">
            <Button Class="notify-btn" Click="@(() => FeedbackUI.AskFeatureRequestFeedback("notify", "Notify"))">
                <div class="w-full flex-x items-center gap-x-2 mx-2">
                    <i class="icon-at text-2xl"></i>
                    <div>
                        Notify
                    </div>
                </div>
            </Button>
            everyone
        </div>
        <ButtonRound Class="close-btn blackout" Click="OnClick">
            <i class="icon-close text-2xl"></i>
        </ButtonRound>
    </div>
</div>

@code {
    enum PanelState {
        Closed = 0,
        Opening,
        Closing,
    }

    private bool _enableIncompleteUI;
    private PanelState _panelState = PanelState.Closed;

    [Inject] private Features Features { get; init; } = null!;

    protected override async Task OnInitializedAsync() {
        _enableIncompleteUI = await Features.Get<UIFeatures.EnableIncompleteUI, bool>(CancellationToken.None);
    }

    public void Close() {
        _panelState = PanelState.Closing;
        StateHasChanged();
    }

    private void OnClick() {
        _panelState = _panelState switch {
            PanelState.Closed => PanelState.Opening,
            PanelState.Opening => PanelState.Closing,
            PanelState.Closing => PanelState.Opening,
            _ => PanelState.Closed,
        };
    }

    private void OnCloseClick()
        => Close();
}
