@namespace ActualChat.Chat.UI.Blazor.Components
@inherits ComputedStateComponent<LinkedMessagePanel.Model?>
@{
    var m = State.LatestNonErrorValue;
    if (m != null) {
        <div class="linked-message-panel">
            <Quote Message="@m.Message" LinkType="m.LinkType"/>
        </div>
    }
}

@code {
    [Inject] private Session Session { get; init; } = null!;
    [Inject] private ChatUI ChatUI { get; init; } = null!;
    [Inject] private IChats Chats { get; init; } = null!;

    protected override ComputedState<Model?>.Options GetStateOptions()
        => new() { UpdateDelayer = FixedDelayer.Instant };

    protected override async Task<Model?> ComputeState(CancellationToken cancellationToken) {
        var linkedChatEntry = await ChatUI.LinkedChatEntry.Use(cancellationToken);
        if (linkedChatEntry == null)
            return null;

        var reader = new ChatEntryReader(Chats, Session, linkedChatEntry.Entry.ChatId, linkedChatEntry.Entry.Type);
        var entry = await reader.Get(linkedChatEntry.Entry.Id, cancellationToken);
        if (entry == null) {
            // The entry was removed
            ChatUI.LinkedChatEntry.Value = null;
            Services.UICommander().CancelUpdateDelays();
            return null;
        }

        var chatMessage = new ChatMessageModel(entry) {
            IsBlockStart = true,
            IsQuote = true,
        };
        return new (chatMessage, linkedChatEntry.Type);
    }

    public record Model(ChatMessageModel Message, ChatEntryLinkType LinkType);

}
