@namespace ActualChat.Chat.UI.Blazor.Components
@inherits ComputedStateComponent<ChatPlayerPosition.Model>
@using ActualChat.Chat.UI.Blazor.Services
@using ActualChat.MediaPlayback
@inject IActivePlaybackInfo _activePlaybackInfo
@using Model = ChatPlayerPosition.Model;

@{
    var model = State.Value;
    var ts = model.Timestamp;
    var position = ts>DateTime.MinValue ?  ts.ToShortDateString() + " " + ts.ToLongTimeString() : "--:--:--";
}

<div class="@(_class ??= this.DefaultClass())">
    <span class="ml-2">@position</span>
</div>

@code {
    public class Model
    {
        public static readonly Model None = new ();

        public DateTime Timestamp { get; init; }
        public string AuthorId { get; init; } = "";
    }

    private static string? _class;

    [Parameter]
    public ChatPlayer Player { get; set; } = null!;

    protected override ComputedState<Model>.Options GetStateOptions()
        => new() { UpdateDelayer = UpdateDelayer.MinDelay, InitialValue = Model.None };

    protected override async Task<Model> ComputeState(CancellationToken cancellationToken)
    {
        var playback = await Player.PlaybackState.Use(cancellationToken).ConfigureAwait(false);
        if (playback == null)
            return Model.None;

        var isStopped = await playback.IsStoppedState.Use(cancellationToken).ConfigureAwait(false);
        if (isStopped)
            return Model.None;

        var playbackStates = await playback.PlayingTracksState.Use(cancellationToken).ConfigureAwait(false);
        var playbackState = playbackStates.LastOrDefault();
        if (playbackState == null)
            return Model.None;

        playbackState = await _activePlaybackInfo.GetTrackPlaybackState(playbackState.Command.TrackId, cancellationToken);
        if (playbackState == null)
            return Model.None;

        var trackInfo = playbackState.Command.TrackInfo;
        var playingAt = trackInfo.RecordedAt.ToDateTime().ToLocalTime() + playbackState.PlayingAt;
        return new Model { Timestamp = playingAt };
    }
}
