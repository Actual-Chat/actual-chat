@using BlazorContextMenu
@using ActualChat.Search
@inherits ComputedStateComponent<ChatListItem.Model>
@{
    var m = State.LatestNonErrorValue;
    var title = m.TitleSearchMatch.Text;
}

<ContextMenuTrigger MouseButtonTrigger="MouseButtonTrigger.Right" MenuId="@ChatMenu.MenuId" Data="@Chat" CssClass="flex-x items-center gap-x-2">
    <NavbarItem Url="@($"/chat/{Chat.Id}")" IsActive="@IsActive">
        <ChildContent>
            <div class="flex-x items-center gap-x-2">
                <ChatIcon Title="@Chat.Title" Picture="@Chat.Picture" Size="SquareSize.Size10" />
                <span class="text-ellipsis whitespace-nowrap overflow-hidden">
                    @if (m.TitleSearchMatch.Parts.Length == 0) {
                        <span>@title</span>
                    } else {
                        foreach (var part in m.TitleSearchMatch.PartsWithGaps) {
                            var textClass = part.Rank > 0 ? "font-semibold" : "";
                            <span class="@textClass">@(title[part.Range.Start..part.Range.End])</span>
                        }
                    }
                </span>
            </div>
        </ChildContent>
        <Ending>
            @if (ListKind == ChatListKind.Listening) {
                <ChatListListenToggle ChatId="@Chat.Id" Class="chat-menu-btn blackout"/>
                @if (m.CanRecord) {
                    <ChatListRecordingToggle ChatId="@Chat.Id" Class="chat-menu-btn blackout"/>
                }
                <ActiveChatRemoveButton ChatId="@Chat.Id"/>
            } else {
                <ChatListListenToggle ChatId="@Chat.Id" Class="chat-menu-btn blackout"/>
                @if (m.CanRecord) {
                    <ChatListRecordingToggle ChatId="@Chat.Id" Class="chat-menu-btn blackout"/>
                }
                <ContextMenuToggleTrigger MenuId="@ChatMenu.MenuId" Data="@Chat">
                    <div class="flex">
                        <Button Class="btn-round chat-menu-btn blackout">
                            <svg class="w-6 h-6 fill-current" xlmns="http://www.w3.org/2000/svg" viewBox="-1 -1 26 26">
                                <path fill-rule="evenodd" clip-rule="evenodd" d="M12 7C13.104 7 14 6.104 14 5C14 3.896 13.104 3 12 3C10.896 3 10 3.896 10 5C10 6.104 10.896 7 12 7ZM12 10C10.896 10 10 10.896 10 12C10 13.104 10.896 14 12 14C13.104 14 14 13.104 14 12C14 10.896 13.104 10 12 10ZM10 19C10 17.896 10.896 17 12 17C13.104 17 14 17.896 14 19C14 20.104 13.104 21 12 21C10.896 21 10 20.104 10 19Z"/>
                            </svg>
                        </Button>
                        <div class="absolute -right-6">
                            <div class="placement -mt-2">
                            </div>
                        </div>
                    </div>
                </ContextMenuToggleTrigger>

                <UnreadMessageCounter ChatId="@Chat.Id"/>
            }
        </Ending>
    </NavbarItem>
</ContextMenuTrigger>

@code {
    [Inject] private Session Session { get; init; } = null!;
    [Inject] private IChats Chats { get; init; } = null!;
    [Inject] private SearchUI SearchUI { get; init; } = null!;

    [Parameter, EditorRequired] public Chat Chat { get; init; } = null!;
    [Parameter, EditorRequired] public ChatListKind ListKind { get; init; }
    [Parameter] public bool IsActive { get; init; }

    protected override ComputedState<Model>.Options GetStateOptions() {
        return new ComputedState<Model>.Options {
            InitialValue = Model.None,
        };
    }

    protected override async Task<Model> ComputeState(CancellationToken cancellationToken)
    {
        var searchPhrase = await SearchUI.GetSearchPhrase(cancellationToken).ConfigureAwait(false);
        var rules = await Chats.GetRules(Session, Chat.Id, cancellationToken).ConfigureAwait(false);
        var titleSearchMatch = searchPhrase.GetMatch(Chat.Title);
        return new(titleSearchMatch, rules.CanWrite());
    }

    public record Model(
        SearchMatch TitleSearchMatch,
        bool CanRecord)
    {
        public static readonly Model None = new("", false);
    }
}
