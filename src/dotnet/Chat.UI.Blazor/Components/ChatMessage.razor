@namespace ActualChat.Chat.UI.Blazor.Components

@{
    var author = Model.Author;
    var entry = Model.Entry;
    var picture = string.IsNullOrWhiteSpace(author.Picture)
        ? $"https://avatars.dicebear.com/api/avataaars/{author.Name}.svg"
        : author.Picture;
}

<div class="@(_class ??= this.DefaultClass())">
    <img src="@picture" class="avatar author" alt="@author.Name"/>
    <div class="flex-1 overflow-hidden">
        <div class="header">
            <span class="author-name">@author.Name</span>
            <span class="begin-time">@entry.BeginsAt.ToString("HH:mm")</span>
            &nbsp;
            <span class="entry-id">id=@entry.Id</span>
        </div>
        <div class="content">
            @if (entry.IsStreaming) {
                <ChatMessageTranscript Model="@Model"/>
            } else {
                <ChatMessageMarkup Model="@Model"/>
            }
        </div>
    </div>
</div>

@code {
    private static string? _class;

    [Parameter, EditorRequired, ParameterComparer(typeof(ByReferenceParameterComparer))]
    public ChatMessageModel Model { get; set; } = null!;

    public override Task SetParametersAsync(ParameterView parameters)
        => this.HasChangedParameters(parameters) ? base.SetParametersAsync(parameters) : Task.CompletedTask;
}
