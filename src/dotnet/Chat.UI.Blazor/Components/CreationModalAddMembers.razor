<div class="creation-panel">
    <div class="header add-members">
        <ButtonRound Class="transparent" ContentClass="!min-w-12 !max-w-12" Click="ReturnToPrevious">
            <i class="icon-arrow-left text-2xl"></i>
        </ButtonRound>
        <div class="w-full px-4 text-xl font-semibold">Add members</div>
        <ButtonRound Class="transparent" ContentClass="!min-w-14 !max-w-14" Click="OnClose">
            <i class="icon-close text-2xl md:text-xl font-medium"></i>
        </ButtonRound>
    </div>
    <div class="mb-4 px-4">
        <SearchBox
            @ref="_searchBoxRef"
            Class="mt-1"
            Placeholder="Type the username"
            MaxLength="@Constants.Chat.MaxSearchFilterLength"
            TextChanged="@OnFilter"/>
    </div>
    <CreationPanelContacts/>
</div>

@code {
    private SearchBox _searchBoxRef = null!;

    [Inject] private ModalUI ModalUI { get; init; } = null!;
    [Inject] private Features Features { get; init; } = null!;
    [Inject] private Session Session { get; init; } = null!;
    [Inject] private IContacts Contacts { get; init; } = null!;
    [Inject] private IAccounts Accounts { get; init; } = null!;
    [Inject] private IAuthors Authors { get; init; } = null!;
    [Inject] private IUserPresences UserPresences { get; init; } = null!;

    [CascadingParameter] public bool EnableIncompleteUI { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }
    [Parameter] public EventCallback ReturnToPrevious { get; set; }

    private Contact[] FilteredContacts { get; set; } = Array.Empty<Contact>();
    private Contact[] AllContacts { get; set; } = Array.Empty<Contact>();

    protected override async Task OnInitializedAsync() {
        var contacts = await Contacts.ListOwn(Session, default);
        var resolvedContacts = await contacts
            .Select(async contact => {
    // Default scheduler is used from here (in this block)
                var account = await Accounts.Get(Session, contact.TargetUserId, default).ConfigureAwait(false);
                if (account == null)
                    return null;

                var presence = await UserPresences.Get(contact.TargetUserId, default).ConfigureAwait(false);
                return new Contact() {
                    Account = account,
                };
            })
            .Collect();

        AllContacts = resolvedContacts
            .SkipNullItems()
            .OrderBy(x => x.Account.Avatar.Name)
            .ToArray();
        FilteredContacts = AllContacts;
    }

    private void OnFilter(string filter) {
        FilteredContacts = string.IsNullOrWhiteSpace(filter)
            ? AllContacts.ToArray()
            : AllContacts
                .Where(x => x.Account.Avatar.Name.OrdinalIgnoreCaseContains(filter))
                .ToArray();
    }

    private sealed class Contact {
        public Account Account { get; init;} = null!;
    }
}
