@implements IModalView<NewChatModal.Model>
@inherits FusionComponentBase
@namespace ActualChat.Chat.UI.Blazor.Components

@{
    var title = _chat != null ? _chat.Title : "New chat";
}
<DialogFrame
    Class="new-chat-modal"
    Title="@title"
    HasCloseButton="true"
    NarrowViewSettings="@_narrowViewSettings">
    <Body>
        @if (_chat == null) {
            <NewChatModalProps
                ButtonsSlotName="@_buttonsSlotName"
                ChatCreated="OnChatCreated"
                CloseRequested="OnClose" />
        } else {
            <NewChatModalMembers
                ButtonsSlotName="@_buttonsSlotName"
                ChatSid="@_chat.Id"
                MembersAdded ="OnClose"
                SkipRequested="OnClose" />
        }
    </Body>
    <Buttons>
        <RenderSlot Name="@_buttonsSlotName" />
    </Buttons>
</DialogFrame>

@code {
    private readonly DialogFrameNarrowViewSettings _narrowViewSettings =
        DialogFrameNarrowViewSettings.Stretch with { UseInteractiveHeader = true, ShouldHideButtons = false};
    private readonly string _buttonsSlotName = Guid.NewGuid().ToString();

    private Chat? _chat;

    [Inject] private History History { get; init; } = null!;

    [CascadingParameter] public Modal Modal { get; set; } = null!;
    [Parameter] public Model ModalModel { get; set; } = null!;

    protected override void OnInitialized()
        => _ = NavigateToChatWhenClosed();

    private void OnChatCreated(Chat chat) {
        _chat = chat;
        StateHasChanged();
    }

    private void OnClose()
        => Modal.Close();

    private async Task NavigateToChatWhenClosed() {
        await Modal.Ref.WhenClosed;
        if (_chat == null)
            return;
        await History.WhenNavigationCompleted();
        _ = History.NavigateTo(Links.Chat(_chat.Id));
    }

    public sealed record Model;
}
