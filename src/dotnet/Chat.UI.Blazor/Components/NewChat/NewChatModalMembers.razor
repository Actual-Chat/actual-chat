@using ActualChat.Search
@inherits FusionComponentBase
@namespace ActualChat.Chat.UI.Blazor.Components
@{
    var selectedChatIds = SelectedChatIds;
}

<FormBlock>
    <ContactSelector
        @ref="@_contactSelectorRef"
        Filter="@_filter"
        Changed="StateHasChanged"
        SearchPhrase="_searchPhrase">
        <SearchBox
            Placeholder="Whom would you like to add?"
            Class="icon-alight-right"
            MaxLength="@Constants.Chat.MaxSearchFilterLength"
            TextChanged="@OnFilter"/>
        <ContactSelectorBadges />
        <ContactSelectorList/>
    </ContactSelector>
</FormBlock>

<RenderIntoSlot Name="@ButtonsSlotName">
    @if (selectedChatIds.Count > 0) {
        <Button
            Class="btn-modal btn-primary"
            Click="@OnAdd">
            Add @(selectedChatIds.Count) @("member".Pluralize(selectedChatIds.Count))
        </Button>
    } else {
        <Button
            Class="btn-modal btn-primary"
            Click="@(() => Skipped.InvokeAsync(false))">
            Skip
        </Button>
    }
</RenderIntoSlot>

@code {
    private ContactSelector? _contactSelectorRef;
    private SearchPhrase _searchPhrase = SearchPhrase.None;
    private ChatListFilter _filter = ChatListFilter.People;
    private ChatId _chatId;

    private IReadOnlyDictionary<ChatId, ChatInfo> AllChats
        => _contactSelectorRef?.AllChats.Value ?? ImmutableDictionary<ChatId, ChatInfo>.Empty;
    private IReadOnlySet<ChatId> SelectedChatIds
        => _contactSelectorRef?.SelectedChatIds.Value ?? ImmutableHashSet<ChatId>.Empty;

    [Inject] private ChatHub ChatHub { get; init; } = null!;

    [Parameter, EditorRequired] public string ChatSid { get; set; } = "";
    [Parameter, EditorRequired] public string ButtonsSlotName { get; set; } = "";
    [Parameter, EditorRequired] public EventCallback<bool> Skipped { get; set; }
    [Parameter, EditorRequired] public EventCallback<bool> Completed { get; set; }

    protected override void OnInitialized() {
        _chatId = ChatId.Parse(ChatSid);
        if (_chatId.IsPlaceChat) {
            // This filter is applicable only to private chat of a place.
            // For public chats of a place this step should be skipped.
            var placeId = _chatId.PlaceId;
            var membersState = ChatHub.StateFactory().NewMutable<ApiArray<UserId>>();
            _filter = new ChatListFilter(Guid.NewGuid().ToString(), "Place contacts", PlaceMembersFilter);
            _ = FillInMembersState();

            bool PlaceMembersFilter(ChatInfo info) {
                if (info.Chat.Kind is not ChatKind.Peer)
                    return false;
                var userId = info.Contact.UserId;
                var members = membersState.Use().Result;
                return members.Contains(userId);
            }

            async Task FillInMembersState() {
                var userIds = await ChatHub.Authors.ListUserIds(ChatHub.Session, placeId.ToRootChatId(), default).ConfigureAwait(false);
                membersState.Value = userIds;
            }
        }
    }

    private void OnFilter(string filter) {
        _searchPhrase = filter.ToSearchPhrase(true, false);
        StateHasChanged();
    }

    private async Task OnAdd() {
        var allChats = AllChats;
        var userIds = SelectedChatIds
            .Select(chatId => allChats.GetValueOrDefault(chatId)?.Contact.Account)
            .SkipNullItems()
            .Select(c => c.Id)
            .ToArray();
        if (userIds.Length != 0) {
            var createAuthorsCommand = new Authors_Invite(ChatHub.Session, new ChatId(ChatSid), userIds);
            var (_, error) = await ChatHub.UICommander().Run(createAuthorsCommand);
            if (error != null)
                return;
        }
        await Completed.InvokeAsync(true);
    }
}
