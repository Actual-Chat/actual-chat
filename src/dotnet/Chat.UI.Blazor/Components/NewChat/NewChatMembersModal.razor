@using ActualChat.Search
@implements IModalView<NewChatMembersModal.Model>
@inherits FusionComponentBase
@namespace ActualChat.Chat.UI.Blazor.Components

<DialogFrame
    Class="new-chat-modal"
    Title="@ModalModel.Chat.Title"
    HasCloseButton="true"
    NarrowViewSettings="@_narrowViewSettings">
    <Body>
        <FormBlock>
            <ContactSelectContext ChatSelectionChanged="OnSelectionChanged">
                <SearchBox
                    Placeholder="Type the username"
                    Class="icon-alight-right"
                    MaxLength="@Constants.Chat.MaxSearchFilterLength"
                    TextChanged="@OnFilter"/>
                <ContactSelectBadges />
                <ContactSelect
                    ShowUserContactsOnly="true"
                    ChatListOrder="ChatListOrder.ByAlphabet"
                    SearchPhrase="_searchPhrase" />
            </ContactSelectContext>
        </FormBlock>

    </Body>
    <Buttons>
        @if (_selectedChats.Count > 0) {
            <Button
                Class="btn-modal btn-primary"
                Click="@OnAdd">
                Add @_selectedChats.Count member(s)
            </Button>
        } else {
            <Button Class="btn-modal btn-primary"
                Click="@(() => Modal.Close())">
                Skip
            </Button>
        }
    </Buttons>
</DialogFrame>

@code {
    private readonly DialogFrameNarrowViewSettings _narrowViewSettings =
        DialogFrameNarrowViewSettings.Stretch with { UseInteractiveHeader = true, ShouldHideButtons = false};
    private SearchPhrase _searchPhrase = "".ToSearchPhrase(true, false);
    private IReadOnlyCollection<ChatInfo> _selectedChats = Array.Empty<ChatInfo>();

    [Inject] private Session Session { get; init; } = null!;
    [Inject] private UICommander UICommander { get; init; } = null!;
    [Inject] private History History { get; init; } = null!;

    [CascadingParameter] public Modal Modal { get; set; } = null!;
    [Parameter] public Model ModalModel { get; set; } = null!;

    protected override void OnInitialized()
        => _ = NavigateToChatWhenClosed();

    private void OnFilter(string filter) {
        _searchPhrase = filter.ToSearchPhrase(true, false);
        StateHasChanged();
    }

    private void OnSelectionChanged(IReadOnlyCollection<ChatInfo> selectedChats) {
        _selectedChats = selectedChats;
        StateHasChanged();
    }

    private async Task OnAdd() {
        var userIds = _selectedChats
            .Select(chat => chat.Contact.Account)
            .SkipNullItems()
            .Select(c => c.Id)
            .ToArray();
        var createAuthorsCommand = new Authors_Invite(Session, ModalModel.Chat.Id, userIds);
        var (_, error) = await UICommander.Run(createAuthorsCommand);
        if (error != null)
            return;
        Modal.Close();
    }

    private async Task NavigateToChatWhenClosed() {
        await Modal.Ref.WhenClosed;
        await History.WhenNavigationCompleted();
        _ = History.NavigateTo(Links.Chat(ModalModel.Chat.Id));
    }

    public sealed record Model(Chat Chat);
}
