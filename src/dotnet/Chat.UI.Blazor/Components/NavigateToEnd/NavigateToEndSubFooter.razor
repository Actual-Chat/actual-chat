@namespace ActualChat.Chat.UI.Blazor.Components
@inherits ComputedStateComponent<NavigateToEndSubFooter.Model>
@{
    var m = State.ValueOrDefault;
    if (m is not { IsVisible: true })
        return;
}

<div class="navigate-to-end-sub-footer">
    <ButtonRound Tooltip="Navigate to the last message" Click="OnClick" Class="md:my-2">
        <i class="icon-arrow-down text-2xl font-thin"></i>
    </ButtonRound>
</div>

@code {
    [Inject] private IChats Chats { get; init; } = null!;
    [Inject] private ChatUI ChatUI { get; init; } = null!;
    [Inject] private UIEventHub UIEventHub { get; init; } = null!;
    [Inject] private Session Session { get; init; } = null!;

    protected override async Task<Model> ComputeState(CancellationToken cancellationToken) {
        var chatId = await ChatUI.SelectedChatId.Use(cancellationToken).ConfigureAwait(false);
        if (chatId.IsNone)
            return Model.Invisible;

        var isEndAnchorVisible = await ChatUI.IsEndAnchorVisible.Use(cancellationToken).ConfigureAwait(false);
        if (isEndAnchorVisible)
            return Model.Invisible;

        var chat = await ChatUI.Get(chatId, cancellationToken).ConfigureAwait(false);
        if (chat == null)
            return Model.Invisible;

        var lastEntryId = chat.News.LastTextEntry?.Id ?? default;
        if (lastEntryId.IsNone)
            return Model.Invisible;

        return new(true, lastEntryId);
    }

    private void OnClick() {
        var lastEntryId = State.Value.LastEntryId;
        if (lastEntryId.IsNone)
            return;

        ChatUI.HighlightEntry(lastEntryId, navigate: true);
    }

    public sealed record Model(bool IsVisible, ChatEntryId LastEntryId)
    {
        public static Model Invisible { get; } = new(false, default);
    };
}
