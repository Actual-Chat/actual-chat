@namespace ActualChat.Chat.UI.Blazor.Components
@inherits ComputedStateComponent<NavigateToEndSubHeader.Model>
@{
    var m = State.ValueOrDefault;
    if (m is not { IsVisible: true })
        return;
}

<div class="navigate-to-end-sub-header">
    <ButtonRound Tooltip="Navigate to the last message" Click="OnClick">
        <i class="fa fa-angle-down"></i>
    </ButtonRound>
</div>

@code {
    [Inject] private IChats Chats { get; init; } = null!;
    [Inject] private ChatUI ChatUI { get; init; } = null!;
    [Inject] private UIEventHub UIEventHub { get; init; } = null!;
    [Inject] private Session Session { get; init; } = null!;

    protected override async Task<Model> ComputeState(CancellationToken cancellationToken) {
        var chatState = await ChatUI.GetSelectedChatState(cancellationToken);
        if (chatState == null)
            return Model.Invisible;

        var visibleRange = await ChatUI.VisibleIdRange.Use(cancellationToken);
        if (visibleRange.IsEmpty)
            return Model.Invisible;

        var lastEntryId = chatState.Summary.LastTextEntry?.Id ?? default;
        if (lastEntryId.IsNone || lastEntryId.LocalId <= visibleRange.End)
            return Model.Invisible;

        return new(true, lastEntryId);
    }

    private async Task OnClick() {
        var lastEntryId = State.LatestNonErrorValue.LastEntryId;
        if (lastEntryId.IsNone)
            return;

        await UIEventHub.Publish(new NavigateToChatEntryEvent(lastEntryId));
        ChatUI.HighlightedChatEntryId.Value = lastEntryId.LocalId;
    }

    public sealed record Model(bool IsVisible, ChatEntryId LastEntryId)
    {
        public static Model Invisible { get; } = new(false, default);
    };
}
