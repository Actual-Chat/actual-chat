@namespace ActualChat.Chat.UI.Blazor.Components
@inherits ComputedStateComponent<NavigateToEnd.Model>
@{
    var m = State.Value;
    _animator.State = m.IsVisible;
    if (_animator.MustHideComponent)
        return;
}

<div class="navigate-to-end @_animator.Class">
    <ButtonRound Tooltip="Navigate to the last message" Click="OnClick" Class="md:my-2">
        <i class="icon-arrow-down text-2xl font-thin"></i>
    </ButtonRound>
</div>

@code {
    private ShowHideAnimator _animator = null!;

    [Inject] private Session Session { get; init; } = null!;
    [Inject] private IChats Chats { get; init; } = null!;
    [Inject] private ChatUI ChatUI { get; init; } = null!;
    [Inject] private UIEventHub UIEventHub { get; init; } = null!;
    [Inject] private MomentClockSet Clocks { get; init; } = null!;

    [Parameter, EditorRequired] public string ChatSid { get; set; } = "";
    [Parameter, EditorRequired] public bool IsVisible { get; set; }

    protected override void OnInitialized() {
        base.OnInitialized();
        _animator = new ShowHideAnimator(this, TimeSpan.FromMilliseconds(300), Clocks.UIClock);
    }

    public override ValueTask DisposeAsync() {
        _animator.Dispose();
        return base.DisposeAsync();
    }

    protected override ComputedState<Model>.Options GetStateOptions()
        => new() { InitialValue = Model.Invisible };

    protected override async Task<Model> ComputeState(CancellationToken cancellationToken) {
        var chatId = new ChatId(ChatSid, ParseOrNone.Option);
        if (!IsVisible || chatId.IsNone)
            return Model.Invisible;

        var chat = await ChatUI.Get(chatId, cancellationToken).ConfigureAwait(false);
        if (chat == null)
            return Model.Invisible;

        var lastEntryId = chat.News.LastTextEntry?.Id ?? default;
        if (lastEntryId.IsNone)
            return Model.Invisible;

        return new(true, lastEntryId);
    }

    private void OnClick() {
        var lastEntryId = State.Value.LastEntryId;
        if (lastEntryId.IsNone)
            return;

        ChatUI.HighlightEntry(lastEntryId, navigate: true);
    }

    public sealed record Model(bool IsVisible, ChatEntryId LastEntryId)
    {
        public static Model Invisible { get; } = new(false, default);
    };
}
