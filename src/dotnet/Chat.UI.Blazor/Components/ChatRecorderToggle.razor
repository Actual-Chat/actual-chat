@namespace ActualChat.Audio.UI.Blazor.Components
@inherits ComputedStateComponent<Symbol>
@{
    var isRecordingInThisChat = RecordingChatId == ChatId;
    var recordingStatus = isRecordingInThisChat ? "on" : "off";
    var cls = $"audio-recorder-toggle {recordingStatus}";
}

@if (CanRecord) {
    <ButtonSquare Class="@cls"
                  Click="OnClick"
                  @ontouchend="OnLongPressStop"
                  @onmouseup="OnLongPressStop"
                  @onlongpress="OnLongPressStart"
                  data-long-press-delay="200">
        <svg class="fill-current w-10 md:w-12 h-10 md:h-12 m-1.5" xmlns="http://www.w3.org/2000/svg" viewBox="-4 -4 32 32">
            <path d="M16 11c0 2.209-1.791 4-4 4s-4-1.791-4-4v-7c0-2.209 1.791-4 4-4s4 1.791 4 4v7zm4-2v2c0 4.418-3.582 8-8 8s-8-3.582-8-8v-2h2v2c0 3.309 2.691 6 6 6s6-2.691 6-6v-2h2zm-7 13v-2h-2v2h-4v2h10v-2h-4z"/>
        </svg>
    </ButtonSquare>
} else {
    <ButtonSquare Class="@cls"
                  IsDisabled="true">
        <svg class="fill-current w-10 md:w-12 h-10 md:h-12 m-1.5" xmlns="http://www.w3.org/2000/svg" viewBox="-4 -4 32 32">
            <path d="M16 11c0 2.209-1.791 4-4 4s-4-1.791-4-4v-7c0-2.209 1.791-4 4-4s4 1.791 4 4v7zm4-2v2c0 4.418-3.582 8-8 8s-8-3.582-8-8v-2h2v2c0 3.309 2.691 6 6 6s6-2.691 6-6v-2h2zm-7 13v-2h-2v2h-4v2h10v-2h-4z"/>
            <line x1="4" y1="2" x2="20" y2="20" stroke="currentColor" stroke-width="2"/>
        </svg>
    </ButtonSquare>
}

@code {
    [Inject] private ChatUI ChatUI { get; init; } = null!;
    [Inject] private AudioRecorder AudioRecorder { get; init; } = null!;

    [Parameter] public string ChatId { get; set; } = "";

    private Symbol RecordingChatId => State.ValueOrDefault;
    private bool IsLongPress { get; set; } = false;
    private bool CanRecord { get; set; } = true;

    protected override ComputedState<Symbol>.Options GetStateOptions()
        => new() { UpdateDelayer = UpdateDelayer.ZeroDelay };

    protected override async Task<Symbol> ComputeState(CancellationToken cancellationToken) {
        return await ChatUI.RecordingChatId.Use(cancellationToken).ConfigureAwait(false);
    }

    private async Task OnClick() {
        var isRecordingInThisChat = RecordingChatId == ChatId;
        if (isRecordingInThisChat) {
            ChatUI.RecordingChatId.Value = Symbol.Empty;
            return;
        }
        CanRecord = await AudioRecorder.CanRecord().ConfigureAwait(true);
        if (!CanRecord) {
            StateHasChanged();
            return;
        }
        ChatUI.RecordingChatId.Value = ChatId;
    }

    private async Task OnLongPressStart() {
        if (IsLongPress)
            return;
        CanRecord = await AudioRecorder.CanRecord().ConfigureAwait(true);
        if (!CanRecord) {
            StateHasChanged();
            return;
        }
        IsLongPress = true;
        ChatUI.RecordingChatId.Value = ChatId;
    }

    private void OnLongPressStop() {
        if (!IsLongPress)
            return;
        IsLongPress = false;
        ChatUI.RecordingChatId.Value = Symbol.Empty;
    }
}
