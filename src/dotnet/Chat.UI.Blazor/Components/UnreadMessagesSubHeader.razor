@namespace ActualChat.Chat.UI.Blazor.Components
@inherits ComputedStateComponent<UnreadMessagesSubHeader.Model>
@{
    var m = State.LatestNonErrorValue ?? Model.None;
    if (m.Count == 0)
        return;

    var messagesWord = m.Count == 1 ? "message" : "messages";
    var text = $"{m.Count.Format()} unread {messagesWord}";
}

<div class="unread-messages-sub-header" @onclick="Click">
    @text
</div>

@code {
    private static IUpdateDelayer UpdateDelayer { get; } = FixedDelayer.Get(1);

    [Inject] private Session Session { get; init; } = null!;
    [Inject] private UnreadMessages UnreadMessages { get; init; } = null!;

    [CascadingParameter] public Chat Chat { get; set; } = null!;
    [Parameter] public EventCallback Click { get; set; }

    protected override ComputedState<Model>.Options GetStateOptions() {
        return new() {
            InitialValue = Model.None,
            UpdateDelayer = UpdateDelayer,
        };
    }

    protected override async Task<Model> ComputeState(CancellationToken cancellationToken) {
        var count = await UnreadMessages.GetCount(Chat.Id, cancellationToken);
        return count == 0 ? Model.None : new() { Count = count };
    }

    public sealed record Model {
        public static readonly Model None = new();

        public MaybeTrimmed<int> Count { get; init; }
    }
}
