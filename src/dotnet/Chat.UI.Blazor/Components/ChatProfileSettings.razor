@namespace ActualChat.UI.Blazor.Components

<div class="h-full w-full flex flex-col items-center">
    <div class="px-2 py-2 w-full md:py-20 md:px-10 md:w-3/5">
        <div>
            <h3>Profile settings for chat:</h3>
            <h4 class="font-medium text-primary">@chat?.Title</h4>
        </div>

        <div class="mt-5">
            <EditForm Model="@editModel" OnValidSubmit="@Save" >
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div>
                    <label for="Name" class="block text-sm font-medium text-secondary">Name</label>
                    <div class="mt-1">
                        <InputText @bind-Value=editModel.Name placeholder="@baseName" id="Name"
                                   class="w-full px-2 py-1 border border-1 border-gray-300 rounded-md focus:outline-none focus:border-sky-500" />
                    </div>
                </div>

                <div class="mt-2">
                    <label for="Picture" class="block text-sm font-medium text-secondary">Picture</label>
                    <div class="mt-1">
                        <InputText @bind-Value=editModel.Picture placeholder="@basePicture" id="Picture"
                                   class="w-full px-2 py-1 border border-1 border-gray-300 rounded-md focus:outline-none focus:border-sky-500" />
                    </div>
                </div>

                <div class="mt-3 flex flex-row justify-between">
                    <button type="submit" class="bg-green-500 hover:bg-green-700 text-white py-1 px-4 rounded">Save</button>
                    <button class="bg-blue-500 hover:bg-blue-700 text-white py-1 px-4 rounded" @onclick="Close">Close</button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {
    public class EditModel
    {
        public string Name { get; set; }
        public string Picture { get; set; }
    }

    [Inject] private Session Session { get; set; } = default!;
    [Inject] private IChats Chats { get; set; } = default!;
    [Inject] private IChatAuthors ChatAuthors { get; set; } = default!;
    [Inject] private IUserAuthors UserAuthors { get; set; } = default!;
    [Inject] private IAuth Auth { get; set; } = default!;
    [Inject] private UICommandRunner Cmd { get; set; } = default!;

    private Chat? chat;
    private string? baseName;
    private string? basePicture;
    private EditModel editModel = new EditModel();

    [CascadingParameter]
    public BlazoredModalInstance ModalInstance { get; set; } = default!;
    [Parameter]
    public string ChatId { get; set; } = "";

    protected override async Task OnParametersSetAsync()
    {
        chat = await Chats.Get(Session, ChatId, default);

        var chatAuthor = await ChatAuthors.GetSessionChatAuthor(Session, ChatId, default);
        var user = await Auth.GetUser(Session, default);
        if (user.IsAuthenticated) {
            var userAuthor = await UserAuthors.Get(user.Id, true, default);
            if (userAuthor != null) {
                baseName = userAuthor.Name;
                basePicture = userAuthor.Picture;
            }
        }
        
        editModel.Name = chatAuthor?.Name ?? "";
        editModel.Picture = chatAuthor?.Picture ?? "";
    }

    private async void Save()
    {
        await Cmd.Run(new IChatAuthors.UpdateAuthorCommand(Session, ChatId, editModel.Name, editModel.Picture), default);
    }

    private void Close()
    {
        ModalInstance?.CloseAsync();
    }
}
