@using ActualChat.Chat.UI.Blazor.Pages
@inherits ComputedStateComponent<ChatFooter.Model>
@{
    var m = State.LatestNonErrorValue ?? new();
}

<div class="flex-y w-full bg-05 md:bg-01">
    @if (m.CanPost) {
        <ChatMessageEditor/>
    } else if (m.CanJoin) {
        <div class="chat-footer">
            @if (m.IsAuthenticated) {
                <div>
                    <span class="inline-flex">To post or talk,</span>
                    <Button Click="@OnJoin">Join this chat</Button>
                </div>
            } else {
                <div class="signin-footer">
                    <div class="inline-flex">
                        <SignInMenu ButtonClass="w-full"/>
                    </div>
                    <span class="inline-flex mx-2 items-center">or</span>
                    <Button Click="@OnJoin" Class="inline-flex btn-outline">Join anonymously</Button>
                </div>
            }
        </div>
    } else {
        <div class="chat-footer text-xl">This chat is read-only for you</div>
    }
</div>

@code {
    [Inject] private Session Session { get; init; } = null!;
    [Inject] private IAccounts Accounts { get; init; } = null!;
    [Inject] private IChats Chats { get; init; } = null!;
    [Inject] private NavigationManager Nav { get; init; } = null!;
    [Inject] private UICommander UICommander { get; init; } = null!;

    [CascadingParameter] public Chat Chat { get; set; } = null!;

    protected override async Task<Model> ComputeState(CancellationToken cancellationToken) {
        string chatId = Chat.Id;
        var account = await Accounts.Get(Session, cancellationToken).ConfigureAwait(false);
        var permissions = await Chats.GetRules(Session, chatId, cancellationToken).ConfigureAwait(false);
        var canPost = permissions.CanWrite();
        var canJoin = !canPost && await Chats.CanJoin(Session, chatId, cancellationToken).ConfigureAwait(false);
        return new () {
            CanPost = canPost,
            CanJoin = canJoin,
            IsAuthenticated = account != null,
        };
    }

    private async Task OnJoin() {
        string chatId = Chat.Id;
        var command = new IChats.JoinChatCommand(Session, chatId);
        await UICommander.Run(command, default);
    }

    public record Model {
        public bool CanPost { get; init; }
        public bool CanJoin { get; init; }
        public bool HasFooter => CanPost || CanJoin;
        public bool IsAuthenticated { get; init; }
    }
}
