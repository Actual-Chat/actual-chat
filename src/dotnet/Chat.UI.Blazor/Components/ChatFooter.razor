@using ActualChat.Chat.UI.Blazor.Pages
@inherits FusionComponentBase
@{
    var m = Model;
    var chat = Chat;
}

<div class="writable-chat-footer">
    @if (ReferenceEquals(chat, SpecialChat.Loading)) {
        // Render skeletons until State is computed
        <chat-view-footer-skeleton/>
    } else if (chat.Id.IsNone) {
        <ReadOnlyChatFooter FooterText="" />
    } else {
        @if (m.CanPost) {
            <ChatMessageEditor @key="@chat.Id.Value" Chat="@chat" />
        } else if (m.CanJoin) {
            <div class="chat-footer">
                @if (!m.IsGuest) {
                    <div>
                        <span class="c-text">To post or talk,</span>
                        @if (m.ShouldJoinPlaceFirst) {
                            <Button Click="@(() => OnJoinPlace(m.Place!))" Class="btn-sm btn-primary">Join '@m.Place!.Title' place</Button>
                        } else {
                            <Button Click="@OnJoin" Class="btn-sm btn-primary">Join this chat</Button>
                        }
                    </div>
                } else {
                    <div class="signin-footer">
                        <div class="inline-flex">
                            <SignInButton ButtonClass="w-full"/>
                        </div>
                        @if (!m.OtherUserId.IsNone) {
                            <span class="inline-flex mx-2 mr-1 items-center">to chat with</span>
                            <AccountName UserSid="@m.OtherUserId.Id"/>
                        } else if (m.CanJoinWithGuestAccount) {
                            <span class="inline-flex mx-2 items-center">or</span>
                            <Button Click="@OnJoin" Class="inline-flex btn-outline">Join anonymously</Button>
                        } else {
                            <span class="inline-flex ml-2 items-center">to join this chat</span>
                        }
                    </div>
                }
            </div>
        } else {
            <ReadOnlyChatFooter/>
        }
    }
</div>

@code {
    private Session Session => ChatContext.Session;
    private Chat Chat => ChatContext.Chat;
    private ModalUI ModalUI => ChatContext.ModalUI;
    private UICommander UICommander => ChatContext.UICommander();

    [Parameter, EditorRequired] public ChatContext ChatContext { get; set; } = null!;
    [Parameter, EditorRequired] public ChatPage.FooterModel Model { get; set; } = null!;

    private async Task OnJoin() {
        if (!Model.HasMultipleAvatars) {
            var command = new Authors_Join(Session, Chat.Id);
            await UICommander.Run(command);
            return;
        }

        await ModalUI.Show(new AvatarSelectModal.Model(ChatId.None, Model.CanJoinAnonymously, JoinWithAvatar));

        async Task JoinWithAvatar(AvatarFull avatar) {
            var command = new Authors_Join(Session, Chat.Id, avatar.Id, JoinAnonymously: avatar.IsAnonymous);
            await UICommander.Run(command);
        }
    }

    private async Task OnJoinPlace(Place place) {
        if (!Model.HasMultipleAvatars) {
            var command = new Places_Join(Session, place.Id);
            await UICommander.Run(command);
            return;
        }

        await ModalUI.Show(new AvatarSelectModal.Model(ChatId.None, Model.CanJoinAnonymously, JoinWithAvatar));

        async Task JoinWithAvatar(AvatarFull avatar) {
            var command = new Places_Join(Session, place.Id, avatar.Id);
            await UICommander.Run(command);
        }
    }

    private Task SignIn()
        => ModalUI.Show(new SignInModal.Model());
}
