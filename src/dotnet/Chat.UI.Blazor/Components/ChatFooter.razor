@using ActualChat.Chat.UI.Blazor.Pages
@inherits ComputedStateComponent<ChatFooter.Model>
@{
    var m = State.LatestNonErrorValue ?? new();
}

@if (m.HasFooter) {
    <div class="flex-y w-full">
        @if (m.CanPost) {
            <ChatMessageEditor/>
        } else if (m.CanJoin) {
            <div class="bg-01 rounded-md mx-3 py-1.5 px-2 flex justify-center">
                @if (m.IsAuthenticated) {
                    <div>
                        <span class="inline-flex">To post or talk,</span>
                        <Button Click="@OnJoin">Join this chat</Button>
                    </div>
                } else {
                    <div>
                        <div class="inline-flex"><SignInMenu ButtonClass="px-3 py-1" ContentPositionClass="bottom-14"/></div>
                        <span class="inline-flex mx-1">or</span>
                        <Button Click="@OnJoin" Class="btn-cancel">Join this chat anonymously</Button>
                    </div>
                }
            </div>
        }
    </div>
}

@code {
    [Inject] private Session Session { get; init; } = null!;
    [Inject] private IAuth Auth { get; init; } = null!;
    [Inject] private IChats Chats { get; init; } = null!;
    [Inject] private UICommandRunner Cmd { get; init; } = null!;
    [Inject] private NavigationManager Nav { get; init; } = null!;

    [CascadingParameter] public Chat Chat { get; set; } = null!;

    protected override async Task<Model> ComputeState(CancellationToken cancellationToken) {
        string chatId = Chat.Id;
        var permissions = await Chats.GetRules(Session, chatId, cancellationToken).ConfigureAwait(false);
        var user = await Auth.GetUser(Session, cancellationToken).ConfigureAwait(false);
        var canSend = permissions.CanWrite;
        var canJoin = false;
        if (!canSend) {
            canJoin = await Chats.CanJoin(Session, chatId, cancellationToken).ConfigureAwait(false);
        }
        return new () {
            CanPost = canSend,
            CanJoin = canJoin,
            IsAuthenticated = user != null,
        };
    }

    private async Task OnJoin() {
        string chatId = Chat.Id;
        var command = new IChats.JoinChatCommand(Session, chatId);
        await Cmd.Run(command, default);
    }

    public record Model {
        public bool CanPost { get; init; }
        public bool CanJoin { get; init; }
        public bool HasFooter => CanPost || CanJoin;
        public bool IsAuthenticated { get; init; }
    }
}
