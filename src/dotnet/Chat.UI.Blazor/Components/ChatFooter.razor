@inherits ComputedStateComponent<ChatFooter.Model>
@inject Session _session
@inject IAuth _auth
@inject IChats _chats
@inject NavigationManager _nav
@inject UICommandRunner _cmd

@{
    var model = State.LatestNonErrorValue ?? new();
}

@if (model.Display) {
    <div class="flex flex-col w-full py-2">
        @if (model.CanSend) {
            <ChatMessageEditor/>
        } else if (model.CanJoin) {
            <button type="button" class="bg-accent rounded-md mx-3 py-1.5 font-medium text-secondary hover:text-primary"
                    @onclick="@OnJoin">Join Chat</button>
        }
    </div>
}

@code {
    public record Model {
        public bool CanSend { get; init; }
        public bool CanJoin { get; init; }
        public bool Display => CanSend || CanJoin;
    }

    [Inject] private UICommandRunner Cmd { get; set; } = null!;

    [CascadingParameter]
    public Chat Chat { get; set; } = null!;

    protected override async Task<Model> ComputeState(CancellationToken cancellationToken) {
        string chatId = Chat.Id;
        var permissions = await _chats.GetPermissions(_session, chatId, cancellationToken);
        var canSend = permissions.HasFlag(ChatPermissions.Write);
        var canJoin = false;
        if (!canSend) {
            var chat = await _chats.Get(_session, chatId, cancellationToken);
            canJoin = chat?.IsPublic ?? false;
        }
        return new () { CanSend = canSend, CanJoin = canJoin };
    }

    private async Task OnJoin() {
        string chatId = Chat.Id;
        var command = new IChats.JoinPublicChatCommand(_session, chatId);
        await _cmd.Run(command, default);
    }
}
