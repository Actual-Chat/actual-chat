@using ActualChat.Chat.UI.Blazor.Pages
@inherits ComputedStateComponent<ChatFooter.Model>
@{
    var m = State.LatestNonErrorValue;
}

<div class="flex-y w-full bg-05 md:bg-01" oncontextmenu="return false;">
    @if (m == Model.None) {
        // render skeletons until State is computed
        <div class="flex-none flex-x justify-items-stretch items-stretch w-full p-0 md:py-2 md:px-3 md:mx-0.5 gap-x-2.5">
            <div class="-flex-y w-full overflow-x-hidden">
                <div class="flex-x gap-x-1.5 px-2 md:px-0 my-1 md:my-0">
                    <div class="post-panel flex-x justify-between outline-none w-full border-bg-01">
                    </div>
                </div>
                <div class="mobile-control-panel flex-x gap-x-6">
                    <div class="mobile-language-button mobile-button flex">
                        <div class="chat-language-toggle shadow-mobile-button shadow-shadow-main btn btn-round">
                            <div class=" btn-content" tabindex="-1">
                                <div class="btn-content-inner">
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="recorder-button">
                        <div class="record-off recorder-wrapper mobile-button">
                            <div class="record-off-btn btn btn-round">
                                <div class=" btn-content" tabindex="-1">
                                    <div class="btn-content-inner">
                                    </div>
                                </div>
                            </div>

                            <div class="record-on-btn btn btn-round">
                                <div class=" btn-content" tabindex="-1">
                                    <div class="btn-content-inner">
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="mobile-playback-toggle">
                        <div class="listen-off playback-wrapper mobile-button">
                            <div class="off btn btn-round">
                                <div class=" btn-content" tabindex="-1">
                                    <div class="btn-content-inner">
                                    </div>
                                </div>
                            </div>
                            <div class="loud-btn btn btn-round">
                                <div class=" btn-content" tabindex="-1">
                                    <div class="btn-content-inner">
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="recorder-panel">
                <div class="playback-toggle desktop-button">
                    <div class="play off btn btn-round">
                        <div class=" btn-content" tabindex="-1">
                        </div>
                    </div>
                </div>
                <div class="recorder-button desktop-button flex">
                    <div class="record-off recorder-wrapper desktop-button">
                        <div class="record-off-btn btn btn-round">
                            <div class=" btn-content" tabindex="-1">
                                <div class="btn-content-inner">
                                </div>
                            </div>
                        </div>
                        <div class="record-on-btn btn btn-round">
                            <div class=" btn-content" tabindex="-1">
                                <div class="btn-content-inner">
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="language-button desktop-button flex">
                    <div class="chat-language-toggle btn btn-round">
                        <div class=" btn-content" tabindex="-1">
                            <div class="btn-content-inner">
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    } else {
        @if (m.CanPost) {
            <ChatMessageEditor/>
        } else if (m.CanJoin) {
            <div class="chat-footer">
                @if (m.IsAuthenticated) {
                    <div>
                        <span class="inline-flex">To post or talk,</span>
                        <Button Click="@OnJoin">Join this chat</Button>
                    </div>
                } else {
                    <div class="signin-footer">
                        <div class="inline-flex">
                            <SignInMenu ButtonClass="w-full"/>
                        </div>
                        <span class="inline-flex mx-2 items-center">or</span>
                        <Button Click="@OnJoin" Class="inline-flex btn-outline">Join anonymously</Button>
                    </div>
                }
            </div>
        } else {
            <ReadOnlyChatFooter/>
        }
    }
</div>

@code {
    [Inject] private Session Session { get; init; } = null!;
    [Inject] private IAccounts Accounts { get; init; } = null!;
    [Inject] private IChats Chats { get; init; } = null!;
    [Inject] private NavigationManager Nav { get; init; } = null!;
    [Inject] private UICommander UICommander { get; init; } = null!;

    [CascadingParameter] public Chat Chat { get; set; } = null!;

    protected override ComputedState<Model>.Options GetStateOptions() {
        return new() {
            InitialValue = Model.None,
            UpdateDelayer = FixedDelayer.Instant
        };
    }

    protected override async Task<Model> ComputeState(CancellationToken cancellationToken) {
        string chatId = Chat.Id;
        var (account, rules, canJoin) = await Accounts.Get(Session, cancellationToken)
            .Join(
                Chats.GetRules(Session, chatId, cancellationToken),
                Chats.CanJoin(Session, chatId, cancellationToken)
            ).ConfigureAwait(false);
        // Default scheduler is used from here
        var canPost = rules.CanWrite();
        return new () {
            CanPost = canPost,
            CanJoin = !canPost && canJoin,
            IsAuthenticated = account != null,
        };
    }

    private async Task OnJoin() {
        string chatId = Chat.Id;
        var command = new IChats.JoinChatCommand(Session, chatId);
        await UICommander.Run(command, default);
    }

    public sealed class Model {
        public static Model None { get; } = new();

        public bool CanPost { get; init; }
        public bool CanJoin { get; init; }
        public bool HasFooter => CanPost || CanJoin;
        public bool IsAuthenticated { get; init; }
    }
}
