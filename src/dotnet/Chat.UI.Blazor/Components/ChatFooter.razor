@using ActualChat.Chat.UI.Blazor.Pages
@inherits FusionComponentBase
@{
    var m = Model;
    var chat = Chat;
}

<div class="writable-chat-footer">
    @if (ReferenceEquals(chat, SpecialChat.Loading)) {
        // Render skeletons until State is computed
        <chat-view-footer-skeleton/>
    } else if (chat.Id.IsNone) {
        <ReadOnlyChatFooter FooterText="@string.Empty" />
    } else {
        @if (m.CanPost) {
            <ChatMessageEditor @key="@chat" Chat="@chat" />
        } else if (m.CanJoin) {
            <div class="chat-footer">
                @if (!m.IsGuest) {
                    <div>
                        <span class="inline-flex">To post or talk,</span>
                        <Button Click="@OnJoin" Class="btn-sm btn-primary">Join this chat</Button>
                    </div>
                } else {
                    <div class="signin-footer">
                        <div class="inline-flex">
                            <SignInMenu ButtonClass="w-full"/>
                        </div>
                        @if (!m.OtherUserId.IsNone) {
                            <span class="inline-flex mx-2 mr-1 items-center">to chat with</span>
                            <AccountName UserSid="@m.OtherUserId.Id"/>
                        } else if (m.CanJoinWithGuestAccount) {
                            <span class="inline-flex mx-2 items-center">or</span>
                            <Button Click="@OnJoin" Class="inline-flex btn-outline">Join anonymously</Button>
                        } else {
                            <span class="inline-flex ml-2 items-center">to join this chat</span>
                        }
                    </div>
                }
            </div>
        } else {
            <ReadOnlyChatFooter/>
        }
    }
</div>

@code {
    [Inject] private Session Session { get; init; } = null!;
    [Inject] private IAccounts Accounts { get; init; } = null!;
    [Inject] private IChats Chats { get; init; } = null!;
    [Inject] private ChatUI ChatUI { get; init; } = null!;
    [Inject] private ModalUI ModalUI { get; init; } = null!;
    [Inject] private UICommander UICommander { get; init; } = null!;
    [Inject] private NavigationManager Nav { get; init; } = null!;

    private ChatPage.FooterModel Model => ChatPageModel.Footer;
    private Chat Chat => ChatPageModel.Chat;

    // use explicit namespace - otherwise it doesn't compile on 7.0.302 SDK
    // ReSharper disable once RedundantNameQualifier
    [Parameter, EditorRequired] public ActualChat.Chat.UI.Blazor.Pages.ChatPage.Model ChatPageModel { get; set; } = null!;

    private async Task OnJoin() {
        if (!Model.HasMultipleAvatars) {
            var command = new IAuthors.JoinCommand(Session, Chat.Id);
            await UICommander.Run(command);
            return;
        }

        await ModalUI.Show(new AvatarSelectModal.Model(ChatId.None, Model.CanJoinAnonymously, JoinWithAvatar));

        async Task JoinWithAvatar(AvatarFull avatar) {
            var command = new IAuthors.JoinCommand(Session, Chat.Id, avatar.Id, JoinAnonymously: avatar.IsAnonymous);
            await UICommander.Run(command);
        }
    }

}
