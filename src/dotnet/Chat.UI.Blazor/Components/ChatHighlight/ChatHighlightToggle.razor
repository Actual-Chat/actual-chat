@namespace ActualChat.Chat.UI.Blazor.Components
@using ActualChat.Chat.UI.Blazor.Module
@implements IChatHighlightBackend
@implements IAsyncDisposable

@{
    var cls = "";
}
<div @ref="Ref" class="chat-playback-toggles flex-x rounded-md bg-accent mr-1">
    <div class="chat-header-button">
        <ButtonSquare Click="@Click" Class="@cls" Title="Highlight Text">
            <svg class="fill-current w-8 h-8" xmlns="http://www.w3.org/2000/svg" viewBox="-4 -4 32 32">
                <path d="M9.963 8.261c-.566-.585-.536-1.503.047-2.07l5.948-5.768c.291-.281.664-.423 1.035-.423.376 0 .75.146 1.035.44l-8.065 7.821zm-9.778 14.696c-.123.118-.185.277-.185.436 0 .333.271.607.607.607.152 0 .305-.057.423-.171l.999-.972-.845-.872-.999.972zm8.44-11.234l-3.419 3.314c-1.837 1.781-2.774 3.507-3.64 5.916l1.509 1.559c2.434-.79 4.187-1.673 6.024-3.455l3.418-3.315-3.892-4.019zm9.97-10.212l-8.806 8.54 4.436 4.579 8.806-8.538c.645-.626.969-1.458.969-2.291 0-2.784-3.373-4.261-5.405-2.29z"/>
            </svg>
        </ButtonSquare>
    </div>
</div>

@code {
    [Inject] private ChatUI ChatUI { get; init; } = null!;
    [Inject] private IJSRuntime JS { get; init; } = null!;
    private DotNetObjectReference<IChatHighlightBackend> BlazorRef { get; set; } = null!;
    private IJSObjectReference JSRef { get; set; } = null!;
    private ElementReference Ref { get; set; }

    private void Click() {

    }

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (firstRender) {
            BlazorRef = DotNetObjectReference.Create<IChatHighlightBackend>(this);
            JSRef = await JS.InvokeAsync<IJSObjectReference>(
                $"{ChatBlazorUIModule.ImportName}.ChatHighlight.create",
                Ref, BlazorRef
                ).ConfigureAwait(true);
        }
    }

    public async ValueTask DisposeAsync()
    {
        await JSRef.DisposeSilentlyAsync("dispose").ConfigureAwait(true);
        JSRef = null!;
        BlazorRef.DisposeSilently();
        BlazorRef = null!;
    }
}
