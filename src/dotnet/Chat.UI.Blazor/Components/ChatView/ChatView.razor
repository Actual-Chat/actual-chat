@namespace ActualChat.Chat.UI.Blazor.Components
@using ActualChat.Comparison
@using ActualChat.Chat.UI.Blazor.Events

<OnUIEvent TEvent="@NavigateToChatEntryEvent" Handler="@OnNavigateToChatEntry" />
<button @onclick="Start">Start</button>
<VirtualList
    @key="@Chat.Id.Value"
    Class="chat-view"
    DataSource="@this"
    Identity="@Chat.Id"
    KeyComparer="@LongAsStringKeyComparer.Default"
    ItemVisibilityChanged="@OnItemVisibilityChanged"
    IsEmptyTest="IsEmpty" >
    <Item>
        <ChatMessage Context="_messageContext" Message="@context" />
    </Item>
    <Empty>
        <EmptyChatContent Chat="@Chat"/>
    </Empty>
    <Skeleton>
        <chat-message-skeleton />
    </Skeleton>
</VirtualList>

<RenderIntoStack Name="SubFooter" Order="-1000_000" Key="NavigateToEndSubFooter">
    <NavigateToUnreadOrEnd
        ChatSid="@Chat.Id"
        ChatView="@this" />
</RenderIntoStack>

@code {
    [Inject] private UICommander UICommander { get; init; } = null!;

    private async Task Start() {
        var num = 0;
        while (true) {
            num++;
            var s = string.Join(Environment.NewLine, Enumerable.Range(0, 10).Select(_ => num));
            var command = new Chats_UpsertTextEntry(Session, Chat.Id, null, s);
            var entry = await UICommander.Call(command, CancellationToken.None).ConfigureAwait(false);
            await Task.Delay(TimeSpan.FromSeconds(3), DisposeToken);
        }
    }
}
