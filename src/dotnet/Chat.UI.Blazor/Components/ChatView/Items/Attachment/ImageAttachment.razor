@using System.Numerics
@namespace ActualChat.Chat.UI.Blazor.Components
@{
    var attachment = Attachment;
    var url = UrlMapper.ContentUrl(Attachment.Media.ContentId);
    var previewUrl = UrlMapper.ImagePreviewUrl(url, MaxWidth * ActualResolutionMultiplier, MaxHeight * ActualResolutionMultiplier);
    var wrapperCls = "";
    var imageCls = "";
    if (attachment.Media.Height > 0 && attachment.Media.Width > 0) {
        wrapperCls = "h-28 md:h-48";
        imageCls = "h-28 md:h-48 object-cover";
        if ((!ScreenSize.IsNarrow() && attachment.Media.Width >= attachment.Media.Height * 2)
            || (ScreenSize.IsNarrow() && (float)attachment.Media.Width >= (float)attachment.Media.Height * 1.5)) {
            wrapperCls += " w-[30%]";
        }
    }
}

<div class="image-attachment @wrapperCls">
    <a class="cursor-pointer"
       href="@url"
       role="button"
       @onclick="@(_ => ImageViewerUI.Show(url, null, previewUrl, attachment.Media.Width, attachment.Media.Height, ChatEntry))"
       @onclick:preventDefault="true">
        <img class="inline skeleton @imageCls" src="@previewUrl" alt="image" onload="this.classList.remove('skeleton')" />
    </a>
</div>

@code {
    private const int MaxWidth = 400; // In pixels
    private const int MaxHeight = 300; // In pixels
    private static readonly Vector2 MaxSize = new(MaxWidth, MaxHeight);
    private const int ActualResolutionMultiplier = 2;

    [Inject] private ImageViewerUI ImageViewerUI { get; init; } = null!;
    [Inject] private UrlMapper UrlMapper { get; init; } = null!;
    [Inject] private NavigationManager Nav { get; init; } = null!;

    [CascadingParameter] public ScreenSize ScreenSize { get; set; }

    [Parameter, EditorRequired]
    public TextEntryAttachment Attachment { get; set; } = null!;
    [Parameter] public ChatEntry? ChatEntry { get; set; }
}
