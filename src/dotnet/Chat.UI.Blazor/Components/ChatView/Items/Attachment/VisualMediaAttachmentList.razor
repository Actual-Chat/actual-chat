@namespace ActualChat.Chat.UI.Blazor.Components

<div class="message-image-attachments">
    @foreach (var item in GetOptimizedGallery()) {
        <VisualMediaAttachmentLine
            ImageList="@item.ImageList"
            ChatEntry="@ChatEntry"
            IsFull="@item.IsFull"
            ImageSize="@item.ImageSize"/>
    }
</div>

@code {
    [Parameter, EditorRequired]
    public List<TextEntryAttachment> ImageList { get; set; } = null!;
    [Parameter] public ChatEntry? ChatEntry { get; set; }

    private List<GalleryRow> GetOptimizedGallery() {
        var orderedList = (from image in ImageList.OrderByDescending(item => (float) item.Media.Width / item.Media.Height)
            let ratio = (float)image.Media.Width / image.Media.Height
            let size = ratio switch {
                <= 0.75f => ImageSize.Small,
                <= 1.25f => ImageSize.Medium,
                <= 2 => ImageSize.Large,
                _ => ImageSize.ExtraLarge,
                }
            select new ImageItem(image, size)).ToList();

        var gallery = new List<GalleryRow>();
        List<ImageItem>? rowItems = null;
        var lastItem = orderedList.Last();
        var rowCapacity = 1;
        var rowSize = ImageSize.ExtraLarge;

        foreach (var item in orderedList) {
            GalleryRow? row;
            if (rowItems != null && rowSize != item.ImageSize) {
                row = new GalleryRow(rowSize, rowItems.Count == rowCapacity, rowItems);
                gallery.Add(row);
                rowItems = null;
            }
            rowItems ??= new List<ImageItem>();

            rowItems.Add(item);
            rowSize = item.ImageSize;
            rowCapacity = rowSize switch {
                ImageSize.ExtraLarge => 1,
                ImageSize.Large => 2,
                ImageSize.Medium => 3,
                _ => 4,
                };
            if (rowItems.Count != rowCapacity && !ReferenceEquals(lastItem, item))
                continue;
            row = new GalleryRow(rowSize, rowItems.Count == rowCapacity, rowItems);
            gallery.Add(row);
            rowItems = null;
        }

        var optimizedGallery = gallery.Where(line => line.IsFull || line.ImageSize == ImageSize.Large).ToList();
        var mixedRows = gallery
            .Where(row => row is { IsFull: false, ImageList: not null, ImageSize: not ImageSize.Large })
            .SelectMany(row => row.ImageList)
            .Chunk(3)
            .Select(ch => new GalleryRow(ImageSize.Mixed, true, ch.ToList()))
            .ToList();
        optimizedGallery.AddRange(mixedRows);
        return optimizedGallery;
    }

    public record ImageItem {
        public TextEntryAttachment Attachment { get; set; } = null!;
        public ImageSize ImageSize { get; set; }

        public ImageItem(TextEntryAttachment attachment, ImageSize imageSize) {
            Attachment = attachment;
            ImageSize = imageSize;
        }
    }

    public record GalleryRow(ImageSize ImageSize, bool IsFull, List<ImageItem> ImageList);
}
