@using System.Numerics
@namespace ActualChat.Chat.UI.Blazor.Components
@{
    var attachment = Attachment;
    var url = UrlMapper.ContentUrl(Attachment.Media.ContentId);
    var previewUrl = !attachment.IsVideo() ? UrlMapper.ImagePreviewUrl(url, MaxWidth * ActualResolutionMultiplier, MaxHeight * ActualResolutionMultiplier) : null;
    var wrapperCls = "h-28 md:h-48";
    var imageCls = "h-28 md:h-48 object-cover";
    if ((!ScreenSize.IsNarrow() && attachment.Media.Width >= attachment.Media.Height * 2)
        || (ScreenSize.IsNarrow() && (float)attachment.Media.Width >= (float)attachment.Media.Height * 1.5)) {
        wrapperCls += " w-[30%]";
    }
}

<div class="image-attachment @wrapperCls">
    <a class="cursor-pointer"
       href="@url"
       role="button"
       @onclick="@(_ => VisualMediaViewerUI.Show(url, null, previewUrl, attachment.Media.Width, attachment.Media.Height, ChatEntry, attachment.IsVideo()))"
       @onclick:preventDefault="true">
        @if (attachment.IsVideo()) {
            <video class="@imageCls" preload="auto" autoplay playsinline oncanplay="this.muted = true; this.play()" loop>
                <source src="@url" />
            </video>
        } else {
            <img class="inline skeleton @imageCls" src="@previewUrl" alt="image" onload="this.classList.remove('skeleton')"/>
        }
    </a>
</div>

@code {
    private const int MaxWidth = 400; // In pixels
    private const int MaxHeight = 300; // In pixels
    private static readonly Vector2 MaxSize = new(MaxWidth, MaxHeight);
    private const int ActualResolutionMultiplier = 2;

    [Inject] private VisualMediaViewerUI VisualMediaViewerUI { get; init; } = null!;
    [Inject] private UrlMapper UrlMapper { get; init; } = null!;
    [Inject] private NavigationManager Nav { get; init; } = null!;

    [CascadingParameter] public ScreenSize ScreenSize { get; set; }

    [Parameter, EditorRequired]
    public TextEntryAttachment Attachment { get; set; } = null!;
    [Parameter] public ChatEntry? ChatEntry { get; set; }
}
