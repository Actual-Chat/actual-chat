@using MimeKit
@namespace ActualChat.Chat.UI.Blazor.Components
@{
    var fileSize = Attachment.Media.Length / (1024 * 1024d);
    var url = UrlMapper.ContentUrl(Attachment.Media.ContentId);
    MimeTypes.Register("application/x-zip-compressed", ".zip");
    MimeTypes.TryGetExtension(Attachment.Media.ContentType, out var extension);
    var fileExtension = extension != null ? extension.Replace(".", "") : "";
    var fileCls = _fileColors.GetValueOrDefault(fileExtension, "file-default");
}

<a class="file-attachment unfocusable" href="@url" target="_blank" role="button">
    <div class="c-icon @fileCls">
        @if (fileCls == _fileClasses[FileType.Multimedia]) {
            <i class="icon-play-fill text-2xl"></i>
        } else {
            <i class="icon-file text-xl"></i>
        }
    </div>
    <div class="c-info">
        <FileAttachmentTitle Title="@Attachment.Media.FileName"/>
        <div class="c-bottom">
            <div class="c-size">
                <span>@fileSize.ToString("N2") MB</span>
            </div>
            @if (_isLoaded) {
                <a class="c-open" href="@url" role="button">
                    <span>Open in Folder</span>
                </a>
            }
        </div>
    </div>
</a>

@code {
    private bool _isLoaded;

    [Inject] private UrlMapper UrlMapper { get; init; } = null!;

    [Parameter, EditorRequired]
    public TextEntryAttachment Attachment { get; set; } = null!;

    private static Dictionary<FileType, string> _fileClasses = new() {
        { FileType.Image, "file-image" },
        { FileType.Multimedia, "file-multimedia" },
        { FileType.Pdf, "file-pdf" },
        { FileType.Table, "file-table" },
        { FileType.Text, "file-text" },
        { FileType.Archive, "file-archive" },
    };

    private static Dictionary<string, string> _fileColors = new() {
        { "png", _fileClasses[FileType.Image] },
        { "jpg", _fileClasses[FileType.Image] },
        { "jpeg", _fileClasses[FileType.Image] },
        { "bmp", _fileClasses[FileType.Image] },
        { "gif", _fileClasses[FileType.Image] },
        { "webp", _fileClasses[FileType.Image] },
        { "mp3", _fileClasses[FileType.Multimedia] },
        { "3gp", _fileClasses[FileType.Multimedia] },
        { "avi", _fileClasses[FileType.Multimedia] },
        { "mov", _fileClasses[FileType.Multimedia] },
        { "m4v", _fileClasses[FileType.Multimedia] },
        { "m4a", _fileClasses[FileType.Multimedia] },
        { "mkv", _fileClasses[FileType.Multimedia] },
        { "ogm", _fileClasses[FileType.Multimedia] },
        { "ogg", _fileClasses[FileType.Multimedia] },
        { "oga", _fileClasses[FileType.Multimedia] },
        { "webm", _fileClasses[FileType.Multimedia] },
        { "wav", _fileClasses[FileType.Multimedia] },
        { "pdf", _fileClasses[FileType.Pdf] },
        { "ppt", _fileClasses[FileType.Pdf] },
        { "pptx", _fileClasses[FileType.Pdf] },
        { "xls", _fileClasses[FileType.Table] },
        { "xlsx", _fileClasses[FileType.Table] },
        { "css", _fileClasses[FileType.Table] },
        { "html", _fileClasses[FileType.Table] },
        { "torrent", _fileClasses[FileType.Table] },
        { "doc", _fileClasses[FileType.Text] },
        { "txt", _fileClasses[FileType.Text] },
        { "zip", _fileClasses[FileType.Archive] },
        { "rar", _fileClasses[FileType.Archive] },
    };
}
