@namespace ActualChat.Chat.UI.Blazor.Components
@inherits ComputedStateComponent<ChatMessageView.Model>
@using ActualChat.Hosting
@using Microsoft.AspNetCore.Components.Rendering
@using System.Diagnostics.CodeAnalysis
@using ActualLab.Diagnostics
@{
    var m = _rendered = State.Value;
    var message = _renderedMessage = Message;
    var markup = _renderedMarkup = _markup;
    var entry = message.Entry;
    // Console.Out.WriteLine("ChatMessageView.Render() = " + entry.LocalId + " : " + message.ReplacementKind);

    // Flags
    var isSystem = entry.IsSystemEntry;
    var isReply = m.RepliedEntry != null;
    var isForward = !entry.ForwardedAuthorId.IsNone;
    var isReplyToOwnMessage = m.RepliedEntry?.AuthorId == entry.AuthorId;
    var isBlockStart = message.Flags.HasFlag(ChatMessageFlags.BlockStart);
    var showAuthor = !isSystem && (isBlockStart || isReply);
    var showForwardHeader = !isSystem && isForward && message.Flags.HasFlag(ChatMessageFlags.ForwardStart);
    var showForwardAuthor = !isSystem && isForward && message.Flags.HasFlag(ChatMessageFlags.ForwardAuthorStart);

    // Classes
    var systemClass = isSystem ? "system-entry" : "";
    var forwardedClass = isForward ? "forwarded-message" : "";
    var forwardedBorderClass = isForward && !showAuthor ? "forwarded-border" : "";
    var marginClass = isBlockStart ? "mt-2" : "";
    var ownMessageClass = m.OwnAuthorId == message.Entry.AuthorId ? "own-message" : "";
    var highlightClass = m.IsHighlighted ? "chat-message-highlighted" : "";
    var repliedClass = m.IsReplyTarget ? "replied-message" : "";
    var selectedClass = m.IsSelected ? "replied-message" : "";
    var mentionClass = m.IsOwnAuthorMentioned && !isReplyToOwnMessage ? "mention" : "";
    var cls = $"{systemClass} {forwardedClass} {forwardedBorderClass} {ownMessageClass} {mentionClass} {marginClass} {highlightClass} {repliedClass} {selectedClass} message-wrapper";

    switch (message.ReplacementKind) {
    case ChatMessageReplacementKind.None:
        break;
    case ChatMessageReplacementKind.DateLine:
        <ChatMessageDateLine Date="@message.Date"/>
        return;
    case ChatMessageReplacementKind.NewMessagesLine:
        <Separator Title="New messages" TitleClass="new-separator-title"/>
        return;
    case ChatMessageReplacementKind.WelcomeBlock:
        <ChatWelcomeBlock ChatContext="@ChatContext" />
        return;
    default:
        throw new ArgumentOutOfRangeException();
    }
}

@if (isSystem) {
    <div class="@cls"
         data-hover-menu="@(MenuRef.New<MessageHoverMenu>(message.Entry.Id, bool.TrueString))"
         data-menu="@(MenuRef.New<MessageMenu>(message.Entry.Id, bool.TrueString, "", ""))"
         data-menu-placement="@(FloatingPosition.BottomStart.ToPositionString())">
        <div class="chat-message group">
            <div class="c-content">
                <div class="message-content">
                    <p class="chat-message-markup">
                        <CascadingValue Value="@entry" IsFixed="true">
                            <MarkupView Markup="@markup"/>
                        </CascadingValue>
                    </p>
                </div>
            </div>
                @if (entry.HasReactions) {
                    <MessageReactions Entry="@entry"/>
                }
        </div>
    </div>
    return;
}

<div class="@cls"
     data-chat-entry-id="@(message.Entry.Id)"
     data-hover-menu="@(MenuRef.New<MessageHoverMenu>(message.Entry.Id, bool.FalseString))"
     data-menu="@(MenuRef.New<MessageMenu>(message.Entry.Id, bool.FalseString, "", ""))"
     data-menu-placement="@(FloatingPosition.BottomStart.ToPositionString())">
    <div class="chat-message group">
        <div class="c-author-badge">
            @if (showAuthor) {
                <ChatMessageAuthorCircle
                    AuthorSid="@entry.AuthorId"
                    Click="@_onClickCallback"/>
            } else {
                var timestamp = TimeZoneConverter.ToLocalTime(entry.BeginsAt).ToShortTimeString();
                <div class="c-empty">
                    <span class="chat-message-timestamp-on-hover">@timestamp</span>
                </div>
            }
        </div>
        <div class="c-content">
            @if (showAuthor) {
                <div class="c-author-header">
                    <AuthorName AuthorSid="@entry.AuthorId" Class="chat-message-author-name"/>
                    <LiveTimeDeltaText Class="chat-message-timestamp min-w-fit" Moment="@entry.BeginsAt"/>
                    @* <div class="text-02 opacity-20 text-xxs">id=@entry.Id</div> *@
                </div>
            }
            @if (showForwardHeader) {
                <div class="forwarded-chat-header">
                    <i class="icon-share forwarded-chat-header-icon"></i>
                    <span class="forwarded-chat-header-title">Forwarded from </span>
                    @if (m.ForwardedChat != null) {
                        <span class="forwarded-chat-header-name message-link"
                              @onclick="() => OnForwardedMessageHeaderClick(entry.ForwardedChatEntryId.ChatId)">
                            @m.ForwardedChat.Title
                        </span>
                    } else if (m.ForwardedPeerAuthor != null) {
                        <span class="forwarded-chat-header-name message-link"
                              @onclick="() => OnForwardedAuthorClick(m.ForwardedPeerAuthor)">
                            @m.ForwardedPeerAuthor.Avatar.Name
                        </span>
                    } else {
                        <span class="forwarded-chat-header-name">
                            @(!entry.ForwardedChatTitle.IsNullOrEmpty()
                                ? entry.ForwardedChatTitle
                                : "Unknown chat")
                        </span>
                    }
                </div>
            }
            @if (isForward && showForwardAuthor) {
                <div class="forwarded-author-header">
                    @if (m.ForwardedAuthor != null) {
                        <span class="forwarded-author-header-name message-link"
                              @onclick="() => OnForwardedMessageAuthorClick(entry.ForwardedChatEntryId, m.ForwardedAuthor)">
                            @m.ForwardedAuthor.Avatar.Name
                        </span>
                    } else {
                        <span class="forwarded-author-header-name">
                            @(!entry.ForwardedAuthorName.IsNullOrEmpty()
                                ? entry.ForwardedAuthorName
                                : "Unknown author")
                        </span>
                    }
                    <LiveTimeDeltaText Class="chat-message-timestamp min-w-fit" Moment="@entry.ForwardedChatEntryBeginsAt"/>
                </div>
            }
            <div class="message-content">
                @if (isReply) {
                    <ChatMessageQuote Entry="@m.RepliedEntry" IsOwn="@isReplyToOwnMessage"/>
                }
                @if (entry.IsStreaming) {
                    <ChatMessageTranscript
                        Message="@message"
                        ShowEntryKind="@message.Flags.HasFlag(ChatMessageFlags.HasEntryKindSign)"/>
                } else {
                    <p class="chat-message-markup">
                        @if (message.Flags.HasFlag(ChatMessageFlags.HasEntryKindSign)) {
                            <ChatEntryKindView Kind="@(entry.HasAudioEntry ? ChatEntryKind.Audio : entry.Kind)"/>
                        }
                        <CascadingValue Value="@entry" IsFixed="true">
                            <MarkupView Markup="@_markup"/>
                        </CascadingValue>
                    </p>
                }
            </div>
            @if (entry.Attachments.Count > 0) {
                var (mediaList, fileList) = GetOrderedAttachmentList(entry);
                <div class="message-attachments">
                    <VisualMediaAttachmentList ImageList="@mediaList" ChatEntry="@entry"/>
                    <div class="message-file-attachments">
                        @foreach (var attachment in fileList) {
                            <FileAttachment Attachment="@attachment"/>
                        }
                    </div>
                </div>
            }
            @if (message.ShowLinkPreview) {
                <div class="message-link-preview">
                    <LinkPreviewView Entry="@entry" />
                </div>
            }
            @if (entry.HasReactions) {
                <MessageReactions Entry="@entry"/>
            }
        </div>
    </div>
</div>

@code {
    private Model? _rendered;
    private ChatMessage? _renderedMessage;
    private Markup? _renderedMarkup;
    private ValueTask<Markup> _markupTask;
    private Markup _markup = Markup.Empty;
    private ChatMessage? _lastMessage;
    private EventCallback<AuthorId> _onClickCallback;
    private ILogger? _log;

    // Shortcuts
    private ChatEntry Entry => Message.Entry;
    private ChatId ChatId => Message.Entry.ChatId;
    private Session Session => ChatContext.Hub.Session();
    private History History => ChatContext.Hub.History;
    private IAuthors Authors => ChatContext.Hub.Authors;
    private IChats Chats => ChatContext.Hub.Chats;
    private ChatUI ChatUI => ChatContext.Hub.ChatUI;
    private AuthorUI AuthorUI => ChatContext.Hub.AuthorUI;
    private ShareUI ShareUI => ChatContext.Hub.ShareUI;
    private ModalUI ModalUI => ChatContext.Hub.ModalUI;
    private TimeZoneConverter TimeZoneConverter => ChatContext.Hub.TimeZoneConverter;
    private IChatMarkupHub ChatMarkupHub => ChatContext.ChatMarkupHub;
    private ILogger Log => _log ??= ChatContext.Hub.LogFor(GetType());

    [Parameter, EditorRequired] public ChatContext ChatContext { get; set; } = null!;
    [Parameter, EditorRequired] public ChatMessage Message { get; set; } = null!;

    protected override void OnInitialized() {
        _onClickCallback = NoStateHasChanged.EventCallback<AuthorId>(OnAuthorBadgeClick);
        base.OnInitialized();
    }

    private void OnAuthorBadgeClick(AuthorId authorId)
        => _ = AuthorUI.Show(authorId);

    protected override async Task OnParametersSetAsync()
    {
        if (Message == _lastMessage)
            return;

        _lastMessage = Message;
        _markupTask = ChatMarkupHub.GetMarkup(Entry, MarkupConsumer.MessageView, default);
        _markup = await _markupTask;
        await base.OnParametersSetAsync(); // Triggers recompute
    }

    protected override bool ShouldRender()
        => !ReferenceEquals(_rendered, State.Value)
            || !ReferenceEquals(_renderedMessage, Message)
            || !ReferenceEquals(_renderedMarkup, _markup);

    protected override ComputedState<Model>.Options GetStateOptions() {
        var initialValue = Model.None;
        var ownAuthorComputed = Computed.GetExisting(() => Authors.GetOwn(Session, ChatId, default));
        var ownAuthor = ownAuthorComputed?.IsConsistent() == true &&  ownAuthorComputed.HasValue ? ownAuthorComputed.Value : null;
        var ownAuthorId = ownAuthor?.Id ?? AuthorId.None;
        var repliedEntry = Entry.RepliedEntryLocalId != null ? ChatEntry.Loading : null;
        if (!ownAuthorId.IsNone || repliedEntry != null)
            initialValue = new Model {
                OwnAuthorId = ownAuthorId,
                RepliedEntry = repliedEntry,
            };
        return new() {
            InitialValue = initialValue,
            Category = GetStateCategory(),
        };
    }

    protected override async Task<Model> ComputeState(CancellationToken cancellationToken) {
        var entry = Entry;
        var chatId = entry.ChatId;
        var ownAuthor = await Authors.GetOwn(Session, chatId, cancellationToken);
        var ownAuthorId = ownAuthor?.Id ?? AuthorId.None;

        var markup = await _markupTask;
        var repliedEntry = await GetRepliedEntry(cancellationToken);
        var hasAnyMentions = HasAnyMentions(markup);
        var isOwnAuthorMentioned = IsMentioned(markup, repliedEntry, ownAuthorId, hasAnyMentions);
        var relatedChatEntry = await ChatContext.Hub.ChatEditorUI.RelatedChatEntry.Use(cancellationToken);
        var isReplyTarget = relatedChatEntry is { Kind: RelatedEntryKind.Reply, Id: var repliedEntryId } && repliedEntryId == entry.Id;
        var isHighlighted = entry.Id == await ChatUI.HighlightedEntryId.Use(cancellationToken);
        var forwardedChat = !entry.ForwardedChatEntryId.IsNone
            ? await Chats.Get(Session, entry.ForwardedChatEntryId.ChatId, cancellationToken)
            : null;
        var forwardedAuthor = await GetForwardedAuthor(entry, ownAuthor, cancellationToken);
        var forwardedPeerAuthor = await GetForwardedPeerAuthor(entry, ownAuthor, cancellationToken);
        var selectedChatEntries = await ChatContext.Hub.SelectionUI.Selection.Use(cancellationToken);
        var result = new Model {
            OwnAuthorId = ownAuthorId,
            RepliedEntry = repliedEntry,
            IsHighlighted = isHighlighted,
            IsReplyTarget = isReplyTarget,
            IsSelected = selectedChatEntries.Contains(entry.Id),
            IsOwnAuthorMentioned = isOwnAuthorMentioned,
            ForwardedChat = forwardedChat,
            ForwardedAuthor = forwardedAuthor,
            ForwardedPeerAuthor = forwardedPeerAuthor,
        };
        return result.Equals(_rendered) ? _rendered! : result;
    }

    private async Task<ChatEntry?> GetRepliedEntry(CancellationToken cancellationToken) {
        if (Entry.RepliedEntryLocalId is not { } repliedEntryLocalId)
            return null;

        var repliedEntryId = new ChatEntryId(Message.Entry.ChatId, Message.Entry.Kind, repliedEntryLocalId, AssumeValid.Option);
        var repliedEntry = await Chats.GetEntry(Session, repliedEntryId, cancellationToken)
            ?? ChatEntry.Removed(repliedEntryId);

        return repliedEntry;
    }

    private void OnQuoteClick()
        => ChatUI.HighlightEntry(Message.Entry.Id, navigate: true);

    private void OnForwardedMessageHeaderClick(ChatId chatId)
        => _ = History.NavigateTo(Links.Chat(chatId));

    private void OnForwardedMessageAuthorClick(ChatEntryId entryId, Author forwardedAuthor)
        => _ = entryId.IsNone ? AuthorUI.Show(forwardedAuthor.Id) : History.NavigateTo(Links.Chat(entryId));

    private void OnForwardedAuthorClick(Author forwardedAuthor)
        => _ = AuthorUI.Show(forwardedAuthor.Id);

    private bool HasAnyMentions(Markup markup)
        => MarkupValidator.ContainsAnyMention.IsValid(markup);

    private bool IsMentioned(Markup markup,
        ChatEntry? repliedEntry,
        AuthorId authorId,
        bool hasAnyMentions)
    {
        if (authorId.IsNone)
            return false;

        if (repliedEntry?.AuthorId == authorId)
            return true;

        return hasAnyMentions && MarkupValidator.ContainsMention(new MentionId(authorId, AssumeValid.Option)).IsValid(markup);
    }

    private (List<TextEntryAttachment>, List<TextEntryAttachment>) GetOrderedAttachmentList(ChatEntry entry) {
        var mediaList = new List<TextEntryAttachment>();
        var fileList = new List<TextEntryAttachment>();
        foreach (var attachment in entry.Attachments) {
            if (attachment.IsVisualMedia())
                mediaList.Add(attachment);
            else
                fileList.Add(attachment);
        }
        return (mediaList, fileList);
    }

    private async Task<Author?> GetForwardedAuthor(ChatEntry entry, AuthorFull? ownAuthor, CancellationToken cancellationToken) {
        if (entry.ForwardedAuthorId.IsNone)
            return null;

        if (!entry.ForwardedChatEntryId.IsNone)
            return await Authors.Get(Session, entry.ForwardedChatEntryId.ChatId, entry.ForwardedAuthorId, cancellationToken);

        var isPeerChat = entry.ForwardedAuthorId.ChatId.IsPeerChat(out var peerChatId);
        if (!isPeerChat)
            return null;

        if (ownAuthor == null)
            return null;

        if (peerChatId.IndexOf(ownAuthor.UserId) != -1)
            return await Authors.Get(Session, entry.ForwardedAuthorId.ChatId, entry.ForwardedAuthorId, cancellationToken);

        var messageUserId = entry.ForwardedAuthorId.LocalId == 1 ? peerChatId.UserId1 : peerChatId.UserId2;
        var peerChatWithMessageUser = new PeerChatId(messageUserId, ownAuthor.UserId);
        var messageAuthorId = new AuthorId(peerChatWithMessageUser, peerChatWithMessageUser.UserId1 == messageUserId ? 1 : 2, AssumeValid.Option);
        var author = await Authors.Get(Session, peerChatWithMessageUser, messageAuthorId, cancellationToken);
        return author;
    }

    private async Task<Author?> GetForwardedPeerAuthor(ChatEntry entry, AuthorFull? ownAuthor, CancellationToken cancellationToken) {
        var isPeerChat = entry.ForwardedAuthorId.ChatId.IsPeerChat(out var peerChatId);
        if (!isPeerChat)
            return null;

        if (ownAuthor == null)
            return null;

        if (peerChatId.IndexOf(ownAuthor.UserId) != -1) {
            var anotherAuthorId = new AuthorId(peerChatId, peerChatId.UserId1 == ownAuthor.UserId ? 2 : 1, AssumeValid.Option);
            var anotherAuthor = await Authors.Get(Session, peerChatId, anotherAuthorId, cancellationToken);
            return anotherAuthor;
        }

        var entryAuthorFull = await Authors.GetFull(Session, entry.ChatId, entry.AuthorId, cancellationToken);
        if (entryAuthorFull == null)
            return null;

        var peerUserId = peerChatId.UserId1 == entryAuthorFull.UserId ? peerChatId.UserId2 : peerChatId.UserId1;
        var peerChatWithMessageUser = new PeerChatId(peerUserId, ownAuthor.UserId);
        var messageAuthorId = new AuthorId(peerChatWithMessageUser, peerChatWithMessageUser.UserId1 == peerUserId ? 1 : 2, AssumeValid.Option);
        var author = await Authors.Get(Session, peerChatWithMessageUser, messageAuthorId, cancellationToken);
        return author;
    }

    // Nested types

    public sealed record Model {
        public static readonly Model None = new();

        public AuthorId OwnAuthorId { get; init; }
        public bool IsHighlighted { get; init; }
        public bool IsReplyTarget { get; init; }
        public bool IsOwnAuthorMentioned { get; init; }
        public bool IsSelected { get; init; }
        public ChatEntry? RepliedEntry { get; init; }
        public Chat? ForwardedChat { get; init; }
        public Author? ForwardedAuthor { get; init; }
        public Author? ForwardedPeerAuthor { get; init; }
    }
}
