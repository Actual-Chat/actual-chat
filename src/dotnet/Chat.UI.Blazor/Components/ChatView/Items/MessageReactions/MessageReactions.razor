@namespace ActualChat.Chat.UI.Blazor.Components
@using Cysharp.Text
@inherits ComputedStateComponent<MessageReactions.Model>
@{
    var m = State.Value;
}
@if (!_areReactionsEnabled || !m.HasReactions) {
    return;
}
<ul class="message-reactions @Class">
    @foreach (var reaction in m.Reactions) {
        var ownReactionClass = m.OwnReaction?.Emoji == reaction.Emoji ? "message-reactions-reaction-own" : "";
        <li class="message-reactions-reaction @ownReactionClass" @onclick="_ => ToggleReaction(reaction.Emoji)"
            data-menu="@(MenuRef.New<ReactionAuthorsMenu>(ChatEntry.Id, reaction.Emoji))"
            data-menu-trigger="@MenuTriggers.RightClick.Format()">
            <EmojiIcon Code="@reaction.Emoji" class="w-4 h-4"/>
            <span class="message-reactions-reaction-count">@reaction.Count</span>
        </li>
    }

    <li class="message-reactions-add hover:bg-reaction text-icons-03"
        data-menu="@(MenuRef.New<ReactionSelectMenu>(ChatEntry.Id))"
        data-menu-trigger="@MenuTriggers.LeftClick.Format()"
        data-menu-position="@(FloatingPosition.Right.ToPositionString())">
        <AddReactionIcon/>
    </li>
</ul>

@code {
    private bool _areReactionsEnabled;

    [Inject] private IReactions Reactions { get; init; } = null!;
    [Inject] private Session Session { get; init; } = null!;
    [Inject] private Features Features { get; init; } = null!;
    [Inject] private UICommander UICommander { get; init; } = null!;
    [Inject] private IAuthors Authors { get; init; } = null!;
    [Parameter, EditorRequired] public ChatEntry ChatEntry { get; set; } = null!;
    [Parameter] public string Class { get; set; } = "";

    protected override async Task OnInitializedAsync()
        => _areReactionsEnabled = await Features.Get<UIFeatures.EnableMessageReactions, bool>(CancellationToken.None);

    protected override ComputedState<Model>.Options GetStateOptions()
        => new() { InitialValue = new Model(ChatEntry.HasReactions, ImmutableArray<ReactionSummary>.Empty), };

    protected override async Task<Model> ComputeState(CancellationToken cancellationToken) {
        var summaries = await Reactions.ListSummaries(Session, ChatEntry.Id, cancellationToken);
        if (summaries.Length == 0)
            return new Model(false, summaries);
        var ownReaction = await Reactions.Get(Session, ChatEntry.Id, cancellationToken);
        return new Model(true, summaries, ownReaction);
    }

    private Task ToggleReaction(string emoji) {
        return UICommander.Run(new IReactions.ReactCommand(Session, new Reaction {
            EntryId = ChatEntry.Id,
            Emoji = emoji,
        }));
    }

    public record Model(bool HasReactions, ImmutableArray<ReactionSummary> Reactions, Reaction? OwnReaction = null);
}
