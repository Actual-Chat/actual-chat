@namespace ActualChat.Chat.UI.Blazor.Components
@inherits ComputedStateComponent<QuotedMessage.Model?>
@{
    var model = State.LatestNonErrorValue;
    if (model == null)
        return;

    var message = model.Message;
    var entry = message.Entry;
    var authorNameCls = Message.Entry.AuthorId == model.OwnAuthor?.Id ? "text-06 " : "text-02 ";
    authorNameCls += "font-bold text-base";
}

@if (message.Entry.IsRemoved) {
    <div class="quoted-message quoted-message-removed">
        <LeftLine Class="h-5"/>
        The message was deleted.
    </div>
} else {
    <div class="quoted-message" @onclick="OnQuoteClick">
        <LeftLine Class="h-10"/>
        <div class="flex-y w-full px-2 opacity-90">
            <div class="grid pl-0.5">
                <AuthorName AuthorSid="@entry.AuthorId" Class="@authorNameCls"/>
            </div>
            <div class="flex-x w-full pl-0.5 items-center pointer-events-none overflow-hidden">
                <div class="flex-x w-full overflow-hidden">
                    <div class="truncate font-medium pointer-cursor text-base text-03">@(model.Quote)</div>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private ChatMarkupHub _chatMarkupHub = null!;
    private string _quoteText = "";

    [Inject] private ChatUI ChatUI { get; init; } = null!;
    [Inject] private Session Session { get; init; } = null!;
    [Inject] private IAuthors Authors { get; init; } = null!;
    [Inject] private IChats Chats { get; init; } = null!;
    [Inject] private KeyedFactory<ChatMarkupHub, ChatId> ChatMarkupHubFactory { get; init; } = null!;
    [Inject] private TimeZoneConverter TimeZoneConverter { get; init; } = null!;
    [Inject] private UIEventHub UIEventHub { get; init; } = null!;
    [Inject] private ICommander Commander { get; init; } = null!;
    [Inject] private IJSRuntime JS { get; init; } = null!;

    [Parameter, EditorRequired] public ChatMessageModel Message { get; set; } = null!;

    // Shortcuts
    private ChatId ChatId => Message.Entry.ChatId;

    protected override void OnParametersSet() {
        var chatId = ChatId;
        if (_chatMarkupHub == null! || _chatMarkupHub.ChatId != chatId)
            _chatMarkupHub = ChatMarkupHubFactory[chatId];
    }

    protected override async Task<Model?> ComputeState(CancellationToken cancellationToken) {
        var chatEntry = Message.Entry;
        var hasAttachments = chatEntry.Attachments.Length > 0;
        var markup = await _chatMarkupHub.ParseAndNameMentions(chatEntry.Content, cancellationToken);
        var text = MarkupFormatter.ReadableUnstyled.Format(markup);
        _quoteText = string.IsNullOrWhiteSpace(text) && hasAttachments ? "Click to see attachment" : text;
        var ownAuthor = await Authors.GetOwn(Session, chatEntry.ChatId, cancellationToken);
        return new (Message, _quoteText, ownAuthor);
    }

    private void OnAuthorClick()
        => ChatUI.ShowAuthorModal(Message.Entry.AuthorId);

    private async Task OnQuoteClick() {
        if (Message.IsQuote) {
            await UIEventHub.Publish(new NavigateToChatEntryEvent(Message.Entry.Id));
            ChatUI.HighlightedChatEntryId.Value = Message.Entry.LocalId;
        }
    }

    public record Model(
        ChatMessageModel Message,
        string Quote,
        Author? OwnAuthor);
}
