@namespace ActualChat.Chat.UI.Blazor.Components
@inherits ComputedStateComponent<QuotedMessage.Model?>
@{
    var model = State.LatestNonErrorValue;
    if (model == null)
        return;

    var message = model.Message;
    var entry = message.Entry;
    var authorNameCls = Message.Entry.AuthorId == model.PrincipalId ? "text-06 " : "text-02 ";
    authorNameCls += "font-bold text-base min-w-fit";
}

<div class="quoted-message" @onclick="OnQuoteClick">
    <div class="block bg-primary left-line min-h-10"></div>
    <div class="flex-y w-full px-2 opacity-90">
        <div class="flex pl-0.5">
            <ChatAuthorName AuthorId="@entry.AuthorId" Class="@authorNameCls"/>
        </div>
        <div class="flex-x w-full pl-0.5 items-center pointer-events-none overflow-hidden">
            <div class="flex-x w-full overflow-hidden">
                <div class="truncate font-medium pointer-cursor text-base text-03">@model.Quote</div>
            </div>
        </div>
    </div>
</div>

@code {
    [Inject] private ChatUI ChatUI { get; init; } = null!;
    [Inject] private Session Session { get; init; } = null!;
    [Inject] private IChatAuthors ChatAuthor { get; init; } = null!;
    [Inject] private IChats Chats { get; init; } = null!;
    [Inject] private MarkupHub MarkupHub { get; init; } = null!;
    [Inject] private TimeZoneConverter TimeZoneConverter { get; init; } = null!;
    [Inject] private IGlobalEvents GlobalEvents { get; init; } = null!;
    [Inject] private ICommander Commander { get; init; } = null!;
    [Inject] private IJSRuntime JS { get; init; } = null!;

    [Parameter, EditorRequired, ParameterComparer(typeof(ByValueParameterComparer))]
    public ChatMessageModel Message { get; set; } = null!;

    private string _quoteText = "";

    private ChatEntryReader Reader => Chats.NewEntryReader(Session, Message.Entry.ChatId, ChatEntryType.Text);

    public override Task SetParametersAsync(ParameterView parameters)
        => this.HasChangedParameters(parameters) ? base.SetParametersAsync(parameters) : Task.CompletedTask;

    protected override void OnParametersSet()
        => MarkupHub.ChatId = Message.Entry.ChatId;

    protected override async Task OnInitializedAsync()
        => await TimeZoneConverter.WhenInitialized.ConfigureAwait(false);

    protected override async Task<Model?> ComputeState(CancellationToken cancellationToken) {
        var chatEntry = Message.Entry;
        var hasAttachments = chatEntry.HasAttachments;
        var markup = await MarkupHub.ParseAndNameMentions(chatEntry.Content, CancellationToken.None);
        var text = MarkupFormatter.ReadableUnstyled.Format(markup);
        _quoteText = string.IsNullOrWhiteSpace(text) && hasAttachments ? "Click to see attachment" : text;
        var principalId = await ChatAuthor.GetPrincipalId(Session, chatEntry.ChatId, cancellationToken).ConfigureAwait(false);
        return new (Message, _quoteText, principalId);
    }

    private void OnChatAuthorClick()
        => ChatUI.ShowChatAuthorModal(Message.Entry.AuthorId);

    private async Task OnQuoteClick() {
        if (Message.IsQuote) {
            await GlobalEvents.Publish(new NavigateToChatEntry(Message.Entry.Id)).ConfigureAwait(false);
            ChatUI.HighlightedChatEntryId.Value = Message.Entry.Id;
        }
    }

    public record Model(ChatMessageModel Message, string Quote, Symbol PrincipalId);

}
