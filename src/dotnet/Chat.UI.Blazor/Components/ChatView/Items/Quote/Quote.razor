@namespace ActualChat.Chat.UI.Blazor.Components
@using Cysharp.Text
@using ActualChat.Chat.UI.Blazor.Events
@inherits FusionComponentBase
@{
    var message = Message;
    var entry = message.Entry;
    var colorCls = Message.Entry.AuthorId == _ownAuthor?.Id ? "text-06 " : "text-primary ";
    var fontCls = "text-sm md:text-base leading-4 md:leading-6 ";
    var authorNameCls = colorCls + fontCls + "font-medium max-w-full md:max-w-64 pl-2";
}

<div class="chat-quote" @onclick="OnQuoteClick">
    @if (LinkType == ChatEntryLinkType.Reply) {
        <div class="flex-x w-full max-h-10 md:max-h-8 items-center">
            <i class="icon-reply text-xl @colorCls"></i>
            <div class="flex-y md:flex-x w-full overflow-hidden">
                <div class="flex-x">
                    <AuthorName AuthorSid="@entry.AuthorId" Class="@authorNameCls"/>
                    <span class="@colorCls @fontCls pr-1">:&nbsp</span>
                </div>
                <div class="flex-1 truncate px-2 md:px-0 text-xs md:text-base">@_text</div>
            </div>
            <RenderSlot Name="QuoteCloseButton"/>
        </div>
    } else {
        <div class="flex-x w-full max-h-8 items-center gap-x-4">
            <i class="icon-edit text-2xl text-icons-01"></i>
            <div class="flex-x w-full overflow-hidden">
                <div class="truncate font-medium">@_text</div>
            </div>
            <RenderSlot Name="QuoteCloseButton"/>
        </div>
    }
    <RenderIntoSlot Name="QuoteCloseButton">
        <ButtonRound Class="close-reply blackout" Click="OnCancelClick" tabindex="-1" aria-label="close">
            <i class="icon-close text-2xl"></i>
        </ButtonRound>
    </RenderIntoSlot>
</div>

@code {
    private MarkupHub _markupHub = null!;
    private string _text = null!;
    private AuthorFull? _ownAuthor = null;

    [Inject] private ChatUI ChatUI { get; init; } = null!;
    [Inject] private Session Session { get; init; } = null!;
    [Inject] private IAuthors Authors { get; init; } = null!;
    [Inject] private IChats Chats { get; init; } = null!;
    [Inject] private ServiceFactory<MarkupHub, ChatId> MarkupHubFactory { get; init; } = null!;
    [Inject] private TimeZoneConverter TimeZoneConverter { get; init; } = null!;
    [Inject] private UIEventHub UIEventHub { get; init; } = null!;

    [Parameter, EditorRequired] public ChatMessageModel Message { get; set; } = null!;
    [Parameter, EditorRequired] public ChatEntryLinkType LinkType { get; set; }

    // Shortcuts
    private ChatId ChatId => Message.Entry.ChatId;

    protected override async Task OnParametersSetAsync() {
        var chatId = ChatId;
        if (_markupHub == null! || _markupHub.ChatId != chatId)
            _markupHub = MarkupHubFactory[chatId];

        var markup = await _markupHub.ParseAndNameMentions(Message.Entry.Content, CancellationToken.None);
        _text = MarkupFormatter.ReadableUnstyled.Format(markup);
        _ownAuthor = await Authors.GetOwn(Session, chatId, CancellationToken.None);
    }

    private async Task OnQuoteClick() {
        if (Message.IsQuote) {
            await UIEventHub.Publish(new NavigateToChatEntryEvent(Message.Entry.Id));
            ChatUI.HighlightedChatEntryId.Value = Message.Entry.LocalId;
        }
    }

    private Task OnCancelClick()
        => UIEventHub.Publish<CancelChatMessageEditEvent>();
}
