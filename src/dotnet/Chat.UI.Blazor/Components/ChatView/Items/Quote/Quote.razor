@using Cysharp.Text
@namespace ActualChat.Chat.UI.Blazor.Components
@{
    var message = Message;
    var entry = message.Entry;
    var authorNameCls = Message.Entry.AuthorId == _principalId ? "text-06 " : "text-02 ";
    authorNameCls += "font-bold min-w-fit";
}

<div class="chat-quote cursor-pointer" @onclick="OnQuoteClick">
    @if (LinkType == ChatEntryLinkType.Reply) {
        <div class="flex-x w-full max-h-8 items-center gap-x-4">
            <i class="icon-reply text-2xl text-icons-01"></i>
            <div class="flex-x w-full overflow-hidden">
                <ChatAuthorName AuthorId="@entry.AuthorId" Class="@authorNameCls"/>
                <span>:&nbsp</span>
                <div class="truncate font-medium">@Text</div>
            </div>
            <RenderSlot Name="QuoteCloseButton"/>
        </div>
    } else {
        <div class="flex-x w-full max-h-8 items-center gap-x-4">
            <i class="icon-edit text-2xl text-icons-01"></i>
            <div class="flex-x w-full overflow-hidden">
                <div class="truncate font-medium">@Text</div>
            </div>
            <RenderSlot Name="QuoteCloseButton"/>
        </div>
    }
    <RenderIntoSlot Name="QuoteCloseButton">
        <ButtonRound Class="close-reply blackout" Click="OnCancelClick" tabindex="-1" aria-label="close">
            <i class="icon-close text-2xl"></i>
        </ButtonRound>
    </RenderIntoSlot>
</div>

@code {
    [Inject] private ChatUI ChatUI { get; init; } = null!;
    [Inject] private Session Session { get; init; } = null!;
    [Inject] private IChatAuthors ChatAuthor { get; init; } = null!;
    [Inject] private IChats Chats { get; init; } = null!;
    [Inject] private MarkupHub MarkupHub { get; init; } = null!;
    [Inject] private TimeZoneConverter TimeZoneConverter { get; init; } = null!;
    [Inject] private UIEventHub UIEventHub { get; init; } = null!;

    [Parameter, EditorRequired, ParameterComparer(typeof(ByValueParameterComparer))]
    public ChatMessageModel Message { get; set; } = null!;
    [Parameter, EditorRequired, ParameterComparer(typeof(ByValueParameterComparer))]
    public ChatEntryLinkType LinkType { get; set; }
    private string Text { get; set; } = null!;
    private string _principalId = "";

    private ChatEntryReader Reader => Chats.NewEntryReader(Session, Message.Entry.ChatId, ChatEntryType.Text);

    public override Task SetParametersAsync(ParameterView parameters)
        => this.HasChangedParameters(parameters) ? base.SetParametersAsync(parameters) : Task.CompletedTask;

    protected override async Task OnParametersSetAsync() {
        MarkupHub.ChatId = Message.Entry.ChatId;
        var markup = await MarkupHub.ParseAndNameMentions(Message.Entry.Content, CancellationToken.None);
        Text = MarkupFormatter.ReadableUnstyled.Format(markup);
        _principalId = await ChatAuthor.GetPrincipalId(Session, Message.Entry.ChatId, CancellationToken.None).ConfigureAwait(false);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        await base.OnAfterRenderAsync(firstRender).ConfigureAwait(false);
    }

    private async Task OnQuoteClick() {
        if (Message.IsQuote) {
            await UIEventHub.Publish(new NavigateToChatEntry(Message.Entry.Id)).ConfigureAwait(false);
            ChatUI.HighlightedChatEntryId.Value = Message.Entry.Id;
        }
    }

    private Task OnCancelClick() => UIEventHub.Publish<CancelMessageEdit>();

}
