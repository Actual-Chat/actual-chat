@namespace ActualChat.Chat.UI.Blazor.Components
@using ActualChat.Invite
@inherits ComputedStateComponent<ChatWelcomeMessage.Model?>
@{
    var m = State.ValueOrDefault;
    if (m == null)
        return;

    var chat = m.Chat;
}

<div class="message-wrapper">
    <div class="chat-welcome-message">
        <div class="c-header">
            <div class="c-chat-icon">
                <ChatIcon Chat="@chat"/>
            </div>
            <div class="c-chat-title">@chat.Title</div>
        </div>
        <div class="c-content">
            Welcome! Share the link to this chat to invite more people here:
        </div>
        @if (m.ShareModel is { } shareModel) {
            var link = shareModel.Request.Link.GetValueOrDefault();
            var linkKind = link.IsPrivateChatInvite()
                ? "Private join link"
                : "Public link";
            var copyText = shareModel.Request.GetShareTextAndLink(UrlMapper);
            <div class="c-link">
                <div class="c-link-url">
                    <i class="icon-link-2"></i>
                    <div>
                        <div class="link-url">@link.DisplayText</div>
                        <div class="link-hint">@linkKind</div>
                    </div>
                </div>
                <div class="c-link-buttons">
                    <CopyTrigger Tooltip="@copyText" CopyText="@copyText">
                        <Button Class="btn-modal">
                            <i class="hide-on-copied-hint icon-copy" aria-hidden="true"></i>
                            <i class="copied-hint fa fa-check" aria-hidden="true"></i>
                            Copy
                        </Button>
                    </CopyTrigger>
                    <Button Class="btn-modal" Click="@(() => OnShareClick(shareModel))">
                        <i class="icon-share"></i>
                        Share
                    </Button>
                </div>
            </div>
        }
    </div>

</div>

@code {
    // Shortcuts
    private Session Session => Context.Session;
    private History History => Context.History;
    private IAuthors Authors => Context.Authors;
    private IChats Chats => Context.Chats;
    private ChatUI ChatUI => Context.ChatUI;
    private ShareUI ShareUI => Context.ShareUI;
    private UrlMapper UrlMapper => Context.UrlMapper;

    [Inject] private IInvites Invites { get; init; } = null!;

    [Parameter, EditorRequired] public ChatContext Context { get; set; } = null!;

    protected override async Task<Model?> ComputeState(CancellationToken cancellationToken) {
        var chat = await Chats.Get(Session, Context.ChatId, cancellationToken);
        if (chat == null)
            return null;

        var shareModel = await ShareUI.GetModel(chat.Id, cancellationToken).ConfigureAwait(false);
        return new Model(chat, shareModel);
    }

    private void OnShareClick(ShareModalModel shareModel)
        => ShareUI.Share(shareModel);

    // Nested types

    public sealed record Model(
        Chat Chat,
        ShareModalModel? ShareModel = null);
}
