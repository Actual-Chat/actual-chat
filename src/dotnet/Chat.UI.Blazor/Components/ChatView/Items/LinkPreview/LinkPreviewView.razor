@namespace ActualChat.Chat.UI.Blazor.Components
@using ActualChat.Media
@using ILinkPreviews = ActualChat.Media.IMediaLinkPreviews
@using LinkPreview = ActualChat.Media.LinkPreview
@inherits FusionComponentBase
@{
    var m = Source;
    if (Mode == LinkPreviewMode.None || m == null || m.IsEmpty)
        return;

    var imageUrl = GetImageUrl(m.PreviewMedia);
    Uri.TryCreate(m.Url, UriKind.Absolute, out var uri);
    var compactCls = m.PreviewMedia != null ? "" : "compact";
}

@* Keep height fixed *@
<div class="link-preview @compactCls">
    @if (m.PreviewMedia != null) {
        <image-skeleton class="c-thumbnail" src="@imageUrl" />
    } else {
        <div class="c-icon">
            <i class="icon-link-2"></i>
        </div>
    }
    <div class="c-info">
        <div>
            <a href="@m.Url" target="_blank" class="c-title">@m.Title</a>
            @if (!m.Description.IsNullOrEmpty()) {
                <div class="c-description">@m.Description</div>
            }
        </div>
        @if (uri != null) {
            <a href="@(uri.Scheme)://@(uri.Authority)" target="_blank" class="c-domain">@uri.Host</a>
        }
    </div>
</div>

@code {
    [Inject] private ILinkPreviews MediaLinkPreviews { get; init; } = null!;
    [Inject] private UrlMapper UrlMapper { get; init; } = null!;
    [Inject] private ICommander Commander { get; init; } = null!;

    [Parameter, EditorRequired] public LinkPreview? Source { get; set; }
    [Parameter, EditorRequired] public LinkPreviewMode? Mode { get; set; }
    [CascadingParameter] public ScreenSize ScreenSize { get; set; }

    private string GetImageUrl(Media? preview)
    {
        if (preview?.ContentId.IsNullOrEmpty() != false)
            return "";

        var imageUrl = UrlMapper.ContentUrl(preview.ContentId);
        // TODO: use image metadata for better proportions selection
        var (width, height) = GetImageMaxSize();
        return UrlMapper.ImagePreviewUrl(imageUrl, width, height);
    }

    private (int? Width, int Height) GetImageMaxSize() {
        switch (Mode) {
            case LinkPreviewMode.Compact:
                var maxHeight = ScreenSize.IsNarrow() ? 80 : 120;
                return (maxHeight, maxHeight);
            case LinkPreviewMode.Default:
            case LinkPreviewMode.Full:
                maxHeight = ScreenSize.IsNarrow() ? 160  : 136;
                return (null, maxHeight);
            default:
                return (0, 0);
        }
    }
}
