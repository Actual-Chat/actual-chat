@namespace ActualChat.Chat.UI.Blazor.Components
@using ActualChat.Media
@using ILinkPreviews = ActualChat.Media.IMediaLinkPreviews
@using LinkPreview = ActualChat.Media.LinkPreview
@inherits ComputedStateComponent<LinkPreview>
@{
    var m = State.Value;
    if (m == LinkPreview.None)
        return;

    var imageUrl = GetImageUrl(m.PreviewMedia);
    Uri.TryCreate(m.Url, UriKind.Absolute, out var uri);
}

@* Keep height fixed *@
<div class="link-preview">
    @if (m.PreviewMedia != null) {
        <img class="c-thumbnail" src="@imageUrl" alt="link preview thumbnail"/>
    }
    <div class="c-info">
        <div>
            <a href="@m.Url" target="_blank" class="c-title">@m.Title</a>
            @if (!m.Description.IsNullOrEmpty()) {
                <div class="c-description">@m.Description</div>
            }
        </div>
        @if (uri != null) {
            <a href="@uri.Scheme://@uri.Authority" target="_blank" class="c-domain">@uri.Host</a>
        }
    </div>
</div>

@code {
    [Inject] private ILinkPreviews MediaLinkPreviews { get; init; } = null!;
    [Inject] private UrlMapper UrlMapper { get; init; } = null!;
    [Inject] private ICommander Commander { get; init; } = null!;

    [Parameter, EditorRequired] public ChatMessageModel Message { get; set; } = null!;
    [Parameter, EditorRequired] public Markup Markup { get; set; } = null!;
    [CascadingParameter] public ScreenSize ScreenSize { get; set; }

    protected override ComputedState<LinkPreview>.Options GetStateOptions() {
        return new() {
            InitialValue = Message.LinkPreview ?? LinkPreview.None,
            Category = GetStateCategory(),
        };
    }

    protected override async Task<LinkPreview> ComputeState(CancellationToken cancellationToken) {
        if (Message.LinkPreview?.Id.IsEmpty != false)
            return LinkPreview.None;

        if (Message.LinkPreview != null)
            return Message.LinkPreview;

        // in case link previews were cleaned up and not loaded yet
        var linkPreview = await MediaLinkPreviews.GetForEntry(Message.Entry.LinkPreviewId, Message.Entry.Id, cancellationToken);
        return linkPreview is null || linkPreview.IsEmpty ? LinkPreview.None : linkPreview;
    }

    private string GetImageUrl(Media? preview)
    {
        if (preview?.ContentId.IsNullOrEmpty() != false)
            return "";
        var imageUrl = UrlMapper.ContentUrl(preview.ContentId);
        // TODO: use image metadata for better proportions selection
        var (width, height) = GetImageMaxSize();
        return UrlMapper.ImagePreviewUrl(imageUrl, width, height, true);
    }

    private (int? Width, int Height) GetImageMaxSize() {
        switch (Message.Entry.LinkPreviewMode) {
            case LinkPreviewMode.Full:
                var maxHeight = ScreenSize.IsNarrow() ? 160  : 136;
                return (null, maxHeight);
            case LinkPreviewMode.Compact:
                maxHeight = ScreenSize.IsNarrow() ? 80 : 120;
                return (maxHeight, maxHeight);
            default:
                return (0, 0);
        }
    }
}
