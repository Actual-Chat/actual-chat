@namespace ActualChat.Chat.UI.Blazor.Components
@using ActualChat.Media
@inherits ComputedStateComponent<LinkPreview>
@{
    var m = State.Value;
    if (m == LinkPreview.None)
        return;

    var imageUrl = GetImageUrl(m.PreviewMedia);
    Uri.TryCreate(m.Url, UriKind.Absolute, out var uri);
}

@* Keep height fixed *@
<div class="link-preview">
    @if (!imageUrl.IsNullOrEmpty()) {
        <img class="c-thumbnail" src="@imageUrl" alt="link preview thumbnail"/>
    }
    <div class="c-info">
        <div>
            <a href="@m.Url" target="_blank" class="c-title">@m.Title</a>
            @if (!m.Description.IsNullOrEmpty()) {
                <div class="c-description">@m.Description</div>
            }
        </div>
        @if (uri != null) {
            <a href="@uri.Scheme://@uri.Authority" target="_blank" class="c-domain">@uri.Host</a>
        }
    </div>
</div>

@code {
    [Inject] private ILinkPreviews LinkPreviews { get; init; } = null!;
    [Inject] private UrlMapper UrlMapper { get; init; } = null!;

    [Parameter, EditorRequired] public ChatEntry Entry { get; set; } = null!;
    [Parameter, EditorRequired] public Markup Markup { get; set; } = null!;
    [CascadingParameter] public ScreenSize ScreenSize { get; set; }

    protected override ComputedState<LinkPreview>.Options GetStateOptions() {
        return new() {
            InitialValue = LinkPreview.Loading,
            Category = GetStateCategory(),
        };
    }

    protected override async Task<LinkPreview> ComputeState(CancellationToken cancellationToken) {
        if (Entry.LinkPreviewId.IsEmpty)
            return LinkPreview.None;

        var linkPreview = await LinkPreviews.Get(Entry.LinkPreviewId, cancellationToken);
        return linkPreview is null || linkPreview.IsEmpty ? LinkPreview.None : linkPreview;
    }

    private string GetImageUrl(Media? preview)
    {
        if (preview?.ContentId.IsNullOrEmpty() != false)
            return "";
        var imageUrl = UrlMapper.ContentUrl(preview.ContentId);
        // TODO: use image metadata for better proportions selection
        switch (Entry.LinkPreviewMode) {
            case LinkPreviewMode.Full:
                var maxHeight = ScreenSize.IsNarrow() ? 80 : 136;
                return UrlMapper.ImagePreviewUrl(imageUrl, null, maxHeight, true);
            case LinkPreviewMode.Compact:
                maxHeight = ScreenSize.IsNarrow() ? 80 : 120;
                return UrlMapper.ImagePreviewUrl(imageUrl, maxHeight, maxHeight, true);
            default:
                return "";
        }

    }
}
