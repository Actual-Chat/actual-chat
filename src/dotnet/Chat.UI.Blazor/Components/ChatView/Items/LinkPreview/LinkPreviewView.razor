@namespace ActualChat.Chat.UI.Blazor.Components
@using ActualChat.Media
@using ILinkPreviews = ActualChat.Media.IMediaLinkPreviews
@using LinkPreview = ActualChat.Media.LinkPreview
@inherits FusionComponentBase
@{
    var m = Entry.LinkPreview;
    if (Entry.LinkPreviewMode == LinkPreviewMode.None || m == null || m.IsEmpty)
        return;

    var imageUrl = GetImageUrl(m.PreviewMedia);
    Uri.TryCreate(m.Url, UriKind.Absolute, out var uri);
    var compactCls = m.PreviewMedia != null ? "" : "compact";
}

@* Keep height fixed *@
<div class="link-preview @compactCls">
    @if (m.PreviewMedia != null) {
        @if (m.IsYouTubeVideo) {
            <div
                class="c-thumbnail c-video"
                @onclick="@OnVideoClick">
                <image-skeleton
                    class="c-skeleton"
                    src="@imageUrl"/>
                <div class="c-overlay">
                    <i class="c-play icon-play-fill"></i>
                </div>
            </div>
        } else {
            <image-skeleton
                class="c-thumbnail"
                src="@imageUrl"/>
        }
    } else {
        <div class="c-icon">
            <i class="icon-link-2"></i>
        </div>
    }
    <div class="c-info">
        <div>
            <a href="@m.Url" target="_blank" class="c-title">@m.Title</a>
            @if (!m.Description.IsNullOrEmpty()) {
                <div class="c-description">@m.Description</div>
            }
        </div>
        @if (uri != null) {
            <a href="@(uri.Scheme)://@(uri.Authority)" target="_blank" class="c-domain">@uri.Host</a>
        }
    </div>

    <div class="link-buttons">
        @if (uri != null) {
            <CopyTrigger Tooltip="@Entry.Content" CopyText="@Entry.Content">
                <ButtonRound Class="btn-xs">
                    <i class="hide-on-copied-hint icon-copy" aria-hidden="true"></i>
                    <i class="copied-hint icon-checkmark-simple" aria-hidden="true"></i>
                </ButtonRound>
            </CopyTrigger>
        }
        <ButtonRound
            Tooltip="Forward"
            Class="btn-xs"
            Click="@(() => SelectionUI.Forward(Entry.Id))">
            <i class="icon-share"></i>
        </ButtonRound>
    </div>
</div>

@code {
    [Inject] private ChatUIHub Hub { get; init; } = null!;

    private VisualMediaViewerUI VisualMediaViewerUI => Hub.VisualMediaViewerUI;
    private ILinkPreviews MediaLinkPreviews => Hub.MediaLinkPreviews;
    private UrlMapper UrlMapper => Hub.UrlMapper();
    private ICommander Commander => Hub.Commander();
    private SelectionUI SelectionUI => Hub.SelectionUI;

    [Parameter, EditorRequired] public ChatEntry Entry { get; set; } = null!;
    [CascadingParameter] public ScreenSize ScreenSize { get; set; }

    private string GetImageUrl(Media? preview)
    {
        if (preview?.ContentId.IsNullOrEmpty() != false)
            return "";

        var imageUrl = UrlMapper.ContentUrl(preview.ContentId);
        // TODO: use image metadata for better proportions selection
        var (width, height) = GetImageMaxSize();
        return UrlMapper.ImagePreviewUrl(imageUrl, width, height);
    }

    private void OnVideoClick() {
        _ = VisualMediaViewerUI.Show("", Entry);
    }

    private (int? Width, int Height) GetImageMaxSize() {
        const int sizeMultiplier = 2; // reduced images look blurry
        switch (Entry.LinkPreviewMode) {
            case LinkPreviewMode.Compact:
                var maxHeight = ScreenSize.IsNarrow() ? 80 : 120;
                return (maxHeight * sizeMultiplier, maxHeight * sizeMultiplier);
            case LinkPreviewMode.Default:
            case LinkPreviewMode.Full:
                maxHeight = ScreenSize.IsNarrow() ? 160  : 136;
                return (null, maxHeight * sizeMultiplier);
            default:
                return (0, 0);
        }
    }
}
