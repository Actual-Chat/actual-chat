@namespace ActualChat.Chat.UI.Blazor.Components
@inherits FusionComponentBase
@implements IAsyncDisposable
@using ActualChat.Transcription

<p class="@Class chat-message-transcript">
    @if (ShowEntryKind) {
        <ChatEntryKindView Kind="@ChatEntryKind.Audio"/>
    }@*
    *@<span class="retained">@RetainedPart</span>@*
    *@<span class="changes">@ChangedPart</span>
</p>

@code {
    [Inject] private ChatHub ChatHub { get; init; } = null!;
    [Inject] private ITranscriptStreamer TranscriptStreamer { get; init; } = null!;
    [Inject] private ILogger<ChatMessageTranscript> Log { get; init; } = null!;
    private Dispatcher Dispatcher => ChatHub.Dispatcher;

    [Parameter, EditorRequired] public ChatMessage Message { get; set; } = null!;
    [Parameter] public string Class { get; set; } = "";
    [Parameter] public bool ShowEntryKind { get; set; }

    private CancellationTokenSource? RestartCts { get; set; }
    private Transcript Transcript { get; set; } = Transcript.New();
    private string RetainedPart { get; set; } = "";
    private string ChangedPart { get; set; } = "";

    public ValueTask DisposeAsync() {
        RestartCts?.CancelAndDisposeSilently();
        return default;
    }

    protected override void OnParametersSet() {
        RestartCts?.CancelAndDisposeSilently();
        RestartCts = new();
        var cancellationToken = RestartCts.Token;
        BackgroundTask.Run(
            () => ReadTranscript(Message, cancellationToken),
            Log, "ReadTranscript failed",
            cancellationToken);
    }

    private async Task ReadTranscript(ChatMessage message, CancellationToken cancellationToken) {
        try {
            var entry = message.Entry;
            var diffs = TranscriptStreamer.GetTranscriptDiffStream(entry.StreamId, cancellationToken);
            var transcripts = diffs.ToTranscripts();
            var lastText = "";
            await foreach (var transcript in transcripts.ConfigureAwait(false)) {
                var text = transcript.Text;
                var commonPrefixLength = lastText.GetCommonPrefixLength(text);
                await Dispatcher.InvokeAsync(() => {
                    Transcript = transcript;
                    RetainedPart = text[..commonPrefixLength];
                    ChangedPart = text[commonPrefixLength..];
                    StateHasChanged();
                }).ConfigureAwait(false); // Ok here
                lastText = text;
            }
        }
        catch (Exception e) {
            if (e.GetType().FullName != "Microsoft.AspNetCore.SignalR.HubException")
                throw;
            if (!e.Message.Contains(nameof(OperationCanceledException)))
                throw;
            // Not fully sure if it's the case, but it seems that sometimes SignalR
            // wraps OperationCanceledException into HubException, so here we suppress it.
        }
    }
}
