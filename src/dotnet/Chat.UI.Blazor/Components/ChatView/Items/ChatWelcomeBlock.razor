@namespace ActualChat.Chat.UI.Blazor.Components
@using ActualChat.Invite
@inherits ComputedStateComponent<ChatWelcomeBlock.Model?>
@{
    var m = State.ValueOrDefault;
    if (m == null)
        return;
}

<EmptyChatContent ChatContext="@ChatContext"/>
<div class="message-wrapper">
    <div class="chat-welcome-block">
        <div class="c-header">
            <div class="c-chat-icon">
                <ChatIcon Chat="@Chat"/>
            </div>
            <div class="c-chat-title">@Chat.Title</div>
        </div>
        <div class="c-content">
            @m.Message
        </div>
        @if (m.ShareModel is { } shareModel) {
            var link = shareModel.Request.Link.GetValueOrDefault();
            var linkKind = link.IsPrivateChatInvite()
                ? "Private join link"
                : "Public link";
            var copyText = shareModel.Request.GetShareTextAndLink(UrlMapper);
            <div class="chat-link">
                <div class="c-link-url">
                    <div class="c-round">
                        <i class="icon-link-2 text-xl"></i>
                    </div>
                    <div>
                        <div class="link-url">@link.DisplayText</div>
                        <div class="link-hint">@linkKind</div>
                    </div>
                </div>
                <div class="c-link-buttons">
                    <CopyTrigger Tooltip="@copyText" CopyText="@copyText">
                        <ButtonRound Class="md:btn-md">
                            <i class="hide-on-copied-hint icon-copy" aria-hidden="true"></i>
                            <i class="copied-hint fa fa-check" aria-hidden="true"></i>
                        </ButtonRound>
                    </CopyTrigger>
                    <ButtonRound
                        Class="md:btn-md"
                        Tooltip="Share"
                        Click="@(() => OnShareClick(shareModel))">
                        <i class="icon-share"></i>
                    </ButtonRound>
                </div>
            </div>
        }
    </div>

</div>

@code {
    // Shortcuts
    private Session Session => ChatContext.Hub.Session();
    private Chat Chat => ChatContext.Chat;
    private IInvites Invites => ChatContext.Hub.Invites;
    private IAuthors Authors => ChatContext.Hub.Authors;
    private ChatUI ChatUI => ChatContext.Hub.ChatUI;
    private ShareUI ShareUI => ChatContext.Hub.ShareUI;
    private UrlMapper UrlMapper => ChatContext.Hub.UrlMapper();
    private History History => ChatContext.Hub.History;

    [Parameter, EditorRequired] public ChatContext ChatContext { get; set; } = null!;

    protected override async Task<Model?> ComputeState(CancellationToken cancellationToken) {
        var message = "Welcome! Share the link to this chat to invite more people here:";
        if (Chat.HasSingleAuthor && Chat.SystemTag == Constants.Chat.SystemTags.Notes)
            message = "Welcome! You can store your notes in this chat, including recorded ones.";

        var shareModel = await ShareUI.GetModel(Chat.Id, cancellationToken).ConfigureAwait(false);
        if (shareModel is { Kind: ShareKind.Contact })
            message = $"To share {shareModel.TargetTitle}'s contact, use:";
        return new Model(message, shareModel);
    }

    private void OnShareClick(ShareModalModel shareModel)
        => ShareUI.Share(shareModel);

    // Nested types

    public sealed record Model(
        string Message,
        ShareModalModel? ShareModel = null);
}
