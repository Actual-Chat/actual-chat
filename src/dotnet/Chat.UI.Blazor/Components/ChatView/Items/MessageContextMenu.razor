@namespace ActualChat.Chat.UI.Blazor.Components
@using ActualChat.UI.Blazor.Components
@inject FeedbackUI FeedbackUI;
@inject ChatUI ChatUI;

<MenuItem Title="Reaction" Name="wip" Click="@(() => FeedbackUI.AskFeatureRequestFeedback("reaction", "Reactions"))">
    <Icon>
        <svg class="w-6 h-6 fill-current" xlmns="http://www.w3.org/2000/svg" viewBox="-5 -5 32 32">
            <path d="M12 0c-6.627 0-12 5.373-12 12s5.373 12 12 12 12-5.373 12-12-5.373-12-12-12zm3.5 8c.828 0 1.5.671 1.5 1.5s-.672 1.5-1.5 1.5-1.5-.671-1.5-1.5.672-1.5 1.5-1.5zm-7 0c.828 0 1.5.671 1.5 1.5s-.672 1.5-1.5 1.5-1.5-.671-1.5-1.5.672-1.5 1.5-1.5zm3.501 10c-2.801 0-4.874-1.846-6.001-3.566l.493-.493c1.512 1.195 3.174 1.931 5.508 1.931 2.333 0 3.994-.736 5.506-1.931l.493.493c-1.127 1.72-3.199 3.566-5.999 3.566z"/>
        </svg>
    </Icon>
</MenuItem>
<MenuItem Title="Reply" Name="wip" Click="@(() => Reply(Model.Entry))">
    <Icon>
        <svg class="w-6 h-6 fill-current -scale-x-100" xlmns="http://www.w3.org/2000/svg" viewBox="-3 -4 30 30">
            <path d="M14 18l10-7.088-10-6.912v3.042s-11.618 2.583-14 12.958c5.072-5.431 14-5.218 14-5.218v3.218z"/>
        </svg>
    </Icon>
</MenuItem>
@if (_isJoined && _isEntryAuthor && !Model.Entry.IsStreaming && Model.Entry.StreamId.IsEmpty) {
    <MenuItem Title="Edit" Name="edit message" Click="@(() => Edit(Model.Entry))">
        <Icon>
            <svg class="w-6 h-6 fill-current" xlmns="http://www.w3.org/2000/svg" viewBox="-2 -2 28 28">
                <path fill-rule="evenodd" clip-rule="evenodd" d="M16.0187 10.6787L13.3237 7.98367L15.2717 6.03467L17.9657 8.72867L16.0187 10.6787ZM9.07965 17.6247L6.10265 17.8957L6.36665 14.9397L11.9837 9.32267L14.6797 12.0187L9.07965 17.6247ZM19.4037 7.33767L19.4027 7.33667L16.6647 4.59867C15.9237 3.85967 14.6507 3.82467 13.9487 4.52967L4.95265 13.5257C4.62665 13.8507 4.42465 14.2827 4.38265 14.7397L4.00365 18.9097C3.97765 19.2047 4.08265 19.4967 4.29265 19.7067C4.48165 19.8957 4.73665 19.9997 4.99965 19.9997C5.03065 19.9997 5.06065 19.9987 5.09065 19.9957L9.26065 19.6167C9.71865 19.5747 10.1497 19.3737 10.4747 19.0487L19.4717 10.0517C20.1997 9.32167 20.1687 8.10367 19.4037 7.33767Z"/>
            </svg>
        </Icon>
    </MenuItem>
}
@if (_isJoined && _isEntryAuthor && !Model.Entry.IsStreaming) {
    <MenuItem Title="Delete Message" Name="delete message" Click="@(() => ChatUI.ShowDeleteMessageRequest(Model))">
        <Icon>
            <svg class="w-6 h-6 fill-current" xlmns="http://www.w3.org/2000/svg" viewBox="-2 -2 28 28">
                <path fill-rule="evenodd" clip-rule="evenodd" d="M18 19C18 19.551 17.552 20 17 20H7C6.448 20 6 19.551 6 19V8H18V19ZM10 4.328C10 4.173 10.214 4 10.5 4H13.5C13.786 4 14 4.173 14 4.328V6H10V4.328ZM21 6H20H16V4.328C16 3.044 14.879 2 13.5 2H10.5C9.121 2 8 3.044 8 4.328V6H4H3C2.45 6 2 6.45 2 7C2 7.55 2.45 8 3 8H4V19C4 20.654 5.346 22 7 22H17C18.654 22 20 20.654 20 19V8H21C21.55 8 22 7.55 22 7C22 6.45 21.55 6 21 6Z"/>
            </svg>
        </Icon>
    </MenuItem>
}
<MenuItem Title="Create Thread" Name="wip" Click="@(() => FeedbackUI.AskFeatureRequestFeedback("message-threads", "Message Threads"))">
    <Icon>
        <svg class="w-6 h-6 fill-current" viewBox="-3 -5 32 32" xmlns="http://www.w3.org/2000/svg">
            <path d="M22.548 9l.452-2h-5.364l1.364-6h-2l-1.364 6h-5l1.364-6h-2l-1.364 6h-6.184l-.452 2h6.182l-1.364 6h-5.36l-.458 2h5.364l-1.364 6h2l1.364-6h5l-1.364 6h2l1.364-6h6.185l.451-2h-6.182l1.364-6h5.366zm-8.73 6h-5l1.364-6h5l-1.364 6z"/>
        </svg>
    </Icon>
</MenuItem>
<MenuItem Title="Copy Link" Name="copy link" Click="@(() => CopyLink(Model.Entry))">
    <Icon>
        <svg class="w-6 h-6 fill-current" viewBox="-2 -2 28 28" xmlns="http://www.w3.org/2000/svg">
            <path fill-rule="evenodd" clip-rule="evenodd" d="M11.527 3.89973C13.709 1.71273 17.23 1.31773 19.662 3.21973C22.575 5.49773 22.766 9.74273 20.235 12.2797L18.812 13.7047C18.419 14.0987 17.783 14.0987 17.39 13.7047C16.997 13.3117 16.997 12.6727 17.39 12.2797L18.812 10.8537C20.467 9.19673 20.377 6.44173 18.54 4.90373C16.913 3.54073 14.471 3.80073 12.972 5.30273L11.699 6.57773C11.307 6.97173 10.669 6.97173 10.277 6.57773C9.88398 6.18473 9.87998 5.54973 10.454 4.97473L11.527 3.89973ZM13.2929 9.29303L9.29288 13.293C8.90188 13.684 8.90188 14.316 9.29288 14.707C9.48788 14.902 9.74388 15 9.99988 15C10.2559 15 10.5119 14.902 10.7069 14.707L14.7069 10.707C15.0979 10.316 15.0979 9.68403 14.7069 9.29303C14.3159 8.90203 13.6839 8.90203 13.2929 9.29303ZM12.2802 17.3965L11.0062 18.6675C9.50518 20.1645 7.05818 20.4225 5.43018 19.0655C3.59118 17.5335 3.50018 14.7875 5.15718 13.1345L6.58218 11.7145C6.97518 11.3225 6.97518 10.6865 6.58218 10.2935C6.18918 9.90253 5.55118 9.90253 5.15718 10.2935L3.88218 11.5665C1.71018 13.7325 1.32918 17.2165 3.20718 19.6405C5.47818 22.5735 9.73818 22.7715 12.2802 20.2375L13.7052 18.8175C14.0982 18.4245 14.0982 17.7895 13.7052 17.3965C13.3112 17.0035 12.6742 17.0035 12.2802 17.3965Z"/>
        </svg>
    </Icon>
</MenuItem>

@code{
    [Inject] private IChatAuthors ChatAuthors { get; set; } = null!;
    [Inject] private Session Session { get; set; } = null!;
    [Inject] private IEventAggregator EventAggregator { get; set; } = null!;
    [Inject] private NavigationManager Nav { get; set; } = null!;
    [Inject] private ClipboardUI ClipboardUI { get; set; } = null!;

    private ChatAuthor RequestAuthor { get; set; } = null!;

    [CascadingParameter] public ChatMessageModel Model { get; set; } = null!;
    [CascadingParameter] public Chat Chat { get; set; } = null!;

    private bool _isJoined;
    private bool _isEntryAuthor;

    protected override async Task OnInitializedAsync() {
        await base.OnInitializedAsync();
        await InitRequestAuthorId();
    }

    private async Task InitRequestAuthorId() {
        var requestAuthor = await ChatAuthors.Get(Session, Model.Entry.ChatId, CancellationToken.None);
        if (requestAuthor == null)
            return;
        RequestAuthor = requestAuthor;
        _isEntryAuthor = RequestAuthor.Id == Model.Entry.AuthorId;
        _isJoined = true;
    }

    private async Task Reply(ChatEntry chatEntry) {
        ChatUI.LinkedChatEntry.Value = new (ChatEntryLinkType.Reply, chatEntry);
        await EventAggregator.Publish(new FocusChatMessageEditor());
    }

    private async Task CopyLink(ChatEntry chatEntry) {
        var url = $"{Nav.BaseUri}chat/{Chat.Id.Value}#{chatEntry.Id}";
        await ClipboardUI.WriteText(url);
    }

    private Task Edit(ChatEntry chatEntry) {
        return EventAggregator.Publish(new EditMessage(chatEntry));
    }

}
