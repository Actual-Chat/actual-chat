@namespace ActualChat.Chat.UI.Blazor.Components
@using ActualChat.MediaPlayback
@using ActualChat.Chat.UI.Blazor.Services
@using System.Text.RegularExpressions
@using ActualChat.Chat.UI.Blazor.Components.MarkupParts
@using Stl.Extensibility

<p class="chat-message-markup text-primary mx-1">
    <CascadingValue Value="Entry">
        <MarkupView Markup="Markup"/>
    </CascadingValue>
</p>

@code {
    [Inject] private IMarkupParser MarkupParser { get; init; } = null!;
    private ChatEntry Entry => Model.Entry;
    private Markup? Markup { get; set; } = null!;

    [Parameter, EditorRequired, ParameterComparer(typeof(ByReferenceParameterComparer))]
    public ChatMessageModel Model { get; set; } = null!;

    public override Task SetParametersAsync(ParameterView parameters)
        => this.HasChangedParameters(parameters) ? base.SetParametersAsync(parameters) : Task.CompletedTask;

    protected override void OnParametersSet() {
        Markup = Entry.AudioEntryId != null
            ? new PlayableTextMarkup(Entry.Content, Entry.TextToTimeMap)
            : MarkupParser.Parse(Entry.Content);
        StateHasChanged();
    }
}
