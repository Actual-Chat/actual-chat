@namespace ActualChat.Chat.UI.Blazor.Components
@using ActualChat.MediaPlayback
@using ActualChat.Chat.UI.Blazor.Services
@using System.Text.RegularExpressions
@using ActualChat.Chat.UI.Blazor.Components.MarkupParts
@using Stl.Extensibility
@inherits ComputedStateComponent<ChatMessageMarkup.StateModel?>

@if (Markup != null) {
    <p class="chat-message-markup text-primary mx-1"
       @onmouseover="_ => OnMouseOver()"
       @onmouseout="_ => OnMouseOut()">
        @if (ShowMarkupText) {
            <span>@Markup.Text</span>
        } else {
            @foreach (var part in Markup.Parts) {
                @RenderPart(part)
            }
        }
    </p>
}

@code {
    [Inject] private IMatchingTypeFinder MatchingTypeFinder { get; init; } = null!;
    [Inject] private MarkupParser MarkupParser { get; init; } = null!;
    [Inject] private IActivePlaybackInfo ActivePlaybackInfo { get; init; } = null!;
    private ChatEntry Entry => Model.Entry;
    private Markup? Markup { get; set; } = null!;
    private bool HasTextOnly => Markup?.Parts.All(x => x is PlainTextPart) ?? false;
    private bool IsMouseOver { get; set; }
    private bool ShowMarkupText => HasTextOnly && !IsMouseOver;

    [Parameter, EditorRequired, ParameterComparer(typeof(ByReferenceParameterComparer))]
    public ChatMessageModel Model { get; set; } = null!;

    void OnMouseOut() {
        if (!IsMouseOver) {
            return;
        }
        IsMouseOver = false;
        StateHasChanged();
    }

    void OnMouseOver() {
        if (IsMouseOver) {
            return;
        }
        IsMouseOver = true;
        StateHasChanged();
    }

    public override Task SetParametersAsync(ParameterView parameters)
        => this.HasChangedParameters(parameters) ? base.SetParametersAsync(parameters) : Task.CompletedTask;

    protected override async Task OnParametersSetAsync() {
        Markup = await MarkupParser.Parse(Entry.Content, Entry.TextToTimeMap).ConfigureAwait(true);
        _ = State.Recompute();
    }

    protected override async Task<StateModel?> ComputeState(CancellationToken cancellationToken) {
        var audioEntryId = Entry.AudioEntryId;
        if (audioEntryId == null)
            return null;
        var trackId = ChatAudioTrackInfo.ComposeTrackId(Entry.ChatId, audioEntryId.GetValueOrDefault());
        var trackInfo = await ActivePlaybackInfo.GetTrackInfo(trackId, cancellationToken).ConfigureAwait(false);
        var playbackState = await ActivePlaybackInfo.GetTrackPlaybackState(trackId, cancellationToken).ConfigureAwait(false);
        return new StateModel { TrackInfo = trackInfo, PlayerState = playbackState };
    }

    // Private methods

    private RenderFragment RenderPart(MarkupPart part) {
        if (part is PlainTextPart) {
            var state = State.ValueOrDefault;
            var trackInfo = state?.TrackInfo as ChatAudioTrackInfo;
            var playbackState = state?.PlayerState;
            var partTimeRange = part.TimeRange;
            if (trackInfo == null || playbackState == null || playbackState.IsCompleted || partTimeRange.IsEmpty)
                return @<PlainTextPartView Entry="@Model.Entry" Part="@part"/>;

            var audioEntry = trackInfo.AudioEntry;
            var playingAt = (trackInfo.RecordedAt + playbackState.PlayingAt - audioEntry.BeginsAt).TotalSeconds;
            var playingAtNearbyRange = new Range<double>(playingAt - 2, playingAt + 2);
            if (!playingAtNearbyRange.Overlaps(part.TimeRange))
                return @<PlainTextPartView Entry="@Model.Entry" Part="@part"/>;

            return @<PlainTextPartView Entry="@Model.Entry" Part="@part" PlayingAt="@playingAt"/>;
        }

        var componentType = MatchingTypeFinder.TryFind(part.GetType(), typeof(IMarkupPartView));
        if (componentType == null)
            return @<UnknownPartView Entry="@Model.Entry" Part="@part"/>;

        return builder => {
            var i = 0;
            builder.OpenComponent(i++, componentType);
            builder.AddAttribute(i++, nameof(IMarkupPartView.Entry), Entry);
            builder.AddAttribute(i++, nameof(IMarkupPartView.Part), part);
            builder.CloseComponent();
        };
    }

    public record StateModel {
        public TrackInfo? TrackInfo { get; init; }
        public PlayerState? PlayerState { get; init; }
    }
}
