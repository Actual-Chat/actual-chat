@namespace ActualChat.Chat.UI.Blazor.Components

@{
    var author = Model.Author;
    var showHeader = Model.IsBlockStart;
    var showPicture = showHeader;
    var marginClass = Model.IsBlockEnd ? "mb-4" : "mb-2";
    var entry = Model.Entry;
    var timestamp = entry.BeginsAt.ToDateTime().ToLocalTime().ToShortTimeString();
    var picture = string.IsNullOrWhiteSpace(author.Picture)
        ? $"https://avatars.dicebear.com/api/avataaars/{author.Name}.svg"
        : author.Picture;
}
@if (Model.DateLine.HasValue) {
    <ChatMessageDateLine Date="@Model.DateLine.GetValueOrDefault()"/>
}
<div class="@(_class ??= this.DefaultClass()) antialiased sm:subpixel-antialiased md:antialiased flex items-start text-sm text-current break-words @marginClass">
    @if (showPicture) {
        <div class="w-10 h-10 mr-2 select-none bg-secondary">
            <img src="@picture" alt="@author.Name"/>
        </div>
    }
    else {
        <div class="w-10 mr-2">
            <span class="chat-message-timestamp-secondary text-secondary text-xs invisible float-right mr-1 mt-0.5">@timestamp</span>
        </div>
    }
    <div class="flex-1 overflow-hidden">
        @if (showHeader) {
            <div class="header chat-message-header ml-1">
                    <span class="font-bold text-secondary rounded">@author.Name</span>
                <ChatMessageTimestamp Value="entry.BeginsAt" />
                &nbsp;
                <span class="text-accent-muted text-xxs">id=@entry.Id</span>
            </div>
        }
        <div class="content message-content rounded-sm">
            @if (entry.IsStreaming) {
                <ChatMessageTranscript Model="@Model"/>
            } else {
                <ChatMessageMarkup Model="@Model"/>
            }
        </div>
    </div>
</div>

@code {
    private static string? _class;

    [Parameter, EditorRequired, ParameterComparer(typeof(ByValueParameterComparer))]
    public ChatMessageModel Model { get; set; } = null!;

    public override Task SetParametersAsync(ParameterView parameters)
        => this.HasChangedParameters(parameters) ? base.SetParametersAsync(parameters) : Task.CompletedTask;
}
