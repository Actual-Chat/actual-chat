@namespace ActualChat.Chat.UI.Blazor.Components
@inherits ComputedStateComponent<ChatMessage.Model>
@using ActualChat.Hosting
@using Microsoft.AspNetCore.Components.Rendering
@using System.Diagnostics.CodeAnalysis
@{
    var m = _rendered = State.Value;
    var message = _renderedMessage = Message;
    var markup = _renderedMarkup = _markup;
    var entry = message.Entry;

    // Flags
    var isSystem = entry.IsSystemEntry;
    var isReply = m.RepliedEntry != null;
    var isReplyToOwnMessage = m.RepliedEntry?.AuthorId == entry.AuthorId;
    var showAuthor = !isSystem && (message.IsBlockStart || isReply);

    // Classes
    var systemClass = isSystem ? "system-entry" : "";
    var marginClass = message.IsBlockEnd ? "mb-3" : "mb-0";
    var ownMessageClass = m.OwnAuthorId == message.Entry.AuthorId ? "own-message" : "";
    var highlightClass = m.IsHighlighted ? "chat-message-highlighted" : "";
    var repliedClass = m.IsReplyTarget ? "replied-message" : "";
    var mentionClass = m.IsOwnAuthorMentioned && !isReplyToOwnMessage ? "mention" : "";
    var cls = $"{systemClass} {ownMessageClass} {mentionClass} {marginClass} {highlightClass} {repliedClass} message-wrapper";
}

@if (message.DateLine.HasValue) {
    <ChatMessageDateLine Date="@message.DateLine.GetValueOrDefault()"/>
}
@if (message.IsFirstUnread) {
    <Separator Title="new" Class="new-separator" TitleClass="new-separator-title"/>
}
@if (isSystem) {
    <div class="@cls">
        <div class="flex-y w-full">
            <div class="chat-message group px-1.5 py-1 relative">
                <div class="flex-1 overflow-hidden">
                    <div class="message-content rounded-sm">
                        <p class="chat-message-markup mx-1">
                            <CascadingValue Value="@entry" IsFixed="true">
                                <MarkupView Markup="@markup"/>
                            </CascadingValue>
                        </p>
                    </div>
                </div>
            </div>
        </div>
    </div>
    return;
}

<div class="@cls"
     data-hover-menu="@(MenuRef.New<MessageHoverMenu>(Message.Entry.Id).ToString())"
     data-menu="@(MenuRef.New<MessageMenu>(Message.Entry.Id, "").ToString())"
     data-menu-trigger="@(MenuTriggers.Secondary.Format())"
     data-menu-placement="@(FloatingPosition.BottomStart.ToPositionString())">
    <div class="flex-y w-full">
        <div class="chat-message group px-1.5 py-1 relative">
            @if (showAuthor) {
                <div class="m-1.5">
                    <ChatMessageAuthorCircle
                        AuthorSid="@entry.AuthorId"
                        Click="@(_ => AuthorUI.Show(entry.AuthorId))"/>
                </div>
            } else {
                var timestamp = TimeZoneConverter.ToLocalTime(entry.BeginsAt).ToShortTimeString();
                <div class="w-10 mr-2 mt-1">
                    <span class="chat-message-timestamp-on-hover">@timestamp</span>
                </div>
            }
            <div class="flex-1 overflow-hidden">
                @if (showAuthor) {
                    <div class="flex-x items-baseline header chat-message-header ml-1">
                        <AuthorName AuthorSid="@entry.AuthorId" Class="chat-message-author-name" />
                        <LiveTimeDeltaText Class="chat-message-timestamp min-w-fit px-2" Moment="@entry.BeginsAt"/>
                        @* &nbsp; *@
                        @* <span class="text-02 opacity-20 text-xxs">id=@entry.Id</span> *@
                    </div>
                }
                <div class="message-content rounded-sm">
                    @if (isReply) {
                        <ChatMessageQuote Entry="@m.RepliedEntry" IsOwn="@isReplyToOwnMessage"/>
                    }
                    @if (entry.IsStreaming) {
                        <ChatMessageTranscript Model="@message" Class="mx-1" ShowEntryKind="@Message.ShowEntryKind" />
                    } else {
                        <p class="chat-message-markup mx-1">
                            <CascadingValue Value="@entry" IsFixed="true">
                                <MarkupView Markup="@_markup"/>
                            </CascadingValue>
                        </p>
                    }
                </div>
                @if (entry.Attachments.Length > 0) {
                    <div class="message-attachments mx-1">
                        @foreach (var attachment in entry.Attachments) {
                            @if (attachment.IsImage()) {
                                <ImageAttachment Attachment="@attachment" ChatEntry="@entry"/>
                            } else {
                                <FileAttachment Attachment="@attachment"/>
                            }
                        }
                    </div>
                }
                @if (entry.HasReactions) {
                    <MessageReactions Entry="@entry" />
                }
            </div>
        </div>
    </div>

    <div class="message-hover-menu-placement placement"></div>
</div>

@code {
    private Model? _rendered;
    private ChatMessageModel? _renderedMessage;
    private Markup? _renderedMarkup;
    private IChatMarkupHub _chatMarkupHub = null!;
    private ValueTask<Markup> _markupTask;
    private Markup _markup = Markup.Empty;

    [Inject] private Session Session { get; init; } = null!;
    [Inject] private IAuthors Authors { get; init; } = null!;
    [Inject] private IChats Chats { get; init; } = null!;
    [Inject] private ChatUI ChatUI { get; init; } = null!;
    [Inject] private AuthorUI AuthorUI { get; init; } = null!;
    [Inject] private KeyedFactory<IChatMarkupHub, ChatId> ChatMarkupHubFactory { get; init; } = null!;
    [Inject] private TimeZoneConverter TimeZoneConverter { get; init; } = null!;
    [Inject] private UIEventHub UIEventHub { get; init; } = null!;
    [Inject] private IJSRuntime JS { get; init; } = null!;

    // Shortcuts
    private ChatEntry Entry => Message.Entry;
    private ChatId ChatId => Message.Entry.ChatId;

    [Parameter, EditorRequired] public ChatMessageModel Message { get; set; } = null!;

    protected override async Task OnParametersSetAsync()
    {
        _chatMarkupHub = ChatMarkupHubFactory[ChatId];
        _markupTask = _chatMarkupHub.GetMarkup(Entry, MarkupConsumer.MessageView, default);
        _markup = await _markupTask;
        await base.OnParametersSetAsync();
    }

    protected override bool ShouldRender() {
        return !ReferenceEquals(_rendered, State.Value)
            || !ReferenceEquals(_renderedMessage, Message)
            || !ReferenceEquals(_renderedMarkup, _markup);
    }

    protected override ComputedState<Model>.Options GetStateOptions() {
        var initialValue = Model.None;
        var ownAuthorTask = Authors.GetOwn(Session, ChatId, default);
        if (ownAuthorTask.IsCompletedSuccessfully) {
            var ownAuthorId = ownAuthorTask.Result?.Id ?? AuthorId.None;
            initialValue = new Model { OwnAuthorId = ownAuthorId };
        }
        return new() { InitialValue = initialValue };
    }

    protected override async Task<Model> ComputeState(CancellationToken cancellationToken) {
        var entry = Entry;
        var chatId = entry.ChatId;
        var ownAuthor = await Authors.GetOwn(Session, chatId, cancellationToken);
        var ownAuthorId = ownAuthor?.Id ?? AuthorId.None;

        var markup = await _markupTask;
        var repliedEntry = await GetRepliedEntry(cancellationToken);
        var hasAnyMentions = HasAnyMentions(markup);
        var isOwnAuthorMentioned = IsMentioned(markup, repliedEntry, ownAuthorId, hasAnyMentions);
        var relatedChatEntry = await ChatUI.RelatedChatEntry.Use(cancellationToken);
        var isReplyTarget = relatedChatEntry is { Kind: RelatedEntryKind.Reply, Id: var repliedEntryId } && repliedEntryId == entry.Id;
        var isHighlighted = entry.Id == await ChatUI.HighlightedEntryId.Use(cancellationToken);
        var result = new Model {
            OwnAuthorId = ownAuthorId,
            RepliedEntry = repliedEntry,
            IsHighlighted = isHighlighted,
            IsReplyTarget = isReplyTarget,
            IsOwnAuthorMentioned = isOwnAuthorMentioned,
        };
        return result.Equals(_rendered) ? _rendered! : result;
    }

    private async Task<ChatEntry?> GetRepliedEntry(CancellationToken cancellationToken) {
        if (Entry.RepliedEntryLocalId is not { } repliedEntryLocalId)
            return null;

        var repliedEntryId = new ChatEntryId(Message.Entry.ChatId, Message.Entry.Kind, repliedEntryLocalId, AssumeValid.Option);
        var repliedEntry = await Chats.GetEntry(Session, repliedEntryId, cancellationToken)
            ?? ChatEntry.Removed(repliedEntryId);

        return repliedEntry;
    }

    private void OnQuoteClick()
        => ChatUI.HighlightEntry(Message.Entry.Id, navigate: true);

    private bool HasAnyMentions(Markup markup)
        => MarkupValidator.ContainsAnyMention.IsValid(markup);

    private bool IsMentioned(Markup markup,
        ChatEntry? repliedEntry,
        AuthorId authorId,
        bool hasAnyMentions)
    {
        if (authorId.IsNone)
            return false;

        if (repliedEntry?.AuthorId == authorId)
            return true;

        return hasAnyMentions && MarkupValidator.ContainsMention($"a:{authorId}").IsValid(markup);
    }

    // Nested types

    public sealed record Model {
        public static readonly Model None = new();

        public AuthorId OwnAuthorId { get; init; }
        public bool IsHighlighted { get; init; }
        public bool IsReplyTarget { get; init; }
        public bool IsOwnAuthorMentioned { get; init; }
        public ChatEntry? RepliedEntry { get; init; }
    }
}
