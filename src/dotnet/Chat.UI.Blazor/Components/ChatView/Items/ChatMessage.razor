@namespace ActualChat.Chat.UI.Blazor.Components
@using ActualChat.Hosting
@using Microsoft.AspNetCore.Components.Rendering

@{
    var entry = Model.Entry;
    var attachments = Model.Attachments;
    var timestamp = entry.BeginsAt.ToDateTime().ToLocalTime().ToShortTimeString();

    var showHeader = Model.IsBlockStart;
    var showPicture = showHeader;
    var marginClass = Model.IsBlockEnd ? "mb-3" : "mb-0";
    var mentionClass = Model.Entry.Content.Contains($@"<@{ReaderId}>") ? "mention" : "";
    var contextMenuId = "message-" + Model.Entry.Id;
    var ownMessageClass = ReaderId == Model.Entry.AuthorId ? "own-message" : "";
}
@if (Model.DateLine.HasValue) {
    <ChatMessageDateLine Date="@Model.DateLine.GetValueOrDefault()"/>
}
@if (Model.IsFirstUnread) {
    <Separator Title="new" Class="new-separator" TitleClass="new-separator-title"/>
}
<div class="chat-message @ownMessageClass @mentionClass relative group px-3 @marginClass">
    @if (showPicture) {
        <ChatAuthorBadge AuthorId="@entry.AuthorId">
            <div class="relative author-badge w-9 h-9 mx-1.5 mt-1.5 select-none bg-secondary rounded-md"
                 @onclick="OnChatAuthorClick">
                <img src="@context.Author.Picture" alt="@context.Author.Name" class="block"/>
                <div class="absolute left-5 bottom-0 bg-secondary w-4 h-4 rounded-l-xl rounded-tr-xl @(context.IsRecording ? "" : "hidden")">
                    <div class="text-inline-code animate-pulse">
                        <svg class="w-5 h-5 fill-current" xmlns="http://www.w3.org/2000/svg" viewBox="-5 -4 32 32">
                            <circle cx="8" cy="9" r="6"/>
                        </svg>
                    </div>
                </div>
            </div>
        </ChatAuthorBadge>
    } else {
        <div class="w-10 mr-2 mt-1">
            <span class="chat-message-timestamp-secondary text-secondary text-xs invisible float-right mr-1 mt-0.5">@timestamp</span>
        </div>
    }
    <div class="flex-1 overflow-hidden mb-1 mt-1">
        @if (showHeader) {
            <div class="header chat-message-header ml-1">
                <ChatAuthorBadge AuthorId="@entry.AuthorId">
                    <span class="font-bold text-secondary rounded">@context.Author.Name</span>
                </ChatAuthorBadge>
                <ChatMessageTimestamp Value="entry.BeginsAt"/>
                &nbsp;
                <span class="text-accent-muted text-xxs">id=@entry.Id</span>
            </div>
        }
        <div class="content message-content rounded-sm">
            @if (entry.IsStreaming) {
                <ChatMessageTranscript Model="@Model"/>
            } else {
                <ChatMessageMarkup Model="@Model"/>
            }
        </div>
        @if (attachments.Length > 0) {
            <div class="message-attachments">
                @foreach (var attachment in attachments) {
                    var isImage = attachment.ContentType.StartsWith("image", StringComparison.OrdinalIgnoreCase);
                    @if (isImage) {
                        <ImageAttachment Attachment="@attachment"/>
                    } else {
                        <FileAttachment Attachment="@attachment"/>
                    }
                }
            </div>
        }
    </div>

    <ContextMenu Id="@contextMenuId"
                 BtnClass="hidden-btn h-8 min-w-12 right-4 -mt-3 bg-secondary rounded-r-lg rounded-l-lg border-r border-t border-b border-l border-accent shadow-context"
                 MenuClass="chat-message-menu absolute z-10 right-14 -mt-3 bg-secondary -mr-2 border rounded-l-md rounded-tr-md rounded-br-md shadow-context">
        <ButtonTemplate>
            <svg class="w-6 h-6 fill-current horizontal-item" xlmns="http://www.w3.org/2000/svg" viewBox="-1 -1 26 26">
                <path d="M6 12c0 1.657-1.343 3-3 3s-3-1.343-3-3 1.343-3 3-3 3 1.343 3 3zm9 0c0 1.657-1.343 3-3 3s-3-1.343-3-3 1.343-3 3-3 3 1.343 3 3zm9 0c0 1.657-1.343 3-3 3s-3-1.343-3-3 1.343-3 3-3 3 1.343 3 3z"/>
            </svg>
        </ButtonTemplate>
        <ContentTemplate>
            <MessageContextMenu/>
        </ContentTemplate>
    </ContextMenu>
</div>

@code {
    [Inject] private ChatUI ChatUI { get; set; } = null!;
    [Inject] private Session Session { get; set; } = null!;
    [Inject] private IChatAuthors ChatAuthor { get; set; } = null!;

    private string ReaderId { get; set; } = "";

    [Parameter, EditorRequired, ParameterComparer(typeof(ByValueParameterComparer))]
    public ChatMessageModel Model { get; set; } = null!;

    protected override async Task OnInitializedAsync()
        => await InitReaderId();

    public override Task SetParametersAsync(ParameterView parameters)
        => this.HasChangedParameters(parameters) ? base.SetParametersAsync(parameters) : Task.CompletedTask;

    private void OnChatAuthorClick()
        => ChatUI.ShowChatAuthorCard(Model.Entry.AuthorId);

    private async Task InitReaderId()
        => ReaderId = await ChatAuthor.GetChatPrincipalId(Session, Model.Entry.ChatId, CancellationToken.None).ConfigureAwait(true);
}
