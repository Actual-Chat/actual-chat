@using ActualChat.Hosting
@namespace ActualChat.Chat.UI.Blazor.Components

@{
    var entry = Model.Entry;
    var attachments = Model.Attachments;
    var timestamp = entry.BeginsAt.ToDateTime().ToLocalTime().ToShortTimeString();

    var showHeader = Model.IsBlockStart;
    var showPicture = showHeader;
    var marginClass = Model.IsBlockEnd ? "mb-3" : "mb-0";
    var unreadClass = Model.IsUnread ? "unread" : "";
    var mentionCss = Model.Entry.Content.Contains($@"<@{ReaderId}>") ? "mention" : "";
}
@if (Model.DateLine.HasValue) {
    <ChatMessageDateLine Date="@Model.DateLine.GetValueOrDefault()"/>
}
<div class="chat-message @mentionCss relative @unreadClass group px-3 @marginClass">
    @if (showPicture) {
        <ChatAuthor ChatId="@entry.ChatId" AuthorId="@entry.AuthorId">
            <div class="author-badge w-9 h-9 mx-1.5 mt-1.5 select-none bg-secondary rounded-md @(@context.IsRecording ? "border-sky-500 border-2" : "")"
                 @onclick="OnChatAuthorClick">
                <img src="@context.Author.Picture" alt="@context.Author.Name"/>
            </div>
        </ChatAuthor>
    }
    else {
        <div class="w-10 mr-2 mt-1">
            <span class="chat-message-timestamp-secondary text-secondary text-xs invisible float-right mr-1 mt-0.5">@timestamp</span>
        </div>
    }
    <div class="flex-1 overflow-hidden mb-1 mt-1">
        @if (showHeader) {
            <div class="header chat-message-header ml-1">
                <ChatAuthor ChatId="@entry.ChatId" AuthorId="@entry.AuthorId">
                    <span class="font-bold text-secondary rounded">@context.Author.Name</span>
                </ChatAuthor>
                <ChatMessageTimestamp Value="entry.BeginsAt"/>
                &nbsp;
                <span class="text-accent-muted text-xxs">id=@entry.Id</span>
            </div>
        }
        <div class="content message-content rounded-sm">
            @if (entry.IsStreaming) {
                <ChatMessageTranscript Model="@Model"/>
            } else {
                <ChatMessageMarkup Model="@Model"/>
            }
        </div>
        @if (attachments.Length > 0) {
            <div class="message-attachments">
                @foreach (var attachment in attachments) {
                    var isImage = attachment.ContentType.StartsWith("image", StringComparison.OrdinalIgnoreCase);
                    @if (isImage) {
                        <ImageAttachment Attachment="@attachment" />
                    } else {
                        <FileAttachment Attachment="@attachment" />
                    }
                }
            </div>
        }
    </div>

    <MessageMenu Class="invisible group-hover:visible absolute z-10" />
</div>

@code {
    [Inject] private ChatUI ChatUI { get; set; } = null!;
    [Inject] private Session Session { get; set; } = null!;
    [Inject] private IChatAuthors ChatAuthor { get; set; } = null!;
    private string ReaderId { get; set; } = "";

    [Parameter, EditorRequired, ParameterComparer(typeof(ByValueParameterComparer))]
    public ChatMessageModel Model { get; set; } = null!;

    protected override async Task OnInitializedAsync()
        => await InitReaderId();

    public override Task SetParametersAsync(ParameterView parameters)
        => this.HasChangedParameters(parameters) ? base.SetParametersAsync(parameters) : Task.CompletedTask;

    private void OnChatAuthorClick()
        => ChatUI.ShowChatAuthorCard(Model.Entry.ChatId, Model.Entry.AuthorId);

    private async Task InitReaderId()
        => ReaderId = await ChatAuthor.GetChatPrincipalId(Session, Model.Entry.ChatId, CancellationToken.None).ConfigureAwait(true);
}
