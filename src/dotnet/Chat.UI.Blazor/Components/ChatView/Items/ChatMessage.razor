@using ActualChat.Hosting
@namespace ActualChat.Chat.UI.Blazor.Components
@inject HostInfo _hostInfo

@{
    var showHeader = Model.IsBlockStart;
    var showPicture = showHeader;
    var marginClass = Model.IsBlockEnd ? "mb-3" : "mb-0";
    var entry = Model.Entry;
    var attachments = Model.Attachments;
    var timestamp = entry.BeginsAt.ToDateTime().ToLocalTime().ToShortTimeString();
}
@if (Model.DateLine.HasValue) {
    <ChatMessageDateLine Date="@Model.DateLine.GetValueOrDefault()"/>
}
<div class="@(_class ??= this.DefaultClass()) px-3 antialiased sm:subpixel-antialiased md:antialiased flex items-start text-sm text-current break-words group @marginClass">
    @if (showPicture) {
        <ChatAuthor ChatId="@entry.ChatId" AuthorId="@entry.AuthorId">
            <div class="author-avatar w-9 h-9 mx-1.5 mt-1.5 select-none bg-secondary rounded-md">
                <img src="@context.Picture" alt="@context.Name"/>
            </div>
        </ChatAuthor>
    }
    else {
        <div class="w-10 mr-2 mt-1">
            <span class="chat-message-timestamp-secondary text-secondary text-xs invisible float-right mr-1 mt-0.5">@timestamp</span>
        </div>
    }
    <div class="flex-1 overflow-hidden mb-1 mt-1">
        @if (showHeader) {
            <div class="header chat-message-header ml-1">
                <ChatAuthor ChatId="@entry.ChatId" AuthorId="@entry.AuthorId">
                    <span class="font-bold text-secondary rounded">@context.Name</span>
                </ChatAuthor>
                <ChatMessageTimestamp Value="entry.BeginsAt"/>
                &nbsp;
                <span class="text-accent-muted text-xxs">id=@entry.Id</span>
            </div>
        }
        <div class="content message-content rounded-sm">
            @if (entry.IsStreaming) {
                <ChatMessageTranscript Model="@Model"/>
            } else {
                <ChatMessageMarkup Model="@Model"/>
            }
        </div>
        @if (attachments.Length > 0) {
            <div class="message-attachments">
                @foreach (var attachment in attachments) {
                    var isImage = attachment.ContentType.StartsWith("image", StringComparison.OrdinalIgnoreCase);
                    var url = "/api/content/download/content-record/" + attachment.ContentId;
                    @if (isImage) {
                        var previewUrl = url;
                        var imgStyle = "max-width: 400px; max-height: 300px";
                        if (attachment.Height > 0 && attachment.Width > 0) {
                            var width = attachment.Width;
                            var height = attachment.Height;
                            if (width > 400 || height > 300) {
                                var ratio = Math.Min(400d / width, 300d / height);
                                width = (int) Math.Round(ratio * width);
                                height = (int) Math.Round(ratio * height);
                            }
                            imgStyle = $"width: {width}px; height: {height}px";
                            // TODO(DM): setup correct preview url to image proxy endpoint
                        }
                        <div class="message-attachment-image mt-1">
                            <a class="cursor-pointer" href="@url" target="_blank" role="button">
                                <img style="@imgStyle"  src="@previewUrl" alt="image" />
                            </a>
                        </div>
                    } else {
                        <div class="message-attachment-file mt-1">
                            <a class="cursor-pointer" href="@url" target="_blank" role="button">
                                @attachment.FileName
                            </a>
                        </div>
                    }
                }
            </div>
        }
    </div>
    @if (_hostInfo.IsDevelopmentInstance) {
        <MessageMenu Css="invisible group-hover:visible" />
    }
</div>

@code {
    private static string? _class;

    [Parameter, EditorRequired, ParameterComparer(typeof(ByValueParameterComparer))]
    public ChatMessageModel Model { get; set; } = null!;

    public override Task SetParametersAsync(ParameterView parameters)
        => this.HasChangedParameters(parameters) ? base.SetParametersAsync(parameters) : Task.CompletedTask;
}
