@namespace ActualChat.Chat.UI.Blazor.Components
@using Cysharp.Text
@inherits ComputedStateComponent<MessageReactions.Model>
@{
    var m = State.Value;
}
@if (!m.HasReactions) {
    return;
}
<ul class="message-reactions @Class">
    @foreach (var reaction in m.Reactions) {
        <ReactionBadge Reaction="reaction" OwnReaction="m.OwnReaction" Entry="Entry" />
    }

    <li class="message-reactions-add"
        data-menu="@(MenuRef.New<ReactionSelectMenu>(Entry.Id))"
        data-menu-trigger="@MenuTrigger.Primary"
        data-menu-placement="@(FloatingPosition.Right.ToPositionString())">
        <AddReactionIcon Class="message-reactions-add-icon"/>
    </li>
</ul>

@code {
    [Inject] private ChatUIHub Hub { get; set; } = null!;
    private Session Session => Hub.Session();
    private IAuthors Authors => Hub.Authors;
    private IReactions Reactions => Hub.Reactions;
    private TuneUI TuneUI => Hub.TuneUI;
    private UICommander UICommander => Hub.UICommander();

    [Parameter, EditorRequired] public ChatEntry Entry { get; set; } = null!;
    [Parameter] public string Class { get; set; } = "";
    [CascadingParameter] ScreenSize ScreenSize { get; set; }

    protected override ComputedState<Model>.Options GetStateOptions()
        => new() {
            InitialValue = new Model(Entry.HasReactions),
            Category = ComputedStateComponent.GetStateCategory(GetType()),
        };

    protected override async Task<Model> ComputeState(CancellationToken cancellationToken) {
        if (!Entry.Id.IsTextEntry(out var textEntryId))
            return Model.None;

        var summaries = await Reactions.ListSummaries(Session, textEntryId, cancellationToken).ConfigureAwait(false);
        if (summaries.Count == 0)
            return new(false, summaries);

        var ownReaction = await Reactions.Get(Session, textEntryId, cancellationToken).ConfigureAwait(false);
        return new(true, summaries, ownReaction);
    }

    private Task ToggleReaction(Symbol emojiId) {
        _ = TuneUI.Play(Tune.React);
        return UICommander.Run(new Reactions_React(Session, new Reaction {
            EntryId = Entry.Id.ToTextEntryId(),
            EmojiId = emojiId,
        }));
    }

    // Nested types

    public sealed record Model(
        bool HasReactions,
        ApiArray<ReactionSummary> Reactions = default,
        Reaction? OwnReaction = null
    ) {
        public static readonly Model None = new(false);
    };
}
