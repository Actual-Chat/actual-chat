@namespace ActualChat.Chat.UI.Blazor.Components
@using Cysharp.Text
@inherits ComputedStateComponent<MessageReactions.Model>
@{
    var m = State.Value;
}
@if (!m.HasReactions) {
    return;
}
<ul class="message-reactions @Class">
    @foreach (var reaction in m.Reactions) {
        var ownReactionClass = m.OwnReaction?.Emoji == reaction.Emoji ? "message-reactions-reaction-own" : "";
        <li class="message-reactions-reaction @ownReactionClass"
            data-menu="@(MenuRef.New<ReactionAuthorsMenu>(Entry.Id, reaction.Emoji))"
            data-menu-trigger="@MenuTriggers.RightClick.Format()"
            data-menu-position="@(FloatingPosition.Right.ToPositionString())"
            @onclick="@(_ => ToggleReaction(reaction.Emoji))">
            <EmojiIcon Id="@reaction.Emoji.Id" class="message-reactions-reaction-emoji"/>
            <span class="message-reactions-reaction-count">@reaction.Count</span>
        </li>
    }

    <li class="message-reactions-add"
        data-menu="@(MenuRef.New<ReactionSelectMenu>(Entry.Id))"
        data-menu-trigger="@MenuTriggers.LeftClick.Format()"
        data-menu-position="@(FloatingPosition.Right.ToPositionString())">
        <AddReactionIcon class="message-reactions-add-icon"/>
    </li>
</ul>

@code {
    [Inject] private IReactions Reactions { get; init; } = null!;
    [Inject] private Session Session { get; init; } = null!;
    [Inject] private Features Features { get; init; } = null!;
    [Inject] private UICommander UICommander { get; init; } = null!;
    [Inject] private IAuthors Authors { get; init; } = null!;

    [Parameter, EditorRequired] public ChatEntry Entry { get; set; } = null!;
    [Parameter] public string Class { get; set; } = "";

    protected override ComputedState<Model>.Options GetStateOptions()
        => new() {
            InitialValue = new Model(Entry.HasReactions, ImmutableArray<ReactionSummary>.Empty),
        };

    protected override async Task<Model> ComputeState(CancellationToken cancellationToken) {
        if (!Entry.Id.IsTextEntryId(out var textEntryId))
            return Model.None;

        var summaries = await Reactions.ListSummaries(Session, textEntryId, cancellationToken);
        if (summaries.Length == 0)
            return new Model(false, summaries);
        var ownReaction = await Reactions.Get(Session, textEntryId, cancellationToken);
        return new Model(true, summaries, ownReaction);
    }

    private Task ToggleReaction(Symbol emojiId) {
        return UICommander.Run(new IReactions.ReactCommand(Session, new Reaction {
            EntryId = Entry.Id.ToTextEntryId(),
            EmojiId = emojiId,
        }));
    }

    public record Model(
        bool HasReactions,
        ImmutableArray<ReactionSummary> Reactions,
        Reaction? OwnReaction = null
    ) {
        public static Model None { get; } = new(false, ImmutableArray<ReactionSummary>.Empty);
    };
}
