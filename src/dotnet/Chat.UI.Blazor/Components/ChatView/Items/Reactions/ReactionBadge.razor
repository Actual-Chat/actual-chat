@namespace ActualChat.Chat.UI.Blazor.Components
@{
    var ownReactionClass = OwnReaction?.Emoji == Reaction.Emoji ? "own" : "";
    var showIcons = Reaction.Count <= 3;
    var showIconsClass = showIcons ? "icons" : "";
    var authorCircleSize = ScreenSize.IsNarrow() ? SquareSize.Size5 : SquareSize.Size4;
}
<li class="reaction-badge @ownReactionClass @showIconsClass"
    data-menu="@(MenuRef.New<ReactionAuthorsMenu>(Entry.Id, Reaction.Emoji))"
    data-menu-placement="@(FloatingPosition.Right.ToPositionString())"
    @onclick="@(_ => ToggleReaction(Reaction.Emoji))">
    <EmojiIcon Id="@Reaction.Emoji.Id" Class="c-emoji"/>
    @if (showIcons) {
        @for (int i = 0; i < Reaction.FirstAuthorIds.Count; i++) {
            <div class="c-author" style="z-index: @(Reaction.FirstAuthorIds.Count - i - 1)">
                <AuthorCircle AuthorSid="@Reaction.FirstAuthorIds[i]" Size="authorCircleSize"/>
            </div>
        }
    } else {
        <span class="c-count">@Reaction.Count</span>
    }
</li>

@code {
    [Inject] private ChatHub ChatHub { get; init; } = null!;
    private Session Session => ChatHub.Session;
    private UICommander UICommander => ChatHub.UICommander();

    [Parameter, EditorRequired] public ChatEntry Entry { get; set; } = null!;
    [Parameter, EditorRequired] public Reaction? OwnReaction { get; set; }
    [Parameter, EditorRequired] public ReactionSummary Reaction { get; set; } = null!;
    [CascadingParameter] ScreenSize ScreenSize { get; set; }

    private Task ToggleReaction(Symbol emojiId) {
        return UICommander.Run(new Reactions_React(Session, new Reaction {
            EntryId = Entry.Id.ToTextEntryId(),
            EmojiId = emojiId,
        }));
    }
}
