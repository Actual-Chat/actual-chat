@namespace ActualChat.Chat.UI.Blazor.Components
@inherits ComputedStateComponent<Quote.Model?>

@{
    var model = State.LatestNonErrorValue;
}

@if (model == null) {
    return;
}

@{
    var message = model.Message;
    var entry = message.Entry;
}

<div class="message-quote cursor-pointer" @onclick="OnQuoteClick">
    <div class="w-full">
        Replying to <ChatAuthorName AuthorId="@entry.AuthorId" Class="text-secondary font-bold text-accent"/>
    </div>
    <ButtonSquare Class="relative right-2 rounded-full close-reply modal-close" Click="OnCancelClicked" tabindex="-1" aria-label="close">
        <svg xmlns="http://www.w3.org/2000/svg" class="fill-current w-3 h-3" viewBox="-1 -1 26 26">
            <path d="M24 20.188l-8.315-8.209 8.2-8.282-3.697-3.697-8.212 8.318-8.31-8.203-3.666 3.666 8.321 8.24-8.206 8.313 3.666 3.666 8.237-8.318 8.285 8.203z"/>
        </svg>
    </ButtonSquare>
</div>

@code {
    [Inject] private ChatUI ChatUI { get; init; } = null!;
    [Inject] private Session Session { get; init; } = null!;
    [Inject] private IChatAuthors ChatAuthor { get; init; } = null!;
    [Inject] private IChats Chats { get; init; } = null!;
    [Inject] private TimeZoneConverter TimeZoneConverter { get; init; } = null!;
    [Inject] private IEventAggregator EventAggregator { get; init; } = null!;

    [Parameter, EditorRequired, ParameterComparer(typeof(ByValueParameterComparer))]
    public ChatMessageModel Message { get; set; } = null!;

    private ChatEntryReader Reader => Chats.NewEntryReader(Session, Message.Entry.ChatId, ChatEntryType.Text);

    private void OnCancelClicked() {
        ChatUI.RepliedChatEntry.Value = null;
    }

    public override Task SetParametersAsync(ParameterView parameters)
        => this.HasChangedParameters(parameters) ? base.SetParametersAsync(parameters) : Task.CompletedTask;

    protected override async Task OnInitializedAsync() {
        await TimeZoneConverter.WhenInitialized.ConfigureAwait(false);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        await base.OnAfterRenderAsync(firstRender).ConfigureAwait(false);
    }

    protected override async Task<Model?> ComputeState(CancellationToken cancellationToken) {
        var principalId = await ChatAuthor
            .GetOwnPrincipalId(Session, Message.Entry.ChatId, CancellationToken.None)
            .ConfigureAwait(false);

        var repliedChatMessage = await GetRepliedChatMessage(cancellationToken).ConfigureAwait(false);
        return new (Message, principalId, repliedChatMessage);
    }

    private async Task<ChatMessageModel?> GetRepliedChatMessage(CancellationToken cancellationToken) {
        if (Message.Entry.RepliedChatEntryId == null)
            return null;

        var repliedChatEntry = await Reader.Get(Message.Entry.RepliedChatEntryId.Value, CancellationToken.None)
            .ConfigureAwait(false);
        if (repliedChatEntry == null)
            return null;
        return new ChatMessageModel(repliedChatEntry) {
            IsBlockStart = true,
            IsQuote = true,
        };
    }

    private async Task OnQuoteClick() {
        if (Message.IsQuote) {
            await EventAggregator.Publish(new NavigateToChatEntry(Message.Entry.Id)).ConfigureAwait(false);
            ChatUI.HighlightedChatEntryId.Value = Message.Entry.Id;
        }
    }

    public record Model(ChatMessageModel Message, Symbol PrincipalId, ChatMessageModel? RepliedChatMessage);
}
