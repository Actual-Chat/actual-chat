@namespace ActualChat.Chat.UI.Blazor.Components
@using ActualChat.Chat.UI.Blazor.Pages
@inherits ComputedStateComponent<EmptyChatContent.Model?>
@{
    var m = State.Value;
    if (ReferenceEquals(m, null))
        return;
}

<div class="empty-chat-content">
    <div class="c-image"></div>
    <div class="c-text">
        <span>No messages here yet.</span>
        @if (m.PeerAccount is { } peerAccount) {
            <span>Say "Hi" to <AccountName UserSid="@peerAccount.Id"/>!</span>
        } else {
            <span>Post the first one!</span>
        }
    </div>
</div>

@code {
    private Session Session => ChatContext.Session;
    private Chat Chat => ChatContext.Chat;
    private IAccounts Accounts => ChatContext.Accounts;
    private ChatUI ChatUI => ChatContext.ChatUI;

    [Parameter, EditorRequired] public ChatContext ChatContext { get; set; } = null!;

    protected override async Task<Model?> ComputeState(CancellationToken cancellationToken) {
        var isEmpty = await ChatUI.IsEmpty(Chat.Id, cancellationToken);
        if (!isEmpty || Chat.HasSingleAuthor)
            return null;

        if (!Chat.Id.IsPeerChat(out var peerChatId))
            return Model.NoPeerAccount;

        var ownAccount = ChatContext.OwnAccount;
        var peerAccountId = peerChatId.UserIds.OtherThanOrDefault(ownAccount.Id);
        if (peerAccountId.IsNone)
            return Model.NoPeerAccount;

        var peerAccount = await Accounts.Get(Session, peerAccountId, cancellationToken);
        return new Model() { PeerAccount = peerAccount };
    }

    // Nested types

    public sealed record Model {
        public static readonly Model NoPeerAccount = new();

        public Account? PeerAccount { get; init; }
    }
}
