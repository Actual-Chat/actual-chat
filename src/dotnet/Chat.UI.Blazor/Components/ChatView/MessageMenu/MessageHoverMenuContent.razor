@namespace ActualChat.Chat.UI.Blazor.Components
@using ActualChat.Chat.UI.Blazor.Events
@inherits ComputedStateComponent<MessageHoverMenuContent.Model>
@{
    var entry = Message.Entry;
    var m = State.Value;
    var quickReactionTooltip = $"React with '{Emoji.ThumbsUp.Name}'";
}
<div class="flex-x gap-x-1">
    <ButtonRound Click="OnReactionClick" Tooltip="@quickReactionTooltip" Class="btn-xs btn-transparent">
        <EmojiIcon Id="@Emoji.ThumbsUp.Id" Class="w-5 h-5"/>
    </ButtonRound>
    @if (m.CanReply && !IsSystem) {
        <ButtonRound
            Class="btn-xs btn-transparent"
            Click="@(() => Reply(Message.Entry))"
            Tooltip="Reply"
            TooltipPosition="FloatingPosition.Top">
            <i class="icon-reply text-xl text-icon-01"></i>
        </ButtonRound>
    }
    @if (entry.AudioEntryId != null) {
        <MessageMenuPlay Entry="@entry"/>
    }
    <ButtonRound
        Class="btn-xs btn-transparent"
        data-menu="@(MenuRef.New<MessageMenu>(Message.Entry.Id, IsSystem.ToString(), "", "").ToString())"
        data-menu-trigger="@MenuTrigger.Primary"
        data-menu-placement="@(FloatingPosition.LeftStart.ToPositionString())">
        <i class="icon-more-vertical text-xl text-icon-01"></i>
    </ButtonRound>
</div>

@code {
    [Inject] private ChatUIHub Hub { get; init; } = null!;
    private Session Session => Hub.Session();
    private IChats Chats => Hub.Chats;
    private ChatEditorUI ChatEditorUI => Hub.ChatEditorUI;
    private UICommander UICommander => Hub.UICommander();
    private UIEventHub UIEventHub => Hub.UIEventHub();

    [Parameter, EditorRequired] public ChatMessage Message { get; set; } = null!;
    [Parameter] public bool IsSystem { get; set; }

    protected override ComputedState<Model>.Options GetStateOptions()
        => new () {
            InitialValue = Model.None,
            Category = GetStateCategory(),
        };

    protected override async Task<Model> ComputeState(CancellationToken cancellationToken) {
        var entry = Message.Entry;

        var rules = await Chats.GetRules(Session, entry.ChatId, cancellationToken).ConfigureAwait(false);
        // Default scheduler is used from here
        var canReply = rules.CanWrite();
        return new(canReply);
    }

    private Task Reply(ChatEntry chatEntry)
        => ChatEditorUI.ShowRelatedEntry(RelatedEntryKind.Reply, chatEntry.Id, focusOnEditor: true);

    private Task OnReactionClick() {
        return UICommander.Run(new Reactions_React(Session, new Reaction {
            EntryId = Message.Entry.Id.ToTextEntryId(),
            EmojiId = Emoji.ThumbsUp,
        }));
    }

    // Nested types

    public sealed record Model(bool CanReply) {
        public static readonly Model None = new(false);
    }
}
