@namespace ActualChat.Chat.UI.Blazor.Components
@using ActualChat.Chat.UI.Blazor.Events
@inherits ComputedStateComponent<MessageHoverMenuContent.Model>
@{
    var entry = Message.Entry;
    var m = State.LatestNonErrorValue;
}

@if (entry.AudioEntryId != null) {
    <MessageMenuPlay Entry="@entry"/>
}
@if (m.CanReply) {
    <ButtonRound
        Click="@(() => Reply(Message.Entry))"
        Class="reply-btn"
        Tooltip="Reply"
        FloatingPosition="FloatingPosition.Top">
        <i class="icon-reply text-xl text-icon-01"></i>
    </ButtonRound>
}
<ButtonRound Class="more-btn"
             data-menu="@(MenuTrigger.Format<MessageMenu>(Message.Entry.ChatId, Message.Key))"
             data-menu-trigger="@(MenuTriggers.LeftClick.ToTriggersString())"
             data-menu-position="@(FloatingPosition.LeftStart.ToPositionString())">
    <i class="icon-more-vertical text-xl text-icon-01"></i>
</ButtonRound>

@code {
    [Inject] private Session Session { get; init; } = null!;
    [Inject] private IChats Chats { get; init; } = null!;
    [Inject] private ChatUI ChatUI { get; init; } = null!;
    [Inject] private UIEventHub UIEventHub { get; init; } = null!;

    [Parameter, EditorRequired, ParameterComparer(typeof(ByValueParameterComparer))]
    public ChatMessageModel Message { get; set; } = null!;

    public override Task SetParametersAsync(ParameterView parameters)
        => this.HasChangedParameters(parameters) ? base.SetParametersAsync(parameters) : Task.CompletedTask;

    protected override ComputedState<Model>.Options GetStateOptions()
        => new () { InitialValue = Model.None };

    protected override async Task<Model> ComputeState(CancellationToken cancellationToken) {
        var entry = Message.Entry;
        var rules = await Chats.GetRules(Session, entry.ChatId, cancellationToken).ConfigureAwait(false);
        // Default scheduler is used from here
        var canReply = rules.CanWrite();
        return new Model(canReply);
    }

    private async Task Reply(ChatEntry chatEntry) {
        ChatUI.LinkedChatEntry.Value = new (ChatEntryLinkType.Reply, chatEntry);
        Services.UICommander().CancelUpdateDelays();
        await UIEventHub.Publish(new FocusChatMessageEditorEvent());
    }

    public record Model(bool CanReply) {
        public static readonly Model None = new(false);
    }
}
