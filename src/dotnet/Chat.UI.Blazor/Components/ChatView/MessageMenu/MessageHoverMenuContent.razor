@namespace ActualChat.Chat.UI.Blazor.Components
@using ActualChat.Chat.UI.Blazor.Events
@inherits ComputedStateComponent<MessageHoverMenuContent.Model>
@{
    var entry = Message.Entry;
    var m = State.LatestNonErrorValue;
    var quickReactionTooltip = $"React with '{Emoji.ThumbsUp.Name}'";
}
<div class="flex-x gap-x-1">
    <ButtonRound Click="OnReactionClick" Tooltip="@quickReactionTooltip">
        <EmojiIcon Id="@Emoji.ThumbsUp.Id" class="w-5 h-5"/>
    </ButtonRound>
    @if (m.CanReply) {
        <ButtonRound
            Click="@(() => Reply(Message.Entry))"
            Tooltip="Reply"
            FloatingPosition="FloatingPosition.Top">
            <i class="icon-reply text-xl text-icon-01"></i>
        </ButtonRound>
    }
    @if (entry.AudioEntryId != null) {
        <MessageMenuPlay Entry="@entry"/>
    }
    <ButtonRound data-menu="@(MenuRef.New<MessageMenu>(Message.Entry.ChatId, Message.Key, "").ToString())"
                 data-menu-trigger="@(MenuTriggers.LeftClick.Format())"
                 data-menu-position="@(FloatingPosition.LeftStart.ToPositionString())">
        <i class="icon-more-vertical text-xl text-icon-01"></i>
    </ButtonRound>
</div>

@code {
    [Inject] private Session Session { get; init; } = null!;
    [Inject] private IChats Chats { get; init; } = null!;
    [Inject] private ChatUI ChatUI { get; init; } = null!;
    [Inject] private UIEventHub UIEventHub { get; init; } = null!;
    [Inject] private UICommander UICommander { get; init; } = null!;

    [Parameter, EditorRequired] public ChatMessageModel Message { get; set; } = null!;

    protected override ComputedState<Model>.Options GetStateOptions()
        => new () { InitialValue = Model.None };

    protected override async Task<Model> ComputeState(CancellationToken cancellationToken) {
        var entry = Message.Entry;
        var rules = await Chats.GetRules(Session, entry.ChatId, cancellationToken).ConfigureAwait(false);
        // Default scheduler is used from here
        var canReply = rules.CanWrite();
        return new Model(canReply);
    }

    private async Task Reply(ChatEntry chatEntry) {
        ChatUI.RelatedChatEntry.Value = new (RelatedEntryKind.Reply, chatEntry.Id);
        _ = Services.UICommander().RunNothing();
        await UIEventHub.Publish(new FocusChatMessageEditorEvent());
    }

    private Task OnReactionClick() {
        return UICommander.Run(new IReactions.ReactCommand(Session, new Reaction {
            EntryId = Message.Entry.Id,
            EmojiId = Emoji.ThumbsUp,
        }));
    }

    public record Model(bool CanReply) {
        public static readonly Model None = new(false);
    }

}
