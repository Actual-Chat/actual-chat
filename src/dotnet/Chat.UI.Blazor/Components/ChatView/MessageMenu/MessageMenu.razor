@namespace ActualChat.Chat.UI.Blazor.Components
@inherits ComputedMenuBase<MessageMenu.Model>
@{
    var m = State.Value;
    if (State.Value == Model.None)
        return;
}

<MessageMenuContent
    ChatEntry="m.ChatEntry"
    ClickedLinkUrl="@m.Link"
    ClickedCode="@m.Code"
    IsOwnEntry="m.IsOwnEntry"
    IsOwner="m.IsOwner"
    CanWrite="m.CanWrite"
    IsSystem="m.IsSystem">
</MessageMenuContent>

@code {
    private string? _link;
    private string? _code;
    private bool _isSystem;
    private TextEntryId _entryId;

    [Inject] private IChats Chats { get; init; } = null!;
    [Inject] private Session Session { get; init; } = null!;
    [Inject] private IAuthors Authors { get; init; } = null!;

    protected override void OnParametersSet() {
        if (Arguments is not [ var sEntryId, var sIsSystem, var link, var code ])
            throw new ArgumentOutOfRangeException(nameof(Arguments));

        _isSystem = bool.Parse(sIsSystem);
        _entryId = new TextEntryId(sEntryId);
        _link = link.NullIfEmpty();
        _code = code.NullIfEmpty();
    }

    protected override ComputedState<Model>.Options GetStateOptions()
        => new() {
            InitialValue = Model.None,
            UpdateDelayer = FixedDelayer.MinDelay,
            Category = GetStateCategory(),
        };

    protected override async Task<Model> ComputeState(CancellationToken cancellationToken) {
        var chatEntry = await Chats.GetEntry(Session, _entryId, CancellationToken.None);
        if (chatEntry == null)
            return Model.None;

        var requestAuthor = await Authors.GetOwn(Session, chatEntry.ChatId, CancellationToken.None);
        var rules = await Chats.GetRules(Session, chatEntry.ChatId, cancellationToken).ConfigureAwait(false);

        return new Model {
            Link = _link,
            IsSystem = _isSystem,
            Code = _code,
            ChatEntry = chatEntry,
            CanWrite = rules.CanWrite(),
            IsOwner = rules.IsOwner(),
            IsOwnEntry = requestAuthor != null && requestAuthor.Id == chatEntry.AuthorId,
        };
    }

    public sealed record Model {
        public static readonly Model None = new();

        public string? Link { get; init; }
        public bool IsSystem { get; init; }
        public string? Code { get; set; }
        public bool IsOwnEntry { get; init; }
        public bool CanWrite { get; init; }
        public bool IsOwner { get; init; }
        public ChatEntry ChatEntry { get; init; } = null!;
    }
}
