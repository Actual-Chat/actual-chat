@namespace ActualChat.Chat.UI.Blazor.Components
@using ActualChat.Chat.UI.Blazor.Events
@inherits ComputedStateComponent<MessageMenuContent.Model>
@{
    var m = State.Value;
    var entry = ChatMessageModel.Entry;
    var showPlayButton = ScreenSize.IsNarrow() && entry.AudioEntryId != null;
}

<div class="message-menu">
    <ReactionSelect Entry="@entry"/>
    @if (showPlayButton) {
        <MessageMenuPlay Entry="@entry" IsMenu="true"/>
    }
    @if (m.IsJoined && m.IsEntryAuthor && !entry.IsStreaming && entry.StreamId.IsEmpty) {
        <MenuEntry
            Icon="icon-edit"
            Class="important-item"
            TriggerEditor="true"
            Text="Edit"
            Click="@(() => Edit(entry))">
        </MenuEntry>
    }
    @if (m.CanReply) {
        <MenuEntry
            Icon="icon-reply"
            TriggerEditor="true"
            Text="Reply"
            Click="@(() => Reply(entry))">
        </MenuEntry>
    }
    <MenuEntry
        Icon="icon-hash-fill"
        Text="Create thread"
        Click="@(() => _ = FeedbackUI.AskFeatureRequestFeedback("message-threads", "Message Threads"))">
    </MenuEntry>
    @if (!ClickedLinkUrl.IsNullOrEmpty()) {
        <MenuEntry
            Icon="icon-copy"
            Text="Copy link"
            Click="@OnCopyLinkClick">
        </MenuEntry>
    }
    <MenuEntry
        Icon="icon-link-2"
        Text="Copy message link"
        Click="@(() => CopyMessageLink(entry))">
    </MenuEntry>
    @if (m is { IsJoined: true, IsEntryAuthor: true } && !entry.IsStreaming) {
        <MenuEntrySeparator />
        <MenuEntry
            Class="warning-item"
            Icon="icon-trash03"
            Text="Delete message"
            Click="@(() => ChatUI.ShowDeleteMessageModal(new ChatMessageModel(entry)))">
        </MenuEntry>
    }
</div>

@code{
    [Inject] private Session Session { get; init; } = null!;
    [Inject] private IChats Chats { get; init; } = null!;
    [Inject] private IAuthors Authors { get; init; } = null!;
    [Inject] private ChatUI ChatUI { get; init; } = null!;
    [Inject] private ClipboardUI ClipboardUI { get; init; } = null!;
    [Inject] private FeedbackUI FeedbackUI { get; init; } = null!;
    [Inject] private UIEventHub UIEventHub { get; init; } = null!;
    [Inject] private UrlMapper UrlMapper { get; init; } = null!;

    [Parameter, EditorRequired] public ChatMessageModel ChatMessageModel { get; set; } = null!;
    [Parameter] public string? ClickedLinkUrl { get; set; }
    [CascadingParameter] public ScreenSize ScreenSize { get; set; }

    protected override ComputedState<Model>.Options GetStateOptions()
        => new() {
            InitialValue = Model.None,
            Category = GetStateCategory(),
        };

    protected override async Task<Model> ComputeState(CancellationToken cancellationToken)
    {
        var chatEntry = ChatMessageModel.Entry;
        var chatId = chatEntry.ChatId;
        var requestAuthor = await Authors.GetOwn(Session, chatId, CancellationToken.None);
        var rules = await Chats.GetRules(Session, chatId, cancellationToken).ConfigureAwait(false);
        // Default scheduler is used from here
        var сanReply = rules.CanWrite();

        return new Model {
            CanReply = сanReply,
            IsJoined = requestAuthor != null,
            IsEntryAuthor = requestAuthor != null && requestAuthor.Id == chatEntry.AuthorId,
        };
    }

    private void Reply(ChatEntry chatEntry)
        => ChatUI.ShowRelatedEntry(RelatedEntryKind.Reply, chatEntry.Id, focusOnEditor: true);

    private async Task CopyMessageLink(ChatEntry chatEntry) {
        var url = Links.Chat(chatEntry.Id).ToAbsolute(UrlMapper);
        await ClipboardUI.WriteText(url);
    }

    private async Task OnCopyLinkClick()
        => await ClipboardUI.WriteText(ClickedLinkUrl!);

    private Task Edit(ChatEntry chatEntry)
        => UIEventHub.Publish(new EditChatMessageEvent(chatEntry));

    public sealed record Model {
        public static readonly Model None = new();

        public bool IsJoined { get; init; }
        public bool IsEntryAuthor { get; init; }
        public bool CanReply { get; init; }
    }
}
