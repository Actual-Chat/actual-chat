@namespace ActualChat.Chat.UI.Blazor.Components
@using ActualChat.Chat.UI.Blazor.Events
@using System.Text
@{
    var e = ChatEntry;
    var hasSelection = SelectionUI.HasSelection.Value;
    var isSelected = SelectionUI.IsSelected(e.Id);
    var isForwarder = ChatEntry.ForwardedAuthorId.IsNone;
    var showPlayButton = ScreenSize.IsNarrow() && e.AudioEntryId != null && !hasSelection;
    var canDelete =
        this is { CanWrite: true, IsOwnEntry: true }
        && ChatEntry is { Kind: ChatEntryKind.Text, IsStreaming: false }
        && !hasSelection;
    var canEdit = canDelete && isForwarder;
    var messageLink = Links.Chat(e.Id).ToAbsolute(UrlMapper);
    var canReply = !e.IsStreaming && CanWrite && !IsSystem;
    var canCopyText = e is { Kind: ChatEntryKind.Text, IsStreaming: false } && !e.Content.IsNullOrEmpty();
    var canCopyLink = !ClickedLinkUrl.IsNullOrEmpty();
    var canCopyCode = !ClickedCode.IsNullOrEmpty();
    var canCopyMessageLink = !IsSystem;
    var canForward = !e.IsStreaming && !IsSystem && !hasSelection;
    // Selection
    var canSelect = !e.IsStreaming && !IsSystem && !isSelected;
    var canUnselect = isSelected;
}

<div class="message-menu">
    <ReactionSelect Entry="@e"/>
    @if (showPlayButton) {
        <MessageMenuPlay Entry="@e" IsMenu="true"/>
    }
    @if (canEdit) {
        <MenuEntry
            Icon="icon-edit"
            Class="important-item"
            FocusOnEditor="true"
            Text="Edit"
            Click="@(() => ChatEditorUI.Edit(e))">
        </MenuEntry>
    }
    @if (canReply) {
        <MenuEntry
            Icon="icon-reply"
            FocusOnEditor="true"
            Text="Reply"
            Click="@Reply">
        </MenuEntry>
    }
    @if (canCopyText) {
        <MenuEntry
            Icon="icon-copy"
            Text="Copy text"
            Click="@(() => SelectionUI.CopyToClipboard(e.Id))">
        </MenuEntry>
    }
    @if (canCopyLink) {
        <CopyTrigger Tooltip="" CopyText="@ClickedLinkUrl" Class="ac-menu-item !p-0">
            <MenuEntry
                Icon="icon-copy"
                Text="Copy link">
            </MenuEntry>
        </CopyTrigger>
    }
    @if (canCopyCode) {
        <CopyTrigger Tooltip="" CopyText="@ClickedCode?.Trim()" Class="ac-menu-item !p-0">
            <MenuEntry
                Icon="icon-copy"
                Text="Copy code">
            </MenuEntry>
        </CopyTrigger>
    }
    @if (canCopyMessageLink) {
        <CopyTrigger Tooltip="" CopyText="@messageLink" Class="ac-menu-item !p-0">
            <MenuEntry
                Icon="icon-link-2"
                Text="Copy message link">
            </MenuEntry>
        </CopyTrigger>
    }
    @if (canForward) {
        <MenuEntry
            Icon="icon-share"
            Text="Forward"
            Click="@(() => SelectionUI.Forward(e.Id))">
        </MenuEntry>
    }
    @if (canDelete) {
        <MenuEntry
            Class="warning-item"
            Icon="icon-trash03"
            Text="Delete message"
            Click="@(() => SelectionUI.Delete(e.Id))">
        </MenuEntry>
    }
    @if (canSelect || canUnselect) {
        <MenuEntrySeparator/>
    }
    @if (canUnselect) {
        <MenuEntry
            Icon="icon-copy"
            Text="Copy selection"
            Click="@(() => SelectionUI.CopyToClipboard())">
        </MenuEntry>
        <MenuEntry
            Icon="icon-share"
            Text="Forward selection"
            Click="@(() => SelectionUI.Forward())">
        </MenuEntry>
        <MenuEntry
            Icon="icon-trash03"
            Text="Clear selection"
            Click="@(() => SelectionUI.Clear())">
        </MenuEntry>
        <MenuEntrySeparator/>
        <MenuEntry
            Icon="icon-select"
            Text="Unselect"
            Click="@(() => SelectionUI.Unselect(e.Id))">
        </MenuEntry>
    }
    @if (canSelect) {
        <MenuEntry
            Icon="icon-select"
            Text="Select"
            Click="@(() => SelectionUI.Select(e.Id))">
        </MenuEntry>
    }
</div>

@code {
    [Inject] private Session Session { get; init; } = null!;
    [Inject] private IChats Chats { get; init; } = null!;
    [Inject] private ChatUI ChatUI { get; init; } = null!;
    [Inject] private ModalUI ModalUI { get; init; } = null!;
    [Inject] private ToastUI ToastUI { get; init; } = null!;
    [Inject] private SelectionUI SelectionUI { get; init; } = null!;
    [Inject] private ClipboardUI ClipboardUI { get; init; } = null!;
    [Inject] private ChatEditorUI ChatEditorUI { get; init; } = null!;
    [Inject] private UICommander UICommander { get; init; } = null!;
    [Inject] private UrlMapper UrlMapper { get; init; } = null!;
    [Inject] private History History { get; init; } = null!;

    [Parameter, EditorRequired] public ChatEntry ChatEntry { get; set; } = null!;
    [Parameter, EditorRequired] public string? ClickedLinkUrl { get; set; }
    [Parameter, EditorRequired] public string? ClickedCode { get; set; }
    [Parameter, EditorRequired] public bool IsSystem { get; set; }
    [Parameter, EditorRequired] public bool IsOwnEntry { get; set; }
    [Parameter, EditorRequired] public bool CanWrite { get; set; }

    [CascadingParameter] public ScreenSize ScreenSize { get; set; }

    private async Task<IReadOnlyCollection<ChatId>> SelectChats(ChatId chatId) {
        var modalModel = new ForwardMessageModal.Model(chatId);
        await (await ModalUI.Show(modalModel)).WhenClosed;
        return modalModel.SelectedChatIds;
    }

    private Task Reply()
        => ChatEditorUI.ShowRelatedEntry(RelatedEntryKind.Reply, ChatEntry.Id, focusOnEditor: true);
}
