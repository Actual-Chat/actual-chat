@namespace ActualChat.Chat.UI.Blazor.Components
@using BlazorContextMenu
@using ActualChat.Chat.UI.Blazor.Events
@inherits ComputedStateComponent<MessageMenuContent.Model>
@{
    var m = State.LatestNonErrorValue;
    var entry = ChatMessageModel.Entry;
}

<Item OnClick="@(() => { _ = FeedbackUI.AskFeatureRequestFeedback("reaction", "Reactions"); })" Class="context-menu-item">
    <div class="context-menu-content">
        <div class="context-menu-icon">
            <i class="icon-heart-fill text-xl"></i>
        </div>
        <div class="context-menu-text">
            Reaction
        </div>
    </div>
</Item>
@if (m.CanReply) {
    <Item OnClick="@(() => Reply(entry))" Class="context-menu-item">
        <div class="context-menu-content">
            <div class="context-menu-icon">
                <i class="icon-reply text-xl"></i>
            </div>
            <div class="context-menu-text">
                Reply
            </div>
        </div>
    </Item>
}
<Item OnClick="@(() => { _ = FeedbackUI.AskFeatureRequestFeedback("message-threads", "Message Threads"); })" Class="context-menu-item">
    <div class="context-menu-content">
        <div class="context-menu-icon">
            <i class="icon-hash-fill text-xl"></i>
        </div>
        <div class="context-menu-text">
            Create thread
        </div>
    </div>
</Item>
<Item OnClick="@(() => CopyLink(entry))" Class="context-menu-item">
    <div class="context-menu-content">
        <div class="context-menu-icon">
            <i class="icon-link-2 text-xl"></i>
        </div>
        <div class="context-menu-text">
            Copy link
        </div>
    </div>
</Item>
@if (m.IsJoined && m.IsEntryAuthor && !entry.IsStreaming && entry.StreamId.IsEmpty) {
    <Item OnClick="@(() => Edit(entry))" Class="context-menu-item">
        <div class="context-menu-content">
            <div class="context-menu-icon">
                <i class="icon-edit text-xl"></i>
            </div>
            <div class="context-menu-text">
                Edit
            </div>
        </div>
    </Item>
}
@if (m.IsJoined && m.IsEntryAuthor && !entry.IsStreaming) {
    <BlazorContextMenu.Separator/>

    <Item OnClick="@(() => ChatUI.ShowDeleteMessageModal(ChatMessageModel))" Class="context-menu-item warning-item">
        <div class="context-menu-content">
            <div class="context-menu-icon">
                <i class="icon-trash text-xl"></i>
            </div>
            <div class="context-menu-text">
                Delete message
            </div>
        </div>
    </Item>
}

@code{
    [Inject] private Session Session { get; init; } = null!;
    [Inject] private IChats Chats { get; init; } = null!;
    [Inject] private IChatAuthors ChatAuthors { get; init; } = null!;
    [Inject] private ChatUI ChatUI { get; init; } = null!;
    [Inject] private ClipboardUI ClipboardUI { get; init; } = null!;
    [Inject] private FeedbackUI FeedbackUI { get; init; } = null!;
    [Inject] private UIEventHub UIEventHub { get; init; } = null!;
    [Inject] private NavigationManager Nav { get; init; } = null!;

    [CascadingParameter] public ChatMessageModel ChatMessageModel { get; set; } = null!;

    protected override ComputedState<Model>.Options GetStateOptions() {
        return new ComputedState<Model>.Options {
            InitialValue = Model.None
        };
    }

    protected override async Task<Model> ComputeState(CancellationToken cancellationToken)
    {
        var chatEntry = ChatMessageModel.Entry;
        var chatId = chatEntry.ChatId;
        var requestAuthor = await ChatAuthors.Get(Session, chatId, CancellationToken.None);
        var rules = await Chats.GetRules(Session, chatId, cancellationToken).ConfigureAwait(false);
        // Default scheduler is used from here
        var сanReply = rules.CanWrite();

        return new Model {
            CanReply = сanReply,
            IsJoined = requestAuthor != null,
            IsEntryAuthor = requestAuthor != null && requestAuthor.Id == chatEntry.AuthorId
        };
    }

    private async Task Reply(ChatEntry chatEntry) {
        ChatUI.LinkedChatEntry.Value = new (ChatEntryLinkType.Reply, chatEntry);
        await UIEventHub.Publish<FocusChatMessageEditorEvent>();
    }

    private async Task CopyLink(ChatEntry chatEntry) {
        var url = $"{Nav.BaseUri}chat/{chatEntry.ChatId.Value}#{chatEntry.Id}";
        await ClipboardUI.WriteText(url);
    }

    private Task Edit(ChatEntry chatEntry) {
        return UIEventHub.Publish(new EditChatMessageEvent(chatEntry));
    }

    public sealed record Model {
        public static readonly Model None = new();

        public bool IsJoined { get; init; }
        public bool IsEntryAuthor { get; init; }
        public bool CanReply { get; init; }
    }
}
