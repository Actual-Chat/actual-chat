@namespace ActualChat.Chat.UI.Blazor.Components
@using ActualChat.Chat.UI.Blazor.Events

@{
    var entry = ChatEntry;
    var hasSelection = SelectionUI.HasSelection.Value;
    var showPlayButton = ScreenSize.IsNarrow() && entry.AudioEntryId != null && !hasSelection;
    var canEditOrDelete = this is { CanWrite: true, IsOwnEntry: true }
                          && ChatEntry is { Kind: ChatEntryKind.Text, IsStreaming: false }
                          && !hasSelection;
    var messageLink = Links.Chat(entry.Id).ToAbsolute(UrlMapper);
    var isSelected = SelectionUI.IsSelected(entry.Id);
    var canReply = CanWrite && !IsSystem && !isSelected;
    var canSelect = !IsSystem && !isSelected;
    var canUnselect = !IsSystem && isSelected;
    var canCopyText = entry.Kind == ChatEntryKind.Text && !entry.Content.IsNullOrEmpty();
    var canCopyLink = !ClickedLinkUrl.IsNullOrEmpty();
    var canCopyCode = !ClickedCode.IsNullOrEmpty();
    var canCopyMessageLink = !IsSystem;
    var canForward = !IsSystem && !hasSelection;
    var canForwardSelection = !IsSystem && isSelected && hasSelection;
}

<div class="message-menu">
    <ReactionSelect Entry="@entry"/>
    @if (showPlayButton) {
        <MessageMenuPlay Entry="@entry" IsMenu="true"/>
    }
    @if (canEditOrDelete) {
        <MenuEntry
            Icon="icon-edit"
            Class="important-item"
            FocusOnEditor="true"
            Text="Edit"
            Click="@(() => Edit(entry))">
        </MenuEntry>
    }
    @if (canReply) {
        <MenuEntry
            Icon="icon-reply"
            FocusOnEditor="true"
            Text="Reply"
            Click="@(() => Reply(entry))">
        </MenuEntry>
    }
    @if (canSelect) {
        <MenuEntry
            Icon="icon-select"
            Text="Select"
            Click="@(() => Select(entry))">
        </MenuEntry>
    }
    @if (canUnselect) {
        <MenuEntry
            Icon="icon-select"
            Text="Unselect"
            Click="@(() => Unselect(entry))">
        </MenuEntry>
    }
    @if (canCopyText) {
        <CopyTrigger Tooltip="" CopyText="@entry.Content" Class="ac-menu-item !p-0">
            <MenuEntry
                Icon="icon-copy"
                Text="Copy text">
            </MenuEntry>
        </CopyTrigger>
    }
    @if (canCopyLink) {
        <CopyTrigger Tooltip="" CopyText="@ClickedLinkUrl" Class="ac-menu-item !p-0">
            <MenuEntry
                Icon="icon-copy"
                Text="Copy link">
            </MenuEntry>
        </CopyTrigger>
    }
    @if (canCopyCode) {
        <CopyTrigger Tooltip="" CopyText="@ClickedCode?.Trim()" Class="ac-menu-item !p-0">
            <MenuEntry
                Icon="icon-copy"
                Text="Copy code">
            </MenuEntry>
        </CopyTrigger>
    }
    @if (canCopyMessageLink) {
        <CopyTrigger Tooltip="" CopyText="@messageLink" Class="ac-menu-item !p-0">
            <MenuEntry
                Icon="icon-link-2"
                Text="Copy message link">
            </MenuEntry>
        </CopyTrigger>
    }
    @if (canForward) {
        <MenuEntry
            Icon="icon-share"
            Text="Forward"
            Click="@(() => Forward(entry))">
        </MenuEntry>
    }
    @if (canForwardSelection) {
        <MenuEntry
            Icon="icon-share"
            Text="Forward selection"
            Click="@(() => ForwardSelection())">
        </MenuEntry>
    }
    @if (canEditOrDelete) {
        <MenuEntrySeparator />
        <MenuEntry
            Class="warning-item"
            Icon="icon-trash03"
            Text="Delete message"
            Click="@(() => ChatUI.ShowDeleteMessageModal(new ChatMessageModel(entry)))">
        </MenuEntry>
    }
</div>

@code{
    [Inject] private Session Session { get; init; } = null!;
    [Inject] private ChatEditorUI ChatEditorUI { get; init; } = null!;
    [Inject] private ChatUI ChatUI { get; init; } = null!;
    [Inject] private ModalUI ModalUI { get; init; } = null!;
    [Inject] private SelectionUI SelectionUI { get; init; } = null!;
    [Inject] private UrlMapper UrlMapper { get; init; } = null!;
    [Inject] private UICommander UICommander { get; init; } = null!;
    [Inject] private History History { get; init; } = null!;

    [Parameter, EditorRequired] public ChatEntry ChatEntry { get; set; } = null!;
    [Parameter, EditorRequired] public string? ClickedLinkUrl { get; set; }
    [Parameter, EditorRequired] public string? ClickedCode { get; set; }
    [Parameter, EditorRequired] public bool IsSystem { get; set; }
    [Parameter, EditorRequired] public bool IsOwnEntry { get; set; }
    [Parameter, EditorRequired] public bool CanWrite { get; set; }

    [CascadingParameter] public ScreenSize ScreenSize { get; set; }

    private Task Reply(ChatEntry chatEntry)
        => ChatEditorUI.ShowRelatedEntry(RelatedEntryKind.Reply, chatEntry.Id, focusOnEditor: true);

    private Task Edit(ChatEntry chatEntry)
        => ChatEditorUI.Edit(chatEntry);

    private async Task Select(ChatEntry chatEntry)
        => await SelectionUI.Select(chatEntry.Id);

    private void Unselect(ChatEntry chatEntry)
        => SelectionUI.Unselect(chatEntry.Id);

    private async Task Forward(ChatEntry chatEntry) {
        var chatId = chatEntry.ChatId;
        var selectedChats = await SelectChats(chatId);
        if (!selectedChats.Any())
            return;

        var cmd = new Chats_ForwardTextEntries(
            Session,
            chatId,
            new ApiArray<ChatEntryId>(chatEntry.Id),
            selectedChats.ToApiArray());
        await UICommander.Run(cmd, CancellationToken.None);

        if (selectedChats.Count == 1)
            _ = History.NavigateTo(Links.Chat(selectedChats.First()));
    }

    private async Task ForwardSelection() {
        var selection = SelectionUI.Selection.Value.ToApiArray();
        var chatId = selection.First().ChatId;
        var selectedChats = await SelectChats(chatId);
        if (!selectedChats.Any()) {
            return;
        }

        var cmd = new Chats_ForwardTextEntries(
            Session,
            chatId,
            selection,
            selectedChats.ToApiArray());
        await UICommander.Run(cmd, CancellationToken.None);

        SelectionUI.Clear();

        if (selectedChats.Count == 1)
            _ = History.NavigateTo(Links.Chat(selectedChats.First()));
    }

    private async Task<IReadOnlyCollection<ChatId>> SelectChats(ChatId chatId)
    {
        IReadOnlyCollection<ChatId> selectedChats = Array.Empty<ChatId>();
        var modal = await ModalUI.Show(new ForwardMessageModal.Model(
            new [] { chatId },
            chats => {
                selectedChats = chats;
            }));
        await modal.WhenClosed;
        return selectedChats;
    }
}
