@namespace ActualChat.Chat.UI.Blazor.Components
@using ActualChat.Chat.UI.Blazor.Events
@inherits ComputedStateComponent<MessageMenuContent.Model>
@{
    var m = State.LatestNonErrorValue;
    var entry = ChatMessageModel.Entry;
    var showPlayButton = ScreenSize.IsNarrow() && entry.AudioEntryId != null;
}

<div class="message-menu">
    <ReactionSelect ChatEntry="@entry"/>
    @if (showPlayButton) {
        <MessageMenuPlay Entry="@entry" IsMenu="true"/>
    }
    @if (m.IsJoined && m.IsEntryAuthor && !entry.IsStreaming && entry.StreamId.IsEmpty) {
        <MenuEntry
            OnClick="@(() => Edit(entry))"
            Icon="icon-edit"
            Class="important-item"
            TriggerEditor="true"
            Text="Edit">
        </MenuEntry>
    }
    @if (m.CanReply) {
        <MenuEntry
            OnClick="@(() => Reply(entry))"
            Icon="icon-reply"
            TriggerEditor="true"
            Text="Reply">
        </MenuEntry>
    }
    <MenuEntry
        OnClick="@(() => { _ = FeedbackUI.AskFeatureRequestFeedback("message-threads", "Message Threads"); })"
        Icon="icon-hash-fill"
        Text="Create thread">
    </MenuEntry>
    @if (!ClickedLinkUrl.IsNullOrEmpty()) {
        <MenuEntry
            OnClick="@OnCopyLinkClick"
            Icon="icon-link-2"
            Text="Copy link">
        </MenuEntry>
    }
    <MenuEntry
        OnClick="@(() => CopyMessageLink(entry))"
        Icon="icon-link-2"
        Text="Copy message link">
    </MenuEntry>
    @if (m.IsJoined && m.IsEntryAuthor && !entry.IsStreaming) {
        <MenuEntrySeparator />
        <MenuEntry
            OnClick="@(() => ChatUI.ShowDeleteMessageModal(new ChatMessageModel(entry)))"
            Class="warning-item"
            Icon="icon-trash"
            Text="Delete message">
        </MenuEntry>
    }
</div>

@code{
    [Inject] private Session Session { get; init; } = null!;
    [Inject] private IChats Chats { get; init; } = null!;
    [Inject] private IAuthors Authors { get; init; } = null!;
    [Inject] private ChatUI ChatUI { get; init; } = null!;
    [Inject] private ClipboardUI ClipboardUI { get; init; } = null!;
    [Inject] private FeedbackUI FeedbackUI { get; init; } = null!;
    [Inject] private UIEventHub UIEventHub { get; init; } = null!;
    [Inject] private NavigationManager Nav { get; init; } = null!;

    [Parameter, EditorRequired] public ChatMessageModel ChatMessageModel { get; set; } = null!;
    [Parameter] public string? ClickedLinkUrl { get; set; }
    [CascadingParameter] public ScreenSize ScreenSize { get; set; }

    protected override ComputedState<Model>.Options GetStateOptions() {
        return new ComputedState<Model>.Options {
            InitialValue = Model.None,
        };
    }

    protected override async Task<Model> ComputeState(CancellationToken cancellationToken)
    {
        var chatEntry = ChatMessageModel.Entry;
        var chatId = chatEntry.ChatId;
        var requestAuthor = await Authors.GetOwn(Session, chatId, CancellationToken.None);
        var rules = await Chats.GetRules(Session, chatId, cancellationToken).ConfigureAwait(false);
        // Default scheduler is used from here
        var сanReply = rules.CanWrite();

        return new Model {
            CanReply = сanReply,
            IsJoined = requestAuthor != null,
            IsEntryAuthor = requestAuthor != null && requestAuthor.Id == chatEntry.AuthorId
        };
    }

    private async Task Reply(ChatEntry chatEntry) {
        ChatUI.LinkedChatEntry.Value = new (ChatEntryLinkType.Reply, chatEntry);
        await UIEventHub.Publish<FocusChatMessageEditorEvent>();
    }

    private async Task CopyMessageLink(ChatEntry chatEntry) {
        var url = $"{Nav.BaseUri}chat/{chatEntry.ChatId.Value}#{chatEntry.Id}";
        await ClipboardUI.WriteText(url);
    }

    private async Task OnCopyLinkClick()
        => await ClipboardUI.WriteText(ClickedLinkUrl!);

    private Task Edit(ChatEntry chatEntry)
        => UIEventHub.Publish(new EditChatMessageEvent(chatEntry));

    public sealed record Model {
        public static readonly Model None = new();

        public bool IsJoined { get; init; }
        public bool IsEntryAuthor { get; init; }
        public bool CanReply { get; init; }
    }
}
