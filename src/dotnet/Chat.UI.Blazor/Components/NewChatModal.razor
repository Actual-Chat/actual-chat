@using System.ComponentModel.DataAnnotations

<EditForm Model="@_model" OnValidSubmit="@OnCreate">
    <DataAnnotationsValidator/>
    <DialogLayout Class="new-chat-modal">
        <Body>
        <div class="flex-y">
            <label for="Title" class="block text-sm font-medium text-secondary">Chat title</label>
            <TextBox @bind-Value="@_model.Title" id="Title" tabIndex="1" Autofocus="true"
                     class="input-underlined mt-1 text-primary focus:outline-none"/>
        </div>
        </Body>
        <Buttons>
            <Button Type="ButtonType.Submit" class="btn-success" Disabled="@(!context.Validate())">Create</Button>
            <Button Type="ButtonType.Button" OnClick="OnCancel" class="btn-primary">Cancel</Button>
        </Buttons>
    </DialogLayout>
</EditForm>

@code {
    private readonly Model _model = new();

    [Inject] private Session Session { get; init; } = null!;
    [Inject] private UICommandRunner Cmd { get; init; } = null!;
    [Inject] private NavigationManager Nav { get; init; } = null!;
    [CascadingParameter] BlazoredModalInstance ModalInstance { get; set; } = null!;

    private async Task OnCreate()
    {
        var command = new IChats.CreateChatCommand(Session, _model.Title) { IsPublic = true };
        var result = await Cmd.Run(command, default);
        if (!result.CommandEvent.IsCompletedSuccessfully)
            return;
        await ModalInstance.CancelAsync();
        var chatId = result.Result.Id;
        Nav.NavigateTo($"/chat/{chatId}");
    }

    private void OnCancel()
        => ModalInstance.CancelAsync();

    public class Model
    {
        [Required]
        public string Title { get; set; } = "";
    }
}
