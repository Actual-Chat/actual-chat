@using System.ComponentModel.DataAnnotations
@using Stl.Extensibility
@implements IModalView<NewChatModal.Model>
@attribute [MatchFor(typeof(Model), typeof(IModalView))]

<EditForm Model="@_editModel" OnValidSubmit="@OnCreate">
    <DataAnnotationsValidator/>
    <DialogFrame Title="Create Chat">
        <Body>
            <div class="flex-y">
                <label for="Title" class="block text-sm font-medium text-secondary">Chat title</label>
                <TextBox @bind-Value="@_editModel.Title" id="Title" tabIndex="1" Autofocus="true"
                         class="input-underlined mt-1 text-primary focus:outline-none"/>
            </div>
        </Body>
        <Buttons>
            <Button Type="ButtonType.Button" Click="OnCancel" class="btn-primary">Cancel</Button>
            <Button Type="ButtonType.Submit" class="btn-success" Disabled="@(!context.Validate())">Create</Button>
        </Buttons>
    </DialogFrame>
</EditForm>

@code {
    private readonly EditModel _editModel = new();

    [Inject] private Session Session { get; init; } = null!;
    [Inject] private UICommandRunner Cmd { get; init; } = null!;
    [Inject] private NavigationManager Nav { get; init; } = null!;
    [CascadingParameter] BlazoredModalInstance ModalInstance { get; set; } = null!;
    [Parameter] public Model ModalModel { get; set; } = null!;

    private async Task OnCreate()
    {
        var command = new IChats.CreateChatCommand(Session, _editModel.Title) { IsPublic = true };
        var result = await Cmd.Run(command, default);
        if (!result.CommandEvent.IsCompletedSuccessfully)
            return;
        await ModalInstance.CancelAsync();
        var chatId = result.Result.Id;
        Nav.NavigateTo($"/chat/{chatId}");
    }

    private void OnCancel()
        => ModalInstance.CancelAsync();

    public class EditModel
    {
        [Required]
        public string Title { get; set; } = "";
    }

    public sealed record Model;
}
