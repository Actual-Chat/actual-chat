@using Stl.Extensibility
@using ActualChat.Contacts
@implements IModalView<AuthorModal.Model>
@attribute [MatchFor(typeof(Model), typeof(IModalView))]
@inherits ComputedStateComponent<AuthorModal.ComputedModel>
@{
    var m = State.Value;
    var title = $"Author: {m.Author.Avatar.Name}";
}

<DialogFrame Title="@title">
    <Body>
    <div class="flex-x items-center gap-x-3">
        <AuthorCircle AuthorSid="@AuthorId" Size="SquareSize.Size12" ShowPresence="true" ShowRecording="true"/>
        <AuthorName AuthorSid="@AuthorId" Class="text-02 font-semibold text-lg" ShowDetailsOnClick="false"/>
    </div>
    <div>
        @if (m.IsOwn) {
            <span>It's you.</span>
        }
    </div>
    </Body>
    <Buttons>
        <Button Class="btn-primary" Click="@(_ => Modal.Close())">Close</Button>
    </Buttons>
</DialogFrame>

@code {
    [Inject] private Session Session { get; init; } = null!;
    [Inject] private IAccounts Accounts { get; init; } = null!;
    [Inject] private IAuthors Authors { get; init; } = null!;

    private AuthorId AuthorId => ModalModel.AuthorId;  // Shortcut
    private ChatId ChatId => AuthorId.ChatId; // Shortcut

    [CascadingParameter] public Modal Modal { get; set; } = null!;
    [Parameter] public Model ModalModel { get; set; } = null!;

    protected override ComputedState<ComputedModel>.Options GetStateOptions()
        => new() {
            InitialValue = ComputedModel.Loading,
            Category = GetStateCategory(),
        };

    protected override async Task<ComputedModel> ComputeState(CancellationToken cancellationToken) {
        if (AuthorId.IsNone)
            return ComputedModel.None;

        var chatId = AuthorId.ChatId;
        var author = await Authors.Get(Session, chatId, AuthorId, cancellationToken);
        if (author == null)
            return ComputedModel.None;

        var ownAccount = await Accounts.GetOwn(Session, cancellationToken);
        var account = await Authors.GetAccount(Session, ChatId, AuthorId, cancellationToken);
        return new ComputedModel() {
            Author = author,
            Account = account,
            OwnAccount = ownAccount,
        };
    }

    public sealed record ComputedModel {
        public static ComputedModel None { get; } = new() { Author = Author.None, OwnAccount = AccountFull.None };
        public static ComputedModel Loading { get; } = new() { Author = Author.Loading, OwnAccount = AccountFull.Loading }; // Should differ by ref. from None

        public Author Author { get; init; } = null!;
        public Account? Account { get; init; }
        public Account OwnAccount { get; init; } = null!;
        public bool IsOwn => Account?.Id == OwnAccount.Id;
    }

    public sealed record Model(AuthorId AuthorId);
}
