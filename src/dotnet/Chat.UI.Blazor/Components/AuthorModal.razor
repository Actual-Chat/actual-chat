@using Stl.Extensibility
@using ActualChat.Contacts
@implements IModalView<AuthorModal.Model>
@attribute [MatchFor(typeof(Model), typeof(IModalView))]
@inherits ComputedStateComponent<AuthorModal.ComputedModel>
@{
    var m = State.LatestNonErrorValue;
    var title = $"User: {m.Author.Avatar.Name}";
}

<DialogFrame Title="@title">
    <Body>
        <div class="flex-x items-center gap-x-3">
            <AuthorCircle Id="@AuthorId" Size="SquareSize.Size12" ShowsPresence="true" ShowsRecording="true"/>
            <AuthorName Id="@AuthorId" Class="text-02 font-semibold text-lg" EnableDetailsPopup="false" />
        </div>
    </Body>
    <Buttons>
        <div class="btn-group">
            @if (m.CanAddContact) {
                <Button Class="btn-primary" Click="OnAddContactClick" IsDisabled="@IsAddingContact">Add to Contacts</Button>
            }
            @if (m.CanPeerChat) {
                <Button Class="btn-primary" Click="OnSendMessageClick">Send Message</Button>
            }
        </div>
    </Buttons>
</DialogFrame>

@code {
    [Inject] private Session Session { get; init; } = null!;
    [Inject] private IAccounts Accounts { get; init; } = null!;
    [Inject] private IAuthors Authors { get; init; } = null!;
    [Inject] private IContacts Contacts { get; init; } = null!;
    [Inject] private NavigationManager Nav { get; init; } = null!;
    [Inject] private UICommander UICommander { get; init; } = null!;

    private bool IsAddingContact { get; set; }
    private AuthorId AuthorId => ModalModel.AuthorId;  // Shortcut
    private ChatId ChatId => AuthorId.ChatId; // Shortcut

    [CascadingParameter] public BlazoredModalInstance ModalInstance { get; set; } = null!;
    [Parameter] public Model ModalModel { get; set; } = null!;

    protected override ComputedState<ComputedModel>.Options GetStateOptions()
        => new() { InitialValue = ComputedModel.Loading };

    protected override async Task<ComputedModel> ComputeState(CancellationToken cancellationToken) {
        if (AuthorId.IsEmpty)
            return ComputedModel.None;

        var chatId = AuthorId.ChatId;
        var author = await Authors.Get(Session, chatId, AuthorId, cancellationToken);
        if (author == null)
            return ComputedModel.None;

        var ownAccount = await Accounts.GetOwn(Session, default);
        var account = await Authors.GetAccount(Session, ChatId, AuthorId, default);
        if (account == null)
            return new ComputedModel() {
                Author = author,
                OwnAccount = ownAccount,
            };

        var peerChatId = new PeerChatId(ownAccount.Id, account.Id);
        var contactId = new ContactId(ownAccount.Id, peerChatId, ParseOptions.Skip);
        var contactIds = await Contacts.ListIds(Session, default).ConfigureAwait(false);
        var canAddContact = !contactIds.Any(id => id == contactId);
        return new ComputedModel() {
            Author = author,
            Account = account,
            OwnAccount = ownAccount,
            ContactId = contactId,
            CanAddContact = canAddContact,
        };
    }

    private async Task OnAddContactClick() {
        if (IsAddingContact)
            return;
        IsAddingContact = true;
        StateHasChanged();
        try {
            var m = State.LatestNonErrorValue;
            if (m.ContactId.IsEmpty)
                return;

            var command = new IContacts.ChangeCommand(Session, m.ContactId, null, new Change<Contact>() {
                Create = new Contact(m.ContactId),
            });
            await UICommander.Run(command);
        }
        finally {
            IsAddingContact = false;
            await ModalInstance.CloseAsync();
            StateHasChanged();
        }

    }

    private void OnSendMessageClick() {
        var m = State.LatestNonErrorValue;
        if (m.ContactId.IsEmpty || m.OwnAccount == null)
            return;

        Nav.NavigateTo(Links.ChatPage(m.ContactId.ChatId));
    }

    public sealed record ComputedModel {
        public static ComputedModel None { get; } = new() { Author = Author.None };
        public static ComputedModel Loading { get; } = new() { Author = Author.Loading }; // Should differ by ref. from None

        public Author Author { get; init; } = null!;
        public Account? Account { get; init; }
        public Account? OwnAccount { get; init; }
        public ContactId ContactId { get; init; }

        public bool CanPeerChat => Account != null;
        public bool CanAddContact { get; init; }
    }

    public sealed record Model(AuthorId AuthorId);
}
