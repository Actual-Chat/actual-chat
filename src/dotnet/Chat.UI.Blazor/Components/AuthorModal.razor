@using Stl.Extensibility
@using ActualChat.Contacts
@implements IModalView<AuthorModal.Model>
@attribute [MatchFor(typeof(Model), typeof(IModalView))]
@inherits ComputedStateComponent<AuthorModal.ComputedModel>
@{
    var m = State.Value;
    var title = m.IsOwn ? "Your profile" : $"{m.Author.Avatar.Name}";
    var onClick = m.IsOwn
        ? EventCallback.Factory.Create<MouseEventArgs>(this, OnAuthorClicked)
        : EventCallback<MouseEventArgs>.Empty;
}

<DialogFrame Title="@title" Class="author-modal" HasHeader="false">
    <Body>
        <AuthorModalContent AuthorSid="@AuthorId" Author="@m.Author" IsOwn="@m.IsOwn"/>
    </Body>
</DialogFrame>

@code {
    [Inject] private Session Session { get; init; } = null!;
    [Inject] private IAccounts Accounts { get; init; } = null!;
    [Inject] private IAuthors Authors { get; init; } = null!;
    [Inject] private ModalUI ModalUI { get; init; } = null!;
    [Inject] private UICommander UICommander { get; init; } = null!;

    private AuthorId AuthorId => ModalModel.AuthorId;  // Shortcut
    private ChatId ChatId => AuthorId.ChatId; // Shortcut

    [CascadingParameter] public Modal Modal { get; set; } = null!;
    [Parameter] public Model ModalModel { get; set; } = null!;

    protected override ComputedState<ComputedModel>.Options GetStateOptions()
        => new() {
            InitialValue = ComputedModel.Loading,
            Category = GetStateCategory(),
        };

    protected override async Task<ComputedModel> ComputeState(CancellationToken cancellationToken) {
        if (AuthorId.IsNone)
            return ComputedModel.None;

        var chatId = AuthorId.ChatId;
        var author = await Authors.Get(Session, chatId, AuthorId, cancellationToken);
        if (author == null)
            return ComputedModel.None;

        var ownAccount = await Accounts.GetOwn(Session, cancellationToken);
        var account = await Authors.GetAccount(Session, ChatId, AuthorId, cancellationToken);
        return new ComputedModel() {
            Author = author,
            Account = account,
            OwnAccount = ownAccount,
        };
    }

    public sealed record ComputedModel {
        public static ComputedModel None { get; } = new() { Author = Author.None, OwnAccount = AccountFull.None };
        public static ComputedModel Loading { get; } = new() { Author = Author.Loading, OwnAccount = AccountFull.Loading }; // Should differ by ref. from None

        public Author Author { get; init; } = null!;
        public Account? Account { get; init; }
        public Account OwnAccount { get; init; } = null!;
        public bool IsOwn => Account?.Id == OwnAccount.Id;
    }

    public sealed record Model(AuthorId AuthorId);

    private async Task OnAuthorClicked()
        => await ModalUI.Show(new AvatarSelectModal.Model(AuthorId.ChatId, OnAvatarSelected));

    private async Task OnAvatarSelected(AvatarFull avatar) {
        var command = new IAuthors.SetAvatarCommand(Session, AuthorId.ChatId, avatar.Id);
        await UICommander.Run(command);
    }
}
