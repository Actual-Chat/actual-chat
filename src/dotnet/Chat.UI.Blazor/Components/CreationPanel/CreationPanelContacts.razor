@namespace ActualChat.Chat.UI.Blazor.Components
@using ActualChat.Contacts
@{
    if (_oldPageNumber != PageNumber) {
        SearchBox.Cancel();
        _oldPageNumber = PageNumber;
    }

    var panelHeaderCls = "overflow-y-hidden";
    var countCls = "hidden";
    var onlySelected = false;
    if (PageNumber != 1) {
        panelHeaderCls += " hide-header";
    }
    if (PageNumber == 3) {
        countCls = "";
        onlySelected = true;
    }
    var disableLink = PageNumber != 1;
    var count = SelectedContacts.Length;

    RenderFragment RenderTab(string id, string title) =>
        @<Tab
             @key="@id"
             Id="@id"
             Title="@title"
             Class="flex-y self-start relative overflow-y-auto custom-scrollbar h-full contacts-tab">
            <div class="h-full flex-y">
                @foreach (var contact in ListContacts(onlySelected)) {
                    var isSelected = SelectedContacts.Contains(contact);
                    <CreationPanelContactItem
                        @key="contact"
                        Contact="@contact"
                        IsSelected="@isSelected"
                        DisableLink="@disableLink"
                        PageNumber="@PageNumber"
                        OnSelect="@(() => OnAddContact.InvokeAsync(contact))"/>
                }
            </div>
        </Tab>;
}

<div class="creation-contacts">
    <TabPanel
        BottomHill="true"
        Class="@panelHeaderCls"
        TabsClass="left-panel-tabs">

        @RenderTab("", "Recent")
    </TabPanel>
    <div class="font-medium px-4 mb-4 @countCls">
        @(count > 1 ? $"{count} Members" : $"{count} Member")
    </div>

    @if (PageNumber != 3) {
        <SearchBox
            @ref="SearchBox"
            Class="mt-1"
            Placeholder="Type the username"
            MaxLength="@Constants.Chat.MaxSearchFilterLength"
            TextChanged="@OnFilter"/>
    }
</div>

@code{
    private int _oldPageNumber = 1;

    [Inject] private Session Session { get; init; } = null!;
    [Inject] private IAccounts Accounts { get; init; } = null!;
    [Inject] private IContacts Contacts { get; init; } = null!;
    [Inject] private ChatUI ChatUI { get; init; } = null!;
    [Inject] private SearchUI SearchUI { get; init; } = null!;

    [Parameter] public int PageNumber { get; set; }
    [Parameter] public bool ShowOnlySelected { get; set; }
    [Parameter] public Contact[] AllContacts { get; set; } = null!;
    [Parameter] public Contact[] FilteredContacts { get; set; } = null!;
    [Parameter] public Contact[] SelectedContacts { get; set; } = null!;
    [Parameter] public EventCallback<Contact> OnAddContact { get; set; }
    [Parameter] public SearchBox SearchBox { get; set; } = null!;

    private List<Contact> ListContacts(bool onlySelected) {
        var contacts = onlySelected ? SelectedContacts : FilteredContacts;
        return contacts.OrderByDescending(c => c.TouchedAt).ToList();
    }

    private void AddContactToSelected(Contact selectedContact) {
        var selectedContacts = SelectedContacts.ToList();
        if (selectedContacts.Contains(selectedContact)) {
            selectedContacts.Remove(selectedContact);
        } else {
            selectedContacts.Add(selectedContact);
        }
        SelectedContacts = selectedContacts.ToArray();
        StateHasChanged();
    }

    private void OnFilter(string filter) {
        FilteredContacts = string.IsNullOrWhiteSpace(filter)
            ? AllContacts.ToArray()
            : AllContacts
                .Where(x => x.Account != null && x.Account.Avatar.Name.OrdinalIgnoreCaseContains(filter))
                .ToArray();
    }
}
