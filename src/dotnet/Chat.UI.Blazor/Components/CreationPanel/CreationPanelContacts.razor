@namespace ActualChat.Chat.UI.Blazor.Components
@using ActualChat.Contacts

@{
    var panelHeaderCls = "overflow-y-hidden";
    var countCls = "hidden";
    var onlySelected = false;
    if (PageNumber != 1) {
        panelHeaderCls += " hide-header";
    }
    if (PageNumber == 3) {
        countCls = "";
        onlySelected = true;
    }
    bool disableLink = PageNumber != 1;
    var count = SelectedContacts.Length;

    RenderFragment RenderTab(TabId tabId, string title) =>
        @<Tab
             Title="@title" Id="@tabId.ToString()"
             Class="flex-y self-start relative overflow-y-auto custom-scrollbar h-full contacts-tab">
                <div class="h-full flex-y">
                    @foreach (var contact in ListContacts(tabId, onlySelected)) {
                        var isSelected = SelectedContacts.Contains(contact);
                        <CreationPanelContactItem
                            @key="contact"
                            Contact="@contact"
                            IsSelected="@isSelected"
                            DisableLink="@disableLink"
                            PageNumber="@PageNumber"
                            OnSelect="@(() => OnAddContact.InvokeAsync(contact))"/>
                    }
                </div>
        </Tab>;
}

<div class="-flex-y w-full h-full overflow-y-auto">
    <TabPanel
        BottomHill="true"
        Class="@panelHeaderCls"
        TabsClass="left-panel-tabs">

        @RenderTab(TabId.Recent, "Recent")
        @RenderTab(TabId.All, "A-Z")
        @* @RenderTab(ContactTab.Favorites, "Favorites") *@
    </TabPanel>
    <div class="font-medium px-4 @countCls">
        @(count > 1 ? $"{count} Members" : $"{count} Member")
    </div>
</div>

@code{
    [Inject] private Session Session { get; init; } = null!;
    [Inject] private IAccounts Accounts { get; init; } = null!;
    [Inject] private IContacts Contacts { get; init; } = null!;
    [Inject] private ChatUI ChatUI { get; init; } = null!;
    [Inject] private SearchUI SearchUI { get; init; } = null!;

    [Parameter] public int PageNumber { get; set; }
    [Parameter] public bool ShowOnlySelected { get; set; }
    [Parameter] public Contact[] AllContacts { get; set; } = null!;
    [Parameter] public Contact[] SelectedContacts { get; set; } = null!;
    [Parameter] public EventCallback<Contact> OnAddContact { get; set; }

    private List<Contact> ListContacts(TabId tabId, bool onlySelected) {
        var contacts = onlySelected ? SelectedContacts : AllContacts;
        return tabId switch {
            TabId.All => contacts.OrderBy(c => c.Account!.Avatar.Name).ToList(),
            TabId.Recent => contacts.OrderByDescending(c => c.TouchedAt).ToList(),
            _ => throw new ArgumentOutOfRangeException(nameof(tabId)),
        };
    }

    public enum TabId {
        Recent,
        All,
    }

    private void AddContactToSelected(Contact selectedContact) {
        var selectedContacts = SelectedContacts.ToList();
        if (selectedContacts.Contains(selectedContact)) {
            selectedContacts.Remove(selectedContact);
        } else {
            selectedContacts.Add(selectedContact);
        }
        SelectedContacts = selectedContacts.ToArray();
        StateHasChanged();
    }
}
