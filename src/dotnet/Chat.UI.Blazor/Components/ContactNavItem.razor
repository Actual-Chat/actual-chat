@inherits ComputedStateComponent<ContactNavItem.Model>
@using ActualChat.UI.Blazor.Components.Tooltip
@{
    var m = State.ValueOrDefault;
    if (m is null)
        return;
    var isVisibleMenu = m.IsListening || m.IsRecording;
    var cls = isVisibleMenu ? "visible-menu" : "invisible-menu";
}

<NavbarItem
     Url="@($"/chat/{m.ShortChatId.UrlEncode()}")"
     IsOnline="@m.IsOnline"
     IsActive="@m.IsActive">
    <ChildContent>
        <div class="flex-x items-center gap-x-2">
            <UserAuthorCircle UserId="@Contact.TargetUserId" ShowsPresence="true"/>
            <div>
                <FoundText Text="@Contact.Name"/>
            </div>
        </div>
    </ChildContent>
    <Ending>
        <div class="@cls">
            <ChatListListenToggle ChatId="@m.FullChatId" Class="chat-menu-btn blackout"/>
            <ChatListRecordingToggle ChatId="@m.FullChatId" Class="chat-menu-btn blackout"/>
            <ContextMenuToggleTrigger MenuId="@ContactMenu.MenuId" Data="@Contact">
                <div class="flex">
                    <Tooltip
                        Text="More"
                        Position="TooltipPosition.Top">
                        <ButtonRound Class="chat-menu-btn blackout"
                                     BackRef="@context">
                            <i class="icon-more-vertical text-2xl"></i>
                        </ButtonRound>
                    </Tooltip>
                    <div class="absolute -right-6">
                        <div class="placement -mt-2">
                        </div>
                    </div>
                </div>
            </ContextMenuToggleTrigger>
        </div>
    </Ending>
</NavbarItem>

@code {
    [Inject] private ChatUI ChatUI { get; init; } = null!;
    [Inject] private IUserPresences UserPresences { get; init; } = null!;

    [Parameter, EditorRequired] public UserContact Contact { get; set; } = null!;

    protected override async Task<Model> ComputeState(CancellationToken cancellationToken) {
        var presenceTask = UserPresences.Get(Contact.TargetUserId, cancellationToken);
        var activeChatIdTask = ChatUI.ActiveChatId.Use(cancellationToken);
        var listeningChatIdsTask = ChatUI.ListeningChatIds.Use(cancellationToken);
        var recordingChatIdsTask = ChatUI.RecordingChatId.Use(cancellationToken);

        var presence = await presenceTask.ConfigureAwait(false);
        var activeChatId = await activeChatIdTask.ConfigureAwait(false);
        var fullChatId = ParsedChatId.FormatFullPeerChatId(Contact.OwnerUserId, Contact.TargetUserId);
        var shortChatId = ParsedChatId.FormatShortPeerChatId(Contact.TargetUserId);

        var isOnline = presence is Presence.Online or Presence.Recording;
        var isActive = activeChatId == fullChatId;
        var listeningChatIds = await listeningChatIdsTask.ConfigureAwait(false);
        var isListening = listeningChatIds.Contains(fullChatId);
        var isRecording = await recordingChatIdsTask.ConfigureAwait(false) == fullChatId;

        return new(
            fullChatId,
            shortChatId,
            isActive,
            isOnline,
            isListening,
            isRecording);
    }

    public record Model(
        string FullChatId,
        string ShortChatId,
        bool IsActive,
        bool IsOnline,
        bool IsListening,
        bool IsRecording);
}
