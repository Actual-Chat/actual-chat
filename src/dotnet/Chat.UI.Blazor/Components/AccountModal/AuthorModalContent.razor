@using ActualChat.Users.UI.Blazor
@namespace ActualChat.Chat.UI.Blazor.Components

<Tile>
    <TileItem IsHoverable="false" Class="first-tile-item my-2">
        <Icon>
            @if (Author.IsAnonymous) {
                <AnonymousIcon Class="w-14 h-14"></AnonymousIcon>
            } else {
                <AuthorCircle AuthorSid="@Author.Id" Size="SquareSize.Size14" ShowPresence="true" ShowRecording="true"/>
            }
        </Icon>
        <Right>
        </Right>
        <Content>
            @if (Author.IsAnonymous) {
                <span class="avatar-name truncate font-medium text-title-1 text-01">
                    Anonymous
                </span>
            } else {
                <AuthorName AuthorSid="@Author.Id" Class="text-01 font-medium text-title-1" ShowDetailsOnClick="false"/>
            }
        </Content>
        <Caption>
            @(Author.IsAnonymous ? "" : "Name")
        </Caption>
    </TileItem>

    @if (Author.IsAnonymous) {
        <TileItem>
            <Icon>
                <i class="icon-at text-xl"></i>
            </Icon>
            <Content>
                @Author.Avatar.Name
            </Content>
            <Caption>
                Username
            </Caption>
        </TileItem>
    }

    @if (!IsOwn && Author.IsAnonymous) {
        <TileItem Class="anonymous-bio">
            <Icon>
                <i class="icon-alert-triangle text-xl"></i>
            </Icon>
            <Content>
                This author is anonymous,
                so you can't message them directly.
            </Content>
            <Caption>
            </Caption>
        </TileItem>
    }

    @if (!Author.IsAnonymous) {
        <div @onclick="@(() => _ = OnShareClick())">
            <TileItem Class="tile-item-share">
                <Icon>
                    <i class="icon-share text-xl"></i>
                </Icon>
                <Content>
                    Share
                </Content>
            </TileItem>
        </div>
    }

    @{ var m = EditMemberModel; }

    @if (m != null && (m.CanPromoteToOwner|| m.CanRemoveFromGroup)) {
        <div class="separator"></div>
    }

    @if (m is { CanPromoteToOwner: true }) {
        <TileItem Class="tile-promote-to-owner" Click="@OnPromoteToOwner">
            <Icon>
                <i class="icon-star text-xl"></i>
            </Icon>
            <Content>
                Promote to Owner
            </Content>
            <Caption>
                Owners can do anything with this chat, including deleting it. This action cannot be undone.
            </Caption>
        </TileItem>
    }

    @if (m is { CanRemoveFromGroup: true }) {
        <TileItem Class="tile-remove-from-group" Click="@OnRemoveFromGroupClick">
            <Icon>
                <i class="icon-minus-circle text-xl"></i>
            </Icon>
            <Content>
                Remove from group
            </Content>
        </TileItem>
    }
</Tile>

@code {

    [Inject] private ChatHub ChatHub { get; set; } = null!;
    private Session Session => ChatHub.Session;
    private IAuthors Authors => ChatHub.Authors;
    private ShareUI ShareUI => ChatHub.ShareUI;

    [CascadingParameter] public Modal Modal { get; set; } = null!;
    [Parameter, EditorRequired] public Author Author { get; set; } = null!;
    [Parameter, EditorRequired] public bool IsOwn { get; set; }
    [Parameter, EditorRequired] public EditMemberModel? EditMemberModel { get; set; }

    private async Task OnShareClick() {
        if (IsOwn) {
            _ = ShareUI.ShareOwnAccount();
            return;
        }

        var account = await Authors.GetAccount(Session, Author.ChatId, Author.Id, default);
        if (account != null)
            _ = ShareUI.Share(account.Id);
    }

    private Task OnPromoteToOwner()
        => EditMemberCommands.OnPromoteToOwnerClick(ChatHub, Author);

    private Task OnRemoveFromGroupClick()
        => EditMemberCommands.OnRemoveFromGroupClick(ChatHub, Author);
}
