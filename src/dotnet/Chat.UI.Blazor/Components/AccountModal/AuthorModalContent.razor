@using ActualChat.Users.UI.Blazor
@namespace ActualChat.Chat.UI.Blazor.Components

<Tile>
    @if (Author.IsAnonymous) {
        <TileItem Class="anonymous-bio">
            <Icon>
                <i class="icon-alert-triangle text-2xl"></i>
            </Icon>
            <Content>
                @if (IsOwn) {
                    <span>Your author is anonymous.</span>
                } else {
                    <span>
                        This author is anonymous,
                        so you can't message them directly.
                    </span>
                }
            </Content>
            <Caption>
            </Caption>
        </TileItem>
    }

    @{ var m = EditMemberModel; }

    @if (m != null && (m.CanPromoteToOwner || m.CanRemoveFromGroup)  || UsePlaceSettingsToEditMember) {
        <div class="separator"></div>
    }

    @if (UsePlaceSettingsToEditMember) {
        <TileItem Class="tile-edit-membership">
            <Icon>
                <i class="icon-people text-2xl"></i>
            </Icon>
            <Content>
                Use place settings to edit membership
            </Content>
        </TileItem>
    } else {

        @if (m is { CanPromoteToOwner: true }) {
            <TileItem Class="tile-promote-to-owner" Click="@OnPromoteToOwner">
                <Icon>
                    <i class="icon-admin02 text-2xl text-03"></i>
                </Icon>
                <Content>
                    Promote to Owner
                </Content>
                <Caption>
                    Owners can do anything with this chat, including deleting it. This action cannot be undone.
                </Caption>
            </TileItem>
        }

        @if (m is { CanRemoveFromGroup: true }) {
            <TileItem Class="tile-remove-from-group" Click="@OnRemoveFromGroupClick">
                <Icon>
                    <i class="icon-minus-circle text-2xl"></i>
                </Icon>
                <Content>
                    Remove from group
                </Content>
            </TileItem>
        }
    }
</Tile>

@code {

    [Inject] private ChatUIHub Hub { get; set; } = null!;
    private Session Session => Hub.Session();
    private IAuthors Authors => Hub.Authors;
    private ShareUI ShareUI => Hub.ShareUI;

    [Parameter, EditorRequired] public Author Author { get; set; } = null!;
    [Parameter, EditorRequired] public bool IsOwn { get; set; }
    [Parameter, EditorRequired] public bool UsePlaceSettingsToEditMember { get; set; }
    [Parameter, EditorRequired] public EditChatMemberModel? EditMemberModel { get; set; }

    private async Task OnShareClick() {
        if (IsOwn) {
            _ = ShareUI.ShareOwnAccount();
            return;
        }

        var account = await Authors.GetAccount(Session, Author.ChatId, Author.Id, default);
        if (account != null)
            _ = ShareUI.Share(account.Id);
    }

    private Task OnPromoteToOwner()
        => EditChatMemberCommands.OnPromoteToOwnerClick(Hub, Author);

    private Task OnRemoveFromGroupClick()
        => EditChatMemberCommands.OnRemoveFromGroupClick(Hub, Author);
}
