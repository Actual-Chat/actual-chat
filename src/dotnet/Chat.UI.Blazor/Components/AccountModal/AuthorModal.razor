@using ActualChat.UI.Blazor.Events
@namespace ActualChat.Chat.UI.Blazor.Components
@implements IModalView<AuthorModal.Model>
@inherits ComputedStateComponent<AuthorModal.ComputedModel>
@{
    var m = State.Value;
    var title = "User profile";
    if (m.IsOwn)
        title = "Your profile";
    else if (m.Author.IsAnonymous)
        title = "Anonymous profile";
}

<DialogFrame Title="@title" Class="author-modal modal-sm" HasCloseButton="true">
    <Body>
    <FormBlock>
        <AuthorModalContent Author="@m.Author" IsOwn="@m.IsOwn" EditMemberModel="@m.EditMemberModel" />
    </FormBlock>
    </Body>
    <Buttons>
        @if (m.IsOwn) {
            <Button Class="btn-modal" Click="OnSettingsClick">Edit profile</Button>
            if (!m.Author.IsAnonymous) {
                <Button Class="btn-modal" Click="OnChangeAvatarClicked">Change avatar</Button>
            } else if (m.EnableIncompleteUI) {
                <Button Class="btn-modal danger" Click="OnRevealClicked">Reveal</Button>
            }
        } else if (m.Author.IsAnonymous) {
            <Button Class="btn-modal btn-primary" Click="OnCancel">OK</Button>
        } else {
            @if (m.CanStartPeerChat) {
                <Button Class="btn-modal btn-primary" Click="OnStartPeerChat">
                    <i class="icon-message-ellipse text-xl"></i>
                    Chat with @m.Author.Avatar.Name
                </Button>
            } else {
                <Button Class="btn-modal" Click="OnCancel">Close</Button>
            }
        }
    </Buttons>
</DialogFrame>

@code {
    [Inject] private ChatHub ChatHub { get; init; } = null!;

    private AuthorId AuthorId => ModalModel.AuthorId;  // Shortcut
    private ChatId ChatId => AuthorId.ChatId; // Shortcut

    [CascadingParameter] public Modal Modal { get; set; } = null!;
    [Parameter] public Model ModalModel { get; set; } = null!;

    protected override ComputedState<ComputedModel>.Options GetStateOptions()
        => new() {
            InitialValue = ComputedModel.Loading,
            Category = GetStateCategory(),
        };

    protected override async Task<ComputedModel> ComputeState(CancellationToken cancellationToken) {
        if (AuthorId.IsNone)
            return ComputedModel.None;

        var chatId = AuthorId.ChatId;
        var session = ChatHub.Session;
        var author = await ChatHub.Authors.Get(session, chatId, AuthorId, cancellationToken);
        if (author == null)
            return ComputedModel.None;

        var chat = await ChatHub.Chats.Get(session, chatId, cancellationToken);

        var ownAccount = await ChatHub.Accounts.GetOwn(session, cancellationToken);
        var account = await ChatHub.Authors.GetAccount(session, ChatId, AuthorId, cancellationToken);
        var canStartPeerChat = await ChatHub.AuthorUI.CanStartPeerChat(AuthorId, cancellationToken);
        var enableIncompleteUI = await ChatHub.Features.Get<Features_EnableIncompleteUI, bool>(cancellationToken);

        EditMemberModel? editMemberModel = null;
        var canEditMembers = chat != null && chat.Rules.CanEditMembers();
        if (canEditMembers)
            editMemberModel = await EditMemberCommands.ComputeState(ChatHub, AuthorId, cancellationToken);

        return new ComputedModel() {
            Author = author,
            Account = account,
            OwnAccount = ownAccount,
            CanStartPeerChat = canStartPeerChat,
            EnableIncompleteUI = enableIncompleteUI,
            EditMemberModel = editMemberModel
        };
    }

    private void OnCancel()
        => Modal.Close();

    private Task OnRevealClicked()
        => ChatHub.FeedbackUI.AskFeatureRequestFeedback("reveal-author", "Reveal yourself");

    private async Task OnChangeAvatarClicked() {
        Modal.Close();
        await ChatHub.ModalUI.Show(new AvatarSelectModal.Model(AuthorId.ChatId, false, OnAvatarSelected));
    }

    private async Task OnStartPeerChat()
        => await ChatHub.AuthorUI.StartPeerChat(AuthorId);

    private async Task OnAvatarSelected(AvatarFull avatar) {
        var command = new Authors_SetAvatar(ChatHub.Session, AuthorId.ChatId, avatar.Id);
        await ChatHub.UICommander.Run(command);
    }

    private void OnSettingsClick() {
        Modal.Close();
        _ = ChatHub.UIEventHub.Publish(new ShowSettingsEvent());
    }

    public sealed record ComputedModel {
        public static readonly ComputedModel None = new() { Author = Author.None, OwnAccount = AccountFull.None };
        public static readonly ComputedModel Loading = new() { Author = Author.Loading, OwnAccount = AccountFull.Loading }; // Should differ by ref. from None

        public Author Author { get; init; } = null!;
        public Account? Account { get; init; }
        public Account OwnAccount { get; init; } = null!;
        public bool IsOwn => Account?.Id == OwnAccount.Id;
        public bool CanStartPeerChat { get; init; }
        public bool EnableIncompleteUI { get; init; }
        public EditMemberModel? EditMemberModel { get; init; }
    }

    public sealed record Model(AuthorId AuthorId);
}
