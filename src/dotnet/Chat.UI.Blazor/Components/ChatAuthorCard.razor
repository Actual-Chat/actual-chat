@using System.Net
<div class="w-[200px]">
    <div class="flex-x">
        <ChatAuthor ChatId="@_chatId" AuthorId="@ChatAuthorId">
            <div class="author-avatar w-9 h-9 select-none bg-secondary rounded-md">
                <img src="@context.Author.Picture" alt="@context.Author.Name"/>
            </div>
        </ChatAuthor>

        <div class="ml-2 self-end">
            <ChatAuthor ChatId="@_chatId" AuthorId="@ChatAuthorId">
                <span class="text-secondary rounded">@context.Author.Name</span>
            </ChatAuthor>
        </div>
    </div>
    <div class="flex-x mt-1">
        ID: @ChatAuthorId
    </div>
    @if (_canAddContact && !_isAlreadyAdded) {
        <div class="mt-4 hover:bg-gray-200">
            <button type="button" class="on" disabled="@_isAddingContact" @onclick="OnAddContactClick">Add to Contacts</button>
        </div>
    }
    @if (_canSendMessage) {
        <div class="mt-4 hover:bg-gray-200">
            <button type="button" class="on" @onclick="OnSendMessageClick">Send Message</button>
        </div>
    }
</div>

@code {
    private string? _chatId;
    private bool _canAddContact;
    private bool _isAddingContact;
    private bool _isAlreadyAdded;
    private bool _canSendMessage;

    [Inject] private IChatAuthors ChatAuthors { get; set; } = null!;
    [Inject] private IChats Chats { get; set; } = null!;
    [Inject] private Session Session { get; set; } = null!;
    [Inject] private UICommandRunner Cmd { get; set; } = null!;
    [Inject] private NavigationManager Nav { get; set; } = null!;

    [CascadingParameter]
    BlazoredModalInstance ModalInstance { get; set; } = null!;

    [Parameter]
    public string ChatId { get; set; } = "";
    [Parameter, EditorRequired]
    public string ChatAuthorId { get; set; } = "";

    protected override async Task OnInitializedAsync() {
        await base.OnInitializedAsync();

        ModalInstance.SetTitle("User Info");

        if (!string.IsNullOrEmpty(ChatId))
            _chatId = ChatId;
        else if (!ActualChat.Chat.ChatAuthor.TryGetChatId(ChatAuthorId, out _chatId))
            throw new InvalidOperationException("Invalid chat author id given");
        _canAddContact = await ChatAuthors.CanAddToContacts(Session, ChatAuthorId, default);
        _canSendMessage = await Chats.CanSendUserPeerChatMessage(Session, ChatAuthorId, default);
    }

    private async Task OnAddContactClick() {
        if (_isAddingContact)
            return;
        _isAddingContact = true;
        var (_, e) = await Cmd.Run(new IChatAuthors.AddToContactsCommand(Session, ChatAuthorId));
        if (e.IsCompletedSuccessfully)
            _isAlreadyAdded = true;
        _isAddingContact = false;
    }

    private async Task OnSendMessageClick() {
        var peerChatId = await Chats.GetUserPeerChatId(Session, ChatAuthorId, default);
        var encodedUrl = WebUtility.UrlEncode(peerChatId);
        Nav.NavigateTo("/chat/" + encodedUrl);
    }
}
