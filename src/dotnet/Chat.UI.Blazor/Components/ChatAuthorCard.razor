@using System.Net
@using Stl.Extensibility
@implements IModalView<ChatAuthorCard.Model>
@attribute [MatchFor(typeof(Model), typeof(IModalView))]
@inherits ComputedStateComponent<ChatAuthorCard.ComputedModel>
@{
    var m = State.LatestNonErrorValue;
}

<ModalFrame HasHeader="false">
    <div class="w-[250px] author-card-modal p-3">
        <div class="flex-y h-full">
            <ChatAuthorCircle AuthorId="@AuthorId" Size="PersonCircleSize.Size12" ShowsPresence="true" ShowsRecording="true" />
            <div class="self-start pt-2">
                <ChatAuthorName AuthorId="@AuthorId" Class="text-primary font-semibold text-lg"/>
            </div>
            <ButtonGroup Class="btn-font-normal" ButtonsPosition="ButtonGroupPosition.Left">
                @if (m.CanAddContact) {
                    <Button Class="btn-success" OnClick="OnAddContactClick" Disabled="@IsAddingContact">Add to Contacts</Button>
                }
                @if (m.CanSendMessage) {
                    <Button Class="btn-success" OnClick="OnSendMessageClick">Send Message</Button>
                }
            </ButtonGroup>
        </div>
    </div>
</ModalFrame>

@code {
    [Inject] private IChatAuthors ChatAuthors { get; init; } = null!;
    [Inject] private IChats Chats { get; init; } = null!;
    [Inject] private Session Session { get; init; } = null!;
    [Inject] private UICommandRunner Cmd { get; init; } = null!;
    [Inject] private NavigationManager Nav { get; init; } = null!;

    private bool IsAddingContact { get; set; }
    private string AuthorId => ModalModel.AuthorId;

    [CascadingParameter] BlazoredModalInstance ModalInstance { get; set; } = null!;
    [Parameter] public Model ModalModel { get; set; } = null!;

    protected override ComputedState<ComputedModel>.Options GetStateOptions()
        => new() { InitialValue = ComputedModel.None };

    protected override async Task<ComputedModel> ComputeState(CancellationToken cancellationToken) {
        if (!ChatAuthor.TryGetChatId(AuthorId, out var chatId))
            return ComputedModel.None;

        return new ComputedModel() {
            ChatId = chatId,
            CanAddContact = await ChatAuthors.CanAddToContacts(Session, AuthorId, default).ConfigureAwait(false),
            CanSendMessage = await Chats.CanSendUserPeerChatMessage(Session, AuthorId, default).ConfigureAwait(false),
        };
    }

    private async Task OnAddContactClick() {
        if (IsAddingContact)
            return;
        IsAddingContact = true;
        StateHasChanged();
        try {
            var (_, e) = await Cmd.Run(new IChatAuthors.AddToContactsCommand(Session, AuthorId));
        }
        finally {
            IsAddingContact = false;
            StateHasChanged();
        }
    }

    private async Task OnSendMessageClick() {
        var peerChatId = await Chats.GetUserPeerChatId(Session, AuthorId, default);
        var encodedUrl = WebUtility.UrlEncode(peerChatId);
        Nav.NavigateTo("/chat/" + encodedUrl);
    }

    public sealed record ComputedModel {
        public static ComputedModel None { get; } = new();

        public string ChatId { get; init; } = "";
        public bool CanAddContact { get; init; }
        public bool CanSendMessage { get; init; }
    }

    public sealed record Model(string AuthorId);
}
