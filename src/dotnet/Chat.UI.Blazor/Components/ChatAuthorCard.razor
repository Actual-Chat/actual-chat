@using System.Net
@inherits ComputedStateComponent<ChatAuthorCard.Model>
@{
    var m = State.LatestNonErrorValue;
}
<div class="w-[250px] author-card-modal">
    <div class="flex-y h-full">
        <ChatAuthorBadge AuthorId="@AuthorId">
            <div class="author-avatar w-12 h-12 select-none bg-secondary rounded-md">
                <img src="@context.Author.Picture" alt="@context.Author.Name"/>
            </div>
        </ChatAuthorBadge>
        <div class="self-start pt-2">
            <ChatAuthorBadge AuthorId="@AuthorId">
                <span class="text-primary font-semibold text-lg rounded">@context.Author.Name</span>
            </ChatAuthorBadge>
        </div>
        <ButtonGroup Class="btn-font-normal" ButtonsPosition="ButtonGroupPosition.Left">
            @if (m.CanAddContact) {
                <Button Class="btn-success" OnClick="OnAddContactClick" Disabled="@IsAddingContact">Add to Contacts</Button>
            }
            @if (m.CanSendMessage) {
                <Button Class="btn-success" OnClick="OnSendMessageClick">Send Message</Button>
            }
        </ButtonGroup>
    </div>
</div>

@code {
    [Inject] private IChatAuthors ChatAuthors { get; set; } = null!;
    [Inject] private IChats Chats { get; set; } = null!;
    [Inject] private Session Session { get; set; } = null!;
    [Inject] private UICommandRunner Cmd { get; set; } = null!;
    [Inject] private NavigationManager Nav { get; set; } = null!;

    private bool IsAddingContact { get; set; }

    [CascadingParameter] BlazoredModalInstance ModalInstance { get; set; } = null!;
    [Parameter, EditorRequired] public string AuthorId { get; set; } = "";

    protected override ComputedState<Model>.Options GetStateOptions()
        => new() { InitialValue = Model.None };

    protected override async Task<Model> ComputeState(CancellationToken cancellationToken) {
        if (!ChatAuthor.TryGetChatId(AuthorId, out var chatId))
            return Model.None;

        return new Model() {
            ChatId = chatId,
            CanAddContact = await ChatAuthors.CanAddToContacts(Session, AuthorId, default).ConfigureAwait(false),
            CanSendMessage = await Chats.CanSendUserPeerChatMessage(Session, AuthorId, default).ConfigureAwait(false),
        };
    }

    private async Task OnAddContactClick() {
        if (IsAddingContact)
            return;
        IsAddingContact = true;
        StateHasChanged();
        try {
            var (_, e) = await Cmd.Run(new IChatAuthors.AddToContactsCommand(Session, AuthorId));
        }
        finally {
            IsAddingContact = false;
            StateHasChanged();
        }
    }

    private async Task OnSendMessageClick() {
        var peerChatId = await Chats.GetUserPeerChatId(Session, AuthorId, default);
        var encodedUrl = WebUtility.UrlEncode(peerChatId);
        Nav.NavigateTo("/chat/" + encodedUrl);
    }

    public sealed record Model {
        public static Model None { get; } = new();

        public string ChatId { get; init; } = "";
        public bool CanAddContact { get; init; }
        public bool CanSendMessage { get; init; }
    }
}
