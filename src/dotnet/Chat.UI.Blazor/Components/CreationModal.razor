@using Stl.Extensibility
@implements IModalView<CreationModal.Model>
@attribute [MatchFor(typeof(Model), typeof(IModalView))]

<CascadingValue Value="_enableIncompleteUI">
    <DialogFrame class="creation-modal" ShowMobileHeader="false">

    <Body>
        @if (ModalModel.PageNumber == 1) {
            <CreationModalMenu CreateNewGroup="GetNextPage" ReturnToPrevious="GetPreviousPage"/>
        } else if (ModalModel.PageNumber == 2) {
            <CreationModalAddMembers OnClose="OnClose" ReturnToPrevious="GetPreviousPage"/>
        } else if (ModalModel.PageNumber == 3) {
            <CreationModalGroupTitle OnCancel="OnClose" ReturnToPrevious="GetPreviousPage"/>
        }
    </Body>
    <Buttons>
        @if (ModalModel.PageNumber == 2) {
            <div class="btn-group">
                <Button Type="@ButtonType.Button" Click="OnClose" Class="btn-secondary">Cancel</Button>
                <Button Type="@ButtonType.Button" Click="GetNextPage" Class="btn-primary">Next</Button>
            </div>
        }
    </Buttons>
    </DialogFrame>
</CascadingValue>


@code {
    private bool _enableIncompleteUI;

    [Inject] private ModalUI ModalUI { get; init; } = null!;
    [Inject] private Features Features { get; init; } = null!;

    [CascadingParameter] public ScreenSize ScreenSize { get; set; }
    [CascadingParameter] public BlazoredModalInstance ModalInstance { get; set; } = null!;
    [Parameter] public Model ModalModel { get; set; } = null!;

    protected override async Task OnInitializedAsync()
        => _enableIncompleteUI = await Features.Get<UIFeatures.EnableIncompleteUI, bool>(CancellationToken.None);

    private void OnClose()
        => ModalInstance.CloseAsync();

    private void GetNextPage()
        => ModalModel = new Model(ModalModel.PageNumber + 1);

    private void GetPreviousPage() {
        if (ModalModel.PageNumber == 1)
            ModalInstance.CloseAsync();
        ModalModel = new Model(ModalModel.PageNumber - 1);
    }

    public sealed record Model(int PageNumber);
}
