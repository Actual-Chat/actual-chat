@namespace ActualChat.Chat.UI.Blazor.Components
@implements ISlateEditorBackend
@implements IAsyncDisposable
@using ActualChat.Chat.UI.Blazor.Module

<div @ref="EditorRef" id="@Id" class="slate-editor-root @Class"></div>

@code {
    private bool _rendered;
    private string _placeholder = "";
    private MentionCandidateListManager? _lastMentionCandidateListManager;

    private ElementReference EditorRef { get; set; }
    private IJSObjectReference JSRef { get; set; } = null!;
    private DotNetObjectReference<ISlateEditorBackend> BlazorRef { get; set; } = null!;

    [Inject] private IJSRuntime JS { get; init; } = null!;

    [Parameter] public string Id { get; set; } = "";
    [Parameter] public string Placeholder { get; set; } = "";
    [Parameter] public string Class { get; set; } = "";
    [Parameter] public EventCallback<string> Posted { get; set; }
    [Parameter] public EventCallback Rendered { get; set; }
    [CascadingParameter] public MentionCandidateListManager? MentionCandidateListManager { get; set; }

    protected override void OnParametersSet() {
        if (_lastMentionCandidateListManager != null)
            _lastMentionCandidateListManager.Selected -= OnMentionCandidateSelected;
        _lastMentionCandidateListManager = MentionCandidateListManager;
        if (_lastMentionCandidateListManager != null)
            _lastMentionCandidateListManager.Selected += OnMentionCandidateSelected;

        if (_rendered && !StringComparer.Ordinal.Equals(_placeholder, Placeholder))
            _ = SetPlaceholder(Placeholder);
    }

    public async ValueTask DisposeAsync() {
        if (_lastMentionCandidateListManager != null)
            _lastMentionCandidateListManager.Selected -= OnMentionCandidateSelected;
        _rendered = false;
        await JSRef.DisposeSilentlyAsync("dispose").ConfigureAwait(true);
        JSRef = null!;
        BlazorRef.DisposeSilently();
        BlazorRef = null!;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (firstRender) {
            BlazorRef = DotNetObjectReference.Create<ISlateEditorBackend>(this);
            JSRef = await JS.InvokeAsync<IJSObjectReference>(
                $"{ChatBlazorUIModule.ImportName}.SlateEditor.create",
                EditorRef, BlazorRef, Constants.DebugMode.SlateEditor
                ).ConfigureAwait(true);
            _rendered = true;
            _ = SetPlaceholder(Placeholder);
            await Rendered.InvokeAsync().ConfigureAwait(false);
        }
    }

    public async Task<string> GetText()
        => await JSRef.InvokeAsync<string>("getText").ConfigureAwait(false);

    [JSInvokable]
    public Task Post(string? text = null)
        => Posted.InvokeAsync(text);

    public async Task Clear()
        => await JSRef.InvokeAsync<string>("clearText").ConfigureAwait(false);

    [JSInvokable]
    public async Task MentionCommand(string cmd, string args) {
        var manager = MentionCandidateListManager;
        if (manager == null)
            return;
        switch (cmd) {
            case "insert": {
                await Insert(manager.ListView?.Selection).ConfigureAwait(true);
                break;
            }
            case "moveUp": {
                manager.ListView?.MoveSelectionUp();
                break;
            }
            case "moveDown": {
                manager.ListView?.MoveSelectionDown();
                break;
            }
            case "close": {
                await manager.Hide().ConfigureAwait(true);
                break;
            }
            case "show": {
                await manager.Show(args).ConfigureAwait(true);
                break;
            }
        }
    }

    private async Task SetPlaceholder(string placeholder) {
        _placeholder = placeholder;
        await JSRef.InvokeAsync<string>("setPlaceholder", placeholder).ConfigureAwait(false);
    }

    private void OnMentionCandidateSelected(MentionCandidate mentionCandidate)
        => _ = Insert(mentionCandidate);

    private async Task Insert(MentionCandidate? mentionCandidate) {
        MentionCandidateListManager?.Hide();
        if (mentionCandidate == null)
            return;
        await JSRef.InvokeVoidAsync("focus").ConfigureAwait(false);
        await JSRef.InvokeVoidAsync("insertMention", mentionCandidate).ConfigureAwait(false);
    }
}
