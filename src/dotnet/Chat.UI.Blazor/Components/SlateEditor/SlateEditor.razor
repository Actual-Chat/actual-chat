@namespace ActualChat.Chat.UI.Blazor.Components
@implements ISlateEditorBackend
@implements IAsyncDisposable
@using ActualChat.Chat.UI.Blazor.Module

<div @ref="EditorRef" id="@Id" class="slate-editor-root @Class"></div>

@code {
    private bool _rendered;
    private string _placeholder = "";

    private ElementReference EditorRef { get; set; }
    private IJSObjectReference JSRef { get; set; } = null!;
    private DotNetObjectReference<ISlateEditorBackend> BlazorRef { get; set; } = null!;

    [Inject] private IJSRuntime JS { get; init; } = null!;

    [Parameter]
    public string Id { get; set; } = "";
    [Parameter]
    public string Placeholder { get; set; } = "";
    [Parameter]
    public string Class { get; set; } = "";
    [Parameter]
    public EventCallback<string> OnPost { get; set; }
    [Parameter]
    public EventCallback OnRendered { get; set; }
    [CascadingParameter]
    public MentionListContext? MentionListContext { get; set; }

    protected override void OnInitialized() {
        base.OnInitialized();
        var context = MentionListContext;
        if (context != null) {
            context.InsertRequested += OnMentionInsertRequested;
        }
    }

    protected override void OnParametersSet() {
        base.OnParametersSet();
        if (_rendered && !StringComparer.Ordinal.Equals(_placeholder, Placeholder))
            _ = SetPlaceholder(Placeholder);
    }

    public async ValueTask DisposeAsync() {
        _rendered = false;
        if (JSRef != null!)
            await JSRef.DisposeSilentlyAsync("dispose").ConfigureAwait(true);
        // ReSharper disable once ConstantConditionalAccessQualifier
        BlazorRef?.Dispose();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (firstRender) {
            BlazorRef = DotNetObjectReference.Create<ISlateEditorBackend>(this);
            JSRef = await JS.InvokeAsync<IJSObjectReference>(
                $"{ChatBlazorUIModule.ImportName}.SlateEditor.create",
                EditorRef, BlazorRef, Constants.DebugMode.SlateEditor
                ).ConfigureAwait(true);
            _rendered = true;
            _ = SetPlaceholder(Placeholder);
            await OnRendered.InvokeAsync();
        }
    }

    public async Task<string> GetText()
        => await JSRef.InvokeAsync<string>("getText");

    [JSInvokable]
    public async Task Post(string? text = null) {
        await OnPost.InvokeAsync(text);
    }

    public async Task Clear()
        => await JSRef.InvokeAsync<string>("clearText");

    [JSInvokable]
    public async Task MentionCommand(string cmd, string args) {
        var context = MentionListContext;
        if (context == null)
            return;
        switch (cmd) {
            case "insert": {
                context.Insert();
                break;
            }
            case "moveUp": {
                context.MoveUp();
                break;
            }
            case "moveDown": {
                context.MoveDown();
                break;
            }
            case "close": {
                context.HideMentions();
                break;
            }
            case "show": {
                await context.ShowMentions(args);
                break;
            }
        }
    }

    private async Task SetPlaceholder(string placeholder) {
        _placeholder = placeholder;
        await JSRef.InvokeAsync<string>("setPlaceholder", placeholder);
    }

    private void OnMentionInsertRequested(Mention mention)
        => _ = Insert(mention);

    private async Task Insert(Mention mention) {
        MentionListContext!.HideMentions();
        await JSRef.InvokeVoidAsync("focus");
        await JSRef.InvokeVoidAsync("insertMention", mention);
    }
}
