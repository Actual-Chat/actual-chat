@using System.Text
@using ActualChat.UI.Blazor.Services.Internal
@inherits ComputedStateComponent<ImmutableHashSet<ChatEntryId>>
@namespace ActualChat.Chat.UI.Blazor.Components
@{
    var selection = State.Value;
    if (selection.Count == 0) {
        _ = StopHandleEscape();
        return;
    }

    StartHandleEscape();
}

<SelectionHost Selected="@selection.First()" />

@if (ScreenSize.IsNarrow()) {
    <div class="selection-header">
        <div>
            <ButtonRound
                Class="transparent btn-sm"
                Click="OnCancel">
                <i class="icon-close-fill text-2xl"></i>
            </ButtonRound>
        </div>
        <div class="selection-header-title">
            @(selection.Count) @("message".Pluralize(selection.Count))
        </div>
        <div class="selection-header-buttons">
            <HeaderButton Click="@(() => SelectionUI.Delete())">
                <i class="icon-trash03 text-danger"></i>
            </HeaderButton>
            <HeaderButton Click="@(() => SelectionUI.CopyToClipboard())">
                <i class="icon-copy !text-lg"></i>
            </HeaderButton>
            <Button
                Class="btn-submit btn-transparent"
                Click="@(() => SelectionUI.Forward())">
                Forward
            </Button>
        </div>
    </div>
    return;
}

<div class="selection-header">
    <div>
        <HeaderButton
            Class="c-close-btn"
            Click="OnCancel">
            <i class="icon-close-fill text-2xl"></i>
        </HeaderButton>
    </div>

    <div class="selection-header-title">
        @(selection.Count) @("message".Pluralize(selection.Count))
    </div>

    <div class="selection-header-buttons">
        <HeaderButton
            Click="@(() => SelectionUI.Delete())"
            Tooltip="Delete selected"
            TooltipPosition="FloatingPosition.Bottom">
            <i class="icon-trash03 text-danger"></i>
        </HeaderButton>
        <HeaderButton
            Click="@(() => SelectionUI.CopyToClipboard())"
            Tooltip="Copy selected as text"
            TooltipPosition="FloatingPosition.Bottom">
            <i class="icon-copy !text-lg"></i>
        </HeaderButton>
        <Button
            Class="btn-primary btn-sm"
            Click="@(() => SelectionUI.Forward())">
            Forward
        </Button>
    </div>
</div>

@code {
    private Task<IAsyncDisposable>? _escapistSubscriptionTask;

    [Inject] private ChatUIHub Hub { get; set; } = null!;
    private Session Session => Hub.Session();
    private IChats Chats => Hub.Chats;
    private ChatUI ChatUI => Hub.ChatUI;
    private ModalUI ModalUI => Hub.ModalUI;
    private ToastUI ToastUI => Hub.ToastUI;
    private SelectionUI SelectionUI => Hub.SelectionUI;
    private ChatEditorUI ChatEditorUI => Hub.ChatEditorUI;
    private ClipboardUI ClipboardUI => Hub.ClipboardUI;
    private Escapist Escapist => Hub.Escapist;
    private History History => Hub.History;
    private UICommander UICommander => Hub.UICommander();

    [CascadingParameter] public ScreenSize ScreenSize { get; set; }

    public override async ValueTask DisposeAsync() {
        await base.DisposeAsync();
        await StopHandleEscape();
    }

    protected override ComputedState<ImmutableHashSet<ChatEntryId>>.Options GetStateOptions()
        => new() {
            InitialValue = ImmutableHashSet<ChatEntryId>.Empty,
            UpdateDelayer = FixedDelayer.Instant,
            Category = GetStateCategory(),
        };

    protected override Task<ImmutableHashSet<ChatEntryId>> ComputeState(CancellationToken cancellationToken)
        => SelectionUI.Selection.Use(cancellationToken).AsTask();

    private void OnCancel()
        => SelectionUI.Clear();

    private void StartHandleEscape()
        => _escapistSubscriptionTask ??= Escapist.SubscribeOnce(OnEscape, State.DisposeToken).AsTask();

    private async ValueTask StopHandleEscape() {
        var escapistSubscriptionTask = _escapistSubscriptionTask;
        if (escapistSubscriptionTask == null)
            return;

        _escapistSubscriptionTask = null;
        var escapistSubscription = (await escapistSubscriptionTask.ResultAwait()).ValueOrDefault;
        await escapistSubscription.DisposeSilentlyAsync();
    }

    private void OnEscape()
        => SelectionUI.Clear();
}
