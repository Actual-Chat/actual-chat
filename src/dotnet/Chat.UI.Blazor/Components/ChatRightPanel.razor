@inherits ComputedStateComponent<ChatRightPanel.Page>
@{
    var currentPage = State.ValueOrDefault;
}

<div class="flex-y w-full md:w-80 border-l-2 p-3 animate-from-right">
    <ul class="flex-x flex-wrap list-none border-b-0 pl-0 mb-2 text-secondary" role="tablist">
        @foreach (var page in _pages) {
            var isActive = page == currentPage;
            var cls = isActive ? "border-success" : "border-transparent";

            <li class="nav-item" role="presentation">
                <button class="block cursor-pointer px-3 py-1
                               font-medium text-xs leading-tight uppercase
                               border-x-0 border-t-0 border-b-2 hover:bg-primary @cls"
                        role="tab" aria-selected="@isActive"
                        @onclick="@(() => OnSelectPage(page))">
                    @GetTabTitle(page)
                </button>
            </li>
        }
    </ul>
    <div class="grow overflow-y-auto custom-scrollbar">
        @if (currentPage == Page.Users) {
            <ChatAuthorList />
        }
        else if (currentPage == Page.Settings) {
            <ChatSettings />
        }
    </div>
</div>

@code {
    public enum Page { Users, Settings }

    [Inject] private RightPanelSettings RightPanelSettings { get; init; } = null!;

    private Page[] _pages = Enum.GetValues<Page>().ToArray();

    private string GetTabTitle(Page page)
        => page switch{
            Page.Users => "Users",
            Page.Settings => "Settings",
            _ => "???"
            };

    protected override ComputedState<Page>.Options GetStateOptions()
        => new() { UpdateDelayer = UpdateDelayer.ZeroDelay };

    protected override async Task<Page> ComputeState(CancellationToken cancellationToken)
        => await RightPanelSettings.SelectedPage.Use(cancellationToken);

    private void OnSelectPage(Page page)
        => RightPanelSettings.SelectedPage.Value = page;
}
