@inherits ComputedStateComponent<ChatListNavbarWidget.Model>
@{
    var m = State.LatestNonErrorValue;

    RenderFragment RenderTab(string tabId, string tabTitle) =>
        @<Tab Title="@tabTitle" Id="@tabId" Class="flex-y self-start relative overflow-y-auto custom-scrollbar h-full chats-tab">
            <div class="h-full flex-y my-2">
                @if (m.PinnedChats.Count > 0) {
                    <ChatList Kind="ChatListKind.Pinned" Chats="@m.PinnedChats" ActiveChatId="@m.ActiveChatId"/>

                    <div class="mx-4 mb-2 border-b border-bg-04"></div>

                    if (m.UnpinnedChats.Count > 0) {
                        <ChatList Kind="ChatListKind.Unpinned" Chats="@m.UnpinnedChats" ActiveChatId="@m.ActiveChatId"/>
                    }
                } else {
                    <ChatList Kind="ChatListKind.Unpinned" Chats="@m.UnpinnedChats" ActiveChatId="@m.ActiveChatId"/>
                }
            </div>
        </Tab>;
}

<NavbarGroup Title="Chats" Class="navbar-chats" Id="chats" AddClick="OnCreateNewChatClick">
    <ChildContent>
        <div class="-flex-y w-full h-full">
            <ActiveChatsNavbarWidget/>
            <TabPanel TabsClass="left-panel-tabs" BottomHill="true" Class="overflow-y-hidden" @bind-ActiveTab="ActiveTab.Value">
                @RenderTab(RecentTabId, "Recent")
                @RenderTab(AllTabId, "A-Z")
            </TabPanel>
        </div>
        <ChatMenu />
    </ChildContent>
</NavbarGroup>

@code {
    private const string RecentTabId = "Recent";
    private const string AllTabId = "A-Z";

    [Inject] private RecentChats RecentChats { get; init; } = null!;
    [Inject] private IChats Chats { get; init; } = null!;
    [Inject] private Session Session { get; init; } = null!;
    [Inject] private ChatUI ChatUI { get; init; } = null!;
    [Inject] private ModalUI ModalUI { get; init; } = null!;
    [Inject] private SearchUI SearchUI { get; init; } = null!;

    private IMutableState<Tab> ActiveTab { get; set; } = null!;

    protected override void OnInitialized() {
        base.OnInitialized();
        ActiveTab = StateFactory.NewMutable<Tab>();
    }

    protected override ComputedState<Model>.Options GetStateOptions()
        => new() {
            InitialValue = Model.None,
            UpdateDelayer = UpdateDelayer.MinDelay,
        };

    protected override async Task<Model> ComputeState(CancellationToken cancellationToken) {
        var activeTabId = (await ActiveTab.Use(cancellationToken)).Id;
        var chats = await ListChats(activeTabId, cancellationToken);
        var activeChat = await RecentChats.GetActiveChat(cancellationToken).ConfigureAwait(false);

        var searchPhrase = await SearchUI.GetSearchPhrase(cancellationToken).ConfigureAwait(false);
        if (!searchPhrase.IsEmpty)
            chats = (
                from c in chats
                let rank = searchPhrase.GetMatchRank(c.Title)
                where rank > 0 || c.Id == activeChat?.Id
                orderby rank descending
                select c
            ).ToImmutableArray();

        var pinnedChatIds = await ChatUI.PinnedChatIds.Use(cancellationToken).ConfigureAwait(false);
        var pinnedChats = chats
            .Where(c => pinnedChatIds.ContainsKey(c.Id))
            .ToList();
        var unpinnedChats = chats
            .Where(c => !pinnedChatIds.ContainsKey(c.Id))
            .ToList();

        return new Model {
            ActiveChatId = activeChat?.Id ?? Symbol.Empty,
            PinnedChats = pinnedChats,
            UnpinnedChats = unpinnedChats,
        };
    }

    private Task<ImmutableArray<Chat>> ListChats(string activeTabId, CancellationToken cancellationToken)
        => activeTabId switch{
            AllTabId => Chats.List(Session, cancellationToken),
            RecentTabId => RecentChats.List(cancellationToken),
            _ => throw new ArgumentOutOfRangeException(nameof(activeTabId), activeTabId, null)
            };

    private void OnCreateNewChatClick()
        => ModalUI.Show(new NewChatModal.Model());

    public sealed record Model {
        public static Model None { get; } = new();

        public Symbol ActiveChatId { get; init; }
        public List<Chat> PinnedChats { get; init; } = new ();
        public List<Chat> UnpinnedChats { get; init; } = new ();
    }
}
