@inherits ComputedStateComponent<ChatListNavbarWidget.Model>
@{
    var m = State.LatestNonErrorValue;

    RenderFragment RenderTab(TabId tabId, string tabTitle) =>
        @<Tab
             Title="@tabTitle" Id="@tabId.ToString()"
             Class="flex-y self-start relative overflow-y-auto custom-scrollbar h-full chats-tab">
            <div class="h-full flex-y my-2">
                <ChatList Kind="ChatListKind.Pinned" Chats="@m.PinnedChats" ActiveChatId="@m.ActiveChatId"/>
                <ChatList Kind="ChatListKind.Unpinned" Chats="@m.UnpinnedChats" ActiveChatId="@m.ActiveChatId"/>
            </div>
        </Tab>;
}

<NavbarGroup Title="Chats" Class="navbar-chats" Id="chats" AddClick="OnCreateNewChatClick">
    <ChildContent>
        <div class="-flex-y w-full h-full">
            <ActiveChatsNavbarWidget/>

            <TabPanel
                BottomHill="true"
                Class="overflow-y-hidden"
                TabsClass="left-panel-tabs"
                ActiveTabChanged="@OnActiveTabChanged">

                @RenderTab(TabId.Recent, "Recent")
                @RenderTab(TabId.All, "A-Z")
            </TabPanel>
        </div>
        <ChatMenu />
    </ChildContent>
</NavbarGroup>

@code {
    private TabId _activeTabId;

    [Inject] private RecentChats RecentChats { get; init; } = null!;
    [Inject] private IChats Chats { get; init; } = null!;
    [Inject] private Session Session { get; init; } = null!;
    [Inject] private ChatUI ChatUI { get; init; } = null!;
    [Inject] private ModalUI ModalUI { get; init; } = null!;
    [Inject] private SearchUI SearchUI { get; init; } = null!;

    protected override ComputedState<Model>.Options GetStateOptions()
        => new() {
            InitialValue = Model.None,
            UpdateDelayer = UpdateDelayer.MinDelay,
        };

    protected override async Task<Model> ComputeState(CancellationToken cancellationToken) {
        var chats = await ListChats(_activeTabId, cancellationToken);
        var activeChat = await RecentChats.GetActiveChat(cancellationToken).ConfigureAwait(false);

        var searchPhrase = await SearchUI.GetSearchPhrase(cancellationToken).ConfigureAwait(false);
        if (!searchPhrase.IsEmpty)
            chats = (
                from c in chats
                let rank = searchPhrase.GetMatchRank(c.Title)
                where rank > 0 || c.Id == activeChat?.Id
                orderby rank descending
                select c
            ).ToImmutableArray();

        var pinnedChatIds = await ChatUI.PinnedChatIds.Use(cancellationToken).ConfigureAwait(false);
        var pinnedChats = chats
            .Where(c => pinnedChatIds.ContainsKey(c.Id))
            .ToList();
        var unpinnedChats = chats
            .Where(c => !pinnedChatIds.ContainsKey(c.Id))
            .ToList();

        return new Model {
            ActiveChatId = activeChat?.Id ?? Symbol.Empty,
            PinnedChats = pinnedChats,
            UnpinnedChats = unpinnedChats,
        };
    }

    private Task<ImmutableArray<Chat>> ListChats(TabId tabId, CancellationToken cancellationToken)
        => tabId switch {
            TabId.All => Chats.List(Session, cancellationToken),
            TabId.Recent => RecentChats.List(cancellationToken),
            _ => throw new ArgumentOutOfRangeException(nameof(tabId)),
        };

    private void OnCreateNewChatClick()
        => ModalUI.Show(new NewChatModal.Model());

    private void OnActiveTabChanged(Tab? tab) {
        if (!Enum.TryParse(tab?.Id ?? "", out _activeTabId))
            _activeTabId = default;
        _ = State.Recompute();
    }

    public enum TabId {
        Recent,
        All,
    }

    public sealed record Model {
        public static Model None { get; } = new();

        public Symbol ActiveChatId { get; init; }
        public List<Chat> PinnedChats { get; init; } = new ();
        public List<Chat> UnpinnedChats { get; init; } = new ();
    }
}
