@using ActualChat.UI.Blazor.Components.ChatIcon

@inherits ComputedStateComponent<ChatListNavbarWidget.Model>
@{
    var m = State.LatestNonErrorValue ?? Model.None;
    var mustPlayPinned = m.MustPlayPinned;
    var isPlaying = mustPlayPinned && m.IsPlaying;
    var mustPlayPinnedClass = "pin-toggle play-pinned"
        + (mustPlayPinned ? "" : " opacity-50")
        + (isPlaying ? " on" : mustPlayPinned ? "" : " off");

    RenderFragment RenderUnpinned(Chat c) =>
        @<NavbarItem Url="@($"/chat/{c.Id}")" IsActive="@(m.ActiveChatId == c.Id)">
            <ChildContent>
                <div class="flex-x items-center">
                    <ChatIcon Title="@c.Title" Picture="@c.Picture" Size="SquareSize.Size8"/>
                    <span class="ml-1 text-ellipsis whitespace-nowrap overflow-hidden">@c.Title</span>
                </div>
            </ChildContent>
            <Ending>
                <ChatListPinToggle ChatId="@c.Id"/>
                <ChatListRecordingToggle ChatId="@c.Id"/>
                <UnreadMessageCounter ChatId="@c.Id"/>
            </Ending>
        </NavbarItem>;

    RenderFragment RenderPinned(Chat c) =>
        @<NavbarItem Url="@($"/chat/{c.Id}")" IsActive="@(m.ActiveChatId == c.Id)">
            <ChildContent>
                <div class="flex-x items-center">
                    <ChatIcon Title="@c.Title" Picture="@c.Picture" Size="SquareSize.Size8"/>
                    <span class="ml-1 text-ellipsis whitespace-nowrap overflow-hidden">@c.Title</span>
                </div>
            </ChildContent>
            <Ending>
                <ChatListPinToggle ChatId="@c.Id"/>
                <ChatListRecordingToggle ChatId="@c.Id"/>
                <UnreadMessageCounter ChatId="@c.Id"/>
            </Ending>
        </NavbarItem>;

    RenderFragment RenderListened(Chat c) =>
        @<NavbarItem Url="@($"/chat/{c.Id}")" IsActive="@(m.ActiveChatId == c.Id)">
            <ChildContent>
                <div class="flex-x items-center">
                    <ChatIcon Title="@c.Title" Picture="@c.Picture" Size="SquareSize.Size8"/>
                    <span class="ml-1 text-ellipsis whitespace-nowrap overflow-hidden">@c.Title</span>
                </div>
            </ChildContent>
            <Ending>
                <ChatListPinToggle ChatId="@c.Id"/>
                <ChatListRecordingToggle ChatId="@c.Id"/>
                <UnreadMessageCounter ChatId="@c.Id"/>
            </Ending>
        </NavbarItem>;
}

<NavbarGroup Title="Chats" Class="navbar-chats" Id="chats" AddClick="OnCreateNewChatClick">
    <ChildContent>
        <div class="flex-y w-full h-full">
            <TabPanel TabsClass="wide-left-panel-tabs" BottomHill="true">
                <Tab Title="All" Class="-flex-y relative overflow-y-hidden h-full chats-tab">
                    @if (m.ListenedChats.Count > 0) {
                        <div class="listened-chats">
                            <div class="flex-x text-base font-medium my-1">Actual chats</div>
                            @foreach (var c in m.ListenedChats) {
                                @RenderListened(c)
                            }
                            <div class="mx-1 mt-1 h-0 border-b border-bg-04"></div>
                        </div>
                    }
                    <div class="overflow-x-hidden overflow-y-auto custom-scrollbar h-full flex-y my-2">
                        @if (m.PinnedChats.Length > 0) {
                            <div class="pinned-chats">
                                @foreach (var c in m.PinnedChats) {
                                    @RenderPinned(c)
                                }
                            </div>

                            if (m.UnpinnedChats.Length > 0) {
                                <div class="unpinned-chats custom-scrollbar">
                                    @foreach (var c in m.UnpinnedChats) {
                                        @RenderUnpinned(c)
                                    }
                                </div>
                            }
                        } else {
                            <div class="unpinned-chats custom-scrollbar">
                                @foreach (var c in m.UnpinnedChats) {
                                    @RenderUnpinned(c)
                                }
                            </div>
                        }
                    </div>
                </Tab>
                <Tab Title="Family">
                    <div>Family Tab</div>
                </Tab>
                <Tab Title="Friends">
                    <div>Friends Tab</div>
                </Tab>
                <Tab Title="Work">
                    <div>Work Tab</div>
                </Tab>
            </TabPanel>
        </div>
    </ChildContent>
</NavbarGroup>

@code {
    [Inject] private Session Session { get; init; } = null!;
    [Inject] private IUserProfiles UserProfiles { get; init; } = null!;
    [Inject] private IChats Chats { get; init; } = null!;
    [Inject] private ChatUI ChatUI { get; init; } = null!;
    [Inject] private ModalUI ModalUI { get; init; } = null!;

    protected override ComputedState<Model>.Options GetStateOptions()
        => new() {
            InitialValue = Model.None,
            UpdateDelayer = UpdateDelayer.MinDelay,
        };

    protected override async Task<Model> ComputeState(CancellationToken cancellationToken) {
        var userProfile = await UserProfiles.Get(Session, cancellationToken).ConfigureAwait(false);
        if (userProfile is not { Status: UserStatus.Active })
            return Model.None;

        var chats = await Chats.GetChats(Session, cancellationToken).ConfigureAwait(false);

        var pinnedChatIds = await ChatUI.PinnedChatIds.Use(cancellationToken).ConfigureAwait(false);
        var pinnedChats = chats
            .Where(c => pinnedChatIds.Contains(c.Id))
            .OrderBy(c => c.Title)
            .ToArray();
        var unpinnedChats = chats
            .Where(c => !pinnedChatIds.Contains(c.Id))
            .OrderBy(c => c.Title)
            .ToArray();

        var listenedChatIds = await ChatUI.ListenedChatIds.Use(cancellationToken).ConfigureAwait(false);
        var listenedChats = new List<Chat>();
        foreach (var t in listenedChatIds)
        {
            var chat = await Chats.Get(Session, t, cancellationToken).ConfigureAwait(false);
            if (chat != null)
                listenedChats.Add(chat);
        }
        listenedChats.Reverse();

        var activeChatId = await ChatUI.ActiveChatId.Use(cancellationToken).ConfigureAwait(false);
        var isPlaying = await ChatUI.IsPlaying.Use(cancellationToken).ConfigureAwait(false);
        var mustPlayPinned = await ChatUI.MustPlayPinnedChats.Use(cancellationToken).ConfigureAwait(false);

        return new Model() {
            CanCreateChat = true,
            PinnedChats = pinnedChats,
            UnpinnedChats = unpinnedChats,
            ListenedChats = listenedChats,
            ActiveChatId = activeChatId,
            IsPlaying = isPlaying,
            MustPlayPinned = mustPlayPinned,
        };
    }

    private void OnCreateNewChatClick()
        => ModalUI.Show(new NewChatModal.Model());

    public sealed record Model {
        public static Model None { get; } = new();

        public bool CanCreateChat { get; init; }
        public Chat[] PinnedChats { get; init; } = Array.Empty<Chat>();
        public Chat[] UnpinnedChats { get; init; } = Array.Empty<Chat>();
        public List<Chat> ListenedChats { get; init; } = new ();
        public Symbol ActiveChatId { get; init; }
        public bool IsPlaying { get; init; }
        public bool MustPlayPinned { get; init; }
    }
}
