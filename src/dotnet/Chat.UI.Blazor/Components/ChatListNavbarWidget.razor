@inherits ComputedStateComponent<ChatListNavbarWidget.Model>
@{
    var m = State.LatestNonErrorValue;
    var chats = m.Chats;
}

<NavbarGroup Title="Chats" Class="navbar-chats" Id="chats">
    <Icons>
        @if (m.CanCreateChat) {
            <ButtonSquare Title="Create new chat" OnClick="OnCreateNewChatClick">
                <i class="fa fa-plus fa-fw pt-0.5" aria-hidden="true"></i>
            </ButtonSquare>
        }
    </Icons>
    <ChildContent>
        @foreach (var chat in chats) {
            var isActive = m.ActiveChatId == chat.Id;
            <NavbarItem Url="@($"/chat/{chat.Id}")" IsActive="@isActive">
                <ChildContent>@chat.Title</ChildContent>
                <Ending>
                    <ChatListRecordingToggle ChatId="@chat.Id"/>
                    <ChatListPinToggle ChatId="@chat.Id"/>
                </Ending>
            </NavbarItem>
        }
    </ChildContent>
</NavbarGroup>

@code {
    [Inject] private Session Session { get; init; } = null!;
    [Inject] private IChats Chats { get; init; } = null!;
    [Inject] private IAuth Auth { get; init; } = null!;
    [Inject] private ChatUI ChatUI { get; init; } = null!;
    [Inject] private ModalUI ModalUI { get; init; } = null!;

    protected override ComputedState<Model>.Options GetStateOptions()
        => new() {
            InitialValue = new (),
            UpdateDelayer = UpdateDelayer.MinDelay, // GetActiveChatId() change should be instantly visible
        };

    protected override async Task<Model> ComputeState(CancellationToken cancellationToken) {
        var chats = await Chats.GetChats(Session, cancellationToken);
        var chatsToShow = chats.OrderBy(c => c.Title).ToList();
        var addDefault = chats.Length == 0 || chats.All(c => c.Id != Constants.Chat.DefaultChatId);
        if (addDefault) {
            var defaultChat = await Chats.Get(Session, Constants.Chat.DefaultChatId, cancellationToken);
            if (defaultChat != null) {
                chatsToShow.Add(defaultChat);
            }
        }
        var user = await Auth.GetUser(Session, cancellationToken).ConfigureAwait(false);

        return new () {
            CanCreateChat = user.IsAuthenticated,
            Chats = chatsToShow.ToImmutableArray(),
            ActiveChatId = await ChatUI.ActiveChatId.Use(cancellationToken).ConfigureAwait(false),
        };
    }

    private void OnCreateNewChatClick()
        => ModalUI.Show(new NewChatModal.Model());

    public class Model
    {
        public bool CanCreateChat { get; init; }
        public ImmutableArray<Chat> Chats { get; init; } = ImmutableArray<Chat>.Empty;
        public Symbol ActiveChatId { get; init; } = Constants.Chat.DefaultChatId;
    }
}
