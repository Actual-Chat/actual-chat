@using ActualChat.Chat.UI.Blazor.Events
@inherits ComputedStateComponent<ChatListNavbarWidget.Model>
@{
    var m = State.Value;
    var count = m.AllChats.Select(c => c.UnreadCount).Sum();

    RenderFragment RenderTab(TabId tabId, string tabTitle) =>
        @<Tab
             Title="@tabTitle" Id="@tabId.ToString()"
             Class="flex-y self-start relative overflow-y-auto custom-scrollbar h-full chats-tab">
            <TitleContent>
                <span>@tabTitle</span>
                <UnreadCount Value="@count" Click="@OnUnreadBadgeClick"/>
            </TitleContent>
            <ChildContent>
                <div class="h-full flex-y my-2">
                    <ChatList Kind="ChatListKind.Pinned" Chats="@m.PinnedChats"/>
                    <ChatList Kind="ChatListKind.Unpinned" Chats="@m.UnpinnedChats"/>
                </div>
            </ChildContent>
        </Tab>;
}

<NavbarGroup Title="Chats" Class="navbar-chats" Id="@NavbarGroupIds.Chats" AddClick="OnCreateNewChatClick">
    <ChildContent>
        <div class="-flex-y w-full h-full">
            <ActiveChatsNavbarWidget/>

            <TabPanel
                BottomHill="true"
                Class="overflow-y-hidden"
                TabsClass="left-panel-tabs"
                ActiveTabChanged="@OnActiveTabChanged">

                @RenderTab(TabId.Recent, "Recent")
            </TabPanel>
        </div>
    </ChildContent>
</NavbarGroup>

@code {
    private TabId _activeTabId;

    [Inject] private Session Session { get; init; } = null!;
    [Inject] private ChatUI ChatUI { get; init; } = null!;
    [Inject] private ModalUI ModalUI { get; init; } = null!;
    [Inject] private SearchUI SearchUI { get; init; } = null!;
    [Inject] private LoadingUI LoadingUI { get; init; } = null!;
    [Inject] private NavigationManager Nav { get; init; } = null!;

    protected override ComputedState<Model>.Options GetStateOptions()
        => new() {
            InitialValue = Model.None,
            UpdateDelayer = FixedDelayer.Instant,
        };

    protected override async Task<Model> ComputeState(CancellationToken cancellationToken) {
        var chats = (await ListChats(_activeTabId)).ToList();

        var searchPhrase = await SearchUI.GetSearchPhrase(cancellationToken);
        // Default scheduler is used from here
        if (!searchPhrase.IsEmpty) {
            var selectedChatId = await ChatUI.SelectedChatId.Use(cancellationToken);
            chats = (
                from c in chats
                let rank = searchPhrase.GetMatchRank(c.Chat.Title)
                where rank > 0 || c.Chat.Id == selectedChatId
                orderby c.Contact.IsPinned descending, rank descending
                select c
                ).ToList();
        }

        var pinnedChats = chats
            .TakeWhile(c => c.Contact.IsPinned)
            .ToList();
        var unpinnedChats = chats
            .Skip(pinnedChats.Count)
            .ToList();

        return new Model {
            PinnedChats = pinnedChats,
            UnpinnedChats = unpinnedChats,
        };
    }

    protected override void OnAfterRender(bool firstRender) {
        if (State.Value != Model.None)
            LoadingUI.MarkLoaded();
    }

    private Task<ImmutableList<ChatInfo>> ListChats(TabId tabId)
        => tabId switch {
            TabId.Recent => ChatUI.List(ChatListOrder.ByLastEventTime),
            _ => throw new ArgumentOutOfRangeException(nameof(tabId)),
        };

    private void OnCreateNewChatClick()
        => ModalUI.Show(new NewChatModal.Model());

    private void OnActiveTabChanged(Tab? tab) {
        if (!Enum.TryParse(tab?.Id ?? "", out _activeTabId))
            _activeTabId = default;
        _ = State.Recompute();
    }

    private void OnUnreadBadgeClick() {
        var allChats = State.Value.AllChats;
        var firstUnreadChat = allChats.FirstOrDefault(c => c.UnmutedUnreadCount != 0);
        if (firstUnreadChat == null || firstUnreadChat.Chat.Id == ChatUI.SelectedChatId.Value)
            return;

        Nav.NavigateTo(Links.Chat(firstUnreadChat.Chat.Id));
    }

    public enum TabId {
        Recent,
    }

    public sealed record Model {
        private static List<ChatInfo> _emptyList = new();

        public static Model None { get; } = new();

        public List<ChatInfo> PinnedChats { get; init; } = _emptyList;
        public List<ChatInfo> UnpinnedChats { get; init; } = _emptyList;
        public IEnumerable<ChatInfo> AllChats => PinnedChats.Concat(UnpinnedChats);
    }

}
