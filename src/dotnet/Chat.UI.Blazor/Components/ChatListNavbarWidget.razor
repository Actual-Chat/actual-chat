@using ActualChat.Chat.UI.Blazor.Events
@inherits ComputedStateComponent<ChatListNavbarWidget.Model>
@{
    var m = State.Value;
    var count = m.AllChats.Select(c => c.UnreadCount).Sum();
    var listSettings = ChatUI.ListSettings.Value;
    var icon = listSettings.Order switch {
        ChatListOrder.ByOwnUpdateTime => "icon-sort-by-message",
        ChatListOrder.ByLastEventTime => "icon-sort-by-recent",
        ChatListOrder.ByUnreadCount => "icon-sort-by-recent",
        ChatListOrder.ByAlphabet => "icon-sort-by-alphabet",
        _ => throw new ArgumentOutOfRangeException(nameof(listSettings)),
    };

    RenderFragment RenderTabContent(ChatListFilter filter) =>
        @<Tab
             Title="@filter.Title"
             Id="@filter.Id"
             Class="chats-tab">
            <TitleContent>
                <span>@filter.Title</span>
                <UnreadCount Value="@count" Click="@OnUnreadBadgeClick"/>
            </TitleContent>
            <ChildContent>
                @if (filter.Id == listSettings.FilterId) {
                    <div class="flex-y my-2">
                        <ChatList Kind="ChatListKind.Pinned" Chats="@m.PinnedChats"/>
                        <ChatList Kind="ChatListKind.Unpinned" Chats="@m.UnpinnedChats"/>
                    </div>
                }
            </ChildContent>
        </Tab>;
}

<NavbarGroup Title="Chats" Class="navbar-chats" Id="@NavbarGroupIds.Chats">
    <ChildContent>
        <div class="flex-y min-h-min">
            <ActiveChatsNavbarWidget/>
            <div class="border-t-4 border-bg-04"></div>
            <TabPanel
                BottomHill="true"
                Class="md:overflow-y-hidden"
                TabsClass="left-panel-tabs"
                ActiveTabChanged="@OnActiveTabChanged">
                <AdditionalButton>
                    <ButtonRound Class="sort-btn btn-sm"
                                 data-menu="@(MenuRef.New<ChatListSortMenu>())"
                                 data-menu-trigger="@MenuTrigger.Primary"
                                 data-menu-placement="@(FloatingPosition.BottomStart.ToPositionString())">
                        <i class="@icon text-2xl"></i>
                    </ButtonRound>
                </AdditionalButton>
                <ChildContent>
                    @RenderTabContent(ChatListFilter.All)
                    @RenderTabContent(ChatListFilter.Personal)
                </ChildContent>
            </TabPanel>
        </div>
    </ChildContent>
</NavbarGroup>

@code {
    [Inject] private Session Session { get; init; } = null!;
    [Inject] private ChatUI ChatUI { get; init; } = null!;
    [Inject] private ModalUI ModalUI { get; init; } = null!;
    [Inject] private SearchUI SearchUI { get; init; } = null!;
    [Inject] private LoadingUI LoadingUI { get; init; } = null!;
    [Inject] private NavigationManager Nav { get; init; } = null!;

    protected override ComputedState<Model>.Options GetStateOptions()
        => new() {
            InitialValue = Model.None,
            UpdateDelayer = FixedDelayer.Instant,
        };

    protected override async Task<Model> ComputeState(CancellationToken cancellationToken) {
        var chats = await ChatUI.List(cancellationToken);

        var searchPhrase = await SearchUI.GetSearchPhrase(cancellationToken);
        if (!searchPhrase.IsEmpty) {
            var selectedChatId = await ChatUI.SelectedChatId.Use(cancellationToken);
            chats = (
                from c in chats
                let rank = searchPhrase.GetMatchRank(c.Chat.Title)
                where rank > 0 || c.Chat.Id == selectedChatId
                orderby c.Contact.IsPinned descending, rank descending
                select c
                ).ToList();
        }

        var pinnedChats = chats
            .TakeWhile(c => c.Contact.IsPinned)
            .ToList();
        var unpinnedChats = chats
            .Skip(pinnedChats.Count)
            .ToList();

        return new Model {
            PinnedChats = pinnedChats,
            UnpinnedChats = unpinnedChats,
        };
    }

    protected override void OnAfterRender(bool firstRender) {
        if (State.Value != Model.None)
            LoadingUI.MarkLoaded();
    }

    private void OnActiveTabChanged(Tab? tab) {
        var filterId = tab?.Id ?? "";
        ChatUI.ListSettings.Value = ChatUI.ListSettings.Value with {
            FilterId = filterId,
        };
    }

    private void OnUnreadBadgeClick() {
        var allChats = State.Value.AllChats;
        var firstUnreadChat = allChats.FirstOrDefault(c => c.UnmutedUnreadCount != 0);
        if (firstUnreadChat == null || firstUnreadChat.Chat.Id == ChatUI.SelectedChatId.Value)
            return;

        Nav.NavigateTo(Links.Chat(firstUnreadChat.Chat.Id));
    }

    public sealed record Model {
        private static List<ChatInfo> _emptyList = new();

        public static Model None { get; } = new();

        public List<ChatInfo> PinnedChats { get; init; } = _emptyList;
        public List<ChatInfo> UnpinnedChats { get; init; } = _emptyList;
        public IEnumerable<ChatInfo> AllChats => PinnedChats.Concat(UnpinnedChats);
    }
}
