@namespace ActualChat.Chat.UI.Blazor.Components
@using ActualChat.Notification
@inherits ComputedStateComponent<UnreadMessagesCounter.Model>
@{
    var m = State.LatestNonErrorValue;
    if (m.Count == 0)
        return;

    var bgColor = m.IsSubscribed
        ? "bg-primary"
        : "bg-counter";

    var countText = m.Count == 0 ? "" : m.Count.Format();
    var cursorClass = Click.HasDelegate ? "cursor-pointer" : "";
    var cssClass = $"message-counter-badge {cursorClass}";
}

<Badge Class="@cssClass" Color="@bgColor" Click="@Click">
    @countText
</Badge>

@code {
    [Inject] private Session Session { get; init; } = null!;
    [Inject] private AccountSettings AccountSettings { get; init; } = null!;
    [Inject] private ChatUI ChatUI { get; init; } = null!;

    [Parameter, EditorRequired, ParameterComparer(typeof(SetParameterComparer))]
    public List<ChatId> ChatIds { get; set; } = null!;
    [Parameter] public EventCallback Click { get; set; }

    public override Task SetParametersAsync(ParameterView parameters)
        => this.HasChangedParameters(parameters) ? base.SetParametersAsync(parameters) : Task.CompletedTask;

    protected override ComputedState<Model>.Options GetStateOptions() {
        return new() {
            InitialValue = Model.None,
            // We don't want to recompute it instantly on every message in every chat,
            // so we use fixed delayer here to make sure it happens at most once per N seconds
            UpdateDelayer = FixedDelayer.Get(5),
        };
    }

    protected override async Task<Model> ComputeState(CancellationToken cancellationToken) {
        if (ChatIds.Count == 0)
            return Model.None;

        var items = await ChatIds
            .Select(async chatId => {
                var chatStateTask = ChatUI.GetState(chatId, cancellationToken);
                var userChatSettingsTask = AccountSettings.GetUserChatSettings(chatId, cancellationToken);

                var chatState = await chatStateTask.ConfigureAwait(false);
                var userChatSettings = await userChatSettingsTask.ConfigureAwait(false);
                return (ChatId: chatId, UnreadMessagesCount: chatState?.UnreadMessageCount ?? 0, userChatSettings.NotificationMode);
            }).Collect();

        return new() {
            Count = items.Select(i => i.UnreadMessagesCount).Sum(),
            IsSubscribed = items.Any(i => i.NotificationMode != ChatNotificationMode.Muted),
        };
    }

    public sealed record Model(Trimmed<int> Count = default, bool IsSubscribed = false) {
        public static readonly Model None = new();
    }
}
