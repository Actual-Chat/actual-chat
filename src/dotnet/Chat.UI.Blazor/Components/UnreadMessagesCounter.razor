@namespace ActualChat.Chat.UI.Blazor.Components
@using ActualChat.Notification
@inherits ComputedStateComponent<UnreadMessagesCounter.Model>
@{
    var m = State.LatestNonErrorValue;
    if (m.Count == 0)
        return;

    var bgColor = m.IsSubscribed
        ? "bg-primary"
        : "bg-counter";

    var countText = m.Count == 0 ? "" : m.Count.Format();
    var cls = $"{bgColor} message-counter-badge";
}

<Badge Class="@cls">
    @countText
</Badge>

@code {
    private readonly List<(Symbol Chat, UnreadMessages UnreadMessages)> _chatUnreadMessages = new();

    [Inject] private Session Session { get; init; } = null!;
    [Inject] private INotifications Notifications { get; init; } = null!;
    [Inject] private UnreadMessagesFactory UnreadMessagesFactory { get; init; } = null!;

    [Parameter, EditorRequired] public List<Symbol> Chats { get; set; } = null!;

    protected override async Task OnParametersSetAsync() {
        _chatUnreadMessages.ForEach(x => x.UnreadMessages.DisposeSilently());
        _chatUnreadMessages.Clear();
        foreach (var chat in Chats) {
            _chatUnreadMessages.Add((chat, UnreadMessagesFactory.Get(chat)));
        }
        await base.OnParametersSetAsync();
    }

    public override async ValueTask DisposeAsync() {
        await base.DisposeAsync();
        _chatUnreadMessages.ForEach(x => x.UnreadMessages.DisposeSilently());
        _chatUnreadMessages.Clear();
    }

    protected override ComputedState<Model>.Options GetStateOptions() {
        return new() {
            InitialValue = Model.None,
            // We don't want to recompute it instantly on every message in every chat,
            // so we use fixed delayer here to make sure it happens at most once per N seconds
            UpdateDelayer = FixedDelayer.Get(5),
        };
    }

    protected override async Task<Model> ComputeState(CancellationToken cancellationToken) {
        if (_chatUnreadMessages.Count == 0)
            return Model.None;

        var isSubscribed = 0;
        var results = new ConcurrentBag<MaybeTrimmed<int>>();
        await _chatUnreadMessages
            .Select(async chatUnreadMessages => {
                var count = await chatUnreadMessages.UnreadMessages.GetCount(cancellationToken);
                results.Add(count);
                if (count.Value <= 0 || isSubscribed == 1)
                    return;

                if (await Notifications.IsSubscribed(Session, chatUnreadMessages.Chat, cancellationToken))
                    Interlocked.Exchange(ref isSubscribed, 1);
            })
            .Collect();

        return new() {
            Count = results.Sum(UnreadMessages.MaxCount),
            IsSubscribed = isSubscribed == 1,
        };
    }

    public sealed record Model {
        public static readonly Model None = new();

        public MaybeTrimmed<int> Count { get; init; }
        public bool IsSubscribed { get; init; }
    }
}
