@namespace ActualChat.Chat.UI.Blazor.Components
@using ActualChat.Search
@using ActualChat.Contacts
@inherits ComputedStateComponent<ContactSelect.ComputedModel>

<div class="contact-select-list">
    @foreach (var chatInfo in _filteredChats) {
        var isSelected = _model.IsSelected(chatInfo.Id);
        <div class="contact-select-list-item"
             @onclick="() => OnContactClick(chatInfo)">
            <ContactView
                ChatInfo="chatInfo"
                SearchPhrase="SearchPhrase"/>
            <Checkbox
                IsChecked="@isSelected"
                Class="!flex-none"
                Change="() => OnContactClick(chatInfo)"/>
        </div>
    }
</div>

@code {
    private List<ChatInfo> _filteredChats = new();
    private ContactSelectContext.Model _model = null!;

    [Inject] private ChatListUI ChatListUI { get; init; } = null!;
    [Inject] private IContacts Contacts { get; init; } = null!;

    [CascadingParameter] public ContactSelectContext.Model? ContextModel { get; set; }

    [Parameter] public bool ShowUserContactsOnly { get; set; }
    [Parameter] public ChatListOrder ChatListOrder { get; set; } = ChatListOrder.ByOwnUpdateTime;
    [Parameter, EditorRequired] public SearchPhrase SearchPhrase { get; set; } = null!;
    [Parameter] public IReadOnlyCollection<ChatId> ContactsToExclude { get; set; } = Array.Empty<ChatId>();
    [Parameter] public EventCallback<IReadOnlyCollection<ChatId>> SelectionChanged { get; set; }
    [Parameter] public EventCallback<IReadOnlyCollection<ChatInfo>> ChatSelectionChanged { get; set; }

    protected override void OnInitialized() {
        base.OnInitialized();
        _model = ContextModel ?? new ContactSelectContext.Model();
        _model.Changed += async (_, _) => {
            if (SelectionChanged.HasDelegate)
                await SelectionChanged.InvokeAsync(_model.GetSelectedChatIds());
            if (ChatSelectionChanged.HasDelegate)
                await ChatSelectionChanged.InvokeAsync(_model.GetSelectedChats());
            StateHasChanged();
        };
    }

    protected override ComputedState<ComputedModel>.Options GetStateOptions()
        => new() {
            InitialValue = ComputedModel.None,
            Category = GetStateCategory(),
        };

    protected override void OnParametersSet() {
        FilterChats(State.Value.Chats);
        StateHasChanged();
    }

    protected override async Task<ComputedModel> ComputeState(CancellationToken cancellationToken) {
        var filter = ShowUserContactsOnly ? ChatListFilter.Personal : ChatListFilter.None;
        var allUnordered = await ChatListUI.ListAllUnordered(filter, cancellationToken);
        var chats = allUnordered.Values
            .ExceptBy(ContactsToExclude, x => x.Id)
            .OrderBy(ChatListOrder)
            .ToList();

        FilterChats(chats);

        return new ComputedModel {
            Chats = chats,
        };
    }

    public sealed record ComputedModel {
        public static ComputedModel None { get; } = new() { Chats = Array.Empty<ChatInfo>() };
        public IReadOnlyCollection<ChatInfo> Chats { get; init; } = null!;
    }

    private void FilterChats(IReadOnlyCollection<ChatInfo> chats) {
        _filteredChats = SearchPhrase.IsEmpty
            ? chats.ToList()
            : chats
                .FilterAndOrderBySearchPhrase(SearchPhrase)
                .ToList();
    }

    private void OnContactClick(ChatInfo contact)
        => _model.Toggle(contact);
}
