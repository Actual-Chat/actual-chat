@namespace ActualChat.Chat.UI.Blazor.Components

<CascadingValue IsFixed="true" Value="@_model">
    @ChildContent
</CascadingValue>

@code {
    private readonly Model _model = new ();

    [Parameter] public RenderFragment ChildContent { get; set; } = null!;
    [Parameter] public EventCallback<IReadOnlyCollection<ChatId>> SelectionChanged { get; set; }
    [Parameter] public EventCallback<IReadOnlyCollection<ChatInfo>> ChatSelectionChanged { get; set; }

    protected override void OnInitialized() {
        _model.Changed += async (_, _) => {
            if (SelectionChanged.HasDelegate)
                await SelectionChanged.InvokeAsync(_model.GetSelectedChatIds());
            if (ChatSelectionChanged.HasDelegate)
                await ChatSelectionChanged.InvokeAsync(_model.GetSelectedChats());
        };
    }

    public class Model {
        private readonly List<ChatInfo> _selectedChats = new();

        public event EventHandler? Changed;

        public void Toggle(ChatInfo chatInfo) {
            var existentChatInfo = _selectedChats.FirstOrDefault(c => c.Id == chatInfo.Id);
            if (existentChatInfo != null) {
                _selectedChats.Remove(existentChatInfo);
            } else {
                _selectedChats.Add(chatInfo);
            }
            OnChanged();
        }

        public void Remove(ChatId chatId) {
            var existentChatInfo = _selectedChats.FirstOrDefault(c => c.Id == chatId);
            if (existentChatInfo == null) return;
            _selectedChats.Remove(existentChatInfo);
            OnChanged();
        }

        public IReadOnlyCollection<ChatInfo> GetSelectedChats()
            => _selectedChats.ToList();

        public IReadOnlyCollection<ChatId> GetSelectedChatIds()
            => _selectedChats.Select(c => c.Id).ToList();

        public bool IsSelected(ChatId chatId)
            => _selectedChats.Any(c => c.Id == chatId);

        private void OnChanged()
            => Changed?.Invoke(this, EventArgs.Empty);
    }
}
