@inherits ComputedStateComponent<HistoricalPlaybackSubHeader.Model>
@namespace ActualChat.Chat.UI.Blazor.Components
@using ActualChat.Chat.UI.Blazor.Services
@using ActualChat.MediaPlayback
@using Timer = System.Timers.Timer;
@using System.Timers
@{
    var m = State.Value;
    if (ReferenceEquals(m, Model.NotPlaying))
        return;
}

<div class="historical-playback-sub-header">
    <div class="historical-playback-sub-header-content">
        <div class="c-control-buttons">
            @if (ScreenSize.IsWide()) {
                <ButtonRound Title="Backward" Click="@OnBackward" Class="btn-xs btn-transparent hover-primary-icon">
                    <i class="icon-rewind-left-fill text-2xl"></i>
                </ButtonRound>
            }
            @if (m.IsPaused) {
                <ButtonRound Title="Play" Click="@OnResume" Class="btn-xs btn-transparent primary-icon" MustKeepAwake="true">
                    <i class="icon-play-fill text-2xl"></i>
                </ButtonRound>
            } else {
                <ButtonRound Title="Pause" Click="@OnPause" Class="btn-xs btn-transparent hover-primary-icon">
                    <i class="icon-pause-fill text-2xl"></i>
                </ButtonRound>
            }
            <ButtonRound Title="Stop" Click="@OnStop" Class="btn-xs btn-transparent btn-primary">
                <i class="icon-stop-fill text-2xl"></i>
            </ButtonRound>
            @if (ScreenSize.IsWide()) {
                <ButtonRound Title="Fast-forward" Click="@OnForward" Class="btn-xs btn-transparent hover-primary-icon">
                    <i class="icon-rewind-right-fill text-2xl"></i>
                </ButtonRound>
            }
        </div>

        <div class="flex-auto flex-y">
            @if (m.ShowChatTitle) {
                <div class="c-chat-title truncate whitespace-nowrap">
                    <a href="@Links.Chat(m.ChatId)" class="cursor-pointer hover:underline">@m.ChatTitle</a>
                </div>
            }
            @if (ScreenSize.IsWide()) {
                <div class="c-text truncate whitespace-nowrap">
                    @if (m.PlayingAt is { } playingAt) {
                        var localTime = DateTimeConverter.ToLocalTime(playingAt);
                        var absoluteTime = $"{localTime.ToLongDateString()} at {localTime.ToShortTimeString()}";
                        var relativeTime = LiveTime.GetDeltaText(playingAt, Clocks.SystemClock.Now);
                        <span>
                            Playing audio recorded
                            <span class="c-moment" title="@absoluteTime">@relativeTime</span>
                        </span>
                    }
                </div>
            }
        </div>

        <AuthorCircleGroup
            Class="historical-playback-active-authors-panel"
            MaxIconCount="4"
            Size="SquareSize.Size6"
            AuthorSids="@m.AuthorSids" />

        @* Speed Selector *@
        <HeaderButton Click="@OnStop" Class="blackout">
            <i class="icon-close-fill text-2xl"></i>
        </HeaderButton>
    </div>
</div>

@code {
    private RewindController? _rewindController;

    [Inject] private ChatUIHub Hub { get; set; } = null!;
    [Inject] private ActivePlaybackInfo ActivePlaybackInfo { get; init; } = null!;
    [Inject] private LiveTime LiveTime { get; init; } = null!;
    private Session Session => Hub.Session();
    private IChats Chats => Hub.Chats;
    private ChatUI ChatUI => Hub.ChatUI;
    private ChatPlayers ChatPlayers => Hub.ChatPlayers;
    private MomentClockSet Clocks => Hub.Clocks();
    private DateTimeConverter DateTimeConverter => Hub.DateTimeConverter;

    [CascadingParameter] public ScreenSize ScreenSize { get; set; }

    protected override ComputedState<Model>.Options GetStateOptions()
        => ComputedStateComponent.GetStateOptions(GetType(),
            static t => new ComputedState<Model>.Options() {
                InitialValue = Model.NotPlaying,
                UpdateDelayer = FixedDelayer.NextTick,
                Category = ComputedStateComponent.GetStateCategory(t),
            });

    protected override async Task<Model> ComputeState(CancellationToken cancellationToken) {
        var lastState = State.Value;
        var selectedChatId = await ChatUI.SelectedChatId.Use(cancellationToken).ConfigureAwait(false);
        var playbackState = await ChatPlayers.PlaybackState.Use(cancellationToken).ConfigureAwait(false);
        if (playbackState is not HistoricalPlaybackState { ChatId: var chatId } || chatId.IsNone)
            return Model.NotPlaying;

        var chat = await Chats.Get(Session, chatId, cancellationToken).ConfigureAwait(false);
        var chatTitle = chat?.Title ?? "";
        var player = await ChatPlayers.Get(chatId, ChatPlayerKind.Historical, cancellationToken).ConfigureAwait(false);
        var historicalChatPlayer = player as HistoricalChatPlayer;
        var playback = historicalChatPlayer?.Playback;
        if (playback == null) {
            // This happens when player is being disposed, which means this method
            // will soon recompute anyway.
            return lastState; // Keep the last state to avoid blinking
        }

        var isPaused = await playback.IsPaused.Use(cancellationToken).ConfigureAwait(false);
        var playingTracks = await playback.PlayingTracks.Use(cancellationToken).ConfigureAwait(false);
        var authorSids = new HashSet<string>();
        Moment? playingAt = null;
        foreach (var playingTrack in playingTracks) {
            var trackInfo = playingTrack.TrackInfo;
            if (trackInfo is ChatAudioTrackInfo chatAudioTrackInfo) {
                var authorId = chatAudioTrackInfo.AudioEntry.AuthorId;
                authorSids.Add(authorId);
            }
            var actualPlaybackState = await ActivePlaybackInfo.GetTrackPlaybackState(trackInfo.TrackId, cancellationToken).ConfigureAwait(false);
            if (actualPlaybackState == null)
                continue;

            playingAt ??= trackInfo.RecordedAt + actualPlaybackState.PlayingAt;
        }
        if (playingAt.HasValue)
            return new() {
                ChatId = chatId,
                PlayingAt = playingAt,
                ChatPlayer = historicalChatPlayer,
                IsPaused = isPaused,
                ChatTitle = chatTitle,
                ShowChatTitle = chatId != selectedChatId,
                AuthorSids = authorSids.ToList(),
            };

        var canUseLastModel = !ReferenceEquals(lastState, Model.NotPlaying)
            && lastState.ChatId == chatId
            && lastState.ChatPlayer == historicalChatPlayer
            && lastState.IsPaused == isPaused;
        return canUseLastModel ? lastState! : Model.NotPlaying;
    }

    private void OnStop()
        => ChatPlayers.StopHistoricalPlayback();

    private void OnResume() {
        var m = State.Value;
        if (m.ChatPlayer == null)
            return;
        _ = m.ChatPlayer.Playback.Resume(default);
    }

    private void OnPause() {
        var m = State.Value;
        if (m.ChatPlayer == null)
            return;
        _ = m.ChatPlayer.Playback.Pause(default);
    }

    private void OnForward()
        => Rewind(TimeSpan.FromSeconds(15));

    private void OnBackward()
        => Rewind(TimeSpan.FromSeconds(-15));

    private void Rewind(TimeSpan shift) {
        _rewindController ??= new RewindController(OnRewindRequested);
        var m = State.Value;
        var moment = m.PlayingAt;
        if (!moment.HasValue || m.ChatPlayer == null)
            return;
        _rewindController.Rewind(m.ChatId, moment.Value, shift);
    }

    private void OnRewindRequested(ChatId chatId, DateTime momentFrom, TimeSpan shift) {
        _ = InvokeAsync(() => {
            var m = State.Value;
            if (m.ChatPlayer != null && m.ChatPlayer.ChatId == chatId)
                _ = PlayAt(m.ChatPlayer, momentFrom, shift);
        });
    }

    private async Task PlayAt(HistoricalChatPlayer chatPlayer, DateTime from, TimeSpan shift, CancellationToken cancellationToken = default)
    {
        var newMoment = await chatPlayer.GetRewindMoment(from, shift, cancellationToken);
        if (!newMoment.HasValue)
            return;
        ChatPlayers.StartHistoricalPlayback(chatPlayer.ChatId, newMoment.Value);
    }

    // Nested types

    public sealed record Model
    {
        public static readonly Model NotPlaying = new();

        public DateTime? PlayingAt { get; init; }
        public bool IsPaused { get; init; }
        public HistoricalChatPlayer? ChatPlayer { get; init; }
        public string ChatTitle { get; init; } = "";
        public ChatId ChatId { get; init; }
        public bool ShowChatTitle { get; init; }
        public List<string> AuthorSids { get; init; } = [];
    }

    private class RewindController
    {
        private Timer _rewindTimer;
        private ChatId _chatId;
        private DateTime _rewindFrom;
        private TimeSpan _rewindSpan;

        public RewindController(Action<ChatId, DateTime, TimeSpan> onRewindRequested)
        {
            _rewindTimer = new Timer(300) { AutoReset = false };
            _rewindTimer.Elapsed += (s,e) => onRewindRequested(_chatId, _rewindFrom, _rewindSpan);
        }

        public void Rewind(ChatId chatId, DateTime moment, TimeSpan shift)
        {
            if (!_rewindTimer.Enabled) {
                _chatId = chatId;
                _rewindFrom = moment;
                _rewindSpan = shift;
                _rewindTimer.Start();
            } else {
                _rewindTimer.Stop();
                _rewindSpan += shift;
                if (_chatId == chatId)
                    _rewindTimer.Start();
            }
        }
    }
}
