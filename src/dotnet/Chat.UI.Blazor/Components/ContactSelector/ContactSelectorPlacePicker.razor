@using ActualChat.Media;
@namespace ActualChat.Chat.UI.Blazor.Components
@inherits ComputedStateComponent<ContactSelectorPlacePicker.Model>
@{
    var m = State.Value;
    @if (!m.EnablePlacesUI)
        return;
    var places = m.Places;
    if (places.Count == 0)
        return;
    var order = 0;
}

<div class="contact-selector-place-picker">
    <TabPanel BottomHill="@true" SelectedTabIdChanged="@OnSelectedTabIdChanged">
        <ChildContent>
            <Tab Id="@(string.Empty)" Order="@(order++)">
                <TitleContent>
                    <i class="icon-message-ellipse text-2xl font-medium"></i>
                </TitleContent>
            </Tab>

            @foreach (var place in places) {
                <Tab Id="@(place.Id.Value)" Order="@(order++)">
                    <TitleContent>
                        <Pic
                            Title="@place.Title"
                            Picture="@place.Picture.ToPicture()"
                            Size="@SquareSize.Size10"
                            IsSquare="true"
                            AvatarKind="@AvatarKind.Marble"
                            AvatarKey="@place.Id.Value"/>
                    </TitleContent>
                </Tab>
            }
        </ChildContent>
    </TabPanel>
</div>

@code {
    [Inject] private ChatUIHub Hub { get; init; } = null!;
    private Session Session => Hub.Session();
    private Features Features => Hub.Features();

    [CascadingParameter] public ContactSelector Selector { get; set; } = null!;

    protected override ComputedState<Model>.Options GetStateOptions()
        => new() {
            InitialValue = new Model(false),
            Category = GetStateCategory(),
        };

    protected override async Task<Model> ComputeState(CancellationToken cancellationToken) {
        var enablePlacesUI = await Features.Get<Features_EnablePlacesUI, bool>(cancellationToken);
        var placeIds = await Hub.Contacts.ListPlaceIds(Session, cancellationToken);
        var places = (await placeIds
                .Select(id => Hub.Places.Get(Session, id, cancellationToken))
                .Collect())
            .SkipNullItems()
            .OrderBy(c => c.CreatedAt)
            .ToApiArray();

        return new Model(enablePlacesUI) {
            Places = places
        };
    }

    private void OnSelectedTabIdChanged(string? tabId) {
        if (tabId.IsNullOrEmpty())
            SelectPlace(PlaceId.None);
        else if (PlaceId.TryParse(tabId, out var placeId))
            SelectPlace(placeId);
    }

    private void SelectPlace(PlaceId placeId)
        => Selector.SelectPlace(placeId);

    public record Model(bool EnablePlacesUI) {
        public ApiArray<Place> Places { get; init; } = ApiArray.Empty<Place>();
    }
}
