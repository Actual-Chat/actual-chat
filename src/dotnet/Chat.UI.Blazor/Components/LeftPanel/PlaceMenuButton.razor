@namespace ActualChat.Chat.UI.Blazor.Components
@using ActualChat.Contacts
@inherits ComputedStateComponent<PlaceMenuButton.Model>
@{
    var m = State.Value;
    if (!m.IsPlaceMember)
        return;
    if (m.Place == null)
        return;
}

<div class="c-left"
      data-menu="@(MenuRef.New<PlaceMenu>(PlaceId).ToString())"
      data-menu-trigger="@MenuTrigger.Primary"
      data-menu-placement="@(FloatingPosition.RightStart.ToPositionString())">
   <div class="c-top">
       <span class="c-title">@m.Place.Title</span>
       <i class="icon-chevron-right flex-none"></i>
   </div>
   <div class="c-bottom">
       <span>@m.MembersCount @("Member".Pluralize(m.MembersCount))</span>
       <span class="c-dot"></span>
       <span>@(m.Place.IsPublic ? "Public" : "Private")</span>
   </div>
</div>

@code {
    [Inject] private ChatUIHub Hub { get; set; } = null!;
    private Session Session => Hub.Session();
    private IContacts Contacts => Hub.Contacts;
    private IPlaces Places => Hub.Places;

    [Parameter, EditorRequired] public PlaceId PlaceId { get; set; }

    protected override ComputedState<Model>.Options GetStateOptions()
        => ComputedStateComponent.GetStateOptions(GetType(),
            static t => new ComputedState<Model>.Options() {
                InitialValue = Model.Loading,
                Category = ComputedStateComponent.GetStateCategory(t),
            });

    protected override async Task<Model> ComputeState(CancellationToken cancellationToken) {
        var placeId = PlaceId;
        var place = await Hub.Places.Get(Hub.Session(), placeId, default).Require().ConfigureAwait(false);
        var places = await Contacts.ListPlaceIds(Session, cancellationToken).ConfigureAwait(false);
        var isMember = places.Contains(placeId);
        var allAuthorIds = await Places.ListAuthorIds(Session, place.Id, cancellationToken).ConfigureAwait(false);
        return new() {
            Place = place,
            IsPlaceMember = isMember,
            MembersCount = allAuthorIds.Count,
        };
    }

    // Nested types

    public sealed record Model {
        public static readonly Model Loading = new();

        public Place? Place { get; init; }
        public bool IsPlaceMember { get; init; }
        public int MembersCount { get; init; }
    }
}
