@namespace ActualChat.Chat.UI.Blazor.Components
@implements IDisposable
@using ActualChat.Chat.UI.Blazor.Events

<OnUIEvent TEvent="@SelectedChatChangedEvent" Handler="@OnSelectedChatChangedEvent" />
<div class="left-panel-content-header">
    <div class="c-content">
        <div class="c-title">
            @NavbarUI.SelectedGroupTitle
        </div>
        <div class="flex grow"></div>
        <div class="c-ending">
            <ChatSearchBox
                @ref="_searchBoxRef"
                Placeholder="Find chat..."
                IsCollapsed="true"
                ShowSpinner="true"
                ShowClose="true"
                MaxLength="@Constants.Chat.MaxSearchFilterLength"
                TextChanged="@_onSearchBoxTextChanged" />
            @if (NavbarUI.IsPlaceSelected(out var placeId)) {
                <div
                    class="menu"
                    data-menu="@(MenuRef.New<PlaceMenu>(placeId).ToString())"
                    data-menu-trigger="@MenuTrigger.Primary"
                    data-menu-placement="@(FloatingPosition.RightStart.ToPositionString())">

                    <ButtonRound Class="blackout" ContentClass="!bg-transparent">
                        <i class="icon-more-vertical text-2xl"></i>
                    </ButtonRound>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private ChatSearchBox? _searchBoxRef = null;
    private EventCallback<string> _onSearchBoxTextChanged;

    [Inject] private ChatUIHub Hub { get; init; } = null!;

    private NavbarUI NavbarUI => Hub.NavbarUI;
    private SearchUI SearchUI => Hub.SearchUI;
    private ScreenSize ScreenSize => Hub.BrowserInfo.ScreenSize.Value;

    protected override void OnInitialized() {
        _onSearchBoxTextChanged = NoStateHasChanged.EventCallback<string>(OnSearchBoxTextChanged);
        NavbarUI.SelectedGroupChanged += OnNavbarSelectedGroupOrTitleChanged;
        NavbarUI.SelectedGroupTitleUpdated += OnNavbarSelectedGroupOrTitleChanged;
    }

    public void Dispose() {
        NavbarUI.SelectedGroupChanged -= OnNavbarSelectedGroupOrTitleChanged;
        NavbarUI.SelectedGroupTitleUpdated -= OnNavbarSelectedGroupOrTitleChanged;
    }

    private void OnSearchBoxTextChanged(string text)
        => SearchUI.Text.Value = text;

    private void OnNavbarSelectedGroupOrTitleChanged(object? s, EventArgs e)
        => InvokeAsync(StateHasChanged);

    private async Task OnSelectedChatChangedEvent(SelectedChatChangedEvent @event, CancellationToken cancellationToken) {
        if (_searchBoxRef != null)
            await _searchBoxRef.Cancel();
    }
}
