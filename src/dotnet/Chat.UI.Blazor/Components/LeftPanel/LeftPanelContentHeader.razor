@namespace ActualChat.Chat.UI.Blazor.Components
@implements IDisposable
@inherits ComputedStateComponent<Place?>
@{
    var m = State.Value;
}

@if (m != null) {
    <LeftPanelPlaceContentHeader Place="@m"/>
} else {
    <div class="left-panel-content-header">
        <LeftChatSearchPanel />
        <div class="c-content">
            <div class="c-title">
                Chats
            </div>
        </div>
    </div>
}

@code {
    [Inject] private ChatUIHub Hub { get; init; } = null!;
    [Inject] private PanelsUI PanelsUI { get; init; } = null!;

    private NavbarUI NavbarUI => Hub.NavbarUI;
    private Session Session => Hub.Session();
    private IPlaces Places => Hub.Places;

    protected override async Task OnInitializedAsync() {
        NavbarUI.SelectedGroupChanged += OnNavbarSelectedGroupOrTitleChanged;
        NavbarUI.SelectedGroupTitleUpdated += OnNavbarSelectedGroupOrTitleChanged;
        await base.OnInitializedAsync();
    }

    public void Dispose() {
        NavbarUI.SelectedGroupChanged -= OnNavbarSelectedGroupOrTitleChanged;
        NavbarUI.SelectedGroupTitleUpdated -= OnNavbarSelectedGroupOrTitleChanged;
    }

    protected override ComputedState<Place?>.Options GetStateOptions()
        => new() {
            InitialValue = null,
            Category = ComputedStateComponent.GetStateCategory(GetType()),
        };

    protected override async Task<Place?> ComputeState(CancellationToken cancellationToken) {
        var placeId = NavbarUI.IsPlaceSelected(out var selectedPlaceId)
            ? selectedPlaceId
            : NavbarUI.IsPinnedChatSelected(out var pinnedChatId)
                ? pinnedChatId.PlaceId
                : PlaceId.None;
        var place = placeId.IsNone
            ? null
            : await Places.Get(Session, placeId, default).ConfigureAwait(false);
        return place;
    }

    private void OnNavbarSelectedGroupOrTitleChanged(object? s, EventArgs e)
        => State.Invalidate();
}
