@namespace ActualChat.Chat.UI.Blazor.Components
@using ActualChat.MLSearch
@inherits ComputedStateComponent<bool>
@{
    var enableIncompleteUI = State.Value;
    var cls = _isOpen ? "open" : "closed";
}

<div class="left-search-panel chat-search @cls">
    <div class="c-search">
        <div class="search-input">
            <label>
                <TextInput
                    @ref="_inputRef"
                    Class="w-full dialog-unstyled"
                    Placeholder="@Placeholder"
                    MaxLength="@MaxLength"
                    OnFocus="@(_ => OnClick(true))"
                    TextChanged="OnSearchInputTextChanged">
                </TextInput>

                @if (enableIncompleteUI) {
                    <ButtonRound Click="@OnAISearchClicked" Class="c-ai-btn">
                        <i class="icon-ai-search text-xl"></i>
                    </ButtonRound>
                } else {
                    <ButtonRound Click="@OnSearchButtonClick" Class="c-ai-btn search-btn">
                        <i class="icon-search text-xl"></i>
                    </ButtonRound>
                }
                <HeaderButton Click="@(_ => OnClick(false))" Class="c-close-btn">
                    <i class="icon-close text-2xl"></i>
                </HeaderButton>
            </label>
        </div>
    </div>
    @if (enableIncompleteUI) {
        <div class="c-content height-anchor">
            <TabPanel
                @key="@("left-chat-search-panel")"
                TabsClass="left-panel-tabs wide-left-panel-tabs"
                BottomHill="true">

                <Tab @key="@("chats")" Id="chats" Title="Chats" Order="0">
                    <div class="c-container">
                        <ChatSearchTab/>
                    </div>
                </Tab>
                <Tab @key="@("ai-search")" Id="ai-search" Title="Search" Order="1">
                    <div class="c-container">
                        <RecentlyViewedGroups
                            Title="Recent searches"
                            ListKind="@ChatUsageListKind.SearchChats"/>
                    </div>
                </Tab>
                <Tab @key="@("threads")" Id="Threads" Title="Threads" Order="2">
                    <ToBeDone/>
                </Tab>
                <Tab @key="@("tags")" Id="tags" Title="Tags" Order="3">
                    <ToBeDone/>
                </Tab>
                <Tab @key="@("media")" Id="media" Title="Media" Order="4">
                    <ToBeDone/>
                </Tab>
            </TabPanel>

            <div class="ai-btn">
                <Button Class="btn-primary" Click="@OnAISearchClicked">
                    <i class="icon-ai-search"></i>
                    Open AI Search
                </Button>
            </div>
        </div>
    }
</div>

@code {
    private bool _isOpen;

    TextInput? _inputRef = null;

    [Inject] private ChatUIHub Hub { get; set; } = null!;

    private Session Session => Hub.Session();
    private PanelsUI PanelsUI => Hub.PanelsUI;
    private SearchUI SearchUI => Hub.SearchUI;
    private Features Features => Hub.Features();
    private UICommander UICommander => Hub.UICommander();
    private History History => Hub.History;

    [CascadingParameter] public ScreenSize ScreenSize { get; set; }

    [Parameter] public string Placeholder { get; set; } = "Search";
    [Parameter] public int? MaxLength { get; set; }

    protected override ComputedState<bool>.Options GetStateOptions()
        => new() {
            InitialValue = false,
            Category = ComputedStateComponent.GetStateCategory(GetType()),
        };

    protected override async Task<bool> ComputeState(CancellationToken cancellationToken)
        => await Features.Get<Features_EnableIncompleteUI, bool>(cancellationToken).ConfigureAwait(false);

    private void OnClick(bool openPanel) {
        if (!openPanel)
            Cancel();
        _isOpen = openPanel;
        StateHasChanged();
    }

    private void OnSearchButtonClick()
        => _inputRef?.Focus();

    private void OnSearchInputTextChanged(string text)
        => SearchUI.Text.Value = text;

    private ValueTask Cancel()
        => _inputRef?.Clear() ?? default;

    private async Task OnAISearchClicked() {
        var chatIdOpt = await CreateSearchChat();
        if (!chatIdOpt.HasValue)
            return;

        var searchChatId = chatIdOpt.Value;
        Hub.NavbarUI.SelectGroup(NavbarGroupIds.Chats, false);
        if (ScreenSize.IsNarrow())
            PanelsUI.HidePanels();
        await History.NavigateTo(Links.Chat(searchChatId));
    }

    private async Task<ChatId?> CreateSearchChat() {
        var createSearchChatCommand = new MLSearch_CreateChat(Session, "Search", default);
        var (searchChat, error) = await UICommander.Run(createSearchChatCommand);
        if (error != null)
            return null;

        return searchChat.Id;
    }
}
