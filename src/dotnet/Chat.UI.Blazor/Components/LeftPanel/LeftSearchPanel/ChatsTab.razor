@namespace ActualChat.Chat.UI.Blazor.Components
@using SearchUI = ActualChat.Chat.UI.Blazor.Services.SearchUI
@inherits ComputedStateComponent<ChatsTab.Model>

@{
    var m = _rendered = State.Value;
    if (m is { OwnChatCount: 0, IsSearchApplied: false })
        return;

    var plugs = new Dictionary<string, string>() {
        {"GuildensternGuildenstern", "bg-red-200"},
        {"OpheliaOpheliaOphelia", "bg-green-200"},
        {"Hamlet", "bg-blue-200"},
        {"Polonius", "bg-yellow-200"},
        {"Guildenstern", "bg-red-200"},
        {"Ophelia", "bg-green-200"},
    };
}

@if (!m.IsSearchApplied) {
    <div class="recent-contacts">
        @foreach (var plug in plugs) {
            var cls = $"c-author {plug.Value}";
            <div class="c-plug">
                <div class="@cls"></div>
                <div class="c-name">@plug.Key</div>
            </div>
        }
    </div>
    <Divider Class="mx-1 my-1.5"/>
    <RecentlyViewed/>
} else {
    <OwnChatList Count="@m.OwnChatCount"/>
}

@code {
    private Model _rendered;
    private ChatListKind _kind = ChatListKind.All;

    [Inject] private ChatUIHub Hub { get; set; } = null!;

    private SearchUI SearchUI => Hub.SearchUI;
    private ChatListUI ChatListUI => Hub.ChatListUI;

    protected override ComputedState<Model>.Options GetStateOptions()
        => new() {
            InitialValue = new Model(
                ChatListUI.GetCountWhenLoading(_kind),
                false,
                true),
            Category = ComputedStateComponent.GetStateCategory(GetType()),
        };

    protected override async Task<Model> ComputeState(CancellationToken cancellationToken) {
        var ownChatCount = await ChatListUI.GetCount(_kind).ConfigureAwait(false);
        var isSearchApplied = await SearchUI.IsSearchApplied(cancellationToken);
        return new(ownChatCount, isSearchApplied);
    }

    protected override bool ShouldRender()
        => State.HasError || State.Value != _rendered;

    // Nested types

    public record struct Model(
        int OwnChatCount,
        bool IsSearchApplied = false,
        bool IsLoading = false);
}
