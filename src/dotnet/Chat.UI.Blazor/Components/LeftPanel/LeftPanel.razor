@namespace ActualChat.Chat.UI.Blazor.Components
@using ActualChat.UI.Blazor.Components.SideNav
@implements IDisposable

<SideNav
    Side="SideNavSide.Left"
    IsOpen="@_isOpen"
    VisibilityChanged="@(NoStateHasChanged.EventCallback<bool>(isOpen => PanelsUI.Left.SetIsVisible(isOpen)))">
    <div class="left-panel">
        <ErrorBarrier Name="LeftPanelContent" Kind="@ErrorBarrierKind.Full">
            <LeftPanelButtons/>
            @if (IsSkeletonWidePanel) {
                <SkeletonWideLeftPanel>
                    @WidePanelBottomContent
                </SkeletonWideLeftPanel>
            } else {
                <div class="left-panel-content">
                    <LeftPanelContentHeader/>
                    <DownloadAppBanner CanBeClosed="true"/>
                    <NavbarContent/>
                    @if (_isSearchPanelOpen) {
                        <LeftSearchPanel OnAISearchClick="@OpenRightSearchPanel"/>
                    }
                </div>
            }
        </ErrorBarrier>
    </div>
</SideNav>

@code {
    // private Debouncer<Unit> _isOpenDebouncer = null!;
    private Action? _leftPanelVisibilityChanged;
    private Action? _leftPanelSearchModeChanged;
    private bool _isOpen;
    private bool _isSearchPanelOpen;

    [Inject] private PanelsUI PanelsUI { get; init; } = null!;
    // [Inject] private Dispatcher Dispatcher { get; init; } = null!;

    [CascadingParameter] public ScreenSize ScreenSize { get; set; }
    [Parameter] public bool IsSkeletonWidePanel { get; set; }
    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Parameter] public RenderFragment? WidePanelBottomContent { get; set; }

    protected override void OnInitialized() {
        _isOpen = PanelsUI.Left.IsVisible.Value;
#if false
        var isOpenDebouncer = new Debouncer<Unit>(
            TimeSpan.FromMicroseconds(30),
            _ => Dispatcher.InvokeAsync(OnLeftPanelVisibilityChanged));
        _leftPanelVisibilityChanged = () => isOpenDebouncer.Debounce(default);
#endif
        _leftPanelVisibilityChanged = OnLeftPanelVisibilityChanged;
        PanelsUI.Left.VisibilityChanged += _leftPanelVisibilityChanged;
        _leftPanelSearchModeChanged = OnLeftPanelSearchModeChanged;
        PanelsUI.Left.SearchModeChanged += _leftPanelSearchModeChanged;
    }

    private void OnLeftPanelVisibilityChanged() {
        var isOpen = PanelsUI.Left.IsVisible.Value;
        if (_isOpen == isOpen)
            return;

        _isOpen = isOpen;
        StateHasChanged();
    }

    private void OnLeftPanelSearchModeChanged() {
        var isSearchMode = PanelsUI.Left.IsSearchMode;
        if (_isSearchPanelOpen == isSearchMode)
            return;
        _isSearchPanelOpen = isSearchMode;
        StateHasChanged();
    }

    private void OpenRightSearchPanel() {
        PanelsUI.Right.SearchToggle();
        PanelsUI.Left.ToggleSearchMode();
        if (ScreenSize.IsNarrow()) {
            PanelsUI.Left.SetIsVisible(false);
        }
    }

    public void Dispose() {
        PanelsUI.Left.VisibilityChanged -= _leftPanelVisibilityChanged;
        PanelsUI.Left.SearchModeChanged -= _leftPanelSearchModeChanged;
    }
}
