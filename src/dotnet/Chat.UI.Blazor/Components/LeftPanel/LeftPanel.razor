@namespace ActualChat.Chat.UI.Blazor.Components
@using ActualChat.UI.Blazor.Components.SideNav
@using ActualChat.IO
@implements IDisposable

<SideNav
    Side="SideNavSide.Left"
    IsOpen="@_isOpen"
    VisibilityChanged="@(isOpen => PanelsUI.Left.SetIsVisible(isOpen))">
    <div class="flex-x h-full bg-04">
        <LeftPanelButtons/>
        <LeftPanelContent/>
    </div>
</SideNav>

@code {
    // private Debouncer<Unit> _isOpenDebouncer = null!;
    private Action? _leftPanelVisibilityChanged;
    private bool _isOpen;

    [Inject] private PanelsUI PanelsUI { get; init; } = null!;
    // [Inject] private Dispatcher Dispatcher { get; init; } = null!;

    protected override void OnInitialized() {
#if false // NOTE(AY): Debouncing workaround seems unnecessary, but keeping it just in case for now
        _isOpenDebouncer = new Debouncer<Unit>(
            TimeSpan.FromMicroseconds(50),
            _ => Dispatcher.InvokeAsync(() => {
                _isOpen = PanelsUI.Left.IsVisible.Value;
                StateHasChanged();
            }));
        _leftPanelVisibilityChanged = () => _isOpenDebouncer.Debounce(default);
#endif
        _leftPanelVisibilityChanged = () => {
            _isOpen = PanelsUI.Left.IsVisible.Value;
            StateHasChanged();
        };
        PanelsUI.Left.VisibilityChanged += _leftPanelVisibilityChanged;
    }

    public void Dispose()
        => PanelsUI.Left.VisibilityChanged -= _leftPanelVisibilityChanged;
}
