@namespace ActualChat.Chat.UI.Blazor.Components
@implements IModalView<AvatarSelectModal.Model>
@using Stl.Generators
@inherits ComputedStateComponent<AvatarSelectModal.ViewModel>
@{
    var m = State.Value;
    var mode = ModalModel.ChatId.IsNone ? Mode.Join : Mode.Change;
    var title = mode == Mode.Join ? "Choose avatar" : "Change your avatar";
}

<DialogFrame
    Title="@title"
    Class="avatar-select-modal">
    <Body>
    @if (m == ViewModel.None) {
        return;
    }
    <FormBlock>
        <div class="avatar-select">
            @if (mode == Mode.Change) {
                <div class="flex-x gap-x-1 text-sm font-normal">
                    You can change your avatar in the current chat here.
                </div>
            }
            @foreach (var avatar in m.Avatars) {
                <Tile Click="_ => OnAvatarSelected(avatar)" Class="avatar-select-item">
                    <TileItem>
                        <Icon>
                            <AvatarCard Avatar="@avatar"/>
                        </Icon>
                        <Content>
                            @avatar.Name
                        </Content>
                        <Right>
                            @if (m.SelectedAvatarId == avatar.Id) {
                                <i class="icon-star text-xl text-accent"></i>
                            }
                        </Right>
                    </TileItem>
                </Tile>
            }
            @if (m.Anonymous != null) {
                var avatar = m.Anonymous;
                <div class="flex-y">
                    <div class="flex-x text-sm font-normal border-t-2 py-1">
                        You can use anonymous avatar:
                    </div>
                    <Tile Click="_ => OnAnonymousSelected(avatar)" Class="avatar-select-item">
                        <TileItem>
                            <Icon>
                                <AvatarCard Avatar="@avatar"/>
                            </Icon>
                            <Content>
                                @avatar.Name
                            </Content>
                            <Right>
                                <AnonymousIcon Class="w-5 h-5"/>
                            </Right>
                        </TileItem>
                    </Tile>
                    <div class="flex-x text-sm font-normal">
                        <button class="underline mt-2" @onclick="@RegenerateAnonymousAvatar">Regenerate anonymous avatar</button>
                    </div>
                </div>
            }
        </div>
    </FormBlock>
    </Body>
    <Buttons>
        <Button Class="btn-modal" Click="@OnCancel">Close</Button>
    </Buttons>
</DialogFrame>

@code {
    private static RandomStringGenerator IdGenerator { get; } = new(10, Alphabet.AlphaNumeric);
    private Avatar? _anonymous;

    [Inject] private Session Session { get; init; } = null!;
    [Inject] private IAvatars Avatars { get; init; } = null!;
    [Inject] private IAccounts Accounts { get; init; } = null!;
    [Inject] private IAuthors Authors { get; init; } = null!;
    [Inject] private UICommander UICommander { get; init; } = null!;

    [CascadingParameter] public Modal Modal { get; set; } = null!;
    [Parameter] public Model ModalModel { get; set; } = null!;

    protected override ComputedState<ViewModel>.Options GetStateOptions()
        => new() {
            InitialValue = ViewModel.None,
            Category = GetStateCategory(),
        };

    protected override async Task<ViewModel> ComputeState(CancellationToken cancellationToken) {
        var selectedAvatarId = await GetSelectedAvatarId(cancellationToken);
        var avatarIds = await Avatars.ListOwnAvatarIds(Session, cancellationToken);
        var avatars = await avatarIds
            .Select(x => Avatars.GetOwn(Session, x, cancellationToken))
            .Collect();
        var existingAvatars = avatars.SkipNullItems().ToApiArray();
        var anonymous = GetAnonymous();
        return new ViewModel(existingAvatars, selectedAvatarId, anonymous);
    }

    private Avatar? GetAnonymous() {
        if (!ModalModel.AllowAnonymous)
            return null;
        return _anonymous ??= GenerateAnonymous();
    }

    private Avatar GenerateAnonymous() {
        var next = IdGenerator.Next();
        return new (Symbol.Empty) {
            Name = RandomNameGenerator.Default.Generate(),
            Bio = "Someone anonymous",
            PictureUrl = DefaultUserPicture.GetBoringAvatar(next),
        };
    }

    private void RegenerateAnonymousAvatar() {
        _anonymous = GenerateAnonymous();
        State.Recompute();
    }

    private async Task<Symbol> GetSelectedAvatarId(CancellationToken cancellationToken)
    {
        if (ModalModel.ChatId.IsNone) {
            var account = await Accounts.GetOwn(Session, cancellationToken);
            return account.Avatar.Id;
        }
        else {
            var author = await Authors.GetOwn(Session, ModalModel.ChatId, cancellationToken);
            return author?.Avatar.Id ?? Symbol.Empty;
        }
    }

    private async Task OnAnonymousSelected(Avatar anonymous) {
        var account = await Accounts.GetOwn(Session, default);
        var command = new Avatars_Change(Session, Symbol.Empty, null, new Change<AvatarFull>() {
            Create = new AvatarFull(account.Id) {
                IsAnonymous = true,
            }.WithMissingPropertiesFrom(anonymous),
        });
        var (avatar, error) = await UICommander.Run(command);
        if (error != null)
            return;
        await OnAvatarSelected(avatar);
    }

    private async Task OnAvatarSelected(AvatarFull avatar) {
        await ModalModel.OnAvatarSelected(avatar);
        Modal.Close();
    }

    private void OnCancel()
        => Modal.Close();

    // Nested types

    private enum Mode { Join, Change }

    public sealed record Model(ChatId ChatId, bool AllowAnonymous, Func<AvatarFull, Task> OnAvatarSelected);

    public sealed record ViewModel(ApiArray<AvatarFull> Avatars, Symbol SelectedAvatarId, Avatar? Anonymous) {
        public static readonly ViewModel None = new(default, default, null);
    }
}
