@inherits ComputedStateComponent<Language>
@{
    var m = State.Value;
    var isLoading = m == Languages.Loading;
    var loadingCls = isLoading ? "animate-pulse" : "";
    var cls = $"chat-language-toggle {loadingCls}";
}

<ButtonRound
    Class="@cls" Click="@(_ => OnClick())">
    <span class="w-6 h-6 m-1">
        @if (!isLoading) {
            @m.ShortTitle
        }
    </span>
</ButtonRound>

@code {
    [Inject] private Session Session { get; init; } = null!;
    [Inject] private AccountSettings AccountSettings { get; init; } = null!;
    [Inject] private UICommander UICommander { get; init; } = null!;
    [Inject] private LanguageUI LanguageUI { get; init; } = null!;
    [Inject] private ModalUI ModalUI { get; init; } = null!;

    [Parameter, EditorRequired] public Chat Chat { get; set; } = null!;

    protected override ComputedState<Language>.Options GetStateOptions()
        => new() {
            UpdateDelayer = FixedDelayer.Instant,
            Category = GetStateCategory(),
            InitialValue = Languages.Loading,
        };

    protected override async Task<Language> ComputeState(CancellationToken cancellationToken) {
        var language = await LanguageUI.GetChatLanguage(Chat.Id, cancellationToken).ConfigureAwait(false);
        return language.Or(Languages.Main);
    }

    protected async Task OnClick(CancellationToken cancellationToken = default) {
        var languages = await LanguageUI.Settings.Use(cancellationToken);
        if (languages.Secondary != null)
            await LanguageUI.ChangeChatLanguage(Chat.Id);
        else
            _ = ModalUI.Show(new NoSecondaryLanguageModal.Model());
    }
}
