@inherits ComputedStateComponent<ChatLinks.Model>

@{
    var model = State.LatestNonErrorValue;
    var chats = model.Chats;
}

<NavbarGroup Title="Chats" Class="navbar-chats" Id="chats">
    <ChildContent>
        @foreach(var chat in chats) {
            var isActive = model.ActiveChatId == chat.Id;
            <NavbarLink Title="@chat.Title" Url="@($"/chat/{chat.Id}")" IsActive="@isActive">
                <PostFragment>
                    <div class="menu-chat-player-toggle justify-self-end flex-1 flex justify-end invisible">
                        <ChatPlayerToggle ChatId="@chat.Id" Size="ChatPlayerToggleSize.Small" />
                    </div>
                </PostFragment>
            </NavbarLink>
        }
    </ChildContent>
</NavbarGroup>

@code {
    public class Model
    {
        public (string Title, string Id)[] Chats { get; set; } = new (string Title, string Id)[0];
        public Symbol ActiveChatId { get; set; } = Constants.Chat.DefaultChatId;
    }

    [Inject] private Session Session { get; set; } = null!;
    [Inject] private IChats Chats { get; set; } = null!;
    [Inject] private ChatController ChatController { get; set; } = null!;

    protected override ComputedState<Model>.Options GetStateOptions()
        => new() { InitialValue = new () };

    protected override async Task<Model> ComputeState(CancellationToken cancellationToken) {
        var chats = await Chats.GetChats(Session, cancellationToken);
        var chatInfos = chats.OrderBy(c => c.Title).Select(c => (Title:c.Title, Id:(string) c.Id)).ToList();
        var addDefault = chats.Length == 0 || chats.All(c => c.Id != Constants.Chat.DefaultChatId);
        if (addDefault)
            chatInfos.Add((Title:"The Actual One", Id:Constants.Chat.DefaultChatId));
        return new () {
            Chats = chatInfos.ToArray(),
            ActiveChatId = await ChatController.GetActiveChatId(),
        };
    }
}
