@namespace ActualChat.Chat.UI.Blazor.Components
@inherits ComputedStateComponent<bool>
@{
    var isPinned = State.ValueOrDefault;
    var cls = "pin-toggle pin-chat off";
}

<ButtonSquare Class="@cls" Click="@Toggle" Title="Pin this chat">
    <svg class="fill-current w-5 h-5" xmlns="http://www.w3.org/2000/svg" viewBox="-5 -5 32 32">
        @if (isPinned) {
            <path d="M8 17h2v5l-2 2v-7zm2-11.5c0-2.319 1.219-4.35 3.047-5.5h-9.047c.068 1.911 2.429 2.097 2.429 5 0 3.771-3.429 3.291-3.429 10h12c0-1.358-.145-2.412-.369-3.276-2.678-.803-4.631-3.284-4.631-6.224zm11 0c0 2.485-2.018 4.5-4.5 4.5-2.484 0-4.5-2.015-4.5-4.5s2.016-4.5 4.5-4.5c2.482 0 4.5 2.015 4.5 4.5zm-2-.5h-5v1h5v-1z"/>
        } else {
            <path d="M11 17h2v5l-2 2v-7zm3.571-12c0-2.903 2.36-3.089 2.429-5h-10c.068 1.911 2.429 2.097 2.429 5 0 3.771-3.429 3.291-3.429 10h12c0-6.709-3.429-6.229-3.429-10z"/>
        }
    </svg>
</ButtonSquare>

@code {
    [Inject] private ChatUI ChatUI { get; init; } = null!;

    [Parameter] public string ChatId { get; set; } = "";

    protected override ComputedState<bool>.Options GetStateOptions()
        => new() { UpdateDelayer = UpdateDelayer.MinDelay };

    protected override async Task<bool> ComputeState(CancellationToken cancellationToken) {
        var pinnedChatIds = await ChatUI.PinnedChatIds.Use(cancellationToken).ConfigureAwait(false);
        return pinnedChatIds.Contains(ChatId);
    }

    private Task Toggle() {
        var pinnedChatIds = ChatUI.PinnedChatIds.Value;
        pinnedChatIds = pinnedChatIds.Contains(ChatId)
            ? pinnedChatIds.Remove(ChatId)
            : pinnedChatIds.Add(ChatId);
        ChatUI.PinnedChatIds.Value = pinnedChatIds;
        return Task.CompletedTask;
    }
}
