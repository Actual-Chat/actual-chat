@namespace ActualChat.Chat.UI.Blazor.Components
@page "/test/markup-editor"

<MainHeader>Markup Editor Test Page</MainHeader>

<PageWithHeaderAndFooter>
    <Body>

    <EditForm Model="@this" class='my-2 flex-y'>
        <div>
            <Button Click="OnGetMarkupClick">Get markup</Button>
            <Button Click="OnSetMarkupClick">Set markup</Button>
        </div>

        <InputTextArea @bind-Value="_markup" class="my-2 border-2 border-bg-03 rounded min-h-[8rem]">
        </InputTextArea>

        <p class="my-2">Parsed: <code>@_parsedMarkup</code></p>

        <MentionListManager Limit="5">
            <MarkupEditor
                @ref="_editorRef"
                Id="message-input"
                Class="my-2 border-2 border-bg-03 rounded min-h-[8rem]"
                Placeholder="Enter some text..."
                Post="OnPost"
                Cancel="OnCancel"/>
        </MentionListManager>
    </EditForm>

    </Body>
</PageWithHeaderAndFooter>

@code{
    private MarkupEditor _editorRef = null!;
    private string _markup = "@`Mention`the-actual-one:361 normal *italic* **bold** `code`\n\n```cs\nCode\n```";
    private Markup _parsedMarkup = null!;
    private MarkupEditorHtmlConverter _htmlConverter = null!;

    [Inject] private MarkupHub MarkupHub { get; init; } = null!;

    protected override Task OnInitializedAsync() {
        MarkupHub.ChatId = Constants.Chat.DefaultChatId;
        _htmlConverter = new MarkupEditorHtmlConverter(MarkupHub);
        return Task.CompletedTask;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (firstRender)
            await OnSetMarkupClick();
    }

    private async Task OnGetMarkupClick() {
        _markup = await _editorRef.GetText();
        _parsedMarkup = await MarkupHub.ParseAndNameMentions(_markup, default);
        StateHasChanged();
    }

    private async Task OnSetMarkupClick() {
        _parsedMarkup = await MarkupHub.ParseAndNameMentions(_markup, default);
        var html = await _htmlConverter.Convert(_markup, CancellationToken.None);
        await _editorRef.SetHtml(html);
        StateHasChanged();
    }

    private async Task OnPost(string text) {
        _markup = text;
        _parsedMarkup = await MarkupHub.ParseAndNameMentions(_markup, default);
        await _editorRef.Clear();
        StateHasChanged();
    }

    private async Task OnCancel()
        => await OnSetMarkupClick();
}
