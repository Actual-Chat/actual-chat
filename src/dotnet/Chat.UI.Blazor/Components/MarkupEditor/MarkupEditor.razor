@namespace ActualChat.Chat.UI.Blazor.Components
@implements IMarkupEditorBackend
@implements IAsyncDisposable
@using ActualChat.Chat.UI.Blazor.Module

<div @ref="Ref" id="@Id"
     class="@Class editor"
     contenteditable="true"
     data-placeholder="@Placeholder"></div>

@code {
    private string _lastPlaceholder = "";
    private MentionListManager? _lastMentionListManager;

    private ElementReference Ref { get; set; }
    private IJSObjectReference JSRef { get; set; } = null!;
    private DotNetObjectReference<IMarkupEditorBackend> BlazorRef { get; set; } = null!;

    [Inject] private IJSRuntime JS { get; init; } = null!;

    [CascadingParameter] public MentionListManager? MentionListManager { get; set; }
    [Parameter] public string Id { get; set; } = "";
    [Parameter] public string Placeholder { get; set; } = "";
    [Parameter] public string Class { get; set; } = "";
    [Parameter] public bool Autofocus { get; set; }
    [Parameter] public EventCallback<string> Posted { get; set; }
    [Parameter] public EventCallback Canceled { get; set; }
    [Parameter] public EventCallback LastMessageEditRequested { get; set; }

    protected override void OnParametersSet() {
        if (_lastMentionListManager != null)
            _lastMentionListManager.MentionSelected -= OnMentionSelected;
        _lastMentionListManager = MentionListManager;
        if (_lastMentionListManager != null)
            _lastMentionListManager.MentionSelected += OnMentionSelected;
    }

    public async ValueTask DisposeAsync() {
        if (_lastMentionListManager != null)
            _lastMentionListManager.MentionSelected -= OnMentionSelected;
        await JSRef.DisposeSilentlyAsync();
        JSRef = null!;
        BlazorRef.DisposeSilently();
        BlazorRef = null!;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (firstRender) {
            BlazorRef = DotNetObjectReference.Create<IMarkupEditorBackend>(this);
            JSRef = await JS.InvokeAsync<IJSObjectReference>(
                $"{ChatBlazorUIModule.ImportName}.MarkupEditor.create",
                Ref,
                BlazorRef,
                Autofocus,
                Constants.DebugMode.MarkupEditor);
        }
    }

    public async Task<string> GetText()
        => await JSRef.InvokeAsync<string>("getText").ConfigureAwait(false);

    public Task SetMarkup(ImmutableArray<EditedMarkupConverter.EditorNode> markup, CancellationToken cancellationToken)
        => JSRef.InvokeVoidAsync("setMarkup", cancellationToken, markup).AsTask();

    [JSInvokable]
    public Task Post(string? text = null)
        => Posted.InvokeAsync(text);

    [JSInvokable]
    public Task Cancel()
        => Canceled.InvokeAsync();

    [JSInvokable]
    public Task OpenPrevious()
        => LastMessageEditRequested.InvokeAsync();

    public Task FindMention(string filter)
        => throw new NotImplementedException();

    public async Task Clear()
        => await JSRef.InvokeAsync<string>("setHtml", "").ConfigureAwait(false);

    public async Task ListCommand(string listId, MarkupEditorListCommand command) {
        if (listId != "@")
            throw new ArgumentOutOfRangeException(nameof(listId));

        var manager = MentionListManager;
        if (manager == null)
            return;
        switch (command.Kind) {
        case MarkupEditorListCommandKind.Show:
            manager.Show(command.Filter ?? "");
            break;
        case MarkupEditorListCommandKind.Hide:
            manager.Hide();
            break;
        case MarkupEditorListCommandKind.GoToNextItem:
            manager.ListRef?.MoveSelection(1);
            break;
        case MarkupEditorListCommandKind.GoToPreviousItem:
            manager.ListRef?.MoveSelection(-1);
            break;
        case MarkupEditorListCommandKind.InsertItem:
            await Insert(manager.ListRef?.Selection);
            break;
        default:
            throw new ArgumentOutOfRangeException(nameof(command));
        }
    }

    public Task Focus(CancellationToken cancellationToken = default)
        => JSRef.InvokeVoidAsync("focus", cancellationToken).AsTask();

    public Task MoveCursorToEnd(CancellationToken cancellationToken = default)
        => JSRef.InvokeVoidAsync("moveCursorToEnd", cancellationToken).AsTask();

    private async Task SetPlaceholder(string placeholder) {
        _lastPlaceholder = placeholder;
        await JSRef.InvokeAsync<string>("setPlaceholder", placeholder).ConfigureAwait(false);
    }

    private void OnMentionSelected(MentionSearchResult mention)
        => _ = Insert(mention);

    private async Task Insert(MentionSearchResult? mention) {
        MentionListManager?.Hide();
        if (mention == null)
            return;
        await Focus();
        await InsertMention(mention);
    }

    private Task InsertMention(MentionSearchResult mention)
        => JSRef.InvokeVoidAsync("insertMention", mention.Id, mention.SearchMatch.Text).AsTask();
}
