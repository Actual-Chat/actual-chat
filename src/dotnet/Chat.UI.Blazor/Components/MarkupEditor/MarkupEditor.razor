@namespace ActualChat.Chat.UI.Blazor.Components
@implements IMarkupEditorBackend
@implements IAsyncDisposable
@using ActualChat.Chat.UI.Blazor.Module

<div @ref="Ref" id="@Id" class="@Class markup-editor">
    <div class="editor-content"
         contenteditable="true"
         data-placeholder="@Placeholder"></div>
</div>

@code {
    private static readonly string JSCreateMethod = $"{ChatBlazorUIModule.ImportName}.MarkupEditor.create";

    private TaskCompletionSource _whenReadySource = TaskCompletionSourceExt.New();
    private MentionListManager? _lastMentionListManager;
    private Action<MentionSearchResult> _onMentionSelected;

    private ElementReference Ref { get; set; }
    private DotNetObjectReference<IMarkupEditorBackend> BlazorRef { get; set; } = null!;

    [Inject] public IMarkupParser MarkupParser { get; init; } = null!;
    [Inject] public IJSRuntime JS { get; init; } = null!;

    [CascadingParameter] public MentionListManager? MentionListManager { get; set; }
    [Parameter, EditorRequired, ParameterComparer(typeof(ByValueParameterComparer))]
    public IMentionNamer MentionNamer { get; set; } = null!;
    [Parameter, EditorRequired, ParameterComparer(typeof(ByValueParameterComparer))]
    public IMarkupFormatter HtmlConverter { get; set; } = null!;
    [Parameter] public string Id { get; set; } = "";
    [Parameter] public string Placeholder { get; set; } = "";
    [Parameter] public string Class { get; set; } = "";
    [Parameter] public bool Autofocus { get; set; }
    [Parameter] public EventCallback<string> Post { get; set; }
    [Parameter] public EventCallback Cancel { get; set; }
    [Parameter] public EventCallback OpenPrevious { get; set; }

    public IJSObjectReference JSRef { get; private set; } = null!;
    public Task WhenReady => _whenReadySource.Task;

    public MarkupEditor() {
        _onMentionSelected = mention => _ = InsertMention(mention);
    }

    public async ValueTask DisposeAsync() {
        _whenReadySource.TrySetCanceled();
        if (_lastMentionListManager != null)
            _lastMentionListManager.MentionSelected -= _onMentionSelected;
        await JSRef.DisposeSilentlyAsync("dispose");
        JSRef = null!;
        BlazorRef.DisposeSilently();
        BlazorRef = null!;
    }

    protected override void OnParametersSet() {
        if (_lastMentionListManager != null)
            _lastMentionListManager.MentionSelected -= _onMentionSelected;
        _lastMentionListManager = MentionListManager;
        if (_lastMentionListManager != null)
            _lastMentionListManager.MentionSelected += _onMentionSelected;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (!firstRender)
            return;

        BlazorRef = DotNetObjectReference.Create<IMarkupEditorBackend>(this);
        JSRef = await JS.InvokeAsync<IJSObjectReference>(JSCreateMethod, Ref, BlazorRef, Autofocus);
        _whenReadySource.TrySetResult();
    }

    public async ValueTask<string> GetText() {
        await WhenReady;
        var text = await JSRef.InvokeAsync<string>("getText");
        text = text.Replace("\u8203", ""); // Inserted after mention to resolve "no cursor" issue there
        return text;
    }

    public async ValueTask SetText(string? text, bool mustFocus = false) {
        if (text.IsNullOrEmpty())
            await Clear(mustFocus);
        else {
            var markup = MarkupParser.Parse(text);
            markup = await MentionNamer.Apply(markup, default).ConfigureAwait(false);
            await SetMarkup(markup, mustFocus);
        }
    }

    public async ValueTask SetMarkup(Markup markup, bool mustFocus = false) {
        var html = HtmlConverter.Format(markup);
        await SetHtml(html, mustFocus);
    }

    public async ValueTask SetHtml(string html, bool mustFocus = false) {
        await WhenReady;
        await JSRef.InvokeVoidAsync("setHtml", html, mustFocus);
    }

    public ValueTask Clear(bool mustFocus = false)
        => SetHtml("", mustFocus);

    public async ValueTask Focus() {
        await WhenReady;
        await JSRef.InvokeVoidAsync("focus");
    }

    public async ValueTask MoveCursorToEnd() {
        await WhenReady;
        await JSRef.InvokeVoidAsync("moveCursorToEnd");
    }

    public async ValueTask InsertMention(MentionSearchResult? mention) {
        await WhenReady;
        MentionListManager?.Hide();
        if (mention == null)
            return;

        var html = HtmlConverter.Format(new MentionMarkup(mention.MentionId, mention.Text)) + " ";
        await JSRef.InvokeVoidAsync("insertHtml", html, "@");
    }

    // Backend methods

    [JSInvokable]
    public Task OnPost(string? text = null)
        => Post.InvokeAsync(text);

    [JSInvokable]
    public Task OnCancel()
        => Cancel.InvokeAsync();

    [JSInvokable]
    public Task OnOpenPrevious()
        => OpenPrevious.InvokeAsync();

    [JSInvokable]
    public async Task OnListCommand(string listId, MarkupEditorListCommand command) {
        if (listId != "@")
            throw new ArgumentOutOfRangeException(nameof(listId));

        var manager = MentionListManager;
        if (manager == null)
            return;
        switch (command.Kind) {
        case MarkupEditorListCommandKind.Show:
            manager.Show(command.Filter ?? "");
            break;
        case MarkupEditorListCommandKind.Hide:
            manager.Hide();
            break;
        case MarkupEditorListCommandKind.GoToNextItem:
            manager.ListRef?.MoveSelection(1);
            break;
        case MarkupEditorListCommandKind.GoToPreviousItem:
            manager.ListRef?.MoveSelection(-1);
            break;
        case MarkupEditorListCommandKind.InsertItem:
            await InsertMention(manager.ListRef?.Selection);
            break;
        default:
            throw new ArgumentOutOfRangeException(nameof(command));
        }
    }
}
