@using ActualChat.Transcription
@namespace ActualChat.Chat.UI.Blazor.Components
@inject ITranscriptStreamer _transcriptStreamer
@inject BlazorCircuitContext _circuitContext
@inject ILogger<ChatMessageTranscript> _log

<p>
    <span>@_transcript.Text</span>
</p>

@code {
    private CancellationTokenSource? _cancellationTokenSource;
    private Transcript _transcript = new() { Text = "â€¦" };

    [Parameter]
    public string StreamId { get; set; } = null!;

    [Parameter]
    public EventCallback<string> PlayClick { get; set; }

    protected override async Task OnParametersSetAsync() {
        if (_cancellationTokenSource != null) {
            // We should never call those statements
            _cancellationTokenSource.Cancel();
            _cancellationTokenSource.Dispose();
        }
        if (!_circuitContext.IsPrerendering) {
            _cancellationTokenSource = new();
            var transcriptStream = _transcriptStreamer.GetTranscriptStream(StreamId, _cancellationTokenSource.Token);
            _ = ReadTranscript(transcriptStream, _cancellationTokenSource.Token).ConfigureAwait(false);
        }

        await base.OnParametersSetAsync();
    }

    private void OnPlay() {
        if (PlayClick.HasDelegate)
            PlayClick.InvokeAsync(StreamId);
    }

    private async Task ReadTranscript(
        IAsyncEnumerable<TranscriptUpdate> transcriptStream,
        CancellationToken cancellationToken)
    {
        try {
            await foreach (var update in transcriptStream.WithCancellation(cancellationToken)) {
                _transcript = _transcript.WithUpdate(update);
                StateHasChanged();
            }
        }
        catch (Exception e) when (e is not OperationCanceledException) {
            _log.LogError(e, "ReadTranscript failed");
            throw;
        }
    }

}
