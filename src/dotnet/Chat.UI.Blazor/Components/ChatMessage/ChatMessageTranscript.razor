@namespace ActualChat.Chat.UI.Blazor

@inject ITranscriptStreamer _transcriptStreamer
@inject BlazorCircuitContext _circuitContext
@inject ILogger<ChatMessageTranscript> _log

<div>
    <span @onclick="OnPlay" class="cursor-pointer select-none opacity-75 hover:opacity-100">
        <i class="fa fa-play text-green-600" aria-hidden="true"></i>
    </span>
    <span class="ml-3">@Text</span>
</div>

@code {
    private CancellationTokenSource? _cancellationTokenSource;
    private string Text { get; set; } = "...";

    [Parameter]
    public string StreamId { get; set; } = null!;
    [Parameter]
    public EventCallback<string> OnListen { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        if (_cancellationTokenSource != null) {
            // We should never call those statements
            _cancellationTokenSource.Cancel();
            _cancellationTokenSource.Dispose();
        }
        if (!_circuitContext.IsPrerendering)
        {
            _cancellationTokenSource = new CancellationTokenSource();
            var transcriptReader = await _transcriptStreamer.GetTranscriptStream(StreamId, _cancellationTokenSource.Token);
            _ = ReadTranscript(transcriptReader, _cancellationTokenSource.Token);
        }

        await base.OnParametersSetAsync();
    }

    private void OnPlay()
    {
        if (OnListen.HasDelegate)
            OnListen.InvokeAsync(StreamId);
    }

    private async Task ReadTranscript(ChannelReader<TranscriptPart> transcriptReader, CancellationToken cancellationToken)
    {
        try
        {
            while (await transcriptReader.WaitToReadAsync(cancellationToken))
            while (transcriptReader.TryRead(out var message)) {
                cancellationToken.ThrowIfCancellationRequested();
                var (text, index, _, _) = message;
                Text = Text.Length >= index
                    ? $"{Text[..index]}{text}"
                    : $"{Text}{text.PadLeft(index - Text.Length + text.Length)}";
                StateHasChanged();
            }

        }
        catch (Exception e) when (e is not OperationCanceledException) {
            _log.LogError(e, "Error while reading the transcript.");
            throw;
        }
    }
}
