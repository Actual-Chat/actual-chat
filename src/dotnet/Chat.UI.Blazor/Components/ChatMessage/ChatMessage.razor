@namespace ActualChat.Chat.UI.Blazor.Components
@using ActualChat.Users
@inherits ComputedStateComponent<ChatMessageModel>

@{
    var model = State.LatestNonErrorValue ?? new(null, null);
}

@if (model.UserInfo == null) {
    <div class="flex items-start mb-4 text-sm opacity-75 hover:opacity-100 animate-pulse">
        <div class="block bg-gray-200 w-10 h-10 rounded-full mr-3"></div>
        <div class="flex-1 overflow-hidden">
            <div class="flex flex-row">
                <div class="font-bold bg-gray-200 rounded-md border-white border-2 w-32 h-4"></div>
                <div class="bg-gray-200 w-10 h-4 rounded-md border-white border-2"></div>
            </div>
            @for (var i = 0; i < _seed % 3 + 2; ++i) {
                <div class="leading-normal bg-gray-200 block h-4 rounded-md border-white border-2" style="width: @(Math.Abs(_seed << i) % 36 + 5)%;"></div>
            }
        </div>
    </div>
} else {
    <div class="flex items-start mb-4 text-sm">
        <img src="//eu.ui-avatars.com/api/?background=random&bold=true&length=1&name=@model.UserInfo.Name" class="w-10 h-10 rounded-full mr-3 select-none">
        <div class="flex-1 overflow-hidden">
            <div>
                <span class="font-bold text-gray-900 @(model.IsOnline != true ? "opacity-75" : "")">
                    @model.UserInfo.Name
                </span>
                <span class="text-gray-500 text-xs">@Entry.BeginsAt.ToString("HH:mm")</span>
            </div>
            @if (Entry.TextToTimeMap != null) {
                <span @onclick="OnPlay" class="mr-2 cursor-pointer select-none opacity-75 hover:opacity-100">
                    <i class="fa fa-play text-green-600" aria-hidden="true"></i>
                </span>
            }
            @if (Entry.IsStreaming) {
                <ChatMessageTranscript StreamId="@Entry.StreamId" PlayClick="OnTranscriptPlayClick"/>
            } else {
                <ChatMessageText Text="@Entry.Content" TextToTimeMap="@Entry.TextToTimeMap" OnWordClick="OnTextWordClick"/>
            }
        </div>
    </div>
}

@code {
    private readonly int _seed = Random.Shared.Next();

    [Inject]
    protected IUserInfoService UserInfos { get; set; } = null!;

    [Inject]
    protected IUserStateService UserStates { get; set; } = null!;

    [Inject]
    protected Session Session { get; set; } = null!;

    [Parameter]
    [EditorRequired]
    public ChatEntry Entry { get; set; } = null!;

    [Parameter]
    public EventCallback<(ChatEntry Entry, double SkipTo)> PlayClick { get; set; }

    protected override async Task<ChatMessageModel> ComputeState(CancellationToken cancellationToken) {
        if (Entry == null! || Entry.AuthorId.IsNone)
            return new(null, null);

        var (userInfo, isOnline) = await
            UserInfos.TryGet(Entry.AuthorId, cancellationToken)
                .Join(UserStates.IsOnline(Entry.AuthorId, cancellationToken))
                .ConfigureAwait(false);
        return new(userInfo, isOnline);
    }

    private void OnPlay() {
        if (PlayClick.HasDelegate)
            PlayClick.InvokeAsync((Entry, 0));
    }

    private void OnTranscriptPlayClick(string _) {
        if (PlayClick.HasDelegate)
            PlayClick.InvokeAsync((Entry, 0));
    }

    private void OnTextWordClick(double offset) {
        if (PlayClick.HasDelegate)
            PlayClick.InvokeAsync((Entry, offset));
    }

}
