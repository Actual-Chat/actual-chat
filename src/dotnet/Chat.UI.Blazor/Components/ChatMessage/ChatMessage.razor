@using ActualChat.Users
@namespace ActualChat.Chat.UI.Blazor.Components

@{
    //Log.LogInformation("Rendering, Entry.Id = {Id}", Entry.Id);
    var picture = string.IsNullOrWhiteSpace(Author.Picture)
        ? $"https://avatars.dicebear.com/api/avataaars/{Author.Name}.svg"
        : Author.Picture;
}

<div class="flex items-start mb-4 text-sm">
    <img src="@picture" class="w-10 h-10 rounded-md mr-3 select-none bg-gray-50" alt="@Author.Name"/>
    <div class="flex-1 overflow-hidden">
        <div>
            <span class="font-bold text-gray-900">@Author.Name</span>
            <span class="text-gray-500 text-xs">@Entry.BeginsAt.ToString("HH:mm")</span>
            &nbsp;
            <span class="text-gray-100 text-xs">id=@Entry.Id</span>
        </div>
        @if (Entry.IsStreaming) {
            <ChatMessageTranscript StreamId="@Entry.StreamId"/>
        } else {
            <ChatMessageText Entry="@Entry" PlayClick="OnPlayClick"/>
        }
    </div>
</div>

@code {
    [Inject]
    protected IChatAuthors ChatAuthors { get; init; } = null!;
    [Inject]
    protected Session Session { get; init; } = null!;
    [Inject]
    protected ILogger<ChatMessage> Log { get; init; } = null!;

    [Parameter, EditorRequired, ParameterComparer(typeof(ByReferenceParameterComparer))]
    public ChatEntry Entry { get; set; } = null!;
    [Parameter, EditorRequired, ParameterComparer(typeof(ByReferenceParameterComparer))]
    public Author Author { get; set; } = null!;
    [Parameter, ParameterComparer(typeof(ByValueParameterComparer))]
    public EventCallback<(ChatEntry Entry, double SkipTo)> PlayClick { get; set; }

    public override Task SetParametersAsync(ParameterView parameters)
        => this.HasChangedParameters(parameters) ? base.SetParametersAsync(parameters) : Task.CompletedTask;

    private void OnPlayClick(double offset) {
        if (PlayClick.HasDelegate)
            PlayClick.InvokeAsync((Entry, offset));
    }

}
