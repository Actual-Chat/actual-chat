@namespace ActualChat.Chat.UI.Blazor.Components
@using ActualChat.Chat.UI.Blazor.Services
@inherits ComputedStateComponent<ChatAuthor.Model>
@{
    var model = State.LatestNonErrorValue;
}
@ChildContent(model)

@code {
    [Inject] private IChatAuthors ChatAuthors { get; init; } = null!;
    [Inject] private ChatActivity ChatActivity { get; init; } = null!;
    private IChatRecordingActivity? ChatRecordingActivity { get; set; }

    [Parameter, EditorRequired] public string AuthorId { get; set; } = "";
    [Parameter] public string ChatId { get; set; } = "";
    [Parameter] public RenderFragment<Model> ChildContent { get; set; } = null!;

    public override async ValueTask DisposeAsync() {
        await base.DisposeAsync();

        ChatRecordingActivity?.Dispose();
        GC.SuppressFinalize(this);
    }

    protected override async Task OnParametersSetAsync() {
        ChatRecordingActivity?.Dispose();
        ChatRecordingActivity = await ChatActivity.GetRecordingActivity(ChatId, CancellationToken.None);
        await base.OnParametersSetAsync();
    }

    protected override ComputedState<Model>.Options GetStateOptions()
        => new() { InitialValue = Model.None };

    protected override async Task<Model> ComputeState(CancellationToken cancellationToken) {
        var chatId = ChatId;
        if (chatId.IsNullOrEmpty()) {
            // ChatId parameter is optional. If it's not specified, try to extract chatId from AuthorId.
            if (!ActualChat.Chat.ChatAuthor.TryGetChatId(AuthorId, out chatId))
                throw new InvalidOperationException("Invalid AuthorId");
        }

        var author = await ChatAuthors.GetAuthor(chatId, AuthorId, true, cancellationToken);
        if (author == null)
            return Model.None;

        if (string.IsNullOrWhiteSpace(author.Picture)) {
            // we don't want to bring System.Security.Cryptography to wasm, so just use hashcode
            var picture = $"https://avatars.dicebear.com/api/avataaars/{author.Name.GetHashCode()}.svg";
            author = author with { Picture = picture };
        }

        if (ChatRecordingActivity == null)
            return new(author, false);

        var isRecording = await ChatRecordingActivity.IsAuthorActive(author.Id, cancellationToken);
        return new(author,isRecording);
    }

    public sealed class Model {
        public static Model None { get; } = new(new Author(), false);

        public Author Author { get; }
        public bool IsRecording { get; }

        public Model(Author author, bool isRecording) {
            Author = author;
            IsRecording = isRecording;
        }
    }
}
