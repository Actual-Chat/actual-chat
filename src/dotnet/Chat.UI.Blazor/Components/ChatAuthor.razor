@namespace ActualChat.Chat.UI.Blazor.Components
@using ActualChat.Chat.UI.Blazor.Services
@inherits ComputedStateComponent<ChatAuthor.Model>
@{
    var model = State.LatestNonErrorValue;
}
@ChildContent(model)

@code {
    public static readonly Author NullAuthor = new();

    [Inject] private IChatAuthors ChatAuthors { get; init; } = null!;
    [Inject] private ChatActivities ChatActivities { get; init; } = null!;
    private AuthorChatActivityState? AuthorChatActivityState { get; set; }

    [Parameter, EditorRequired] public string AuthorId { get; set; } = "";
    [Parameter, EditorRequired] public string ChatId { get; set; } = "";
    [Parameter, EditorRequired] public RenderFragment<Model> ChildContent { get; set; } = default!;

    public override async Task SetParametersAsync(ParameterView parameters) {
        if (!this.HasChangedParameters(parameters))
            return;

        await base.SetParametersAsync(parameters);
        AuthorChatActivityState = await ChatActivities.GetAuthorRecordingActivity(ChatId, AuthorId);
    }

    protected override ComputedState<Model>.Options GetStateOptions()
        => new() { InitialValue = new(NullAuthor, false) };

    protected override async Task<Model> ComputeState(CancellationToken cancellationToken) {
        var chatId = ChatId;
        if (chatId.IsNullOrEmpty()) {
            // ChatId parameter is optional. If it's not specified, try to extract chatId from AuthorId.
            var i = AuthorId.IndexOf(":", StringComparison.Ordinal);
            if (i == -1)
                throw new InvalidOperationException("Invalid AuthorId");
            chatId = AuthorId.Substring(0, i);
        }

        var author = await ChatAuthors.GetAuthor(chatId, AuthorId, true, cancellationToken);
        if (author == null)
            return new(NullAuthor, false);

        if (string.IsNullOrWhiteSpace(author.Picture)) {
            // we don't want to bring System.Security.Cryptography to wasm, so just use hashcode
            var picture = $"https://avatars.dicebear.com/api/avataaars/{author.Name.GetHashCode()}.svg";
            author = author with { Picture = picture };
        }

        AuthorChatActivityState ??= await ChatActivities.GetAuthorRecordingActivity(ChatId, AuthorId);
        var isRecording = await AuthorChatActivityState.Recording.Use(cancellationToken);

        return new(author,isRecording);
    }

    public override async ValueTask DisposeAsync() {
        await base.DisposeAsync();

        AuthorChatActivityState?.Dispose();
        GC.SuppressFinalize(this);
    }

    public class Model {
        public Author Author { get; }
        public bool IsRecording { get; }

        public Model(Author author, bool isRecording) {
            Author = author;
            IsRecording = isRecording;
        }
    }
}
