@using ActualChat.Kvas
@namespace ActualChat.Chat.UI.Blazor.Components
@inherits FusionComponentBase
@implements IDisposable
@{
    RenderFragment RenderTab(ChatListFilter filter, double order) {
        var id = filter.Id.Value;
        var title = filter.Title;
        var contentVersion = (id, title);
        return @<Tab
            @key="@id"
            Id="@id"
            Title="@title"
            ContentVersion="@contentVersion"
            Order="@order"
            Class="chats-tab">
            <TitleContent>
                <span>@title</span>
            </TitleContent>
            <TitleExtras>
               @if (PlaceId.IsNone) {
                   <ChatListTabUnreadCount ChatListFilter="filter" PlaceId="@PlaceId.None"/>
               }
            </TitleExtras>
        </Tab>;
    }
}

<div class="c-container">
    <div class="c-all-chats">
        <TabPanel
            @ref="@_tabPanel"
            BottomHill="true"
            TabsClass="left-panel-tabs"
            SelectedTabIdChanged="@OnSelectedTabIdChanged">
            <AdditionalButton>
                <ChatListSortButton PlaceId="@PlaceId" Settings="@SettingsState" />
            </AdditionalButton>
            <ChildContent>
                @for (var i = 0; i < ChatListFilter.All.Count; i++) {
                    var filter = ChatListFilter.All[i];
                    @RenderTab(filter, i)
                }
            </ChildContent>
            <TabContent>
                @if (!PlaceId.IsNone && OrdinalEquals(ChatListFilter.People.Id.Value, context)) {
                    <PlacePeopleBanner />
                }
                <ChatList Kind="ChatListKind.All"/>
            </TabContent>
        </TabPanel>
    </div>
    <div class="c-active-chats">
        <ChatList Kind="ChatListKind.Active" />
    </div>
</div>

@code {
    private TabPanel _tabPanel = null!;
    private bool _updateSelectedTab = true;

    private IMutableStateLease<ChatListSettings>? SettingsState { get; set; } = null!;

    [Inject] private ChatListUI ChatListUI { get; init; } = null!;

    [Parameter, EditorRequired] public PlaceId PlaceId { get; set; }

    public void Dispose() {
        SettingsState.DisposeSilently();
        SettingsState = null!;
    }

    protected override async Task OnParametersSetAsync() {
        _updateSelectedTab = true;
        SettingsState.DisposeSilently();
        SettingsState = null;
        SettingsState = await ChatListUI.LeaseSettingsState(PlaceId, default);
    }

    protected override void OnAfterRender(bool firstRender) {
        if (_updateSelectedTab && SettingsState != null) {
            _updateSelectedTab = false;
            _tabPanel.SelectedTabId = SettingsState.Value.FilterId;
        }
    }

    private void OnSelectedTabIdChanged(string? tabId) {
        var filterId = tabId ?? "";
        SettingsState?.Set(filterId, static (filterId1, r) => {
            var settings = r.Value;
            if (settings.FilterId != filterId1)
                settings = settings with { FilterId = filterId1 };
            return settings;
        });
    }
}
