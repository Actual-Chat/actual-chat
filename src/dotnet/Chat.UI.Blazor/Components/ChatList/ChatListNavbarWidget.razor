@namespace ActualChat.Chat.UI.Blazor.Components
@inherits FusionComponentBase
@{
    RenderFragment RenderTab(ChatListFilter filter, double order, Dictionary<string, object>? attributes) {
        var id = filter.Id.Value;
        var title = filter.Title;
        var contentVersion = (id, title);
        return @<Tab
            @key="@id"
            Id="@id"
            Title="@title"
            ContentVersion="@contentVersion"
            Order="@order"
            Class="chats-tab"
            AdditionalAttributes="@attributes">
            <TitleContent>
                <span>@title</span>
            </TitleContent>
            <TitleExtras>
               @if (PlaceId.IsNone) {
                   <ChatListTabUnreadCount ChatListView="@_chatListView" ChatListFilter="filter" />
               }
            </TitleExtras>
        </Tab>;
    }
}

<div class="c-container">
    <div class="c-all-chats">
        <TabPanel
            @ref="@_tabPanel"
            BottomHill="true"
            TabsClass="left-panel-tabs"
            SelectedTabIdChanged="@OnSelectedTabIdChanged">
            <AdditionalButton>
                <ChatListSortButton ChatListView="@_chatListView" />
            </AdditionalButton>
            <ChildContent>
                @for (var i = 0; i < ChatListFilter.All.Count; i++) {
                    var filter = ChatListFilter.All[i];
                    var placePeopleTab = !PlaceId.IsNone && Equals(ChatListFilter.People, filter);
                    var attributes = placePeopleTab
                        ? new Dictionary<string, object> {
                            { "data-bubble", BubbleRef.New<PlacePeopleBubble>() },
                            { "data-bubble-priority", "204" },
                            { "data-bubble-placement", FloatingPosition.Bottom.ToPositionString() },
                        }
                        : null;
                    @RenderTab(filter, i, attributes)
                }
            </ChildContent>
            <TabContent>
                <ChatList Kind="ChatListKind.All"/>
            </TabContent>
        </TabPanel>
    </div>
    <div class="c-active-chats">
        <ChatList Kind="ChatListKind.Active" />
    </div>
</div>

@code {
    private TabPanel _tabPanel = null!;
    private bool _updateSelectedTab = true;
    private ChatListView? _chatListView;

    [Inject] private ChatListUI ChatListUI { get; init; } = null!;

    [Parameter, EditorRequired] public PlaceId PlaceId { get; set; }

    protected override void OnParametersSet() {
        var oldChatListView = _chatListView;
        _chatListView = ChatListUI.ActivateChatList(PlaceId);
        if (_chatListView != oldChatListView)
            _updateSelectedTab = true;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (!_updateSelectedTab)
            return;
        var chatListView = _chatListView;
        if (chatListView == null)
            return;
        var settings = await chatListView.GetSettings();
        if (chatListView != _chatListView)
            return;
        _updateSelectedTab = false;
        _tabPanel.SelectedTabId = settings.FilterId;
    }

    private void OnSelectedTabIdChanged(string? tabId) {
        var filterId = tabId ?? "";
        _chatListView?.SetFilter(filterId);
    }
}
