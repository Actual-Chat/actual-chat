@namespace ActualChat.Chat.UI.Blazor.Components
@{
    RenderFragment RenderTab(ChatListFilter filter, double order) {
        var id = filter.Id.Value;
        var title = filter.Title;
        var contentVersion = (id, title);
        return @<Tab
            @key="@id"
            Id="@id"
            Title="@title"
            ContentVersion="@contentVersion"
            Order="@order"
            Class="chats-tab">
            <TitleContent>
                <span>@title</span>
            </TitleContent>
            <TitleExtras>
                <ChatListTabUnreadCount ChatListFilter="filter" />
            </TitleExtras>
        </Tab>;
    }
}

<NavbarGroup Title="Chats" Class="navbar-chats" Id="@NavbarGroupIds.Chats">
    <ChildContent>
        <div class="flex-y min-h-min">
            <ChatList Kind="ChatListKind.Active">
                <FooterDelimiter>
                    <div class="border-t-4 border-bg-04"></div>
                </FooterDelimiter>
            </ChatList>
            <TabPanel
                @ref="@_tabPanel"
                BottomHill="true"
                Class="md:overflow-y-hidden"
                TabsClass="left-panel-tabs"
                SelectedTabIdChanged="@OnSelectedTabIdChanged">
                <AdditionalButton>
                    <ChatListSortButton />
                    <ButtonRound
                        Class="chat-list-sort-btn btn-sm"
                        data-bubble="@(BubbleRef.New<ChatListTabsBubble>())"
                        data-bubble-group="@(BubbleGroup.ChatList)"
                        data-bubble-order="2"
                        data-bubble-placement="@(FloatingPosition.BottomStart.ToPositionString())"
                        data-menu="@(MenuRef.New<ChatListSortMenu>())"
                        data-menu-trigger="@MenuTrigger.Primary"
                        data-menu-placement="@(FloatingPosition.BottomStart.ToPositionString())">
                        <i class="@settings.Order.GetIcon() text-2xl"></i>
                    </ButtonRound>
                </AdditionalButton>
                <ChildContent>
                    @for (var i = 0; i < ChatListFilter.All.Length; i++) {
                        var filter = ChatListFilter.All[i];
                        @RenderTab(filter, i)
                    }
                </ChildContent>
                <TabContent>
                    <ChatList Kind="ChatListKind.All" />
                </TabContent>
            </TabPanel>
        </div>
    </ChildContent>
</NavbarGroup>

@code {
    TabPanel _tabPanel = null!;

    [Inject] private ChatListUI ChatListUI { get; init; } = null!;
    [Inject] private BubbleUI BubbleUI { get; init; } = null!;

    protected override async Task OnInitializedAsync() {
        await ChatListUI.WhenLoaded;
    }

    protected override void OnAfterRender(bool firstRender)
        => _tabPanel.SelectedTabId = ChatListUI.Settings.Value.FilterId;
    protected override void OnAfterRender(bool firstRender) {
        LoadingUI.MarkLoaded();
        if (State.Value != Model.Loading) {
            LoadingUI.ReportChatListLoaded();
            _tabPanel.SelectedTabId = ChatUI.ListSettings.Value.FilterId;
        }

        if (firstRender) {
            _ = BubbleUI.Show(BubbleGroup.ChatList);
        }
    }

    private void OnSelectedTabIdChanged(string? tabId) {
        var filterId = tabId ?? "";
        ChatListUI.Settings.Set(filterId, static (filterId1, r) => {
            var settings = r.Value;
            if (settings.FilterId != filterId1)
                settings = settings with { FilterId = filterId1 };
            return settings;
        });
    }
}
