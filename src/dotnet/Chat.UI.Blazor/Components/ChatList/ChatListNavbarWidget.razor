@namespace ActualChat.Chat.UI.Blazor.Components
@{
    RenderFragment RenderTabContent(ChatListFilter filter, double order) {
        var id = filter.Id.Value;
        var title = filter.Title;
        var contentVersion = (id, title);
        return @<Tab
            @key="@id"
            Id="@id"
            Title="@title"
            ContentVersion="@contentVersion"
            Order="@order"
            Class="chats-tab">
            <TitleContent>
                <span>@title</span>
            </TitleContent>
            <TitleExtras>
                <ChatListTabUnreadCount ChatListFilter="filter" />
            </TitleExtras>
            <ChildContent>
                <ChatList Kind="ChatListKind.All" />
            </ChildContent>
        </Tab>;
    }
}

<NavbarGroup Title="Chats" Class="navbar-chats" Id="@NavbarGroupIds.Chats">
    <ChildContent>
        <div class="flex-y min-h-min">
            <ChatList Kind="ChatListKind.Active" />
            <div class="border-t-4 border-bg-04"></div>
            <TabPanel
                @ref="@_tabPanel"
                BottomHill="true"
                Class="md:overflow-y-hidden"
                TabsClass="left-panel-tabs"
                SelectedTabIdChanged="@OnSelectedTabIdChanged">
                <AdditionalButton>
                    <ChatListSortButton />
                </AdditionalButton>
                <ChildContent>
                    @for (var i = 0; i < ChatListFilter.All.Length; i++) {
                        var filter = ChatListFilter.All[i];
                        @RenderTabContent(filter, i)
                    }
                </ChildContent>
            </TabPanel>
        </div>
    </ChildContent>
</NavbarGroup>

@code {
    TabPanel _tabPanel = null!;

    [Inject] private ChatUI ChatUI { get; init; } = null!;
    [Inject] private LoadingUI LoadingUI { get; init; } = null!;

    protected override async Task OnInitializedAsync() {
        await ChatUI.ListSettings.WhenRead;
    }

    protected override void OnAfterRender(bool firstRender)
        => _tabPanel.SelectedTabId = ChatUI.ListSettings.Value.FilterId;

    private void OnSelectedTabIdChanged(string? tabId) {
        var filterId = tabId ?? "";
        var settings = ChatUI.ListSettings.Value;
        if (settings.FilterId == filterId)
            return;

        ChatUI.ListSettings.Value = settings with { FilterId = filterId };
    }
}
