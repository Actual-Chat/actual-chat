@namespace ActualChat.Chat.UI.Blazor.Components
@inherits ComputedStateComponent<ActiveChatList.Model>
@{
    var m = State.Value;
    var title = "Recent Chats" + (m.IsSearchModeOn ? " â€” filtered on search" : "");
    var titleClass = "text-sm font-medium px-2 pb-2";
}

@if (m.Chats.Count > 0) {
    <div class="active-chats">
        <div class="@titleClass" data-tooltip="Your active or recently used chats, 3 at most">@title</div>

        <ChatList Kind="ChatListKind.Active" Chats="@m.Chats"/>
    </div>
}

@code {
    [Inject] private Session Session { get; init; } = null!;
    [Inject] private IAccounts Accounts { get; init; } = null!;
    [Inject] private ChatUI ChatUI { get; init; } = null!;
    [Inject] private ActiveChatsUI ActiveChatsUI { get; init; } = null!;
    [Inject] private SearchUI SearchUI { get; init; } = null!;

    protected override ComputedState<Model>.Options GetStateOptions()
        => new() {
            InitialValue = Model.None,
            UpdateDelayer = FixedDelayer.Instant,
            Category = GetStateCategory(),
        };

    protected override async Task<Model> ComputeState(CancellationToken cancellationToken) {
        var activeChats = await ActiveChatsUI.ActiveChats.Use(cancellationToken);
        var chats = (await activeChats
            .OrderByDescending(c => c.Recency)
            .Select(c => ChatUI.Get(c.ChatId, cancellationToken))
            .Collect()
            ).SkipNullItems()
            .ToList();

        // Make sure selected chat is either in the normal chat list or here chats
        var selectedChatId = await ChatUI.SelectedChatId.Use(cancellationToken);
        selectedChatId = await ChatUI.FixChatId(selectedChatId, cancellationToken);
        if (!selectedChatId.IsNone && chats.All(c => c.Id != selectedChatId)) {
            var allChats = await ChatUI.ListUnordered(cancellationToken);
            if (!allChats.ContainsKey(selectedChatId)) {
                var selectedChat = await ChatUI.Get(selectedChatId, cancellationToken);
                if (selectedChat != null)
                    chats.Insert(0, selectedChat);
            }
        }

        var searchPhrase = await SearchUI.GetSearchPhrase(cancellationToken);
        if (!searchPhrase.IsEmpty) {
            chats = (
                from c in chats
                let rank = searchPhrase.GetMatchRank(c.Chat.Title)
                where rank > 0 || c.Chat.Id == selectedChatId
                orderby c.Contact.IsPinned descending, rank descending
                select c
                ).ToList();
        }

        return new Model {
            Chats = chats,
            IsSearchModeOn = !searchPhrase.IsEmpty,
        };
    }

    protected override void OnAfterRender(bool firstRender) {
        if (State.Value.Chats.Any()) {
            _ = BubbleUI.Show(BubbleGroup.Chat);
        }
    }

    public sealed record Model {
        public static Model None { get; } = new();

        public List<ChatInfo> Chats { get; init; } = new ();
        public bool IsSearchModeOn { get; init; }
    }
}
