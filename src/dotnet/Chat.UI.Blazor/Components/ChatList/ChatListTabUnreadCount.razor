@namespace ActualChat.Chat.UI.Blazor.Components
@inherits ComputedStateComponent<ChatListTabUnreadCount.Model>
@{
    var m = State.Value;
    _rendered = m;
    if (m.Count <= 0)
        return;
}

<div class="c-badge">
    <UnreadCount Value="@m.Count" Click="OnUnreadBadgeClick"/>
</div>

@code {
    private Model? _rendered;

    [Inject] private ChatUI ChatUI  { get; init; } = null!;
    [Inject] private ChatListUI ChatListUI  { get; init; } = null!;
    [Inject] private History History { get; init; } = null!;

    [Parameter] public ChatListFilter ChatListFilter { get; init; } = ChatListFilter.None;

    protected override ComputedState<Model>.Options GetStateOptions()
        => new() {
            InitialValue = new (),
            UpdateDelayer = FixedDelayer.Instant,
        };

    protected override async Task<Model> ComputeState(CancellationToken cancellationToken) {
        var count = await ChatListUI.GetUnreadChatCount(ChatListFilter, cancellationToken).ConfigureAwait(false);

        return new Model {
            Count = count,
        };
    }

    private async Task OnUnreadBadgeClick() {
        var settings = ChatListUI.Settings.Value with { FilterId = ChatListFilter.Id };
        var list = await ChatListUI.ListAll(settings).ConfigureAwait(true);
        var firstUnreadChat = list.FirstOrDefault(c => c.UnreadCount > 0);
        if (firstUnreadChat == null || firstUnreadChat.Id == ChatUI.SelectedChatId.Value)
            return;

        _ = History.NavigateTo(Links.Chat(firstUnreadChat.Id));
    }

    protected override bool ShouldRender()
        => State.HasError || State.Value != _rendered;

    public record struct Model(Trimmed<int> Count = default);
}
