@namespace ActualChat.Chat.UI.Blazor.Components
@{
    var isToday = false;
    var isYesterday = false;
    var inWeek = false;

    var timestamp = "";
    if (LastEntry != null) {
        var time = DateTimeConverter.ToLocalTime(DateTime.Now);
        var entryTime = DateTimeConverter.ToLocalTime(LastEntry.BeginsAt);
        var inYear = time.Year - entryTime.Year == 0;
        var delta = (time.Date - entryTime.Date).Days;

        switch (delta) {
            case 0:
                isToday = true;
                break;
            case 1:
                isYesterday = true;
                break;
            case < 8:
                inWeek = true;
                break;
        }

        if (isToday)
            timestamp = DateTimeConverter.ToLocalTime(LastEntry.BeginsAt).ToShortTimeString();
        else if (isYesterday)
            timestamp = $"Yesterday, {DateTimeConverter.ToLocalTime(LastEntry.BeginsAt).ToShortTimeString()}";
        else if (inWeek)
            timestamp = DateTimeConverter.ToLocalTime(LastEntry.BeginsAt).ToString("ddd, HH:mm");
        else if (inYear) {
            timestamp = DateTimeConverter.ToLocalTime(LastEntry.BeginsAt).ToString("MMM dd");
        } else {
            timestamp = DateTimeConverter.ToLocalTime(LastEntry.BeginsAt).ToString("MMM dd, yyyy");
        }
    }
}

<div class="last-entry-time">
    @timestamp
</div>

@code {
    [Inject] private ChatUIHub Hub { get; set; } = null!;
    private MomentClockSet Clocks => Hub.Clocks();
    private DateTimeConverter DateTimeConverter => Hub.DateTimeConverter;

    [Parameter] public ChatEntry? LastEntry { get; set; }
}
