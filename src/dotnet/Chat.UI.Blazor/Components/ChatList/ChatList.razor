@using ActualChat.Users
@namespace ActualChat.Chat.UI.Blazor.Components
@inherits ComputedStateComponent<ChatList.Model>
@{
    // ChatUI.Services.LogFor(GetType()).LogDebug("Rendered: {List}", Kind);
    var m = _rendered = State.Value;
    if (m is { ChatCount: 0, IsSearchModeOn: false })
        return;
}

@if (Kind == ChatListKind.Active) {
    var title = "Recent Chats" + (m.IsSearchModeOn ? " â€” filtered on search" : "");
    <div class="active-chats">
        <div class="text-sm font-medium px-2 pb-2" data-tooltip="Your active or recently used chats, 3 at most">@title</div>

        <div class="chat-list chat-list-active">
            @for (var i = 0; i < m.ChatCount; i++) {
                <ChatListItem ListKind="@Kind" Index="@i" />
            }
        </div>
    </div>
} else {
    @* ChatListKind.All *@
    <div class="chat-list chat-list-all">
        @for (var i = 0; i < m.ChatCount; i++) {
            <ChatListItem ListKind="@Kind" Index="@i" />
        }
    </div>
}

@code {
    private Model _rendered;

    [Inject] private Session Session { get; init; } = null!;
    [Inject] private ChatUI ChatUI { get; init; } = null!;
    [Inject] private ChatListUI ChatListUI { get; init; } = null!;
    [Inject] private SearchUI SearchUI { get; init; } = null!;
    [Inject] private LoadingUI LoadingUI { get; init; } = null!;

    [Parameter, EditorRequired] public ChatListKind Kind { get; set; }

    protected override ComputedState<Model>.Options GetStateOptions()
        => new() {
            InitialValue = new Model(ChatListUI.GetCountWhenLoading(Kind), false, true),
            Category = GetStateCategory(),
        };

    protected override async Task<Model> ComputeState(CancellationToken cancellationToken) {
        var chatCount = await ChatListUI.GetCount(Kind);
        if (Kind != ChatListKind.Active)
            return new Model(chatCount);

        var searchPhrase = await SearchUI.GetSearchPhrase(cancellationToken);
        return new Model(chatCount, !searchPhrase.IsEmpty);
    }

    protected override bool ShouldRender()
        => State.HasError || State.Value != _rendered;

    protected override void OnAfterRender(bool firstRender) {
        if (Kind == ChatListKind.All && State is { HasValue: true, Value.IsLoading: false })
            LoadingUI.ReportChatListLoaded();
    }

    public record struct Model(
        int ChatCount,
        bool IsSearchModeOn = false,
        bool IsLoading = false);
}
