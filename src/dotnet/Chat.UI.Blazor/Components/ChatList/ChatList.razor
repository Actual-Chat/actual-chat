@using ActualChat.Users
@namespace ActualChat.Chat.UI.Blazor.Components
@inherits ComputedStateComponent<ChatList.Model>
@{
    // ChatUI.Services.LogFor(GetType()).LogDebug("Rendered: {List}", Kind);
    var m = _rendered = State.Value;
    if (m is { ChatCount: 0, IsSearchModeOn: false })
        return;
}

@if (Kind == ChatListKind.Active) {
    if (m.ChatCount == 0)
        return;

    <div class="c-delimiter"></div>
    <div class="active-chats"
         data-bubble="@(BubbleRef.New<ActiveChatsBubble>())"
         data-bubble-priority="202"
         data-bubble-placement="@(FloatingPosition.BottomStart.ToPositionString())">
        <div class="c-title" data-tooltip="Chats where you are listening or recording right now">Active Chats</div>

        <div class="chat-list chat-list-active">
            @for (var i = 0; i < m.ChatCount; i++) {
                <ChatListItem ListKind="@Kind" Index="@i" />
            }
        </div>
    </div>
} else {
    @* ChatListKind.All *@
    <div class="chat-list chat-list-all">
        @for (var i = 0; i < m.ChatCount; i++) {
            if (i == 0) {
                <ChatListItem
                    ListKind="@Kind"
                    Index="@i"
                    data-bubble="@(BubbleRef.New<ChatListItemBubble>())"
                    data-bubble-priority="204"
                    data-bubble-placement="@(FloatingPosition.Bottom.ToPositionString())">
                </ChatListItem>
            } else {
                <ChatListItem ListKind="@Kind" Index="@i"/>
            }
        }
    </div>
}

@code {
    private Model _rendered;

    [Inject] private Session Session { get; init; } = null!;
    [Inject] private ChatUI ChatUI { get; init; } = null!;
    [Inject] private ChatListUI ChatListUI { get; init; } = null!;
    [Inject] private SearchUI SearchUI { get; init; } = null!;

    [Parameter, EditorRequired] public ChatListKind Kind { get; set; }

    protected override ComputedState<Model>.Options GetStateOptions()
        => new() {
            InitialValue = new Model(ChatListUI.GetCountWhenLoading(Kind), false, true),
            Category = GetStateCategory(),
        };

    protected override async Task<Model> ComputeState(CancellationToken cancellationToken) {
        var chatCount = await ChatListUI.GetCount(Kind);
        if (Kind != ChatListKind.Active)
            return new Model(chatCount);

        var searchPhrase = await SearchUI.GetSearchPhrase(cancellationToken);
        return new Model(chatCount, !searchPhrase.IsEmpty);
    }

    protected override bool ShouldRender()
        => State.HasError || State.Value != _rendered;

    // Nested types

    public record struct Model(
        int ChatCount,
        bool IsSearchModeOn = false,
        bool IsLoading = false);
}
