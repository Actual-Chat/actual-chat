@using ActualChat.Users
@namespace ActualChat.Chat.UI.Blazor.Components
@inherits ComputedStateComponent<ChatList.Model>
@{
    var m = State.Value;
    var chatCount = m.ChatCount ?? 20;
    var isLoaded = m != Model.Loading;
    _lastRendered = m;
}

@if (isLoaded) {
    <div class="chat-list chat-list-all">
        @for (var i = 0; i < chatCount; i++) {
            var position = i;

            <ChatListItem @key="@position" Position="@position" ListKind="@ChatListKind.All" />
        }
    </div>
} else {
    <ChatListSkeleton />
}


@code {
    private Model? _lastRendered;

    [Inject] private Session Session { get; init; } = null!;
    [Inject] private ChatUI ChatUI { get; init; } = null!;
    [Inject] private SearchUI SearchUI { get; init; } = null!;
    [Inject] private LoadingUI LoadingUI { get; init; } = null!;
    [Inject] private Tracer Tracer { get; init; } = null!;

    protected override ComputedState<Model>.Options GetStateOptions()
        => new() {
            InitialValue = Model.Loading,
            UpdateDelayer = FixedDelayer.Instant,
        };

    protected override async Task<Model> ComputeState(CancellationToken cancellationToken) {
        var tracer = ReferenceEquals(State.Value, Model.Loading)
            ? Tracer[$"{nameof(ChatListNavbarWidget)}.{nameof(ComputeState)}"]
            : Tracer.None;

        var region = tracer.Region("ChatUI.GetChatCount");
        var chatCount = await ChatUI.GetChatCount(cancellationToken);
        region.Close();

        return new Model {
            ChatCount = chatCount,
        };
    }

    protected override bool ShouldRender()
        => State.Value != _lastRendered;

    protected override void OnAfterRender(bool firstRender) {
        if (State.Value != Model.Loading) {
            LoadingUI.ReportChatListLoaded();
        }
    }

    public sealed record Model {
        public static Model Loading { get; } = new();

        public int? ChatCount { get; init; }
    }
}
