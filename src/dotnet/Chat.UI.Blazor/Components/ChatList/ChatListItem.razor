@namespace ActualChat.Chat.UI.Blazor.Components
@inherits ComputedStateComponent<ChatListItem.Model>
@{
    var m = _rendered = State.Value;
    if (m == Model.None)
        return;

    var chatState = m.ChatState;
    var chat = chatState.Chat;
    var info = chatState.Info;
    var lastTextEntry = info.LastTextEntry;
    var audioState = chatState.AudioState;
    var isLastPinned = m.IsLastPinned;
}

@if (m == Model.Loading) {
    <ChatListItemSkeleton />
}
else {
    <NavbarItem
        Url="@($"/chat/{chat.Id}")"
        IsSelected="@chatState.IsSelected"
        data-menu="@(MenuRef.New<ChatMenu>(chat.Id, ListKind.Format()).ToString())"
        data-menu-placement="@(FloatingPosition.BottomStart.ToPositionString())">
        <ChildContent>
            <div class="flex-1 flex-x items-center gap-x-2" @onclick="()=>OnClick(chat.Id)">
                <ChatIcon Chat="chatState.Chat"/>
                <div class="grid justify-start items-start gap-y-1">
                    <span class="text-headline-1 text-02 truncate">
                        <SearchUIHighlighter Text="@chatState.Chat.Title"/>
                    </span>
                    @if (lastTextEntry != null) {
                        <div class="text-xs text-03 truncate">
                            @if (chatState.Chat.Kind != ChatKind.Peer && !lastTextEntry.IsSystemEntry) {
                                <span>
                                    <AuthorName Class="text-xs text-02 font-medium" AuthorSid="@lastTextEntry.AuthorId" ShowDetailsOnClick="false"/>:
                                </span>
                            }
                            @info.LastTextEntryText
                        </div>
                    }
                </div>
            </div>
        </ChildContent>
        <Ending>
            @{
                var isWide = ScreenSize.IsWide();
                var isActiveChatList = ListKind == ChatListKind.Active;
                var isListeningOrRecording = chatState.IsListening || chatState.IsRecording;
                var hasButtons = isWide || isActiveChatList || isListeningOrRecording;
                var hasMenu = !isActiveChatList && isWide;
                var isHoverable = isWide && !isActiveChatList && !isListeningOrRecording;
            }
            <UnreadCountWithTime
                Value="@chatState.Info.UnreadCount"
                LastEntry="@chatState.Info.LastTextEntry"
                HideLastEntryTime="@isListeningOrRecording"
                NotificationMode="@chatState.Info.UserSettings.NotificationMode"
                HasMentions="chatState.Info.HasUnreadMentions"/>
            <div class="@(isHoverable ? "hoverable" : "") slot">
                @if (hasButtons) {
                    @if (chatState.IsRecording) {
                        <ChatListRecordingToggle Chat="@chat" IsRecording="@audioState.IsRecording" Class="blackout"/>
                    }
                    <div class="@(hasMenu ? "" : "pr-1")">
                        <ChatListListenToggle AudioState="@audioState" Class="blackout"/>
                    </div>
                }
                @if (hasMenu) {
                    <div
                        class="menu"
                        data-menu="@(MenuRef.New<ChatMenu>(chat.Id, ListKind.Format()).ToString())"
                        data-menu-trigger="@MenuTrigger.Primary"
                        data-menu-placement="@(FloatingPosition.RightStart.ToPositionString())">

                        <ButtonRound Class="blackout" ContentClass="!bg-transparent">
                            <i class="icon-more-vertical text-2xl"></i>
                        </ButtonRound>
                    </div>
                }
            </div>
        </Ending>
    </NavbarItem>
    @if (isLastPinned) {
        <div class="mx-2 my-1.5 border-b border-bg-04"></div>
    }
}

@code {
    private Model? _rendered;

    [Inject] private ChatUI ChatUI { get; init; } = null!;
    [Inject] private SearchUI SearchUI { get; init; } = null!;

    [CascadingParameter] public ScreenSize ScreenSize { get; init; }

    // Provide Position for ChatListKind.All or ChatInfo for ChatListKind.Active
    [Parameter] public int Position { get; init; }
    [Parameter] public ChatInfo ChatInfo { get; init; } = null!;

    [Parameter] public ChatListKind ListKind { get; init; } = ChatListKind.All;

    protected override bool ShouldRender()
        => State.HasError || !ReferenceEquals(_rendered, State.Value);

    protected override ComputedState<Model>.Options GetStateOptions()
        => new() {
            InitialValue = Model.Loading,
            Category = GetStateCategory(),
        };

    protected override async Task<Model> ComputeState(CancellationToken cancellationToken) {
        ChatInfo? chatInfo;
        if (ListKind == ChatListKind.Active)
            chatInfo = ChatInfo;
        else {
            var chatId = await ChatUI.GetChatId(Position, cancellationToken).ConfigureAwait(false);
            if (!chatId.HasValue)
                return Model.None;
            chatInfo = await ChatUI.Get(chatId.Value, cancellationToken).ConfigureAwait(false);
        }
        if (chatInfo == null)
            return Model.None;

        var fixedChatId = await ChatUI.FixChatId(chatInfo.Id, cancellationToken).ConfigureAwait(false);
        var chatState = await ChatUI.GetState(fixedChatId, false, cancellationToken).ConfigureAwait(false);
        if (chatState == null)
            return Model.None;

        var isLastPinned = false;
        if (chatState.Contact.IsPinned && ListKind == ChatListKind.All) {
            var nextChatId = await ChatUI.GetChatId(Position + 1, cancellationToken).ConfigureAwait(false);
            if (nextChatId.HasValue) {
                var nextChatInfo = await ChatUI.Get(nextChatId.Value, cancellationToken).ConfigureAwait(false);
                if (nextChatInfo != null) {
                    isLastPinned = !nextChatInfo.Contact.IsPinned;
                }
            }
        }

        return new Model {
            ChatState = chatState,
            IsLastPinned = isLastPinned,
        };
    }

    private async Task OnClick(ChatId chatId) {
        var tuneUI = ChatUI.Services.GetRequiredService<TuneUI>();
        _ = tuneUI.Play("select-chat");

        try {
            if (ScreenSize.IsWide())
                return;

            // This part hides LeftPanel when you select the chat
            var chatUrl = Links.Chat(chatId);
            var history = ChatUI.Services.GetRequiredService<History>();
            using var cts = new CancellationTokenSource(TimeSpan.FromSeconds(0.5));
            await history
                .When(_ => history.LocalUrl.Value.OrdinalStartsWith(chatUrl), cts.Token)
                .SuppressCancellationAwait();
            await history.WhenNavigationCompleted;

            var panelsUI = ChatUI.Services.GetRequiredService<PanelsUI>();
            panelsUI.Left.SetIsVisible(false);
        }
        finally {
            StateHasChanged();
        }
    }

    public sealed record Model {
        public static Model Loading { get; } = new() { ChatState = ChatState.Loading };
        public static Model None { get; } = new() { ChatState = ChatState.None };

        public ChatState ChatState { get; init; } = ChatState.None;
        public bool IsLastPinned { get; init; }
    }
}
