@namespace ActualChat.Chat.UI.Blazor.Components
@inherits ComputedStateComponent<ChatState>
@{
    var m = _rendered = State.Value;
    var chat = m.Chat;
    var info = m.Info;
    var lastTextEntry = info.LastTextEntry;
    var audioState = m.AudioState;
}

<NavbarItem
    Url="@($"/chat/{chat.Id}")"
    IsSelected="@m.IsSelected"
    data-menu="@(MenuRef.New<ChatMenu>(chat.Id, ListKind.Format()).ToString())"
    data-menu-placement="@(FloatingPosition.BottomStart.ToPositionString())">
    <ChildContent>
        <div class="flex-1 flex-x items-center gap-x-2" @onclick="@OnClick">
            <ChatIcon Chat="m.Chat"/>
            <div class="grid justify-start items-start gap-y-1">
                <span class="text-headline-1 text-02 truncate">
                    <SearchUIHighlighter Text="@m.Chat.Title"/>
                </span>
                @if (lastTextEntry != null) {
                    <div class="text-xs text-03 truncate">
                        @if (m.Chat.Kind != ChatKind.Peer && !lastTextEntry.IsSystemEntry) {
                            <span>
                                <AuthorName Class="text-xs text-02 font-medium" AuthorSid="@lastTextEntry.AuthorId" ShowDetailsOnClick="false"/>:
                            </span>
                        }
                        @info.LastTextEntryText
                    </div>
                }
            </div>
        </div>
    </ChildContent>
    <Ending>
        @{
            var isWide = ScreenSize.IsWide();
            var isActiveChatList = ListKind == ChatListKind.Active;
            var isListeningOrRecording = m.IsListening || m.IsRecording;
            var hasButtons = isWide || isActiveChatList || isListeningOrRecording;
            var hasMenu = !isActiveChatList && isWide;
            var isHoverable = isWide && !isActiveChatList && !isListeningOrRecording;
        }
        <div class="@(isHoverable ? "hoverable" : "") slot">
            @if (hasButtons) {
                @if (m.IsRecording) {
                    <ChatListRecordingToggle Chat="@chat" IsRecording="@audioState.IsRecording" Class="blackout"/>
                }
                <div class="@(hasMenu ? "" : "pr-1")">
                    <ChatListListenToggle AudioState="@audioState" Class="blackout"/>
                </div>
            }
            @if (hasMenu) {
                <div
                    class="menu"
                    data-menu="@(MenuRef.New<ChatMenu>(chat.Id, ListKind.Format()).ToString())"
                    data-menu-trigger="@MenuTrigger.Primary"
                    data-menu-placement="@(FloatingPosition.RightStart.ToPositionString())">

                    <ButtonRound Class="blackout" ContentClass="!bg-transparent">
                        <i class="icon-more-vertical text-2xl"></i>
                    </ButtonRound>
                </div>
            }
        </div>
        <UnreadCount Value="@m.Info.UnreadCount" NotificationMode="@m.Info.UserSettings.NotificationMode" HasMentions="m.Info.HasUnreadMentions"/>
    </Ending>
</NavbarItem>

@code {
    private ChatState? _rendered;

    [Inject] private ChatUI ChatUI { get; init; } = null!;

    [CascadingParameter] public ScreenSize ScreenSize { get; init; }
    [Parameter, EditorRequired] public ChatInfo ChatInfo { get; init; } = null!;
    [Parameter, EditorRequired] public ChatListKind ListKind { get; init; }

    protected override bool ShouldRender()
        => State.HasError || !ReferenceEquals(_rendered, State.Value);

    protected override ComputedState<ChatState>.Options GetStateOptions()
        => new() {
            InitialValue = new ChatState(ChatInfo, new ChatAudioState(ChatInfo.Id)),
            Category = GetStateCategory(),
        };

    protected override async Task<ChatState> ComputeState(CancellationToken cancellationToken)
    {
        var chatId = await ChatUI.FixChatId(ChatInfo.Id, cancellationToken).ConfigureAwait(false);
        var chatState = await ChatUI.GetState(chatId, false, cancellationToken).ConfigureAwait(false);
        return chatState ?? ChatState.None;
    }

    private async Task OnClick() {
        var tuneUI = ChatUI.Services.GetRequiredService<TuneUI>();
        _ = tuneUI.Play("select-chat");

        if (ScreenSize.IsWide() || !State.Value.IsSelected)
            return;

        // This part hides Navbar when you click on selected chat
        await Task.Delay(TimeSpan.FromMilliseconds(100));
        var navbarUI = ChatUI.Services.GetRequiredService<NavbarUI>();
        navbarUI.SetIsVisible(false);
    }
}
