@namespace ActualChat.Chat.UI.Blazor.Components
@using SearchUI = ActualChat.Chat.UI.Blazor.Services.SearchUI
@inherits ComputedRenderStateComponent<ChatListItem.Model>
@{
    var m = State.Value;
    var listKind = m.ListKind ?? ListKind;
    var chat = m.Chat ?? Chat;
    DebugLog?.LogDebug("Rendered: {ListKind} #{ChatTitle}, ChatId='{ChatId}'", listKind, chat.Title, chat.Id);
    var isWide = ScreenSize.IsWide();
    var isActiveChatList = listKind == ChatListKind.Active;
    var audioState = m.AudioState;
    var isListeningOrRecording = audioState.IsListening || audioState.IsRecording;
    var hasButtons = isWide || isActiveChatList || isListeningOrRecording;
    var lastTextEntry = m.LastTextEntry;
    var attributes = listKind == ChatListKind.All && m.IsFirstItem
        ? FirstItemAttributes
        : NoneAttributes;
    _renderedModel = m;
}

<NavbarItem
    Url="@($"/chat/{chat.Id}")"
    ReplaceOnPrefix="/chat/"
    IsSelected="@(m.IsSelected && listKind != ChatListKind.Active)"
    data-menu="@(MenuRef.New<ChatMenu>(chat.Id, listKind.Format()).ToString())"
    data-menu-placement="@(FloatingPosition.BottomStart.ToPositionString())"
    @attributes="@attributes">
    <ChildContent>
        <div class="c-container">
            <ChatIcon Chat="@chat" ShowPresence="@true"/>
            <div class="c-description">
                    <span class="c-chat-title">
                        <span>@chat.Title</span>
                        <span class="c-incut"></span>
                        @if (lastTextEntry != null && hasButtons && !isListeningOrRecording) {
                            <LastEntryTime LastEntry="@lastTextEntry"/>
                        }
                </span>
                @if (lastTextEntry != null) {
                    <div class="c-last-message">
                        @if (chat.Kind != ChatKind.Peer && !lastTextEntry.IsSystemEntry) {
                            <span class="c-name">
                                <AuthorName
                                    AuthorSid="@lastTextEntry.AuthorId"
                                    ShowDetailsOnClick="false"
                                    ShowOwnAsYou="true"/>
                            </span>
                            <span class="c-colon">:</span>
                        }
                        @if (lastTextEntry.IsStreaming) {
                            <chat-list-item-streaming-svg class="w-4 h-4"/>
                        }
                        else {
                            <span class="c-text">
                                @m.LastTextEntryText
                            </span>
                        }
                            <div class="c-incut"></div>
                            @if (hasButtons && !isListeningOrRecording) {
                                <UnreadCount
                                    Value="@m.UnreadCount"
                                    NotificationMode="@m.NotificationMode"
                                    HasMentions="m.HasUnreadMentions"/>
                            }
                    </div>
                }
            </div>
        </div>
    </ChildContent>
    <Ending>
        @{
            var hasMenu = !isActiveChatList && isWide;
            var isHoverable = isWide && !isActiveChatList && !isListeningOrRecording;
        }
        <div class="@(isHoverable ? "hoverable" : "") slot">
            <UnreadCount
                Value="@m.UnreadCount"
                NotificationMode="@m.NotificationMode"
                HasMentions="@m.HasUnreadMentions"/>
            @if (hasButtons) {
                @if (audioState.IsRecording) {
                    <ChatListRecordingToggle Chat="@chat" IsRecording="@audioState.IsRecording" Class="blackout"/>
                }
                <div class="@(hasMenu ? "" : "pr-1")">
                    <ChatListListenToggle AudioState="@audioState" Class="blackout"/>
                </div>
            }
            @if (hasMenu) {
                <div
                    class="menu"
                    data-menu="@(MenuRef.New<ChatMenu>(chat.Id, listKind.Format()).ToString())"
                    data-menu-trigger="@MenuTrigger.Primary"
                    data-menu-placement="@(FloatingPosition.RightStart.ToPositionString())">

                    <HeaderButton Class="blackout">
                        <i class="icon-more-vertical text-2xl"></i>
                    </HeaderButton>
                </div>
            }
        </div>
    </Ending>
</NavbarItem>
@if (m.IsLastItemInBlock) {
    <Divider Class="mx-1 my-1.5"/>
}

@code {
    // Settings data-bubble attributes inside a component instead providing them from ChatList as additional attributes,
    // allows to avoid unnecessary OnParametersSet call during rendering ChatList and correspondingly
    // it allows to avoid extra ComputeState call and Rendering.
    private static readonly Dictionary<string, object> FirstItemAttributes = new() {
        { "data-bubble", BubbleRef.New<ChatListItemBubble>() },
        { "data-bubble-priority", 204 },
        { "data-bubble-placement", FloatingPosition.Bottom.ToPositionString() },
    };
    private static readonly Dictionary<string, object> NoneAttributes = new();

    private ILogger? _log;
    private Model? _renderedModel;

    [Inject] private ChatUIHub Hub { get; init; } = null!;
    private ChatUI ChatUI => Hub.ChatUI;
    private ChatListUI ChatListUI => Hub.ChatListUI;
    private SearchUI SearchUI => Hub.SearchUI;
    private ScreenSize ScreenSize => Hub.BrowserInfo.ScreenSize.Value;

    private ILogger Log => _log ??= Hub.LogFor(GetType());
    private ILogger? DebugLog => Constants.DebugMode.ChatListComponents ? Log : null;

    [Parameter, EditorRequired] public ChatListKind ListKind { get; set; } = ChatListKind.All;
    [Parameter, EditorRequired] public Chat Chat { get; set; } = SpecialChat.Unavailable;
    [Parameter] public bool IsLastItemInBlock { get; set; }
    [Parameter] public bool IsFirstItem { get; set; }

    public ChatListItem()
        => Options = ComputedStateComponentOptions.RecomputeStateOnParameterChange;

    // protected override void OnInitialized() {
    //     DebugLog?.LogDebug("OnInitialized: {ListKind} #{Index}", ListKind, Index);
    // }
    //
    // protected override void OnParametersSet() {
    //     DebugLog?.LogDebug("OnParametersSet: {ListKind} #{Index}", ListKind, Index);
    // }

    protected override bool ShouldRender() {
        if (_renderedModel == null)
            return true;

        var m = State.LastNonErrorValue;
        var isTheSame = m == _renderedModel;
        return !isTheSame;
    }

    protected override ComputedState<Model>.Options GetStateOptions()
        => ComputedStateComponent.GetStateOptions(GetType(),
            t => new ComputedState<Model>.Options {
                InitialValue = new () {
                    AudioState = ChatAudioState.None,
                },
                UpdateDelayer = FixedDelayer.NextTick,
                Category = ComputedStateComponent.GetStateCategory(t),
            });

    protected override async Task<Model> ComputeState(CancellationToken cancellationToken)
    {
         // We intentionally use .ConfigureAwait(false) here: this is one of the most frequently called methods.
         // Properties are copied to local vars because of this.
        var listKind = ListKind;
        var chat = Chat;
        var chatTitle = chat.Title;
        var chatId = chat.Id;
        var isLastItemInBlock = IsLastItemInBlock;
        var isFirstItem = IsFirstItem;
        DebugLog?.LogDebug("-> ComputeState: {ListKind} #{ChatTitle}", listKind, chatTitle);
        var chatState = await ChatUI.GetState(chatId, false, cancellationToken).ConfigureAwait(false);
        if (chatState == null) {
            DebugLog?.LogDebug("<- ComputeState: {ListKind} #{ChatTitle}, No ChatState", listKind, chatTitle);
            return Model.None;
        }
        DebugLog?.LogDebug("<- ComputeState: {ListKind} #{ChatTitle}, OK, ChatId={ChatId}", listKind, chatTitle, chatId);
        return new() {
            ListKind = listKind,
            Chat = chatState.Chat,
            AudioState = chatState.AudioState,
            NotificationMode = chatState.Info.UserSettings.NotificationMode,
            IsSelected = chatState.IsSelected,
            UnreadCount = chatState.Info.UnreadCount,
            HasUnreadMentions = chatState.Info.HasUnreadMentions,
            LastTextEntry = chatState.Info.LastTextEntry,
            LastTextEntryText = chatState.Info.LastTextEntryText,
            IsLastItemInBlock = isLastItemInBlock,
            IsFirstItem = isFirstItem,
        };
    }

    // Nested types

    public sealed record Model {
        public static readonly Model None = new() { AudioState = ChatAudioState.None };

        public ChatListKind? ListKind { get; init; }
        public Chat? Chat { get; init; }
        public string LastTextEntryText { get; init; } = "";
        public ChatEntry? LastTextEntry { get; init; }
        public ChatAudioState AudioState { get; init; }
        public ChatNotificationMode NotificationMode { get; init; }
        public Trimmed<int> UnreadCount { get; init; }
        public bool HasUnreadMentions { get; init; }
        public bool IsSelected { get; init; }
        public bool IsLastItemInBlock { get; init; }
        public bool IsFirstItem { get; init; }
    }
}
