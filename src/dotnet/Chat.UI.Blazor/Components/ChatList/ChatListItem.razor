@namespace ActualChat.Chat.UI.Blazor.Components
@inherits ComputedStateComponent<ChatListItem.Model>
@{
    // ChatUI.Services.LogFor(GetType()).LogDebug("Rendered: {ListKind} #{Index}", ListKind, Index);
    var m = State.Value;
    if (m == Model.None)
        return;

    var chatState = m.ChatState;
    var chat = chatState.Chat;
    var chatInfo = chatState.Info;
    var lastTextEntry = chatInfo.LastTextEntry;
    var audioState = chatState.AudioState;
}

@if (m == Model.Loading) {
    <ChatListItemSkeleton />
}
else {
    <NavbarItem
        Url="@($"/chat/{chat.Id}")"
        ReplaceOnPrefix="/chat/"
        IsSelected="@(chatState.IsSelected && ListKind != ChatListKind.Active)"
        data-menu="@(MenuRef.New<ChatMenu>(chat.Id, ListKind.Format()).ToString())"
        data-menu-placement="@(FloatingPosition.BottomStart.ToPositionString())"
        @attributes="@Attributes">
        <ChildContent>
            <div class="c-container">
                <ChatIcon Chat="chatState.Chat"/>
                <div class="c-description">
                    <span class="c-title">
                        <SearchUIHighlighter Text="@chatState.Chat.Title"/>
                    </span>
                    @if (lastTextEntry != null) {
                        <div class="c-last-message">
                            @if (chatState.Chat.Kind != ChatKind.Peer && !lastTextEntry.IsSystemEntry) {
                                <span>
                                    <AuthorName AuthorSid="@lastTextEntry.AuthorId" ShowDetailsOnClick="false"/>:
                                </span>
                            }
                            @chatInfo.LastTextEntryText
                        </div>
                    }
                </div>
            </div>
        </ChildContent>
        <Ending>
            @{
                var isWide = ScreenSize.IsWide();
                var isActiveChatList = ListKind == ChatListKind.Active;
                var isListeningOrRecording = chatState.IsListening || chatState.IsRecording;
                var hasButtons = isWide || isActiveChatList || isListeningOrRecording;
                var hasMenu = !isActiveChatList && isWide;
                var isHoverable = isWide && !isActiveChatList && !isListeningOrRecording;
            }
            <UnreadCountWithTime
                Value="@chatState.Info.UnreadCount"
                LastEntry="@chatState.Info.LastTextEntry"
                HideLastEntryTime="@isListeningOrRecording"
                NotificationMode="@chatState.Info.UserSettings.NotificationMode"
                HasMentions="chatState.Info.HasUnreadMentions"/>
            <div class="@(isHoverable ? "hoverable" : "") slot">
                @if (hasButtons) {
                    @if (chatState.IsRecording) {
                        <ChatListRecordingToggle Chat="@chat" IsRecording="@audioState.IsRecording" Class="blackout"/>
                    }
                    <div class="@(hasMenu ? "" : "pr-1")">
                        <ChatListListenToggle AudioState="@audioState" Class="blackout"/>
                    </div>
                }
                @if (hasMenu) {
                    <div
                        class="menu"
                        data-menu="@(MenuRef.New<ChatMenu>(chat.Id, ListKind.Format()).ToString())"
                        data-menu-trigger="@MenuTrigger.Primary"
                        data-menu-placement="@(FloatingPosition.RightStart.ToPositionString())">

                        <ButtonRound Class="blackout" ContentClass="!bg-transparent">
                            <i class="icon-more-vertical text-2xl"></i>
                        </ButtonRound>
                    </div>
                }
            </div>
        </Ending>
    </NavbarItem>
}
@if (m.IsLastItemInBlock) {
    <div class="mx-2 my-1.5 border-b border-bg-04"></div>
}

@code {
    [Inject] private ChatUI ChatUI { get; init; } = null!;
    [Inject] private ChatListUI ChatListUI { get; init; } = null!;
    [Inject] private SearchUI SearchUI { get; init; } = null!;

    [CascadingParameter] public ScreenSize ScreenSize { get; init; }

    [Parameter, EditorRequired] public ChatListKind ListKind { get; init; } = ChatListKind.All;
    [Parameter, EditorRequired] public int Index { get; init; }
    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object> Attributes { get; set; } = new();

    protected override ComputedState<Model>.Options GetStateOptions()
        => new() {
            InitialValue = Model.Loading,
            Category = GetStateCategory(),
        };

    protected override async Task<Model> ComputeState(CancellationToken cancellationToken)
    {
        // We intentionally use .ConfigureAwait(false) here: this is one of the most frequently called methods.
        // Properties are copied to local vars because of this.
        var listKind = ListKind;
        var index = Index;

        var chatId = await ChatListUI.GetItem(listKind, index).ConfigureAwait(false);
        if (chatId.IsNone)
            return Model.Loading;

        var chatInfo = await ChatUI.Get(chatId, cancellationToken).ConfigureAwait(false);
        if (chatInfo == null)
            return Model.None;

        var chatState = await ChatUI.GetState(chatId, false, cancellationToken).ConfigureAwait(false);
        if (chatState == null)
            return Model.None;

        var isLastItemInBlock = false;
        if (chatState.Contact.IsPinned && listKind == ChatListKind.All) {
            var nextChatId = await ChatListUI.GetItem(listKind, index + 1).ConfigureAwait(false);
            var nextChatInfo = nextChatId.IsNone ? null
                : await ChatUI.Get(nextChatId, cancellationToken).ConfigureAwait(false);
            if (nextChatInfo != null)
                isLastItemInBlock = !nextChatInfo.Contact.IsPinned;
        }

        return new Model {
            ChatState = chatState,
            IsLastItemInBlock = isLastItemInBlock,
        };
    }

    public sealed record Model {
        public static Model Loading { get; } = new() { ChatState = ChatState.Loading };
        public static Model None { get; } = new() { ChatState = ChatState.None };

        public ChatState ChatState { get; init; } = ChatState.None;
        public bool IsLastItemInBlock { get; init; }
    }
}
