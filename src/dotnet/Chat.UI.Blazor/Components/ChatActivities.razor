@namespace ActualChat.Chat.UI.Blazor.Components
@inherits ComputedStateComponent<ChatActivities.Model>
@{
    var m = State.LatestNonErrorValue;
}

<ChatAuthorCirclesGroup
    Class="chat-activity-panel"
    MaxIconCount="@MaxIconCount"
    Size="SquareSize.Size6"
    AuthorIds="@m.RecordingAuthorIds" />

@code {
    [Inject] private IChatAuthors ChatAuthors { get; init; } = null!;
    [Inject] private ChatActivity ChatActivity { get; init; } = null!;

    private IChatRecordingActivity? ChatRecordingActivity { get; set; }

    [CascadingParameter] public Chat Chat { get; set; } = null!;
    [Parameter] public int MaxIconCount { get; set; } = 5;

    public override async ValueTask DisposeAsync() {
        await base.DisposeAsync();
        ChatRecordingActivity?.Dispose();
    }

    protected override async Task OnParametersSetAsync() {
        ChatRecordingActivity?.Dispose();
        ChatRecordingActivity = await ChatActivity.GetRecordingActivity(Chat.Id, CancellationToken.None);
        await base.OnParametersSetAsync();
    }

    protected override ComputedState<Model>.Options GetStateOptions()
        => new() { InitialValue = Model.None };

    protected override async Task<Model> ComputeState(CancellationToken cancellationToken) {
        if (ChatRecordingActivity == null)
            return Model.None;

        var authorIds = await ChatRecordingActivity.GetActiveAuthorIds(cancellationToken);
        return new() {
            RecordingAuthorIds = authorIds,
        };
    }

    public sealed class Model {
        public static Model None { get; } = new();
        public ImmutableArray<Symbol> RecordingAuthorIds { get; init; } = ImmutableArray<Symbol>.Empty;
    }
}
