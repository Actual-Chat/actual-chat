@namespace ActualChat.Chat.UI.Blazor.Components
@inherits ComputedStateComponent<ChatActivities.Model>
@{
    var m = State.Value;
}

<AuthorCircleGroup
    Class="chat-activity-panel"
    MaxIconCount="@MaxIconCount"
    Size="SquareSize.Size6"
    AuthorSids="@m.RecordingAuthorSids" />

@code {
    [Inject] private IAuthors Authors { get; init; } = null!;
    [Inject] private ChatActivity ChatActivity { get; init; } = null!;

    private IChatRecordingActivity? ChatRecordingActivity { get; set; }

    [Parameter, EditorRequired] public Chat Chat { get; set; } = null!;
    [Parameter] public int MaxIconCount { get; set; } = 5;

    public override async ValueTask DisposeAsync() {
        await base.DisposeAsync();
        ChatRecordingActivity?.Dispose();
    }

    protected override async Task OnParametersSetAsync() {
        ChatRecordingActivity?.Dispose();
        ChatRecordingActivity = Chat.Id.IsNone ? null
            : await ChatActivity.GetRecordingActivity(Chat.Id, CancellationToken.None);
        await base.OnParametersSetAsync();
    }

    protected override ComputedState<Model>.Options GetStateOptions()
        => new() {
            InitialValue = Model.None,
            Category = GetStateCategory(),
        };

    protected override async Task<Model> ComputeState(CancellationToken cancellationToken) {
        if (ChatRecordingActivity == null)
            return Model.None;

        var authorIds = await ChatRecordingActivity.GetActiveAuthorIds(cancellationToken);
        return new() {
            RecordingAuthorSids = authorIds.Select(id => id.Value).ToApiArray(),
        };
    }

    public sealed class Model {
        public static Model None { get; } = new();

        public ApiArray<string> RecordingAuthorSids { get; init; } = ApiArray<string>.Empty;
    }
}
