@namespace ActualChat.Chat.UI.Blazor.Components
@inherits ComputedStateComponent<ChatActivities.Model>

<div class="chat-activity-panel flex-x pr-3">
@{
    var model = State.LatestNonErrorValue;
    var recording = model.Recording;
    var zIndex = 1;
    var range = MaxIconCount > recording.Length ? recording.Length : MaxIconCount;
    var cls = "-mr-2 border border-primary rounded-full";
    for (var i = 0; i < range; i++) {
        var authorId = recording[i];
        <div class="@cls" style="z-index: @zIndex;">
            <ChatAuthorAvatar AuthorId="@authorId" Size="AuthorBadgeSize.Size6" />
        </div>
        zIndex++;
    }
    if (recording.Length > MaxIconCount) {
        <div class="@cls" style="z-index: @(range + 1);">
            @{ var avatarText = recording.Length < 11 ? "+" + (recording.Length - MaxIconCount) : "..."; }
            <TextualAvatar Size="AuthorBadgeSize.Size6" Text="@avatarText" />
        </div>
    }
}
</div>

@code {
    [Inject] private IChatAuthors ChatAuthors { get; init; } = null!;
    [Inject] private ChatActivity ChatActivity { get; init; } = null!;
    private IChatRecordingActivity? ChatRecordingActivity { get; set; }

    [CascadingParameter] public Chat Chat { get; set; } = null!;
    [Parameter] public int MaxIconCount { get; set; } = 5;

    public override async ValueTask DisposeAsync() {
        await base.DisposeAsync();
        ChatRecordingActivity?.Dispose();
    }

    protected override async Task OnParametersSetAsync() {
        ChatRecordingActivity?.Dispose();
        ChatRecordingActivity = await ChatActivity.GetRecordingActivity(Chat.Id, CancellationToken.None);
        await base.OnParametersSetAsync();
    }

    protected override ComputedState<Model>.Options GetStateOptions()
        => new() { InitialValue = Model.None };

    protected override async Task<Model> ComputeState(CancellationToken cancellationToken) {
        if (ChatRecordingActivity == null)
            return Model.None;

        var authorIds = await ChatRecordingActivity.GetActiveAuthorIds(cancellationToken);
        return new() {
            Recording = authorIds,
        };
    }

    public sealed class Model {
        public static Model None { get; } = new();

        public ImmutableArray<Symbol> Recording { get; init; } = ImmutableArray<Symbol>.Empty;
    }
}
