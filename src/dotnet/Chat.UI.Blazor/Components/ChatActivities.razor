@namespace ActualChat.Chat.UI.Blazor.Components
@inherits ComputedStateComponent<ChatActivities.Model>

<div class="chat-activity-panel flex-x pr-3">
@{
    var m = State.LatestNonErrorValue;
    var recordingAuthorIds = m.RecordingAuthorIds;
    var zIndex = 1;
    var range = MaxIconCount > recordingAuthorIds.Length ? recordingAuthorIds.Length : MaxIconCount;
    var cls = "-mr-2 border border-primary rounded-full";
    for (var i = 0; i < range; i++) {
        var authorId = recordingAuthorIds[i];
        <div class="@cls" style="z-index: @zIndex;">
            <ChatAuthorCircle AuthorId="@authorId" Size="PersonCircleSize.Size6" />
        </div>
        zIndex++;
    }
    if (recordingAuthorIds.Length > MaxIconCount) {
        <div class="@cls" style="z-index: @(range + 1);">
            @{
                var avatarText = recordingAuthorIds.Length < 11
                    ? "+" + (recordingAuthorIds.Length - MaxIconCount)
                    : "...";
            }
            <TextualAuthorBadge Size="PersonCircleSize.Size6" Text="@avatarText" />
        </div>
    }
}
</div>

@code {
    [Inject] private IChatAuthors ChatAuthors { get; init; } = null!;
    [Inject] private ChatActivity ChatActivity { get; init; } = null!;
    private IChatRecordingActivity? ChatRecordingActivity { get; set; }

    [CascadingParameter] public Chat Chat { get; set; } = null!;
    [Parameter] public int MaxIconCount { get; set; } = 5;

    public override async ValueTask DisposeAsync() {
        await base.DisposeAsync();
        ChatRecordingActivity?.Dispose();
    }

    protected override async Task OnParametersSetAsync() {
        ChatRecordingActivity?.Dispose();
        ChatRecordingActivity = await ChatActivity.GetRecordingActivity(Chat.Id, CancellationToken.None);
        await base.OnParametersSetAsync();
    }

    protected override ComputedState<Model>.Options GetStateOptions()
        => new() { InitialValue = Model.None };

    protected override async Task<Model> ComputeState(CancellationToken cancellationToken) {
        if (ChatRecordingActivity == null)
            return Model.None;

        var authorIds = await ChatRecordingActivity.GetActiveAuthorIds(cancellationToken);
        return new() {
            RecordingAuthorIds = authorIds,
        };
    }

    public sealed class Model {
        public static Model None { get; } = new();
        public ImmutableArray<Symbol> RecordingAuthorIds { get; init; } = ImmutableArray<Symbol>.Empty;
    }
}
