@using Stl.Extensibility
@inherits MarkupViewBase<UrlMarkup>
@attribute [MatchFor(typeof(UrlMarkup), typeof(IMarkupView))]
@{
    var cls = "url-markup url-markup-" + _kind.ToString().ToLower();
}

@switch (_kind) {
case MarkupUrlKind.Chat:
    <a class="@cls"
       href="@(_chatUrl!.Value)"
       @onclick="@OnAppUrlClick"
       @onclick:preventDefault="true"
       data-menu="@(MenuRef.New<MessageMenu>(_message.Entry.Id, Markup.Url))">
        @Markup.Url
    </a>
    break;
case MarkupUrlKind.Image:
    <a class="@cls"
       href="@Markup.Url"
       role="button"
       @onclick="OnAppUrlClick"
       @onclick:preventDefault="true">
        <img src="@Markup.Url" alt="@Markup.Url"/>
    </a>
    break;
default:
    <a class="@cls" href="@Markup.Url" target="_blank"
       data-menu="@(MenuRef.New<MessageMenu>(_message.Entry.Id, Markup.Url))">
        @Markup.Url
    </a>
    break;
}

@code {
    private MarkupUrlKind _kind;
    private ChatMessageModel _message = null!;
    private LocalUrl? _chatUrl;

    [Inject] private ImageViewerUI ImageViewerUI { get; init; } = null!;
    [Inject] private History History { get; init; } = null!;

    protected override void OnParametersSet() {
        _message = new ChatMessageModel(Entry);
        _kind = Markup.IsImage
            ? MarkupUrlKind.Image
            : IsLocalUrl(Markup.Url, out _chatUrl) ? MarkupUrlKind.Chat : MarkupUrlKind.Other;
    }

    private bool IsLocalUrl(string url, out LocalUrl? localUrl)
    {
        if (Markup.Url.StartsWith(History.Nav.BaseUri)) {
            localUrl = new LocalUrl(History.Nav.ToBaseRelativePath(url));
            return true;
        }
        if (Markup.Url.StartsWith(History.UrlMapper.BaseUrl)) {
            localUrl = new LocalUrl(History.UrlMapper.ToBaseRelativePath(url));
            return true;
        }
        localUrl = null;
        return false;
    }

    private async Task OnAppUrlClick() {
        switch (_kind)
        {
            case MarkupUrlKind.Image:
                await ImageViewerUI.Show(Markup.Url);
                break;
            case MarkupUrlKind.Chat:
                History.NavigateTo(_chatUrl);
                break;
        }
    }

    private enum MarkupUrlKind {
        Other,
        Chat,
        Image,
    }
}
