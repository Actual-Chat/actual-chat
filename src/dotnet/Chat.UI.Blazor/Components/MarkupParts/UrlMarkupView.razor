@using System.Diagnostics.CodeAnalysis
@inherits MarkupViewBase<UrlMarkup>
@{
    var cls = "url-markup url-markup-" + _urlKind.ToString().ToLower();
}

@switch (_urlKind) {
case MarkupUrlKind.Local:
    <a class="@cls"
       href="@(_localUrl!.Value)"
       @onclick="@(() => OnSpecialUrlClick(MarkupUrlKind.Local, _localUrl.Value))"
       @onclick:preventDefault="true"
       data-menu="@(MenuRef.New<MessageMenu>(_message.Entry.Id, bool.FalseString, Markup.Url, ""))">
        @Markup.Url
    </a>
    break;
case MarkupUrlKind.Image:
    <a class="@cls"
       href="@Markup.Url"
       role="button"
       @onclick="@(() => OnSpecialUrlClick(MarkupUrlKind.Image, Markup.Url))"
       @onclick:preventDefault="true">
        <img src="@Markup.Url" alt="@Markup.Url"/>
    </a>
    break;
default:
    <a class="@cls" href="@Markup.Url" target="_blank"
       data-menu="@(MenuRef.New<MessageMenu>(_message.Entry.Id, bool.FalseString, Markup.Url, ""))">
        @Markup.Url
    </a>
    break;
}

@code {
    private MarkupUrlKind _urlKind;
    private LocalUrl? _localUrl;
    private ChatMessageModel _message = null!;

    [Inject] private VisualMediaViewerUI VisualMediaViewerUI { get; init; } = null!;
    [Inject] private History History { get; init; } = null!;

    protected override void OnParametersSet() {
        _message = new ChatMessageModel(Entry);
        _urlKind = Markup.IsImage
            ? MarkupUrlKind.Image
            : IsLocalUrl(Markup.Url, out _localUrl)
                ? MarkupUrlKind.Local
                : MarkupUrlKind.Other;
    }

    private bool IsLocalUrl(string url, [NotNullWhen(true)] out LocalUrl? localUrl)
    {
        if (Markup.Url.StartsWith(History.Nav.BaseUri)) {
            localUrl = new LocalUrl(History.Nav.ToBaseRelativePath(url));
            return true;
        }
        if (Markup.Url.StartsWith(History.UrlMapper.BaseUrl)) {
            localUrl = new LocalUrl(History.UrlMapper.ToBaseRelativePath(url));
            return true;
        }
        localUrl = null;
        return false;
    }

    private async Task OnSpecialUrlClick(MarkupUrlKind urlKind, string url) {
        switch (urlKind) {
        case MarkupUrlKind.Image:
            await VisualMediaViewerUI.Show(url);
            break;
        case MarkupUrlKind.Local:
            _ = History.NavigateTo(url);
            break;
        default:
            throw new ArgumentOutOfRangeException(nameof(urlKind));
        }
    }

    private enum MarkupUrlKind {
        Other,
        Local,
        Image,
    }
}
