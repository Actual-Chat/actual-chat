@using Stl.Extensibility
@inherits MarkupViewBase<UrlMarkup>
@attribute [MatchFor(typeof(UrlMarkup), typeof(IMarkupView))]
@{
    var cls = "url-markup url-markup-" + _kind.ToString().ToLower();
}

@switch (_kind) {
case MarkupUrlKind.Chat:
    <a class="@cls"
       href="@Markup.Url"
       @onclick="@OnClick"
       @onclick:preventDefault="true"
       data-menu="@(MenuRef.New<MessageMenu>(_message.Entry.ChatId, _message.Key, Markup.Url))"
       data-menu-trigger="@MenuTriggers.RightClick.Format()">
        @Markup.Url
    </a>
    break;
case MarkupUrlKind.Image:
    <a class="@cls"
       href="@Markup.Url"
       role="button"
       @onclick="OnClick"
       @onclick:preventDefault="true">
        <img src="@Markup.Url" alt="@Markup.Url"/>
    </a>
    break;
default:
    <a class="@cls" href="@Markup.Url" target="_blank"
       data-menu="@(MenuRef.New<MessageMenu>(_message.Entry.ChatId, _message.Key, Markup.Url))"
       data-menu-trigger="@MenuTriggers.RightClick.Format()">
        @Markup.Url
    </a>
    break;
}

@code {
    private MarkupUrlKind _kind;
    private ChatMessageModel _message = null!;

    [Inject] private ImageViewerUI ImageViewerUI { get; init; } = null!;
    [Inject] private NavigationManager Nav { get; init; } = null!;

    protected override void OnParametersSet() {
        _message = new ChatMessageModel(Entry);
        _kind = Markup.IsImage
            ? MarkupUrlKind.Image
            : Markup.Url.StartsWith(Nav.BaseUri) ? MarkupUrlKind.Chat : MarkupUrlKind.Other;
    }

    private async Task OnClick() {
        if (_kind == MarkupUrlKind.Image)
            await ImageViewerUI.Show(Markup.Url);
        else
            Nav.NavigateTo(Markup.Url);
    }

    private enum MarkupUrlKind {
        Other,
        Chat,
        Image,
    }
}
