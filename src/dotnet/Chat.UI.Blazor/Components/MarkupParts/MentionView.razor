@using Stl.Extensibility
@inherits MarkupViewBase<MentionMarkup>
@attribute [MatchFor(typeof(MentionMarkup), typeof(IMarkupView))]

<AuthorBadgeTemplate Id="@_authorId">
    @if (context.Author.Id.IsNone) {
        <div class="mention-markup mention-markup-invalid">@Markup.NameOrNotAvailable</div>
        return;
    }

    <div class="mention-markup mention-markup-valid @(context.IsOwn ? "mention-markup-own" : "")"
         @onclick="OnAuthorClick">
        <div class="overflow-hidden truncate">
            <i class="absolute icon-at text-lg"></i>
            <span class="ml-5">
                @context.Author.Avatar.Name
            </span>
        </div>
    </div>
</AuthorBadgeTemplate>

@code {
    private string _authorId = "";

    [Inject] private ChatUI ChatUI { get; init; } = null!;
    [Inject] private MarkupHub MarkupHub { get; init; } = null!;
    [Inject] private IAuthors Authors { get; init; } = null!;
    [Inject] private Session Session { get; init; } = null!;

    protected override void OnParametersSet() {
        MarkupHub.ChatId = Entry.ChatId;
        var id = Markup.Id;
        if (!id.OrdinalHasPrefix("a:", out _authorId))
            _authorId = id;
    }

    private void OnAuthorClick()
        => ChatUI.ShowAuthorModal(_authorId);
}
