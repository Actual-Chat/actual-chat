@using Stl.Extensibility
@inherits MarkupViewBase<MentionMarkup>
@attribute [MatchFor(typeof(MentionMarkup), typeof(IMarkupView))]

<ChatAuthorBadgeTemplate AuthorId="@_authorId">
    @if (context.Author.Id.IsEmpty) {
        <div class="mention-markup mention-markup-invalid">@Markup.NameOrNotAvailable</div>
        return;
    }

    <div class="mention-markup mention-markup-valid @(context.IsOwn ? "mention-markup-own" : "")"
         @onclick="OnChatAuthorClick">
        <div class="flex-x items-center">
            <i class="icon-at text-md"></i>
            @context.Author.Name
        </div>
    </div>
</ChatAuthorBadgeTemplate>

@code {
    private string _authorId = "";

    [Inject] private ChatUI ChatUI { get; init; } = null!;
    [Inject] private MarkupHub MarkupHub { get; init; } = null!;
    [Inject] private IChatAuthors ChatAuthors { get; init; } = null!;
    [Inject] private Session Session { get; init; } = null!;

    protected override void OnParametersSet() {
        MarkupHub.ChatId = Entry.ChatId;
        var id = Markup.Id;
        if (!id.OrdinalHasPrefix("a:", out _authorId))
            _authorId = id;
    }

    private void OnChatAuthorClick()
        => ChatUI.ShowChatAuthorModal(_authorId);
}
