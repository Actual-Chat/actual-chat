@namespace ActualChat.Chat.UI.Blazor.Components
@inherits ComputedStateComponent<NavigateToUnreadOrEnd.Model>
@{
    var m = State.Value;
    if (ReferenceEquals(m, Model.None))
        return;

    _animator.State = m.IsVisible;
    if (_animator.MustHideComponent)
        return;

    var tooltip = m.CanScrollToUnread ? "Navigate to the new message" : "Navigate to the last message";
}

<div class="navigate-to-end @_animator.Class">
    <div class="c-content">
        @if (m.UnreadCount > 0) {
            var text = m.UnreadCount.FormatK();
            <Badge Class="unread-counter" Click="OnClick">@text</Badge>
        }
        <ButtonRound Tooltip="@tooltip" Click="OnClick">
            <i class="icon-arrow-down text-2xl font-thin"></i>
        </ButtonRound>
    </div>
</div>

@code {
    private ShowHideAnimator _animator = null!;
    private Moment _hideUntil;

    private Session Session => ChatContext.Session;
    private Chat Chat => ChatContext.Chat;
    private IChats Chats => ChatContext.Chats;
    private ChatUI ChatUI => ChatContext.ChatUI;
    private UIEventHub UIEventHub => ChatContext.UIEventHub();
    private Moment Now => ChatContext.Clocks().CpuClock.Now;

    [Parameter, EditorRequired] public ChatContext ChatContext { get; set; } = null!;
    [Parameter, EditorRequired] public ChatView ChatView { get; set; } = null!;
    [CascadingParameter] public RegionVisibility RegionVisibility { get; set; } = null!;

    protected override void OnInitialized() {

        _animator = new ShowHideAnimator(this, TimeSpan.FromMilliseconds(300));
        base.OnInitialized();
    }

    public override ValueTask DisposeAsync() {
        _animator.Dispose();
        return base.DisposeAsync();
    }

    protected override ComputedState<Model>.Options GetStateOptions()
        => new() {
            InitialValue = Model.Invisible,
            UpdateDelayer = FixedDelayer.Instant,
            Category = GetStateCategory(),
        };

    protected override async Task<Model> ComputeState(CancellationToken cancellationToken) {
        if (Chat.Id.IsNone)
            return Model.None;

        var isContainerVisible = await RegionVisibility.IsVisible.Use(cancellationToken);
        if (!isContainerVisible)
            return Model.None;

        var itemVisibility = await ChatView.ItemVisibility.Use(cancellationToken);
        var isVisible = !itemVisibility.IsEndAnchorVisible;
        if (!isVisible)
            return Model.Invisible;

        var chat = await ChatUI.Get(Chat.Id, cancellationToken);
        if (chat == null)
            return Model.Invisible;

        var lastEntryId = chat.News.LastTextEntry?.Id ?? default;
        if (lastEntryId.IsNone)
            return Model.Invisible;

        // Delay showing the button for the first time
        var now = Now;
        if (_hideUntil == default)
            _hideUntil = now + TimeSpan.FromSeconds(1.5);
        if (_hideUntil > now)
            await Task.Delay(_hideUntil - now + TimeSpan.FromMilliseconds(50), cancellationToken);

        var unreadCount = await ChatUI.GetUnreadCount(Chat.Id, cancellationToken);
        var canScrollToUnread = await ChatView.CanScrollToUnread.Use(cancellationToken);
        return new(true, lastEntryId, unreadCount, canScrollToUnread);
    }

    private Task OnClick()
        => ChatView.NavigateToUnreadOrEnd();

    public sealed record Model(
        bool IsVisible,
        ChatEntryId LastEntryId,
        Trimmed<int> UnreadCount,
        bool CanScrollToUnread)
    {
        public static readonly Model None = new(false, default, default, default);
        public static readonly Model Invisible = new(false, default, default, default);
        public static readonly Model InvisibleToVisible = new(false, default, default, default);
    }
}
