@namespace ActualChat.Chat.UI.Blazor.Components
@using BlazorContextMenu
@inherits ComputedStateComponent<bool>

@{
    var isPinned = State.ValueOrDefault;
}

@if (!isPinned) {
    <Item OnClick="@Toggle">
        <div class="context-menu-content">
            <div class="context-menu-icon">
                <i class="icon-pin text-2xl"></i>
            </div>
            <div class="context-menu-text">
                Pin
            </div>
        </div>
    </Item>
} else {
    <Item OnClick="@Toggle">
        <div class="context-menu-content">
            <div class="context-menu-icon">
                <i class="icon-pin text-2xl"></i>
            </div>
            <div class="context-menu-text">
                Unpin
            </div>
        </div>
    </Item>
}

@code {
    [Inject] private ChatUI ChatUI { get; init; } = null!;

    [CascadingParameter] public Chat Chat { get; set; } = null!;

    protected override ComputedState<bool>.Options GetStateOptions()
        => new() { UpdateDelayer = FixedDelayer.Instant };

    protected override Task<bool> ComputeState(CancellationToken cancellationToken)
        => ChatUI.IsPinned(Chat.Id);

    private void Toggle()
        => _ = ChatUI.SetPinState(Chat.Id, !State.ValueOrDefault);
}
