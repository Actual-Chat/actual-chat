@namespace ActualChat.Chat.UI.Blazor.Components
@using BlazorContextMenu
@inherits ComputedStateComponent<bool>

@{
    var isRecording = State.Value;
    var cls = "context-menu-item important-item " + (isRecording ? "on" : "off");
}

@if (isRecording) {
    <Item OnClick="@(_ => ChatUI.SetRecordingState(Symbol.Empty))" Class="@cls">
        <div class="context-menu-content">
            <div class="context-menu-icon">
                <i class="icon-Stop-fill text-2xl"></i>
            </div>
            <div class="context-menu-text">
                Stop talking
            </div>
        </div>
    </Item>
} else {
    <Item OnClick="@(_ => ChatUI.SetRecordingState(Chat.Id))" Class="@cls">
        <div class="context-menu-content">
            <div class="context-menu-icon">
                <i class="icon-mic text-2xl"></i>
            </div>
            <div class="context-menu-text">
                Start talking
            </div>
        </div>
    </Item>
}

@code {
    [Inject] private ChatUI ChatUI { get; init; } = null!;

    [CascadingParameter] public Chat Chat { get; set; } = null!;

    protected override ComputedState<bool>.Options GetStateOptions()
        => new() { UpdateDelayer = FixedDelayer.Instant };

    protected override Task<bool> ComputeState(CancellationToken cancellationToken)
        => ChatUI.IsRecording(Chat.Id);
}
