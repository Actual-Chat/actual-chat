@namespace ActualChat.Chat.UI.Blazor.Components
@inherits ComputedMenuBase<ChatState?>
@{
    var m = State.Value;
    if (m == null)
        return;

    var rules = m.Chat.Rules;
    var isPeerChat = m.Chat.Id.IsPeerChat(out _);
}

<CascadingValue Value="m">
    @if (rules.CanWrite()) {
        <ChatMenuRecord/>
    }
    @if (isPeerChat) {
        <ChatMenuStartAnonymous />
    }
    <ChatMenuPin/>
    <ChatMenuNavbarPin/>
    <ChatMenuListen/>
    <ChatMenuAddMember/>
    @if (_listKind == ChatListKind.Active) {
        <ChatMenuRemoveFromActiveChats/>
    }
    @if (rules.CanLeave()) {
        <ChatMenuLeave/>
    }
</CascadingValue>

@code {
    private ChatId _chatId;
    private ChatListKind _listKind;

    [Inject] private ChatUI ChatUI { get; init; } = null!;

    protected override async Task OnParametersSetAsync() {
        if (Arguments is not [ var sChatId, var sListKind ])
            throw new ArgumentOutOfRangeException(nameof(Arguments));

        _chatId = new ChatId(sChatId);
        _listKind = Enum.Parse<ChatListKind>(sListKind);
        await base.OnParametersSetAsync();
    }

    protected override Task<ChatState?> ComputeState(CancellationToken cancellationToken)
        => ChatUI.GetState(_chatId, false, cancellationToken);
}
