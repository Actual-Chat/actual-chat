@using System.ComponentModel.DataAnnotations
@namespace ActualChat.UI.Blazor.Components

<div class="px-2 py-2">
    <div class="mt-5">
        <EditForm Model="@_model" OnValidSubmit="@OnSave" >
            <DataAnnotationsValidator />

            <div>
                <label for="Title" class="block text-sm font-medium text-secondary">Chat title</label>
                <div class="mt-1">
                    <InputText @bind-Value="@_model.Title" id="Title"
                               class="w-full px-2 py-1 border border-1 border-gray-300 rounded-md focus:outline-none focus:border-sky-500" />
                </div>
            </div>

            <div>
                <label for="ChatType" class="block text-sm font-medium text-secondary">Type</label>
                <InputRadioGroup @bind-Value="_model.IsPublic" id="ChatType">
                    <InputRadio Value="@true" /><text>&nbsp;</text>Public chat<br>
                    <InputRadio Value="@false" /><text>&nbsp;</text>Private chat<br>
                </InputRadioGroup>
            </div>

            <div class="mt-3 flex flex-row justify-end">
                <button type="submit" class="bg-green-500 hover:bg-green-700 text-white py-1 px-4 rounded" disabled="@(_chat == null)">Save</button>
                <button type="button" class="bg-blue-500 hover:bg-blue-700 text-white py-1 px-4 rounded ml-3"
                        @onclick="@(() => ModalInstance?.CloseAsync() ?? Task.CompletedTask)">Cancel</button>
            </div>
        </EditForm>
    </div>
</div>

@code {
    public class Model
    {
        [Required]
        public string Title { get; set; } = "";

        public bool IsPublic { get; set; }
    }

    private Chat? _chat;
    private readonly Model _model = new();

    [Inject] private Session Session { get; set; } = default!;
    [Inject] private IChats Chats { get; set; } = default!;
    [Inject] private UICommandRunner Cmd { get; set; } = default!;

    [CascadingParameter]
    public BlazoredModalInstance ModalInstance { get; set; } = default!;
    [Parameter]
    public string ChatId { get; set; } = "";

    protected override async Task OnParametersSetAsync()
    {
        _chat = await Chats.Get(Session, ChatId, default);
        if (_chat == null) {
            await ModalInstance.CloseAsync();
            return;
        }

        _model.Title = _chat.Title;
        _model.IsPublic = _chat.IsPublic;
    }

    private async Task OnSave()
    {
        if (_chat == null)
            return;
        var modifiedChat = _chat with {
            Title = _model.Title,
            IsPublic = _model.IsPublic
        };
        var command = new IChats.UpdateChatCommand(Session, modifiedChat);
        await Cmd.Run(command);
        await ModalInstance.CloseAsync();
    }
}
