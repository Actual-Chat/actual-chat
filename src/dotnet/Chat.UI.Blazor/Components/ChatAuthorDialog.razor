@using Stl.Extensibility
@implements IModalView<ChatAuthorDialog.Model>
@attribute [MatchFor(typeof(Model), typeof(IModalView))]
@inherits ComputedStateComponent<ChatAuthorDialog.ComputedModel>
@{
    var m = State.LatestNonErrorValue;
    var title = $"User: {m.Author.Name}";
}

<DialogFrame Title="@title">
    <Body>
        <div class="flex-x items-center gap-x-3">
            <ChatAuthorCircle AuthorId="@AuthorId" Size="SquareSize.Size12" ShowsPresence="true" ShowsRecording="true"/>
            <ChatAuthorName AuthorId="@AuthorId" Class="text-02 font-semibold text-lg"/>
        </div>
    </Body>
    <Buttons>
        <div class="btn-group">
            @if (m.CanAddContact) {
                <Button Class="btn-success" Click="OnAddContactClick" IsDisabled="@IsAddingContact">Add to Contacts</Button>
            }
            @if (m.CanSendMessage) {
                <Button Class="btn-success" Click="OnSendMessageClick">Send Message</Button>
            }
        </div>
    </Buttons>
</DialogFrame>

@code {
    [Inject] private IChatAuthors ChatAuthors { get; init; } = null!;
    [Inject] private IChats Chats { get; init; } = null!;
    [Inject] private Session Session { get; init; } = null!;
    [Inject] private NavigationManager Nav { get; init; } = null!;
    [Inject] private UICommander UICommander { get; init; } = null!;

    private bool IsAddingContact { get; set; }
    private string AuthorId => ModalModel.AuthorId;

    [CascadingParameter] public BlazoredModalInstance ModalInstance { get; set; } = null!;
    [Parameter] public Model ModalModel { get; set; } = null!;

    protected override ComputedState<ComputedModel>.Options GetStateOptions()
        => new() { InitialValue = ComputedModel.None };

    protected override async Task<ComputedModel> ComputeState(CancellationToken cancellationToken) {
        var parsedAuthorId = new ParsedChatAuthorId(AuthorId);
        if (!parsedAuthorId.IsValid)
            return ComputedModel.None;

        var chatId = parsedAuthorId.ChatId.Id;
        var author = await ChatAuthors.GetAuthor(chatId, AuthorId, true, cancellationToken).ConfigureAwait(false);
        if (author == null)
            return ComputedModel.None;

        return new ComputedModel() {
            Author = author,
            CanAddContact = await ChatAuthors.CanAddToContacts(Session, AuthorId, default).ConfigureAwait(false),
            CanSendMessage = await Chats.CanSendPeerChatMessage(Session, AuthorId, default).ConfigureAwait(false),
        };
    }

    private async Task OnAddContactClick() {
        if (IsAddingContact)
            return;
        IsAddingContact = true;
        StateHasChanged();

        await UICommander.Run(new IChatAuthors.AddToContactsCommand(Session, AuthorId)).ConfigureAwait(true);

        IsAddingContact = false;
        await ModalInstance.CancelAsync().ConfigureAwait(true);
        StateHasChanged();
    }

    private async Task OnSendMessageClick() {
        var peerChatId = await Chats.GetPeerChatId(Session, AuthorId, default);
        if (peerChatId.IsNullOrEmpty())
            return;
        Nav.NavigateTo($"/chat/{peerChatId.UrlEncode()}");
    }

    public sealed record ComputedModel {
        public static ComputedModel None { get; } = new();

        public Author Author { get; init; } = Author.None;
        public bool CanAddContact { get; init; }
        public bool CanSendMessage { get; init; }
    }

    public sealed record Model(string AuthorId);
}
