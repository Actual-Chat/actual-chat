@inherits ComputedStateComponent<ContactListItem.Model>
@{
    var m = State.ValueOrDefault;
    if (m is null)
        return;
    var isVisibleMenu = m.IsListening || m.IsRecording;
    var cls = isVisibleMenu ? "visible-menu" : "invisible-menu";
}

<NavbarItem
    Url="@($"/chat/{m.ShortChatId.UrlEncode()}")"
    IsOnline="@m.IsOnline"
    IsSelected="@m.IsSelected"
    data-menu="@(MenuRef.New<ContactMenu>(Contact.Id).ToString())"
    data-menu-trigger="@((MenuTriggers.LongClick | MenuTriggers.RightClick).Format())"
    data-menu-position="@(FloatingPosition.BottomStart.ToPositionString())"
    data-long-press-delay="500">
    <ChildContent>
        <div class="flex-x items-center gap-x-2">
            <AccountCircle UserId="@Contact.TargetUserId" ShowPresence="true"/>
            <span class="text-ellipsis whitespace-nowrap overflow-hidden">
                <SearchUIHighlighter Text="@Contact.Avatar.Name"/>
            </span>
        </div>
    </ChildContent>
    <Ending>
        <div class="@cls">
            <ChatListListenToggle ChatId="@m.FullChatId" Class="chat-menu-btn blackout"/>
            <ChatListRecordingToggle ChatId="@m.FullChatId" Class="chat-menu-btn blackout"/>
            <div class="flex"
                 data-menu="@(MenuRef.New<ContactMenu>(Contact.Id).ToString())"
                 data-menu-trigger="@(MenuTriggers.LeftClick.Format())"
                 data-menu-position="@(FloatingPosition.RightStart.ToPositionString())">
                <ButtonRound
                    ContentClass="!bg-transparent"
                    Class="chat-menu-btn blackout">
                    <i class="icon-more-vertical text-2xl"></i>
                </ButtonRound>
                <div class="absolute -right-6">
                    <div class="placement -mt-2">
                    </div>
                </div>
            </div>
        </div>
    </Ending>
</NavbarItem>

@code {
    [Inject] private ChatUI ChatUI { get; init; } = null!;
    [Inject] private IUserPresences UserPresences { get; init; } = null!;

    [Parameter, EditorRequired] public Contact Contact { get; set; } = null!;

    protected override async Task<Model> ComputeState(CancellationToken cancellationToken) {
        var presence = await UserPresences.Get(Contact.TargetUserId, cancellationToken);
        var fullChatId = ParsedChatId.FormatFullPeerChatId(Contact.OwnerUserId, Contact.TargetUserId);
        var shortChatId = ParsedChatId.FormatShortPeerChatId(Contact.TargetUserId);

        var isOnline = presence is Presence.Online or Presence.Recording;
        var (isSelected, isListening, isRecording) =
            await ChatUI.IsSelected(fullChatId)
                .Join(
                    ChatUI.IsListening(fullChatId),
                    ChatUI.IsRecording(fullChatId)
                ).ConfigureAwait(false);
        // Default scheduler is used from here
        return new(
            fullChatId,
            shortChatId,
            isSelected,
            isOnline,
            isListening,
            isRecording);
    }

    public record Model(
        string FullChatId,
        string ShortChatId,
        bool IsSelected,
        bool IsOnline,
        bool IsListening,
        bool IsRecording);
}
