@using ActualChat.Contacts
@inherits ComputedStateComponent<ContactListItem.Model>
@{
    var m = State.ValueOrDefault;
    if (ReferenceEquals(m, Model.None))
        return;

    var isMenuVisible = m.ChatState.IsListening || m.ChatState.IsRecording;
    var cls = isMenuVisible ? "visible-menu" : "invisible-menu";
}

<NavbarItem
    Url="@(Links.ChatPage(m.ChatState.Chat.Id))"
    IsOnline="@m.IsOnline"
    IsSelected="@m.ChatState.IsSelected"
    data-menu="@(MenuRef.New<ContactMenu>(Contact.Id).ToString())"
    data-menu-trigger="@((MenuTriggers.LongClick | MenuTriggers.RightClick).Format())"
    data-menu-position="@(FloatingPosition.BottomStart.ToPositionString())"
    data-long-press-delay="500">
    <ChildContent>
        <div class="flex-x items-center gap-x-2">
            <AccountCircle UserId="@Contact.Id.ChatId" ShowPresence="true"/>
            <span class="text-ellipsis whitespace-nowrap overflow-hidden">
                <SearchUIHighlighter Text="@Contact.Account!.Avatar.Name"/>
            </span>
        </div>
    </ChildContent>
    <Ending>
        <div class="@cls">
            <ChatListListenToggle ChatId="@m.ChatState.Chat.Id" Class="chat-menu-btn blackout"/>
            <ChatListRecordingToggle ChatId="@m.ChatState.Chat.Id" Class="chat-menu-btn blackout"/>
            <div class="flex"
                 data-menu="@(MenuRef.New<ContactMenu>(Contact.Id).ToString())"
                 data-menu-trigger="@(MenuTriggers.LeftClick.Format())"
                 data-menu-position="@(FloatingPosition.RightStart.ToPositionString())">
                <ButtonRound
                    ContentClass="!bg-transparent"
                    Class="chat-menu-btn blackout">
                    <i class="icon-more-vertical text-2xl"></i>
                </ButtonRound>
                <div class="absolute -right-6">
                    <div class="placement -mt-2">
                    </div>
                </div>
            </div>
        </div>
    </Ending>
</NavbarItem>

@code {
    [Inject] private ChatUI ChatUI { get; init; } = null!;
    [Inject] private IUserPresences UserPresences { get; init; } = null!;

    [Parameter, EditorRequired] public Contact Contact { get; set; } = null!;

    protected override ComputedState<Model>.Options GetStateOptions()
        => new () { InitialValue = Model.None };

    protected override async Task<Model> ComputeState(CancellationToken cancellationToken) {
        var account = Contact.Account;
        var chatState = await ChatUI.GetChatState(Contact.ChatId, cancellationToken);
        if (chatState == null)
            return Model.None;

        var presence = account != null
            ? await UserPresences.Get(account.Id, cancellationToken)
            : Presence.Unknown;
        return new Model(chatState, presence);
    }

    public record Model(
        ChatState ChatState,
        Presence Presence
    ) {
        public static Model None { get; } = new(ChatState.None, Presence.Unknown);

        public bool IsOnline => Presence is Presence.Online or Presence.Recording;
    }
}
