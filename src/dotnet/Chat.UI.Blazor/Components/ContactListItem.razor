@using BlazorContextMenu
@inherits ComputedStateComponent<ContactListItem.Model>
@{
    var m = State.ValueOrDefault;
    if (m is null)
        return;
    var isVisibleMenu = m.IsListening || m.IsRecording;
    var cls = isVisibleMenu ? "visible-menu" : "invisible-menu";
}

<ContextMenuTrigger MouseButtonTrigger="MouseButtonTrigger.Right" MenuId="@ContactMenu.MenuId" Data="@Contact">
    <NavbarItem
        Url="@($"/chat/{m.ShortChatId.UrlEncode()}")"
        IsOnline="@m.IsOnline"
        IsActive="@m.IsActive">
        <ChildContent>
            <div class="flex-x items-center gap-x-2">
                <UserAuthorCircle UserId="@Contact.TargetUserId" ShowPresence="true"/>
                <span class="text-ellipsis whitespace-nowrap overflow-hidden">
                    <SearchUIHighlighter Text="@Contact.Name"/>
                </span>
            </div>
        </ChildContent>
        <Ending>
            <div class="@cls">
                <ChatListListenToggle ChatId="@m.FullChatId" Class="chat-menu-btn blackout"/>
                <ChatListRecordingToggle ChatId="@m.FullChatId" Class="chat-menu-btn blackout"/>
                <ContextMenuToggleTrigger MenuId="@ContactMenu.MenuId" Data="@Contact">
                    <div class="flex">
                        <ButtonRound Class="chat-menu-btn blackout">
                            <i class="icon-more-vertical text-2xl"></i>
                        </ButtonRound>
                        <div class="absolute -right-6">
                            <div class="placement -mt-2">
                            </div>
                        </div>
                    </div>
                </ContextMenuToggleTrigger>
            </div>
        </Ending>
    </NavbarItem>
</ContextMenuTrigger>

@code {
    [Inject] private ChatUI ChatUI { get; init; } = null!;
    [Inject] private IUserPresences UserPresences { get; init; } = null!;

    [Parameter, EditorRequired] public UserContact Contact { get; set; } = null!;

    protected override async Task<Model> ComputeState(CancellationToken cancellationToken) {
        var presence = await UserPresences.Get(Contact.TargetUserId, cancellationToken);
        var fullChatId = ParsedChatId.FormatFullPeerChatId(Contact.OwnerUserId, Contact.TargetUserId);
        var shortChatId = ParsedChatId.FormatShortPeerChatId(Contact.TargetUserId);

        var isOnline = presence is Presence.Online or Presence.Recording;
        var (isActive, isListening, isRecording) =
            await ChatUI.IsActive(fullChatId)
                .Join(
                    ChatUI.IsListening(fullChatId),
                    ChatUI.IsRecording(fullChatId)
                ).ConfigureAwait(false);
        // Default scheduler is used from here
        return new(
            fullChatId,
            shortChatId,
            isActive,
            isOnline,
            isListening,
            isRecording);
    }

    public record Model(
        string FullChatId,
        string ShortChatId,
        bool IsActive,
        bool IsOnline,
        bool IsListening,
        bool IsRecording);
}
