@inherits ComputedStateComponent<(UserLanguageSettings, Language)>
@{
    var m = State.Value;
    var userLanguages = m.Item1;
}

<div class="language-btn-group two-btn-group">
    @foreach (var language in Languages.All) {
        if (language == userLanguages.Primary) {
            <button
                class="@(language == m.Item2 ? "active" : "")"
                @onclick="@(() => OnClick(language))">
                @userLanguages.Primary.Title
            </button>
        }
        if (language == userLanguages.Secondary) {
            <button
                class="@(language == m.Item2 ? "active" : "")"
                @onclick="@(() => OnClick(language))">
                @userLanguages.Secondary.Value.Title
            </button>
        }
    }
</div>

@code {
    [Inject] private Session Session { get; init; } = null!;
    [Inject] private AccountSettings AccountSettings { get; init; } = null!;
    [Inject] private UICommander UICommander { get; init; } = null!;
    [Inject] private LanguageUI LanguageUI { get; init; } = null!;
    [Inject] private ModalUI ModalUI { get; init; } = null!;

    [Parameter, EditorRequired] public Chat Chat { get; set; } = null!;

    protected override ComputedState<(UserLanguageSettings, Language)>.Options GetStateOptions()
        => new() {
            UpdateDelayer = FixedDelayer.Instant,
            Category = GetStateCategory(),
        };

    protected override async Task<(UserLanguageSettings, Language)> ComputeState(CancellationToken cancellationToken) {
        var languages = await LanguageUI.Settings.Use(cancellationToken);
        var chatLanguage = await LanguageUI.GetChatLanguage(Chat.Id, cancellationToken).ConfigureAwait(false);
        return (languages, chatLanguage);
    }

    private async Task OnClick(Language language, CancellationToken cancellationToken = default) {
        var languages = await LanguageUI.Settings.Use(cancellationToken);
        if (languages.Secondary != null) {
            await LanguageUI.ChangeChatLanguage(Chat.Id, language);
        } else
            _ = ModalUI.Show(new NoSecondaryLanguageModal.Model());
    }
}
