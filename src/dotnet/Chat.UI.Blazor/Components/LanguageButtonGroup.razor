@inherits ComputedStateComponent<(UserLanguageSettings, Language)?>
@{
    var m = State.Value;
    if (!m.HasValue)
        return;
    var userLanguages = m.Value.Item1;
    var selectedLanguage = m.Value.Item2;
    var primary = userLanguages.Primary;
    var nSecondary = userLanguages.Secondary;
}

<div class="language-btn-group two-btn-group">
    @if (IsValid(primary)) {
        <button
            class="@(primary == selectedLanguage ? "active" : "")"
            @onclick="@(() => OnClick(primary))">
            @primary.Title
        </button>
    }
    @if (nSecondary.HasValue && IsValid(nSecondary.Value)) {
        var secondary = nSecondary.Value;
        <button
            class="@(secondary == selectedLanguage ? "active" : "")"
            @onclick="@(() => OnClick(secondary))">
            @secondary.Title
        </button>
    }
</div>

@code {
    private ChatId _chatId;

    [Inject] private LanguageUI LanguageUI { get; init; } = null!;
    [Inject] private ModalUI ModalUI { get; init; } = null!;

    [Parameter, EditorRequired] public string ChatSid { get; set; } = null!;

    protected override void OnInitialized() {
        _chatId = ChatId.Parse(ChatSid);
        base.OnInitialized();
    }

    protected override ComputedState<(UserLanguageSettings, Language)?>.Options GetStateOptions()
        => new() {
            UpdateDelayer = FixedDelayer.Instant,
            Category = GetStateCategory(),
        };

    protected override async Task<(UserLanguageSettings, Language)?> ComputeState(CancellationToken cancellationToken) {
        var userLanguages = await LanguageUI.Settings.Use(cancellationToken);
        var chatLanguage = await LanguageUI.GetChatLanguage(_chatId, cancellationToken).ConfigureAwait(false);
        return (userLanguages, chatLanguage);
    }

    private bool IsValid(Language? language)
        => language != null && Languages.All.Contains(language.Value);

    private async Task OnClick(Language language)
        => await LanguageUI.ChangeChatLanguage(_chatId, language);
}
