@namespace ActualChat.Chat.UI.Blazor.Components
@using ActualChat.Users
@using ActualChat.UI.Blazor.Events
@using ActualChat.UI.Blazor.Services
@inherits ComputedStateComponent<AccountFull>
@{
    var account = State.Value;
    if (ReferenceEquals(account, AccountFull.Loading))
        return;

    if (!account.IsGuestOrNone) {
        <button
            class="account-btn btn-square"
            data-bubble="@(BubbleRef.New<ManageAccountSettingsBubble>())"
            data-bubble-placement="@(FloatingPosition.RightEnd.ToPositionString())"
            @onclick="@OnSettingsClick">
            <AccountView/>
        </button>
    } else {
        <SignInMenu ButtonType="SignInMenu.MenuButton.Round" />
    }
}

@code {
    [Inject] AccountUI AccountUI { get; init; } = null!;
    [Inject] private UIEventHub UIEventHub { get; init; } = null!;

    protected override ComputedState<AccountFull>.Options GetStateOptions()
        => new() {
            InitialValue = AccountUI.OwnAccount.Value,
            Category = GetStateCategory(),
        };

    protected override async Task<AccountFull> ComputeState(CancellationToken cancellationToken)
        => await AccountUI.OwnAccount.Use(cancellationToken);

    private void OnSettingsClick()
        => _ = UIEventHub.Publish(new ShowSettingsEvent());
}
