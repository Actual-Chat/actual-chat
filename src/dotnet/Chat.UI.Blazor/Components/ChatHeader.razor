@using ActualChat.Contacts
@inherits ComputedStateComponent<bool>
@{
    var chat = ChatContext.Chat;
    var hasSelection = State.Value;
}

@if (hasSelection) {
    <div class="c-content">
        <SelectionHeader />
    </div>
    return;
}

<div class="c-content">
    @if (IsLeftNavigateButtonVisible) {
        <HeaderButton Click="@OnOpenLeftPanelClick" Class="md:hidden">
            <i class="icon-arrow-left"></i>
        </HeaderButton>
    }
    <div class="chat-header-center" @onclick="@OnToggleRightPanelClick">
        @if (!ReferenceEquals(chat, SpecialChat.NoChatSelected)) {
            <ChatIcon Chat="@chat"/>
            <div class="chat-header-title">
                <div class="c-title">@chat.Title</div>
            </div>
            <div class="c-activities-container">
                <ChatActivities @key="@chat.Id.Value" Chat="@chat"/>
            </div>
        }
    </div>
    @if (!chat.Id.IsNone) {
        <div class="chat-header-control-panel">
            <ChatSearch @key="@chat.Id.Value" Chat="@chat"/>
            @if (IsRightNavigateButtonVisible) {
                <ChatHeaderRightPanelToggle Click="@OnToggleRightPanelClick"/>
            }
        </div>
    }
</div>

@code {
    [Parameter, EditorRequired] public ChatContext ChatContext { get; set; } = null!;
    [Parameter] public bool IsLeftNavigateButtonVisible { get; set; } = true;
    [Parameter] public bool IsRightNavigateButtonVisible { get; set; } = true;

    protected override ComputedState<bool>.Options GetStateOptions()
        => new() {
            UpdateDelayer = FixedDelayer.Instant,
            Category = GetStateCategory(),
        };

    protected override async Task<bool> ComputeState(CancellationToken cancellationToken)
        => await ChatContext.Hub.SelectionUI.HasSelection.Use(cancellationToken);

    private void OnToggleRightPanelClick()
        => ChatContext.Hub.PanelsUI.Right.Toggle();

    private void OnOpenLeftPanelClick()
        => ChatContext.Hub.PanelsUI.Left.SetIsVisible(true);
}
