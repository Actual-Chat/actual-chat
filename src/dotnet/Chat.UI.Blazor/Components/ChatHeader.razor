@using ActualChat.Contacts
@inherits ComputedStateComponent<ChatHeader.Model>
@{
    var m = State.Value;
    var chat = ChatContext.Chat;
    var searchCls = m.IsSearchMode ? "blackout on" : "blackout";
}

@if (m.HasSelection) {
    <div class="c-content">
        <SelectionHeader />
    </div>
    return;
}

<div class="c-content">
    @if (IsLeftNavigateButtonVisible) {
        <HeaderButton Click="@OnOpenLeftPanelClick" Class="md:hidden">
            <i class="icon-arrow-left"></i>
        </HeaderButton>
    }
    <div class="chat-header-center" @onclick="@OnToggleRightPanelClick">
        @if (!ReferenceEquals(chat, SpecialChat.NoChatSelected)) {
            <ChatIcon Chat="@chat"/>
            <div class="chat-header-title">
                <div class="c-title">@chat.Title</div>
                <StatusBadge ChatContext="@ChatContext" Colorful="@false"/>
            </div>
            <div class="c-activities-container">
                <ChatActivities @key="@chat.Id.Value" Chat="@chat"/>
            </div>
        }
    </div>
    @if (!chat.Id.IsNone) {
        <div class="chat-header-control-panel">
        @if (m.EnableIncompleteUI) {
            <HeaderButton Click="@OnSearchClick" Class="@searchCls">
                <i class="icon-ai-search"></i>
            </HeaderButton>
        }
        @if (IsRightNavigateButtonVisible) {
            <ChatHeaderRightPanelToggle Click="@OnToggleRightPanelClick"/>
        }
    </div>
    }
</div>

@code {
    [Inject] private ChatUIHub Hub { get; init; } = null!;

    [CascadingParameter] public ScreenSize ScreenSize { get; set; }

    [Parameter, EditorRequired] public ChatContext ChatContext { get; set; } = null!;
    [Parameter] public bool IsLeftNavigateButtonVisible { get; set; } = true;
    [Parameter] public bool IsRightNavigateButtonVisible { get; set; } = true;

    protected override ComputedState<Model>.Options GetStateOptions()
        => new() {
            UpdateDelayer = FixedDelayer.Instant,
            Category = GetStateCategory(),
            InitialValue = Model.None,
        };

    protected override async Task<Model> ComputeState(CancellationToken cancellationToken) {
        var hasSelection = await ChatContext.Hub.SelectionUI.HasSelection.Use(cancellationToken);
        var isSearchMode = await ChatContext.Hub.PanelsUI.Right.IsSearchMode.Use(cancellationToken);
        var enableIncompleteUI = await Hub.Features().Get<Features_EnableIncompleteUI, bool>(cancellationToken);
        return new() {
            HasSelection = hasSelection,
            IsSearchMode = isSearchMode,
            EnableIncompleteUI = enableIncompleteUI,
        };
    }

    private void OnToggleRightPanelClick()
        => ChatContext.Hub.PanelsUI.Right.Toggle();

    private void OnOpenLeftPanelClick()
        => ChatContext.Hub.PanelsUI.Left.SetIsVisible(true);

    private void OnSearchClick()
        => ChatContext.Hub.PanelsUI.Right.SearchToggle();

    public sealed record Model {
        public static readonly Model None = new ();

        public bool HasSelection { get; init; }
        public bool IsSearchMode { get; init; }
        public bool EnableIncompleteUI { get; init; }
    }
}
