@namespace ActualChat.Chat.UI.Blazor.Components
@implements IModalView<VoiceSettingsModal.Model>
@inherits ComputedStateComponent<VoiceSettingsModal.ComputedModel>
@{
    var m = State.Value;
    var status = m.CanChangeMustStreamVoice
        ? m.MustStreamVoice ? "On" : "Off"
        : "disabled";
}

<DialogFrame Title="Voice settings" Class="transcription-options-modal modal-sm" HasCloseButton="true">
    <Body>
    <FormBlock>
        <LanguageButtonGroup ChatSid="@ModalModel.ChatId"/>

        <OptionsItem Status="@status">
            <Left><i class="icon-radio-button-on-fill text-2xl"></i></Left>
            <Title>Voice streaming</Title>
            <Right>
                <Toggle
                    IsDisabled="@(!m.CanChangeMustStreamVoice)"
                    IsChecked="@m.MustStreamVoice"
                    IsCheckedChanged="OnMustRecordVoiceChanged"/>
            </Right>
        </OptionsItem>
    </FormBlock>
    </Body>
</DialogFrame>

@code {
    private VoiceSettings? _transcriptionSettings;

    [Inject] private ChatHub ChatHub { get; init; } = null!;

    private Session Session => ChatHub.Session;
    private ChatId ChatId => ModalModel.ChatId;
    private VoiceSettings TranscriptionSettings
        => _transcriptionSettings ??= new (ChatHub.Chats, ChatHub.Authors, ChatHub.AccountSettings);

    [CascadingParameter] public Modal Modal { get; set; } = null!;

    [Parameter] public Model ModalModel { get; set; } = null!;

    protected override ComputedState<ComputedModel>.Options GetStateOptions()
        => new() {
            UpdateDelayer = FixedDelayer.Instant,
            Category = GetStateCategory(),
            InitialValue = new (false, false),
        };

    protected override async Task<ComputedModel> ComputeState(CancellationToken cancellationToken) {
        var persistVoice = await TranscriptionSettings.GetVoiceMode(Session, ChatId, cancellationToken);
        return new (persistVoice.MustStreamVoice, persistVoice.CanChange);
    }

    private async Task OnMustRecordVoiceChanged(bool value)
        => await TranscriptionSettings.SetVoiceMode(Session, ChatId, value, default);

    public sealed record ComputedModel(bool MustStreamVoice, bool CanChangeMustStreamVoice);

    public sealed record Model(ChatId ChatId);
}
