@namespace ActualChat.Chat.UI.Blazor.Components
@implements IModalView<ListeningSettingsModal.Model>
@using ActualChat.Kvas
@inherits ComputedStateComponent<ListeningSettingsModal.ComputedModel>
@{
    var m = State.Value;
    var mode = m.ListeningMode;
}
<DialogFrame
    Title="Turn off listening in this chat:"
    Class="transcription-options-modal modal-sm"
    HasCloseButton="false">
    <Body>
    <FormBlock Class="first last">
        @foreach (var info in ListeningModeInfo.All) {
            RenderFragment content;
            if (info.Duration < TimeSpan.MaxValue) {
                content = @<span>After <u>@info.Text</u> of inactivity</span>;
            } else {
                content = @<span><u>Keep listening</u> while the app is active</span>;
            }
            <TileItem Click="@(() => SetListeningMode(info.Mode))">
                <Content>@content</Content>
                <Right>
                    @if (mode == info.Mode) {
                        <i class="icon-checkmark-simple text-primary text-2xl"></i>
                    }
                </Right>
            </TileItem>
        }
    </FormBlock>
    </Body>
</DialogFrame>

@code {
    [Inject] public ChatUIHub Hub { get; set; } = null!;

    [CascadingParameter] public Modal Modal { get; set; } = null!;
    [Parameter] public Model ModalModel { get; set; } = null!;

    private AccountSettings AccountSettings => Hub.AccountSettings();

    protected override ComputedState<ComputedModel>.Options GetStateOptions()
        => ComputedStateComponent.GetStateOptions(GetType(),
            static t => new ComputedState<ComputedModel>.Options() {
                InitialValue = new(ListeningMode.Default),
                UpdateDelayer = FixedDelayer.NextTick,
                Category = ComputedStateComponent.GetStateCategory(t),
            });

    protected override async Task<ComputedModel> ComputeState(CancellationToken cancellationToken) {
        var chatId = ModalModel.ChatId;

        var userChatSettings = await AccountSettings
            .GetUserChatSettings(chatId, cancellationToken)
            .ConfigureAwait(false);

        return new (userChatSettings.ListeningMode);
    }

    private async Task SetListeningMode(ListeningMode listeningMode) {
        var chatId = ModalModel.ChatId;

        var userChatSettings = await AccountSettings.GetUserChatSettings(chatId, default);
        userChatSettings = userChatSettings with { ListeningMode = listeningMode };

        // Save new settings
        await AccountSettings.SetUserChatSettings(chatId, userChatSettings, default);
        if (listeningMode == ListeningMode.Forever) {
            await Hub.ChatAudioUI.SetListeningState(chatId, true);
            await AccountSettings.AddAlwaysListenedChat(chatId, default);
        } else {
            await AccountSettings.RemoveAlwaysListenedChat(chatId, default);
        }
        Modal.Close();
    }

    // Nested types

    public sealed record ComputedModel(ListeningMode ListeningMode);

    public sealed record Model(ChatId ChatId);
}
