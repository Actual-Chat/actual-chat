@namespace ActualChat.UI.Blazor.Components
@using Stl.Extensibility
@using ActualChat.Hosting
@implements IModalView<AudioPermissionModal.Model>
@attribute [MatchFor(typeof(Model), typeof(IModalView))]

@{
    var canConfigure = HostInfo.AppKind == AppKind.MauiApp;
}

<DialogFrame Class="service-modal">
    <Body>
    @if (!canConfigure) {
        <div class="c-text">
            <p>
                To be able to record messages and use the microphone please give permission
            </p>
            <p class="text-primary">
                Open Browser Settings > Privacy Security > Microphone > Allow
            </p>
        </div>
    } else {
        <div class="c-header flex-x items-center gap-x-4">
            <div class="header-icon">
                <img src="/dist/images/logo-white.svg" alt="logo" class="h-6">
            </div>
            <div class="text-title-1">Allow Actual.chat to record audio?</div>
        </div>
        <div class="c-text">
            <p>
                To use your microphone to record voice messages
            </p>
        </div>
    }
    </Body>
    <Buttons>
        @if (canConfigure) {
            <Button Class="btn-modal" Click="@OnClose">Deny</Button>
            <Button Class="btn-modal" Click="@OnClick">Allow</Button>
        }
    </Buttons>
</DialogFrame>

@code {
    [Inject] public HostInfo HostInfo { get; init; } = null!;
    [Inject] public INoMicHandler NoMicHandler { get; init; } = null!;

    [CascadingParameter] public Modal Modal { get; set; } = null!;
    [CascadingParameter] public ScreenSize ScreenSize { get; set; }

    [Parameter] public Model ModalModel { get; set; } = null!;

    private void OnClose()
        => Modal.Close();

    private async Task OnClick() {
        await NoMicHandler.Allow();
        ModalModel.ReevaluatePermissions = true;
        Modal.Close();
    }

    public sealed record Model {
        public bool ReevaluatePermissions { get; set; }
    }
}
