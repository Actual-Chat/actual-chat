@namespace ActualChat.Chat.UI.Blazor.Components
@using ActualChat.Audio.UI.Blazor.Components
@inherits ComputedStateComponent<RecorderToggle.Model>
@{
    var m = State.Value;
    _animator.State = m.IsRecording;
    var animatorClass = "record-" + _animator.Class;
    var applyingChangesClass = m.IsApplyingChanges ? "applying-changes" : "";
}

@if (CanRecord) {
    <div class="recorder-wrapper @animatorClass @applyingChangesClass">
        <ButtonRound
            Class="record-off-btn"
            Click="OnClick"
            MustKeepAwake="true"
            @onpointerup="OnPointerUp"
            @oncontextmenu="OnContextMenu"
            data-context-menu-delay="200">
            <img src="/dist/images/logo-white.svg" alt="logo" class="recorder-icon">
        </ButtonRound>
        <ButtonRound
            Class="record-on-btn"
            Click="OnClick"
            @onpointerup="OnPointerUp"
            @oncontextmenu="OnContextMenu"
            data-context-menu-delay="200">
            <i class="icon-Stop-fill text-2xl"></i>
        </ButtonRound>
    </div>
} else {
    <div class="recorder-wrapper">
        <ButtonRound
            Class="mic-disabled w-14 h-14"
            Click="OnClick">
            <i class="icon-mic-off text-2xl text-04"></i>
        </ButtonRound>
    </div>
}

@code {
    private bool? _canRecord = null;
    private OnOffAnimator _animator = null!;

    [Inject] private ChatAudioUI ChatAudioUI { get; init; } = null!;
    [Inject] private AudioRecorder AudioRecorder { get; init; } = null!;
    [Inject] private ModalUI ModalUI { get; init; } = null!;

    private bool CanRecord => _canRecord ?? true;
    private bool IsLoading => !Chat.Id.IsNone && State.Value.Chat.Id != Chat.Id;
    private bool IsRecording => !IsLoading && State.Value.IsRecording;
    private bool IsForcePush { get; set; } = false;

    [Parameter, EditorRequired] public Chat Chat { get; set; } = Chat.None;

    protected override void OnInitialized() {
        _animator = new OnOffAnimator(this, TimeSpan.FromMilliseconds(300));
        base.OnInitialized();
    }

    public override ValueTask DisposeAsync() {
        _animator.Dispose();
        return base.DisposeAsync();
    }

    protected override ComputedState<Model>.Options GetStateOptions()
        => new() {
            InitialValue = Model.Loading,
            UpdateDelayer = FixedDelayer.Instant,
            Category = GetStateCategory(),
        };

    protected override async Task<Model> ComputeState(CancellationToken cancellationToken) {
        var recordingChatId = await ChatAudioUI.GetRecordingChatId();
        var recorderState = await AudioRecorder.State.Use(cancellationToken);
        var isRecording = recordingChatId == Chat.Id;
        var isApplyingChanges = recorderState.ChatId == Chat.Id && recorderState.IsRecording != isRecording;
        return new Model(Chat, isRecording, isApplyingChanges);
    }

    private async Task OnClick() {
        if (IsLoading)
            return; // Loading

        if (IsRecording) {
            _ = ChatAudioUI.SetRecordingChatId(default);
        }
        else {
            if (_canRecord == null) {
                _canRecord = await AudioRecorder.RequestPermission();
                StateHasChanged();
            }
            if (!CanRecord) {
                _ = OnCanNotRecord();
                return;
            }

            _ = ChatAudioUI.SetRecordingChatId(Chat.Id);
        }
    }

    private async Task OnCanNotRecord() {
        var model = new AudioPermissionModal.Model();
        var modalRef = await ModalUI.Show(model);
        await modalRef.WhenClosed;
        if (!model.ReevaluatePermissions)
            return;
        _canRecord = null;
        StateHasChanged();
    }

    private async Task OnContextMenu() {
        if (IsForcePush)
            return;

        if (_canRecord == null) {
            _canRecord = await AudioRecorder.RequestPermission();
            StateHasChanged();
        }
        if (!CanRecord || IsLoading)
            return;

        IsForcePush = true;
        _ = ChatAudioUI.SetRecordingChatId(Chat.Id);
    }

    private void OnPointerUp() {
        if (!IsForcePush)
            return;

        IsForcePush = false;
        _ = ChatAudioUI.SetRecordingChatId(default);
    }

    public sealed record Model(
        Chat Chat,
        bool IsRecording = false,
        bool IsApplyingChanges = false
    ) {
        public static Model Loading { get; } = new(Chat.Loading, false, true);
    }
}
