@namespace ActualChat.Chat.UI.Blazor.Components
@using ActualChat.Audio.UI.Blazor.Components
@using ActualChat.Chat.UI.Blazor.Module
@using System.Diagnostics.CodeAnalysis
@inherits ComputedStateComponent<RecorderToggle.Model>
@{
    var m = State.Value;
    _animator.State = m.IsRecording;
    var animatorClass = "record-" + _animator.Class;
    var isRecordingInTheChat = m.IsRecording;
    var applyingChangesClass = m.IsApplyingChanges || (isRecordingInTheChat && !m.IsConnected) ? "applying-changes" : "";
    var isMicrophoneCaptured = m.IsMicrophoneCaptured;
    var isConnected = m.IsConnected;
    var (forceDisplay, tooltip, left) = (isRecordingInTheChat, isMicrophoneCaptured, isConnected) switch {
        (false, _, _) => (false, "", ""),
        (_, false, _) => (true, "Starting recording...", "4.6rem"),
        (_, _, false) => (true, "Reconnecting...", "4rem"),
        _ => (false, "Recording...", "3.5rem"),
    };
    var tooltipPosition = forceDisplay ? FloatingPosition.None : FloatingPosition.Top;
    var dynamicTooltip = forceDisplay ? null : tooltip;
    if (forceDisplay && m.StartRecordingAt.HasValue) {
        if (!_isTroubleshootGuideTriggered) {
            _isTroubleshootGuideTriggered = true;
            Clocks.CoarseSystemClock
                .Delay(2500, _cancelTroubleshootGuide?.Token ?? CancellationToken.None)
                .ContinueWith(_ => DisplayTroubleshootGuide(), TaskContinuationOptions.OnlyOnRanToCompletion);
        }
    }
}

@if (m.HasMicrophonePermission != false) {
    @if (forceDisplay) {
        <div class="narrow-recorder-tooltip">
            <div class="c-tooltip-text">@tooltip</div>
            <div class="c-tooltip-arrow" style="left:@left"></div>
        </div>
    }
    <div class="recorder-wrapper @animatorClass @applyingChangesClass">
        @if (forceDisplay) {
            <div class="c-tooltip">
                <div class="c-tooltip-text">@tooltip</div>
                <div class="c-tooltip-arrow" style="left:@left"></div>
            </div>
        }
        <ButtonRound
            Class="record-off-btn"
            Click="@OnClick"
            MustKeepAwake="true"
            Tooltip="@dynamicTooltip"
            TooltipPosition="@tooltipPosition"
            @onpointerup="@OnPointerUp"
            @oncontextmenu="@OnContextMenu"
            data-context-menu-delay="200">
            <i class="icon-talking text-xl recorder-icon"></i>
        </ButtonRound>
        <ButtonRound
            Class="record-on-btn"
            Click="@OnClick"
            Tooltip="@dynamicTooltip"
            TooltipPosition="@tooltipPosition"
            @onpointerup="@OnPointerUp"
            @oncontextmenu="@OnContextMenu"
            data-context-menu-delay="200">
            <i class="icon-stop-fill text-2xl"></i>
        </ButtonRound>
    </div>
} else {
    <div class="recorder-wrapper mic-disabled">
        <ButtonRound
            Class="mic-disabled w-14 h-14"
            Click="@OnClick">
            <i class="icon-mic-off text-2xl text-04"></i>
        </ButtonRound>
    </div>
}

@code {
    private static readonly string JSInitMethod = $"{ChatBlazorUIModule.ImportName}.RecorderToggle.init";
    private OnOffAnimator _animator = null!;
    private bool _isTroubleshootGuideTriggered;
    private CancellationTokenSource? _cancelTroubleshootGuide;

    [Inject] private ChatAudioUI ChatAudioUI { get; init; } = null!;
    [Inject] private AudioRecorder AudioRecorder { get; init; } = null!;
    [Inject] private ModalUI ModalUI { get; init; } = null!;
    [Inject] private IJSRuntime JS { get; init; } = null!;
    [Inject] private MomentClockSet Clocks { get; init; } = null!;

    private bool IsChatChanging => !Chat.Id.IsNone && State.Value.Chat.Id != Chat.Id;
    private bool IsRecording => !IsChatChanging && State.Value.IsRecording;
    private bool IsForcePush { get; set; } = false;

    [Parameter, EditorRequired] public Chat Chat { get; set; } = SpecialChat.Unavailable;

    protected override void OnInitialized() {
        _animator = new OnOffAnimator(this, TimeSpan.FromMilliseconds(300));
        base.OnInitialized();
    }

    protected override Task OnInitializedAsync()
        => AudioRecorder.MicrophonePermission.Check(CancellationToken.None);

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (!firstRender)
            return;

        await JS.InvokeVoidAsync(JSInitMethod);
    }

    public override ValueTask DisposeAsync() {
        _animator.Dispose();
        return base.DisposeAsync();
    }

    protected override ComputedState<Model>.Options GetStateOptions()
        => new() {
            InitialValue = Model.Loading,
            UpdateDelayer = FixedDelayer.Instant,
            Category = GetStateCategory(),
        };

    [SuppressMessage("ReSharper", "InvertIf")]
    protected override async Task<Model> ComputeState(CancellationToken cancellationToken) {
        var currentState = State.LastNonErrorValue;
        var recordingChatId = await ChatAudioUI.GetRecordingChatId();
        var recorderState = await AudioRecorder.State.Use(cancellationToken);
        var hasMicrophonePermission = await AudioRecorder.MicrophonePermission.Cached.Use(cancellationToken);
        var isRecording = recordingChatId == Chat.Id;
        var isApplyingChanges = recorderState.ChatId == Chat.Id && recorderState.IsRecording != isRecording;
        var startRecordingAt = currentState.StartRecordingAt;
        if (isApplyingChanges || !recorderState.IsConnected) {
            startRecordingAt ??= Clocks.CoarseSystemClock.Now;
            _cancelTroubleshootGuide = new();
        } else {
            startRecordingAt = null;
            _cancelTroubleshootGuide.CancelAndDisposeSilently();
            _cancelTroubleshootGuide = null;
        }
        return new(
            Chat,
            isRecording,
            isApplyingChanges,
            recorderState.IsRecording,
            recorderState.IsConnected,
            recorderState.IsVoiceActive,
            hasMicrophonePermission,
            startRecordingAt);
    }

    private async Task OnClick() {
        if (IsChatChanging)
            return; // Loading

        if (IsRecording) {
            _ = ChatAudioUI.SetRecordingChatId(default);
        }
        else {
            if (!await AudioRecorder.MicrophonePermission.CheckOrRequest())
                return;

            _ = ChatAudioUI.SetRecordingChatId(Chat.Id);
        }
    }

    private async Task OnContextMenu() {
        if (IsForcePush)
            return;
        if (!await AudioRecorder.MicrophonePermission.CheckOrRequest())
            return;

        IsForcePush = true;
        _ = ChatAudioUI.SetRecordingChatId(Chat.Id);
    }

    private void OnPointerUp() {
        if (!IsForcePush)
            return;

        IsForcePush = false;
        _ = ChatAudioUI.SetRecordingChatId(default);
    }

    private async Task DisplayTroubleshootGuide() {
        var token = _cancelTroubleshootGuide?.Token ?? CancellationToken.None;
        await InvokeAsync(async () => {
            var state = State.LastNonErrorValue;
            if (!state.StartRecordingAt.HasValue || token.IsCancellationRequested) {
                _isTroubleshootGuideTriggered = false;
                return;
            }

            var model = new GuideModal.Model(false, GuideType.Unknown);
            var modalRef = await ModalUI.Show(model);
            try {
                await modalRef.WhenClosed.WaitAsync(token);
            }
            finally {
                _isTroubleshootGuideTriggered = false;
            }
        }).ConfigureAwait(false);
    }

    // Nested types


    public sealed record Model(
        Chat Chat,
        bool IsRecording = false,
        bool IsApplyingChanges = false,
        bool IsMicrophoneCaptured = false,
        bool IsConnected = false,
        bool IsVoiceActive = false,
        bool? HasMicrophonePermission = null,
        Moment? StartRecordingAt = null
    ) {
        public static Model Loading { get; } = new(SpecialChat.Loading, false, true);
    }

}
