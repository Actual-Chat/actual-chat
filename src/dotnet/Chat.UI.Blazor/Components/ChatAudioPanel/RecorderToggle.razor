@namespace ActualChat.Chat.UI.Blazor.Components
@using ActualChat.Streaming.UI.Blazor.Components
@using ActualChat.Chat.UI.Blazor.Module
@using System.Diagnostics.CodeAnalysis
@using Timeout = System.Threading.Timeout
@inherits ComputedStateComponent<RecorderToggle.Model>
@{
    var m = State.Value;
    _animator.State = m.IsRecordingHere;
    var animatorClass = "record-" + _animator.Class;
    var language = m.Language;
    var transitioningClass = m.IsTransitioning || m is { IsRecordingHere: true, IsConnected: false } ? "applying-changes" : "";
    var (showStatus, statusText, autoHide) = (m.IsRecordingHere, m.IsMicrophoneCaptured, m.IsConnected) switch {
        (false, _, _) => (false, "", false),
        (_, false, _) => (true, "Starting recording...", false),
        (_, _, false) => (true, "Reconnecting...", false),
        _ => (true , $"Recording - {language.Title}", true), // (true, true, true) => ...
    };
    // start endless animation when auto hide is not needed
    var hasNoAnimation = _tooltipAnimator.AnimationEndsAt > _tooltipAnimator.Clock.Now + TimeSpan.FromDays(1);
    if (_oldRecordingLanguage != language || !m.IsRecordingHere || hasNoAnimation)
        _tooltipAnimator.BeginAnimation(autoHide ? TimeSpan.FromSeconds(2) : null);
    showStatus = showStatus && _tooltipAnimator.IsAnimating;
    var tooltipText = showStatus ? "" : statusText;
    var tooltipPosition = showStatus ? FloatingPosition.None : FloatingPosition.Top;
    _oldRecordingLanguage = language;
}

@if (m.HasMicrophonePermission != false) {
    @if (showStatus) {
        <div class="narrow-recorder-tooltip">
            <div class="c-tooltip-text">@statusText</div>
            <div class="c-tooltip-arrow"></div>
        </div>
    }
    <div class="recorder-wrapper @animatorClass @transitioningClass" data-tooltip="@tooltipText" data-tooltip-position="@(tooltipPosition.ToPositionString())">
        @if (showStatus) {
            <div class="c-tooltip">
                <div class="c-tooltip-text">@statusText</div>
                <div class="c-tooltip-arrow"></div>
            </div>
        }
        <ButtonRound
            Class="record-off-btn"
            Click="@OnClick"
            MustKeepAwake="true"
            Tooltip="Start recording"
            TooltipPosition="FloatingPosition.Top"
            @onmouseup="@OnPointerUp"
            @ontouchend="@OnPointerUp"
            @ontouchcancel="@OnPointerUp"
            @oncontextmenu="@OnContextMenu"
            data-context-menu-delay="200">
            <i class="icon-talking text-xl recorder-icon"></i>
        </ButtonRound>
        <ButtonRound
            Class="record-on-btn"
            Click="@OnClick"
            @onmouseup="@OnPointerUp"
            @ontouchend="@OnPointerUp"
            @ontouchcancel="@OnPointerUp"
            @oncontextmenu="@OnContextMenu"
            data-context-menu-delay="200">
            <i class="icon-stop-fill text-2xl recorder-icon"></i>
        </ButtonRound>
    </div>
} else {
    <div class="recorder-wrapper mic-disabled">
        <ButtonRound
            Class="mic-disabled w-14 h-14"
            Click="@OnClick">
            <i class="icon-mic-off text-2xl text-06"></i>
        </ButtonRound>
    </div>
}

@code {
    private static readonly string JSInitMethod = $"{ChatBlazorUIModule.ImportName}.RecorderToggle.init";
    private OnOffAnimator _animator = null!;
    private ComponentAnimator _tooltipAnimator = null!;
    private Language _oldRecordingLanguage = Language.None;
    private TaskSerializer _taskSerializer = new();
    private CpuTimestamp _lastActionAt;

    [Inject] private ChatUIHub Hub { get; init; } = null!;
    private AudioRecorder AudioRecorder => Hub.AudioRecorder;
    private ActiveChatsUI ActiveChatsUI => Hub.ActiveChatsUI;
    private ChatAudioUI ChatAudioUI => Hub.ChatAudioUI;
    private LanguageUI LanguageUI => Hub.LanguageUI;
    private IJSRuntime JS => Hub.JSRuntime();

    private ChatId RecordingChatId => ActiveChatsUI.ActiveChats.Value.FirstOrDefault(c => c.IsRecording).ChatId;
    private bool IsRecordingHere => !Chat.Id.IsNone && RecordingChatId == Chat.Id;
    private bool IsUpdating => !Chat.Id.IsNone && State.Value.Chat.Id != Chat.Id;
    private bool IsPushToTalk { get; set; } = false;

    [Parameter, EditorRequired] public Chat Chat { get; set; } = SpecialChat.Unavailable;

    protected override void OnInitialized() {
        _animator = new (this, TimeSpan.FromMilliseconds(300));
        _tooltipAnimator = new ComponentAnimator(this, TimeSpan.FromDays(30)).BeginAnimation();
        base.OnInitialized();
    }

    protected override Task OnInitializedAsync()
        => AudioRecorder.MicrophonePermission.Check(CancellationToken.None);

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (!firstRender)
            return;

        await JS.InvokeVoidAsync(JSInitMethod);
    }

    public override ValueTask DisposeAsync() {
        _animator.Dispose();
        return base.DisposeAsync();
    }

    protected override ComputedState<Model>.Options GetStateOptions()
        => ComputedStateComponent.GetStateOptions(GetType(),
            static t => new ComputedState<Model>.Options() {
                InitialValue = Model.Loading,
                UpdateDelayer = FixedDelayer.NextTick,
                Category = ComputedStateComponent.GetStateCategory(t),
            });

    protected override async Task<Model> ComputeState(CancellationToken cancellationToken) {
        var chatId = Chat.Id; // Capture to locals to make sure we can use .ConfigureAwait(false) below

        var recordingChatId = await ChatAudioUI.GetRecordingChatId().ConfigureAwait(false);
        var language = await LanguageUI.GetChatLanguage(chatId, cancellationToken).ConfigureAwait(false);
        var recorderState = await AudioRecorder.State.Use(cancellationToken).ConfigureAwait(false);
        var hasMicrophonePermission = await AudioRecorder.MicrophonePermission.Cached.Use(cancellationToken).ConfigureAwait(false);
        var isRecordingHere = recordingChatId == chatId;
        var isTransitioning =
            recordingChatId == chatId // The recorder records in this chat
            && recorderState.IsRecording != isRecordingHere; // AND it's state is not in sync with the expected one here
        return new (
            Chat,
            language,
            isRecordingHere,
            recorderState.IsRecording,
            recorderState.IsConnected,
            recorderState.IsVoiceActive,
            hasMicrophonePermission,
            isTransitioning);
    }

    private void OnClick()
        => ToggleRecording();

    private void OnContextMenu()
        => ToggleRecording(true);

    private void OnPointerUp() {
        if (IsPushToTalk && IsRecordingHere)
            StopRecording();
    }

    private void ToggleRecording(bool isPushToTalk = false) {
        if (IsRecordingHere)
            StopRecording();
        else
            StartRecording(isPushToTalk);
    }

    private void StartRecording(bool isPushToTalk = false) {
        isPushToTalk = IsPushToTalk |= isPushToTalk;
        if (!IsValidAction())
            return;

        var chatId = Chat.Id;
        _ = _taskSerializer.Enqueue(async cancellationToken => {
            // .ConfigureAwait(false) is fine here
            if (chatId.IsNone || RecordingChatId == chatId)
                return;
            if (!await AudioRecorder.MicrophonePermission.CheckOrRequest(cancellationToken).ConfigureAwait(false))
                return;

            cancellationToken.ThrowIfCancellationRequested();
            await ChatAudioUI.SetRecordingChatId(chatId, isPushToTalk).ConfigureAwait(false);
        });
    }

    private void StopRecording() {
        if (!IsValidAction())
            return;

        IsPushToTalk = false;
        _ = _taskSerializer.Enqueue(async _ => {
            // .ConfigureAwait(false) is fine here
            if (!RecordingChatId.IsNone)
                await ChatAudioUI.SetRecordingChatId(default).ConfigureAwait(false);
        }, mustAbortPreviousTasks: true);
    }

    private bool IsValidAction() {
        if (_lastActionAt.Elapsed < TimeSpan.FromMilliseconds(500))
            return false; // Rapid action sequence is likely a mistake

        _lastActionAt = CpuTimestamp.Now;
        return true;
    }

    // Nested types

    public sealed record Model(
        Chat Chat,
        Language Language,
        bool IsRecordingHere = false,
        bool IsMicrophoneCaptured = false,
        bool IsConnected = false,
        bool IsVoiceActive = false,
        bool? HasMicrophonePermission = null,
        bool IsTransitioning = false
    ) {
        public static readonly Model Loading = new(SpecialChat.Loading, Language.None, default, false, true);
    }
}
