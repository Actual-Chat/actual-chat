@namespace ActualChat.Chat.UI.Blazor.Components
@implements IModalView<TranscriptionOptionsModal.Model>
@inherits ComputedStateComponent<TranscriptionOptionsModal.ComputedModel>
@{
    var m = State.Value;
    var status = m.CanChangePersistVoice
        ? m.PersistVoice ? "On" : "Off"
        : "disabled";
}

<DialogFrame Title="Transcription options" Class="transcription-options-modal modal-sm" HasCloseButton="true">
    <Body>
    <FormBlock>
        <LanguageButtonGroup ChatSid="@ModalModel.ChatId"/>

        <OptionsItem Status="@status">
            <Left><i class="icon-radio-button-on-fill text-2xl"></i></Left>
            <Title>Record voice</Title>
            <Right>
                <Toggle
                    Class="toggle-sm"
                    IsDisabled="@(!m.CanChangePersistVoice)"
                    IsChecked="@m.PersistVoice"
                    IsCheckedChanged="OnMustRecordVoiceChanged"/>
            </Right>
        </OptionsItem>
    </FormBlock>
    </Body>
</DialogFrame>

@code {
    private TranscriptionSettings? _transcriptionSettings;

    [Inject] private ChatHub ChatHub { get; init; } = null!;

    private Session Session => ChatHub.Session;
    private ChatId ChatId => ModalModel.ChatId;
    private TranscriptionSettings TranscriptionSettings
        => _transcriptionSettings ??= new (ChatHub.Chats, ChatHub.Authors, ChatHub.AccountSettings);

    [CascadingParameter] public Modal Modal { get; set; } = null!;

    [Parameter] public Model ModalModel { get; set; } = null!;

    protected override ComputedState<ComputedModel>.Options GetStateOptions()
        => new() {
            UpdateDelayer = FixedDelayer.Instant,
            Category = GetStateCategory(),
            InitialValue = new (false, false),
        };

    protected override async Task<ComputedModel> ComputeState(CancellationToken cancellationToken) {
        var persistVoice = await TranscriptionSettings.GetPersistVoice(Session, ChatId, cancellationToken);
        return new (persistVoice.Value, persistVoice.CanChange);
    }

    private async Task OnMustRecordVoiceChanged(bool value)
        => await TranscriptionSettings.SetPersistVoice(Session, ChatId, value, default);

    public sealed record ComputedModel(bool PersistVoice, bool CanChangePersistVoice);

    public sealed record Model(ChatId ChatId);
}
