@namespace ActualChat.Chat.UI.Blazor.Components
@implements IModalView<TranscriptionOptionsModal.Model>
@inherits ComputedStateComponent<TranscriptionOptionsModal.ComputedModel>
@{
    var m = State.Value;
    var status = m.CanChangeMustRecordVoice
        ? m.MustRecordVoice ? "On" : "Off"
        : "disabled";
}

<DialogFrame Title="Transcription options" Class="transcription-options-modal modal-sm" HasCloseButton="true">
    <Body>
    <FormBlock>
        <LanguageButtonGroup ChatSid="@ModalModel.ChatId"/>

        @if (m.EnableIncompleteUI) {
            <OptionsItem Status="@status">
                <Left><i class="icon-radio-button-on-fill text-2xl"></i></Left>
                <Title>Must record voice</Title>
                <Right>
                    <Toggle
                        Class="toggle-sm"
                        IsDisabled="@(!m.CanChangeMustRecordVoice)"
                        IsChecked="@m.MustRecordVoice"
                        IsCheckedChanged="OnMustRecordVoiceChanged"/>
                </Right>
            </OptionsItem>
        }
    </FormBlock>
    </Body>
</DialogFrame>

@code {
    private TranscriptionSettings? _transcriptionSettings;

    [Inject] private ChatHub ChatHub { get; init; } = null!;

    private Session Session => ChatHub.Session;
    private ChatId ChatId => ModalModel.ChatId;
    private TranscriptionSettings TranscriptionSettings
        => _transcriptionSettings ??= new TranscriptionSettings(ChatHub.Chats, ChatHub.Authors, ChatHub.AccountSettings);

    [CascadingParameter] public Modal Modal { get; set; } = null!;

    [Parameter] public Model ModalModel { get; set; } = null!;

    protected override ComputedState<ComputedModel>.Options GetStateOptions()
        => new() {
            UpdateDelayer = FixedDelayer.Instant,
            Category = GetStateCategory(),
            InitialValue = new ComputedModel(false, false, false),
        };

    protected override async Task<ComputedModel> ComputeState(CancellationToken cancellationToken) {
        var mustRecordVoice = await TranscriptionSettings.GetMustRecordVoice(Session, ChatId, cancellationToken);
        var enableIncompleteUI = await ChatHub.Features.Get<Features_EnableIncompleteUI, bool>(cancellationToken);
        return new ComputedModel(enableIncompleteUI, mustRecordVoice.CanChange, mustRecordVoice.Value);
    }

    private async Task OnMustRecordVoiceChanged(bool value)
        => await TranscriptionSettings.SetMustRecordVoice(Session, ChatId, value, default);

    public sealed record ComputedModel(bool EnableIncompleteUI, bool CanChangeMustRecordVoice, bool MustRecordVoice);

    public sealed record Model(ChatId ChatId);
}
