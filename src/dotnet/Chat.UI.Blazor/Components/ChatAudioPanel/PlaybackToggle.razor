@namespace ActualChat.Chat.UI.Blazor.Components
@inherits ComputedStateComponent<PlaybackToggle.Model>
@{
    var rendered = _rendered;
    var m = _rendered = State.Value;
    if (rendered.Chat.Id != m.Chat.Id)
        rendered = m;
    var audioState = m.AudioState;

    var playingHistoricalClass = audioState.IsPlayingHistorical ? "opacity-60" : "";
    var cls = $"{(audioState.IsListening ? "on" : "off")} {playingHistoricalClass}";
    var wrapperCls = (rendered.AudioState.IsListening, audioState.IsListening) switch {
        (false, true) => "listen-off-to-on",
        (true, false) => "listen-on-to-off",
        (_, true) => "listen-on",
        (_, false) => "listen-off",
    };
    var tooltip = audioState.IsListening ? "Listening..." : "Listen";
    _rendered = m;
    // var loudBtnCls = "loud-btn " + (m.IsSpeakerphoneOn ? "on" : "off");
}

<div class="@wrapperCls playback-wrapper">
    <ButtonRound
        Click="@OnListenClick"
        Class="@cls"
        Tooltip="@tooltip"
        TooltipPosition="FloatingPosition.Top"
        MustKeepAwake="@(!audioState.IsListening)">
        <playback-toggle-svg isAnimated="@m.IsAnimated" isOn="@audioState.IsListening"/>

    </ButtonRound>
    @*
    Temporarily disabled switch between loud speaker and earpiece
    to have single audio channel controlled with volume buttons
    <ButtonRound Click="@OnToggleAudioOutputClick" Class="@loudBtnCls">
        <i class="icon-volume-up text-2xl"></i>
    </ButtonRound>
    *@
</div>

@code {
    private Model _rendered = Model.Loading;

    [Inject] private ChatUIHub Hub { get; set; } = null!;
    private Session Session => Hub.Session();
    private ChatUI ChatUI => Hub.ChatUI;
    private ChatAudioUI ChatAudioUI => Hub.ChatAudioUI;
    private ChatPlayers ChatPlayers => Hub.ChatPlayers;
    private IAuthors Authors => Hub.Authors;
    private IAudioOutputController AudioOutputController => Hub.AudioOutputController;

    private bool IsUpdating => !Chat.Id.IsNone && State.Value.Chat.Id != Chat.Id;
    private bool IsListening => !IsUpdating && State is { Value.AudioState.IsListening: true };

    [Parameter, EditorRequired] public Chat Chat { get; set; } = SpecialChat.Unavailable;
    [CascadingParameter] public ScreenSize ScreenSize { get; set; }

    protected override ComputedState<Model>.Options GetStateOptions()
        => ComputedStateComponent.GetStateOptions(GetType(),
            static t => new ComputedState<Model>.Options() {
                InitialValue = Model.Loading,
                UpdateDelayer = FixedDelayer.NextTick,
                Category = ComputedStateComponent.GetStateCategory(t),
            });

    protected override async Task<Model> ComputeState(CancellationToken cancellationToken) {
        var chat = Chat;
        var chatId = chat.Id;

        var audioState = await ChatAudioUI.GetState(chatId).ConfigureAwait(false);
        var isAnimated = false;
        if (!audioState.IsListening) {
            var chatInfo = await ChatUI.Get(chatId, cancellationToken).ConfigureAwait(false);
            if (chatInfo?.News.LastTextEntry is { IsStreaming: true, HasAudioEntry: true } lastTextEntry) {
                var ownAuthor = await Authors.GetOwn(Session, chatId, cancellationToken).ConfigureAwait(false);
                isAnimated = ownAuthor == null || lastTextEntry.AuthorId != ownAuthor.Id;
            }
        }
        var isSpeakerphoneOn = await AudioOutputController.IsSpeakerphoneOn.Use(cancellationToken).ConfigureAwait(false);
        return new (chat, audioState, isAnimated, isSpeakerphoneOn);
    }

    private void OnListenClick() {
        if (IsUpdating)
            return;

        _ = ChatAudioUI.SetListeningState(Chat.Id, !IsListening);
    }

    private void OnToggleAudioOutputClick()
        => AudioOutputController.ToggleSpeakerphone(!AudioOutputController.IsSpeakerphoneOn.Value);

    // Nested types

    public sealed record Model(
        Chat Chat,
        ChatAudioState AudioState,
        bool IsAnimated = false,
        bool IsSpeakerphoneOn = false
    ) {
        public static readonly Model Loading = new(SpecialChat.Loading, ChatAudioState.None);
    }
}
