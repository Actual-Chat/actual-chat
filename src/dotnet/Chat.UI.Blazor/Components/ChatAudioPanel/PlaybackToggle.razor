@namespace ActualChat.Chat.UI.Blazor.Components
@inherits ComputedStateComponent<PlaybackToggle.Model>
@{
    var rendered = _rendered;
    var m = _rendered = State.Value;
    if (rendered.Chat.Id != m.Chat.Id)
        rendered = m;
    var audioState = m.AudioState;

    var playingHistoricalClass = audioState.IsPlayingHistorical ? "opacity-60" : "";
    var cls = $"{(audioState.IsListening ? "on" : "off")} {playingHistoricalClass}";
    var wrapperCls = (rendered.AudioState.IsListening, audioState.IsListening) switch {
        (false, true) => "listen-off-to-on",
        (true, false) => "listen-on-to-off",
        (_, true) => "listen-on",
        (_, false) => "listen-off",
    };
    var tooltip = audioState.IsListening ? "Listening..." : "Listen";
    _rendered = m;
    var loudBtnCls = "loud-btn " + (m.IsSpeakerphoneOn ? "on" : "off");
    var playbackSize = ScreenSize.IsNarrow() ? "32" : "30";
    var playbackViewBox = ScreenSize.IsNarrow() ? "-3 -2 30 30" : "-4 -2 32 32";
}

<div class="@wrapperCls playback-wrapper">
    <ButtonRound
        Click="@OnListenClick"
        Class="@cls"
        Tooltip="@tooltip"
        TooltipPosition="FloatingPosition.Top"
        MustKeepAwake="@(!audioState.IsListening)">
        @* <i class="icon-listen-2 text-3xl"></i> *@
        <svg width="@playbackSize" height="@playbackSize" viewBox="@playbackViewBox" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path id="listen-svg-arrow" fill-rule="evenodd" clip-rule="evenodd" d="M12.707 12.2923C12.322 11.9063 11.699 11.9033 11.305 12.2793L8.30502 15.1763C7.90802 15.5603 7.89702 16.1923 8.28102 16.5903C8.66502 16.9873 9.29802 17.0003 9.69502 16.6153L11 15.3553V20.9993C11 21.5523 11.448 21.9993 12 21.9993C12.552 21.9993 13 21.5523 13 20.9993V15.4133L14.293 16.7063C14.488 16.9013 14.744 16.9993 15 16.9993C15.256 16.9993 15.512 16.9013 15.707 16.7063C16.098 16.3153 16.098 15.6833 15.707 15.2923L12.707 12.2923Z" fill="#007AFF">
                <animateMotion
                    href="#listen-svg-arrow"
                    begin="1s"
                    dur="0.75s"
                    repeatCount="2"
                    values="0 0 0; 0 -1 0; 0 0 0; 0 0 0; 0 0 0"
                >
                </animateMotion>
            </path>
            <path id="listen-svg-1" d="M5 12C5 7.13401 8.13401 4 12 4C15.866 4 19 7.13401 19 12" stroke="#898989" stroke-width="2">
                <animate
                    href="#listen-svg-1"
                    attributeName="d"
                    attributeType="XML"
                    begin="1s"
                    dur="0.75s"
                    repeatCount="2"
                    values="
                        M5 12C5 7.13401 8.13401 4 12 4C15.866 4 19 7.13401 19 12;
                         M2 12C5 7.13401 8.13401 4 12 4C15.866 4 19 7.13401 22 12;
                         M3 12C5 7.13401 8.13401 4 12 4C15.866 4 19 7.13401 21 12;
                          M5 12C5 7.13401 8.13401 4 12 4C15.866 4 19 7.13401 19 12;
                          M5 12C5 7.13401 8.13401 4 12 4C15.866 4 19 7.13401 19 12;"
                />
                <animateMotion
                    href="#listen-svg-1"
                    begin="1s"
                    dur="0.75s"
                    repeatCount="2"
                    values="0 0 0; 0 -5 0; 0 -3 0; 0 0 0; 0 0 0"
                >
                </animateMotion>
            </path>
            <path id="listen-svg-2" d="M2 15.5C2 17.433 3.34315 19 5 19L5 12C3.34315 12 2 13.567 2 15.5Z" stroke="#898989" stroke-width="2" stroke-linejoin="round">
                <animateTransform
                    href="#listen-svg-2"
                    attributeName="transform"
                    type="rotate"
                    attributeType="XML"
                    begin="1s"
                    dur="0.75s"
                    repeatCount="2"
                    values="
                        0 10 0;
                           10 14 0;
                           10 14 0;
                           0 10 0;
                             0 10 0"
                />
                <animateMotion
                    href="#listen-svg-2"
                    begin="1s"
                    dur="0.75s"
                    repeatCount="2"
                    values="0 0 0; 0 -5 0; 0 -3 0; 0 0 0; 0 0 0"
                >
                </animateMotion>
            </path>
            <path id="listen-svg-3" d="M22 15.5C22 13.567 20.6569 12 19 12L19 19C20.6569 19 22 17.433 22 15.5Z" stroke="#898989" stroke-width="2" stroke-linejoin="round">
                <animateTransform
                    href="#listen-svg-3"
                    attributeName="transform"
                    type="rotate"
                    attributeType="XML"
                    begin="1s"
                    dur="0.75s"
                    repeatCount="2"
                    values="
                        0 10 0;
                           -10 14 0;
                           -10 14 0;
                           0 10 0;
                             0 10 0"
                />
                <animateMotion
                    href="#listen-svg-3"
                    begin="1s"
                    dur="0.75s"
                    repeatCount="2"
                    values="0 0 0; 0 -5 0; 0 -3 0; 0 0 0; 0 0 0"
                >
                </animateMotion>
            </path>
        </svg>
    </ButtonRound>
    @* Temporarily disabled switch between loud speaker and earpiece *@
    @* to have single audio channel controlled with volume buttons  *@
    @* <ButtonRound Click="@OnToggleAudioOutputClick" Class="@loudBtnCls"> *@
    @*     <i class="icon-volume-up text-2xl"></i> *@
    @* </ButtonRound> *@
</div>

@code {
    private Model _rendered = Model.Loading;

    [Inject] private ChatPlayers ChatPlayers { get; init; } = null!;
    [Inject] private ChatAudioUI ChatAudioUI { get; init; } = null!;
    [Inject] private IAudioOutputController AudioOutputController { get; init; } = null!;

    private bool IsLoading => !Chat.Id.IsNone && State.Value.Chat.Id != Chat.Id;
    private bool IsListening => !IsLoading && State.Value.AudioState.IsListening;

    [Parameter, EditorRequired] public Chat Chat { get; set; } = SpecialChat.Unavailable;
    [CascadingParameter] public ScreenSize ScreenSize { get; set; }

    protected override ComputedState<Model>.Options GetStateOptions()
        => new() {
            InitialValue = Model.Loading,
            UpdateDelayer = FixedDelayer.Instant,
            Category = GetStateCategory(),
        };

    protected override async Task<Model> ComputeState(CancellationToken cancellationToken) {
        var audioState = await ChatAudioUI.GetState(Chat.Id);
        var isSpeakerphoneOn = await AudioOutputController.IsSpeakerphoneOn.Use(cancellationToken);
        return new Model(Chat, audioState, isSpeakerphoneOn);
    }

    private void OnListenClick() {
        if (IsLoading)
            return;

        _ = ChatAudioUI.SetListeningState(Chat.Id, !IsListening);
    }

    private void OnToggleAudioOutputClick()
        => AudioOutputController.ToggleSpeakerphone(!AudioOutputController.IsSpeakerphoneOn.Value);


    public sealed record Model(
        Chat Chat,
        ChatAudioState AudioState,
        bool IsSpeakerphoneOn = false
    ) {
        public static Model Loading { get; } = new(SpecialChat.Loading, ChatAudioState.None);
    }
}
