@namespace ActualChat.Chat.UI.Blazor.Components
@using ActualChat.Notification
@inherits ComputedStateComponent<UnreadMessageCounter.Model>
@{
    var m = State.LatestNonErrorValue ?? Model.None;
    if (m.Count == 0)
        return;

    var bgColor = m.IsSubscribed
        ? "bg-primary"
        : "bg-counter";

    var countText = m.Count == 0 ? "" : m.Count.Format();
}

<div class="@bgColor message-counter-badge">
    <div class="h-6 p-0.5 rounded-full">
        @if (m.HasMentions) {
            <span class="mr-0.5">@@</span>
        } else {
            <span>@countText</span>
        }
    </div>
</div>

@code {
    [Inject] private Session Session { get; init; } = null!;
    [Inject] private INotifications Notifications { get; init; } = null!;
    [Inject] private UnreadMessagesFactory UnreadMessagesFactory { get; init; } = null!;

    private UnreadMessages UnreadMessages { get; set; } = null!;

    [Parameter, EditorRequired] public string ChatId { get; set; } = "";

    protected override Task OnParametersSetAsync() {
        UnreadMessages.DisposeSilently();
        UnreadMessages = UnreadMessagesFactory.Get(ChatId);
        return base.OnParametersSetAsync();
    }

    public override async ValueTask DisposeAsync() {
        await base.DisposeAsync();
        UnreadMessages.DisposeSilently();
    }

    protected override ComputedState<Model>.Options GetStateOptions() {
        return new() {
            InitialValue = Model.None,
            UpdateDelayer = new UpdateDelayer(Services.UIActionTracker(), TimeSpan.FromSeconds(1)) {
                MinDelay = TimeSpan.FromSeconds(0.3), // Prevents blinking on your own updates
            },
        };
    }

    protected override async Task<Model> ComputeState(CancellationToken cancellationToken) {
        var hasMentionsTask = UnreadMessages.HasMentions(cancellationToken);
        var countTask = UnreadMessages.GetCount(cancellationToken);
        var notificationStatusTask = Notifications.GetStatus(Session, ChatId, cancellationToken);

        // ConfigureAwait(false) from here
        var hasMentions = await hasMentionsTask.ConfigureAwait(false);
        var count = await countTask.ConfigureAwait(false);
        var notificationStatus = await notificationStatusTask.ConfigureAwait(false);
        if (!hasMentions && count == 0)
            return Model.None;

        return new() {
            Count = count,
            IsSubscribed = notificationStatus.IsSubscribed,
            HasMentions = hasMentions,
        };
    }

    public sealed record Model {
        public static readonly Model None = new();

        public bool HasMentions { get; init; }
        public MaybeTrimmed<int> Count { get; init; }
        public bool IsSubscribed { get; init; }
    }
}
