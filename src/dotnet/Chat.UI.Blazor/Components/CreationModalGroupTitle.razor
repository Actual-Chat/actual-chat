@using System.ComponentModel.DataAnnotations

<div class="creation-panel">
    <div class="header add-members">
        <ButtonRound Class="transparent" ContentClass="!min-w-12 !max-w-12" Click="ReturnToPrevious">
            <i class="icon-arrow-left text-2xl"></i>
        </ButtonRound>
        <div class="w-full px-4 text-xl font-semibold">New Group</div>
        <ButtonRound Class="transparent" ContentClass="!min-w-14 !max-w-14" Click="OnCancel">
            <i class="icon-close text-2xl md:text-xl font-medium"></i>
        </ButtonRound>
    </div>

    <Form @ref="@_formRef" Model="@_form" OnSubmit="@OnCreate">
        <DataAnnotationsValidator/>
        <div class="flex-y grow overflow-y-auto">
            <FormSection Label="Chat title" InputId="@_form.TitleId" IsRequired="true" IsLabelInsideInput="true">
                <TextBox @bind-Value="@_form.Title" Id="@_form.TitleId" Autofocus="true" Autocomplete="false"/>
            </FormSection>

            <div class="flex-y gap-y-2">
                <div>
                    Contact 1
                </div>
                <div>
                    Contact 2
                </div>
                <div>
                    Contact 3
                </div>
                <div>
                    Contact 4
                </div>
            </div>
        </div>

        <div class="btn-group">
            @{
                var submitClass = $"btn-primary {(_formRef.IsValid ? "" : "disabled")}";
            }
            <Button Type="@ButtonType.Button" Click="OnCancel" Class="btn-secondary">Cancel</Button>
            <Button Type="@ButtonType.Submit" Class="@submitClass">Create</Button>
        </div>
    </Form>
</div>

@code {
    private Form _formRef = null!;
    private FormModel _form = null!;

    [Inject] private Session Session { get; init; } = null!;
    [Inject] private NavigationManager Nav { get; init; } = null!;
    [Inject] private ComponentIdGenerator ComponentIdGenerator { get; init; } = null!;
    [Inject] private UICommander UICommander { get; init; } = null!;

    [CascadingParameter] public BlazoredModalInstance ModalInstance { get; set; } = null!;
    [Parameter] public EventCallback OnCancel { get; set; }
    [Parameter] public EventCallback ReturnToPrevious { get; set; }

    protected override void OnInitialized()
        => _form = new(ComponentIdGenerator);

    private async Task OnCreate()
    {
        var command = new IChats.ChangeCommand(Session, "", null, new() {
            Create = new ChatDiff() {
                Title = _form.Title,
                ChatType = ChatType.Group,
                IsPublic = _form.IsPublic,
            },
        });
        try {
            var (chat, error) = await UICommander.Run(command);
            if (error != null)
                return;

            chat = chat.Require();
            await ModalInstance.CloseAsync();
            Nav.NavigateTo(Links.ChatPage(chat.Id));
        }
        catch {
            // Intended: command errors are shown in the UI anyway
        }
    }

    public class FormModel
    {
        [Required, MinLength(1)]
        public string Title { get; set; } = "";
        public bool IsPublic { get; set; }

        public string FormId { get; }
        public string TitleId { get; }
        public string IsPublicId { get; }

        public FormModel(ComponentIdGenerator componentIdGenerator) {
            FormId = componentIdGenerator.Next("new-chat-form");
            TitleId = $"{FormId}-title";
            IsPublicId = $"{FormId}-isPublic";
        }
    }
}
