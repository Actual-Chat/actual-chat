@namespace ActualChat.Chat.UI.Blazor.Components
@using ActualChat.Notification
@inherits ComputedStateComponent<ChatUnreadMessagesCounter.Model>
@{
    var m = State.LatestNonErrorValue ?? Model.None;
    if (m.Count == 0)
        return;

    var bgColor = m.NotificationMode != ChatNotificationMode.Muted
        ? "bg-primary"
        : "bg-counter";

    var countText = m.HasMentions ? "@" : m.Count != 0 ? m.Count.Format() : "";
}

<Badge Class="message-counter-badge" Color="@bgColor">
    @countText
</Badge>

@code {
    [Inject] private Session Session { get; init; } = null!;
    [Inject] private UnreadMessages UnreadMessages { get; init; } = null!;
    [Inject] private AccountSettings AccountSettings { get; init; } = null!;

    [Parameter, EditorRequired] public string ChatId { get; set; } = "";

    protected override ComputedState<Model>.Options GetStateOptions() {
        return new() {
            InitialValue = Model.None,
            UpdateDelayer = new UpdateDelayer(Services.UIActionTracker(), TimeSpan.FromSeconds(1)) {
                MinDelay = TimeSpan.FromSeconds(0.3), // Prevents blinking on your own updates
            },
        };
    }

    protected override async Task<Model> ComputeState(CancellationToken cancellationToken) {
        var countTask = UnreadMessages.GetCount(ChatId, cancellationToken);
        var hasMentionsTask = UnreadMessages.HasMentions(ChatId, cancellationToken);
        var getNotificationModeTask = AccountSettings.GetChatNotificationMode(ChatId, cancellationToken);

        // ConfigureAwait(false) from here
        var hasMentions = await hasMentionsTask.ConfigureAwait(false);
        var count = await countTask.ConfigureAwait(false);
        var notificationMode = await getNotificationModeTask.ConfigureAwait(false);

        if (!hasMentions && count == 0)
            return Model.None;

        return new() {
            Count = count,
            HasMentions = hasMentions,
            NotificationMode = notificationMode,
        };
    }

    public sealed record Model {
        public static readonly Model None = new();

        public MaybeTrimmed<int> Count { get; init; }
        public bool HasMentions { get; init; }
        public ChatNotificationMode NotificationMode { get; init; }
    }
}
