@namespace ActualChat.Chat.UI.Blazor.Components
@using ActualChat.Notification
@inherits ComputedStateComponent<ChatUnreadMessagesCounter.Model>
@{
    var m = State.LatestNonErrorValue ?? Model.None;
    if (m.Count == 0)
        return;

    var bgColor = m.NotificationMode != ChatNotificationMode.Muted
        ? "bg-primary"
        : "bg-counter";

    var countText = m.HasMentions ? "@" : m.Count != 0 ? m.Count.Format() : "";
}

<Badge Class="message-counter-badge" Color="@bgColor">
    @countText
</Badge>

@code {
    [Inject] private Session Session { get; init; } = null!;
    [Inject] private AccountSettings AccountSettings { get; init; } = null!;
    [Inject] private ChatUI ChatUI { get; init; } = null!;

    [Parameter, EditorRequired] public ChatId ChatId { get; set; }

    protected override ComputedState<Model>.Options GetStateOptions() {
        return new() {
            InitialValue = Model.None,
            UpdateDelayer = new UpdateDelayer(Services.UIActionTracker(), TimeSpan.FromSeconds(1)) {
                MinDelay = TimeSpan.FromSeconds(0.3), // Prevents blinking on your own updates
            },
        };
    }

    protected override async Task<Model> ComputeState(CancellationToken cancellationToken) {
        var chatStateTask = ChatUI.GetChatState(ChatId, cancellationToken);
        var getUserChatSettings = AccountSettings.GetUserChatSettings(ChatId, cancellationToken);

        // ConfigureAwait(false) from here
        var chatState = await chatStateTask.ConfigureAwait(false);
        var userChatSettings = await getUserChatSettings.ConfigureAwait(false);

        if (chatState is not { HasMentionsOrUnreadMessages: true })
            return Model.None;

        return new() {
            Count = chatState.UnreadMessageCount,
            HasMentions = chatState.HasMentions,
            NotificationMode = userChatSettings.NotificationMode,
        };
    }

    public sealed record Model {
        public static readonly Model None = new();

        public Trimmed<int> Count { get; init; }
        public bool HasMentions { get; init; }
        public ChatNotificationMode NotificationMode { get; init; }
    }
}
