@namespace ActualChat.Chat.UI.Blazor.Components
@inherits ComputedStateComponent<bool>
@using ActualChat.Chat.UI.Blazor.Services
@using ActualChat.MediaPlayback

@{
    var isPlaying = State.ValueOrDefault;
}

@if (isPlaying) {
    <button @onclick="Stop"
            class="@(_class ??= this.DefaultClass()) ml-2 pt-1 display-inline group">
        <div class="flex flex-row w-5 h-5">
            <svg class="text-toggle-on fill-current group-hover:hidden" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M5 17h-5v-10h5v10zm2-10v10l9 5v-20l-9 5zm17 4h-5v2h5v-2zm-1.584-6.232l-4.332 2.5 1 1.732 4.332-2.5-1-1.732zm1 12.732l-4.332-2.5-1 1.732 4.332 2.5 1-1.732z"/></svg>
            <svg class="text-secondary fill-current hidden group-hover:inline" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M5 17h-5v-10h5v10zm2-10v10l9 5v-20l-9 5zm15.324 4.993l1.646-1.659-1.324-1.324-1.651 1.67-1.665-1.648-1.316 1.318 1.67 1.657-1.65 1.669 1.318 1.317 1.658-1.672 1.666 1.653 1.324-1.325-1.676-1.656z"/></svg>
        </div>
    </button>
}

@code {
    private static string? _class;

    [Parameter]
    public ChatPlayer Player { get; set; } = null!;

    protected override ComputedState<bool>.Options GetStateOptions()
        => new() { UpdateDelayer = UpdateDelayer.MinDelay };

    protected override async Task<bool> ComputeState(CancellationToken cancellationToken) {
        var playback = await Player.PlaybackState.Use(cancellationToken).ConfigureAwait(false);
        if (playback == null)
            return false;
        var isStopped = await playback.IsStoppedState.Use(cancellationToken).ConfigureAwait(false);
        return !isStopped;
    }

    private Task Stop() {
        return Player.Stop();
    }
}
