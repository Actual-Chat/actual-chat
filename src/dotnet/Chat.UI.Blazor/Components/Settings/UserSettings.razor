@using System.Security.Claims
@using UserAvatar = ActualChat.Users.Avatar
@inherits ComputedStateComponent<Account?>

@{
    var account = State.LatestNonErrorValue;
    if (account == null)
        return;

    var user = account.User;
    var relativeUri = Links.UserPage(account.Id);
    var linkInfo = LinkInfoBuilder.GetFrom(relativeUri);
    user.Claims.TryGetValue(ClaimTypes.Email, out var email);
    user.Claims.TryGetValue(ClaimTypes.MobilePhone, out var mobilePhone);
    var phone = !string.IsNullOrEmpty(mobilePhone) ? mobilePhone : "+1 234 567 89 00";
}

<Tile>
    <TileItem Unselected="true" Class="first-tile-item">
        <Icon>
            <UserAuthorBadge
                UserId="@(account?.Id ?? "")"
                Size="SquareSize.Size9"
                ShowPresence="false"
                TextClass="hidden" />
        </Icon>
        <Right>
            <TileButtons HideSetDefaultButton="true" OnEditClick="@(() => EditAccount(_defaultAvatarId))"/>
        </Right>
        <Content>
            @account.User.Name
        </Content>
        <Caption>
            Username
        </Caption>
    </TileItem>

    <TileItem>
        <Icon>
            <i class="icon-at text-xl"></i>
        </Icon>
        <Content>
            @email
        </Content>
        <Caption>
            Identity
        </Caption>
        <Right>
            <CopyToClipboard InputClass="hidden" BtnClass="tile-hidden-btn" Text="@email" HideCopiedTag="true"/>
        </Right>
    </TileItem>

    <TileItem>
        <Icon>
            <i class="icon-phone text-xl"></i>
        </Icon>
        <Right>
            <CopyToClipboard InputClass="hidden" BtnClass="tile-hidden-btn" Text="+71234567890" HideCopiedTag="true"/>
        </Right>
        <Content>
            @phone
        </Content>
        <Caption>
            Phone
        </Caption>
    </TileItem>

    <TileItem>
        <Icon>
            <i class="icon-info text-xl"></i>
        </Icon>
        <Content>
            Some bio: <UserAvatar AvatarId="@_defaultAvatarId" ChatId="@ChatId" Show="Users.UI.Blazor.Components.UserAvatar.ShowInfo.Bio"/>
        </Content>
        <Caption>
            Bio
        </Caption>
    </TileItem>

    <TileItem>
        <Icon>
            <i class="icon-link-2 text-xl"></i>
        </Icon>
        <Right>
            <CopyToClipboard InputClass="hidden" BtnClass="tile-hidden-btn" Text="@linkInfo.CopyLink" HideCopiedTag="true"/>
        </Right>
        <Content>
            <div class="user-page-link flex-x justify-start items-center gap-x-1">
                <div class="flex-none">
                    <a class="text-02" href="@linkInfo.NavigateLink">@linkInfo.ShortDisplayLink</a>
                </div>
            </div>
        </Content>
        <Caption>
            Link
        </Caption>
    </TileItem>
</Tile>

<TileTopic Topic="My avatars"/>

<UserAvatarsList User="@account"/>

@code {
    private string _defaultAvatarId = "";

    [Inject] public Session Session { get; init; } = null!;
    [Inject] public IAccounts Accounts { get; init; } = null!;
    [Inject] private IAvatars Avatars { get; init; } = null!;
    [Inject] private LinkInfoBuilder LinkInfoBuilder { get; init; } = null!;
    [Inject] private ModalUI ModalUI { get; init; } = null!;

    [Parameter] public string ChatId { get; set; } = "";

    protected override ComputedState<Account?>.Options GetStateOptions()
        => new() { UpdateDelayer = FixedDelayer.Instant };

    protected override async Task<Account?> ComputeState(CancellationToken cancellationToken) {
        var account = await Accounts.Get(Session, default);
        _defaultAvatarId = await Avatars.GetDefaultAvatarId(Session, default);
        return account;
    }

    private void EditAccount(string avatarId)
        => ModalUI.Show(new UserAccountEditorModal.Model(avatarId, ChatId));
}
