@using System.ComponentModel.DataAnnotations
@using TimeZone = ActualChat.Users.TimeZone
@implements IDisposable
@{
    if (ReferenceEquals(_timeZoneFormModel, null))
        return;
    var timeZoneChanged = !OrdinalEquals(_timeZoneFormModel.BrowserTimeZoneName, _timeZoneFormModel.SelectedTimeZoneName);
    var browserTimeZoneNameFound = _timeZoneFormModel.BrowserTimeZoneName != "";
    var updateTimeZoneVisible = timeZoneChanged && browserTimeZoneNameFound;
    var isEmailVerified = _account.HasVerifiedEmail();
    var isEmailEmpty = _emailFormModel.Email.IsNullOrEmpty();
    var isEmailValid = _emailFormEditContext.IsValid(() => _emailFormModel.Email!);
}

<TileTopic Topic="Email"/>
<Tile>
    <Form EditContext="_emailFormEditContext">
        <DataAnnotationsValidator/>

        <FormBlock Class="email-form">
            <FormSection
                For="() => _emailFormModel.Email"
                InputId="@_emailFormModel.EmailFieldId"
                Label="Email"
                IsLabelInsideInput="true">
                <ChildContent>
                    <TextBox
                        @bind-Value="@_emailFormModel.Email"
                        Id="@_emailFormModel.EmailFieldId"
                        Autofocus="true"
                        disabled="@isEmailVerified"/>
                </ChildContent>
                <Right>
                    <VerificationStatus IsVerified="isEmailVerified"/>
                </Right>
            </FormSection>
            @if (isEmailValid && !isEmailVerified && !isEmailEmpty) {
                <EmailVerifier
                    Email="@_emailFormModel.Email"
                    Class="my-3"
                    Verified="@OnEmailVerified"/>
            }
        </FormBlock>
    </Form>
</Tile>

<TileTopic Topic="Time Zone"/>
<Tile>
    <Form Model="@_timeZoneFormModel">
        <DataAnnotationsValidator/>

        <FormBlock Class="time-zone-form">
            <FormSection
                For="() => _timeZoneFormModel.SelectedTimeZoneName"
                InputId="@_timeZoneFormModel.SelectedTimeZoneFormId"
                IsLabelInsideInput="true"
                Label="Time zone">
                <InputSelect
                    Value="_timeZoneFormModel.SelectedTimeZoneName"
                    ValueExpression="@(() => _timeZoneFormModel.SelectedTimeZoneName)"
                    ValueChanged="@(async (string timeZoneName) => await OnTimeZoneSelected(timeZoneName))">
                    @if (_timeZoneFormModel.SelectedTimeZoneName == "") {
                        <option value="">None</option>
                    }
                    @foreach (var timeZone in _timeZones) {
                        <option value="@timeZone.IanaName">@timeZone.IanaName</option>
                    }
                </InputSelect>
            </FormSection>
            @if (updateTimeZoneVisible) {
                <span>'@(_timeZoneFormModel.BrowserTimeZoneName)' is detected.</span>
                <Button Class="btn-outline" ContentClass="text-sm" Click="@OnSetDetectedTimeZone">Update</Button>
            }
        </FormBlock>
    </Form>
</Tile>

@code {
    private EditContext _emailFormEditContext = null!;
    private TimeZoneFormModel _timeZoneFormModel = null!;
    private EmailFormModel _emailFormModel = null!;
    private IReadOnlyCollection<TimeZone> _timeZones = [];
    private AccountFull _account = AccountFull.Loading;

    [Inject] private ComponentIdGenerator ComponentIdGenerator { get; init; } = null!;
    [Inject] private Session Session { get; init; } = null!;
    [Inject] private ITimeZones TimeZones { get; init; } = null!;
    [Inject] private UIHub Hub { get; init; } = null!;

    protected override async Task OnInitializedAsync() {
        _timeZones = await TimeZones.List("en-US", CancellationToken.None);
        _account = await Hub.AccountUI.OwnAccount.Use();
        _emailFormModel = new EmailFormModel(ComponentIdGenerator) {
            Email = _account.Email,
        };
        _emailFormEditContext = new EditContext(_emailFormModel);
        _emailFormEditContext.OnFieldChanged += EmailFormEditContextOnOnFieldChanged;

        var selectedTimeZoneId = _account.TimeZone;
        var selectedTimeZoneName = await TimeZones.FindDisplayName("en-US", selectedTimeZoneId, default);
        var browserTimeZoneId = Hub.BrowserInfo.TimeZone;
        var browserTimeZoneName = await TimeZones.FindDisplayName("en-US", browserTimeZoneId, default);
        _timeZoneFormModel = new TimeZoneFormModel(ComponentIdGenerator) {
            SelectedTimeZoneId = selectedTimeZoneId,
            SelectedTimeZoneName = selectedTimeZoneName,
            BrowserTimeZoneId = browserTimeZoneId,
            BrowserTimeZoneName = browserTimeZoneName,
        };
    }

    public void Dispose() {
        if (_emailFormEditContext != null!)
            _emailFormEditContext.OnFieldChanged -= EmailFormEditContextOnOnFieldChanged;
    }

    private void EmailFormEditContextOnOnFieldChanged(object? sender, FieldChangedEventArgs e) {
        StateHasChanged();
    }

    private async Task OnTimeZoneSelected(string timeZoneName) {
        var timeZone = _timeZones.First(x => OrdinalEquals(x.IanaName, timeZoneName));
        _timeZoneFormModel.SelectedTimeZoneId = timeZone.Id;
        _timeZoneFormModel.SelectedTimeZoneName = timeZone.IanaName;

        await UpdateTimezone();
    }

    private async Task OnSetDetectedTimeZone() {
        _timeZoneFormModel.SelectedTimeZoneId = _timeZoneFormModel.BrowserTimeZoneId;
        _timeZoneFormModel.SelectedTimeZoneName = _timeZoneFormModel.BrowserTimeZoneName;

        await UpdateTimezone();
    }

    private async Task OnEmailVerified() {
        _account = await Hub.Accounts.GetOwn(Session, default);
        _emailFormModel.Email = _account.Email;
    }

    private async Task UpdateTimezone() {
        var account = await Hub.Accounts.GetOwn(Session, default);
        var updateAccountCommand = new Accounts_Update(
            Session,
            account with { TimeZone = _timeZoneFormModel.SelectedTimeZoneId },
            account.Version);
        var (_, error) = await Hub.UICommander().Run(updateAccountCommand);
        if (error != null)
            return;

        Hub.ToastUI.Show("Time zone has been updated", "icon-checkmark-circle", ToastDismissDelay.Short);
    }

    // Nested types

    public sealed class TimeZoneFormModel {
        public string SelectedTimeZoneId { get; set; } = "";
        public string SelectedTimeZoneName { get; set; } = "";
        public string BrowserTimeZoneId { get; init; } = "";
        public string BrowserTimeZoneName { get; init; } = "";

        private string FormId { get; }
        public string SelectedTimeZoneFormId { get; }

        public TimeZoneFormModel(ComponentIdGenerator componentIdGenerator) {
            FormId = componentIdGenerator.Next("time-zone-form");
            SelectedTimeZoneFormId = $"{FormId}-user-time-zone";
        }
    }

    public sealed class EmailFormModel {
        [EmailAddress] public string? Email { get; set; }

        private string FormId { get; }
        public string EmailFieldId { get; init; }

        public EmailFormModel(ComponentIdGenerator componentIdGenerator) {
            FormId = componentIdGenerator.Next("email-form");
            EmailFieldId = $"{FormId}-email";
        }
    }
}
