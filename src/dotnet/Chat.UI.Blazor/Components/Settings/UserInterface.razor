@using ActualChat.Users.UI.Blazor
@using ActualChat.Chat.UI.Blazor.Module

<Tile>
    <div class="ui-settings">
        <Form Model="@_formModel">
            <DataAnnotationsValidator/>
            <ValidationSummary/>

            <FormBlock>
                <FormSection
                    Class="field-transcription-primary-language"
                    For="() => _formModel.UserFontSizeFormId"
                    InputId="@_formModel.UserFontSizeFormId"
                    IsLabelInsideInput="true"
                    Label="Font size">
                    <InputSelect
                        Value="_formModel.UserFontSizeFormId"
                        ValueExpression="@(() => _fontSize)"
                        ValueChanged="@(async (string fontTitle) => await OnFontSizeChanged(fontTitle))">
                        @if (_fontSizes != null) {
                            foreach (var size in _fontSizes) {
                                if (size.Key == _fontSize) {
                                    <option selected value="@size.Key">@size.Key</option>
                                } else {
                                    <option value="@size.Key">@size.Key</option>
                                }
                            }
                        }
                    </InputSelect>
                </FormSection>

            </FormBlock>
        </Form>
    </div>
</Tile>

@code {
    private static readonly string JSFontSizesClassName = $"{ChatBlazorUIModule.ImportName}.UserInterface.fontSizes";

    private FormModel _formModel = null!;
    private string? _fontSize;
    private Dictionary<string, string>? _fontSizes;

    [Inject] private Session Session { get; init; } = null!;
    [Inject] private AccountUI AccountUI { get; init; } = null!;
    [Inject] private IAvatars Avatars { get; init; } = null!;
    [Inject] private IJSRuntime JS { get; init; } = null!;
    [Inject] private ComponentIdGenerator ComponentIdGenerator { get; init; } = null!;
    [Inject] private ILogger<UserInterface> Log { get; init; } = null!;

    protected override void OnInitialized() {
        _formModel = new FormModel(ComponentIdGenerator);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (firstRender) {
            _fontSizes = await JS.InvokeAsync<Dictionary<string, string>>($"{JSFontSizesClassName}.list");
            _fontSize = await JS.InvokeAsync<string>($"{JSFontSizesClassName}.get");
            StateHasChanged();
        }
    }

    private async ValueTask OnFontSizeChanged(string fontSize) {
        await JS.InvokeAsync<string>($"{JSFontSizesClassName}.set", fontSize);
        StateHasChanged();
    }

    public sealed class FormModel {
        private string FormId { get; }
        public string UserFontSizeFormId { get; }

        public FormModel(ComponentIdGenerator componentIdGenerator) {
            FormId = componentIdGenerator.Next("font-size-form");
            UserFontSizeFormId = $"{FormId}-user-font-size";
        }
    }
}
