@inherits ComputedStateComponent<AccountFull>
@{
    var account = State.Value;
    if (ReferenceEquals(account, AccountFull.Loading))
        return;

    var avatar = account.Avatar;
    var link = Links.User(account.Id).ToAbsolute(UrlMapper);
}

<Tile>
    <TileItem IsHoverable="false" Class="first-tile-item">
        <Icon>
            <AccountBadge
                UserSid="@account.Id"
                Size="SquareSize.Size9"
                ShowPresence="false"
                NameClass="hidden" />
        </Icon>
        <Right>
            <TileButtons EditClick="@OnEditClick"/>
        </Right>
        <Content>
            @account.FullName
        </Content>
        <Caption>
            Name
        </Caption>
    </TileItem>

    <TileItem>
        <Icon>
            <i class="icon-at text-xl"></i>
        </Icon>
        <Content>
            @account.Email
        </Content>
        <Caption>
            Email
        </Caption>
        <Right>
            <CopyToClipboard ButtonClass="btn-sm transparent tile-hidden-btn" Text="@account.Email"/>
        </Right>
    </TileItem>

    <TileItem>
        <Icon>
            <i class="icon-phone text-xl"></i>
        </Icon>
        <Right>
            <CopyToClipboard ButtonClass="btn-sm transparent tile-hidden-btn" Text="@account.Phone.ToReadable()"/>
        </Right>
        <Content>
            @account.Phone.ToReadable()
        </Content>
        <Caption>
            Phone
        </Caption>
    </TileItem>

    <div @onclick="@(() => OnShareClick(link))"
         data-bubble="@(BubbleRef.New<LinkToAccountBubble>())"
         data-bubble-priority="301"
         data-bubble-placement="@(FloatingPosition.RightStart.ToPositionString())">
        <TileItem Class="tile-item-share">
            <Icon>
                <i class="icon-share text-xl"></i>
            </Icon>
            <Content>
                Share
            </Content>
        </TileItem>
    </div>
</Tile>

<TileTopic Topic="My avatars"/>

<OwnAvatarList Account="@account"/>

@code {
    [Inject] private Session Session { get; init; } = null!;
    [Inject] private IAccounts Accounts { get; init; } = null!;
    [Inject] private IAvatars Avatars { get; init; } = null!;
    [Inject] private ModalUI ModalUI { get; init; } = null!;
    [Inject] private UrlMapper UrlMapper { get; init; } = null!;

    private ShareUI ShareUI => Services.GetRequiredService<ShareUI>();

    protected override ComputedState<AccountFull>.Options GetStateOptions()
        => new() {
            InitialValue = AccountFull.Loading,
            Category = GetStateCategory(),
        };

    protected override Task<AccountFull> ComputeState(CancellationToken cancellationToken)
        => Accounts.GetOwn(Session, cancellationToken);

    private Task OnEditClick()
        => ModalUI.Show(OwnAccountEditorModal.Model.Default);

    private void OnShareClick(string link)
        => ShareUI.ShareLink(link, "Share your contact", "Your contact link");
}
