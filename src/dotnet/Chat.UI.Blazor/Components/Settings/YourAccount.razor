@using ActualChat.Users.UI.Blazor
@inherits ComputedStateComponent<AccountFull>
@{
    var account = State.Value;
    if (ReferenceEquals(account, AccountFull.Loading))
        return;

    var hasVerifiedEmail = account.HasVerifiedEmail();
}

<Tile>
    <TileItem IsHoverable="false" Class="first-tile-item">
        <Icon>
            <AvatarBadge
                Avatar="@account.Avatar"
                Size="@SquareSize.Size9"
                NameClass="hidden" />
        </Icon>
        <Right>
            <TileButtons EditClick="@OnEditClick"/>
        </Right>
        <Content>
            @account.FullName
        </Content>
        <Caption>
            Name
        </Caption>
    </TileItem>

    <TileItem>
        <Icon>
            <i class="icon-at text-xl"></i>
        </Icon>
        <Content>
            @account.Email
        </Content>
        <Caption>
            Email
        </Caption>
        <Right>
            <CopyToClipboard ButtonClass="btn-sm transparent tile-hidden-btn" Text="@account.Email"/>
            @if (hasVerifiedEmail) {
                // Do not show not verified sign until we have email verification
                <VerificationStatus IsVerified="@hasVerifiedEmail" Class="w-8 h-8"/>
            }
        </Right>
    </TileItem>

    <TileItem>
        <Icon>
            <i class="icon-phone text-xl"></i>
        </Icon>
        <Right>
            <CopyToClipboard ButtonClass="btn-sm transparent tile-hidden-btn" Text="@account.Phone.ToReadable()"/>
            <VerificationStatus IsVerified="account.HasVerifiedPhone()" Class="w-8 h-8" Verify="@OnEditClick"/>
        </Right>
        <Content>
            @account.Phone.ToReadable()
        </Content>
        <Caption>
            Phone
        </Caption>
    </TileItem>

    <div @onclick="@OnShareClick"
         data-bubble="@(BubbleRef.New<LinkToAccountBubble>())"
         data-bubble-priority="301"
         data-bubble-placement="@(FloatingPosition.RightStart.ToPositionString())">
        <TileItem Class="tile-item-share">
            <Icon>
                <i class="icon-share text-xl"></i>
            </Icon>
            <Content>
                Share
            </Content>
        </TileItem>
    </div>
</Tile>

<TileTopic Topic="My avatars"/>

<OwnAvatarList Account="@account"/>

@code {
    [Inject] private Session Session { get; init; } = null!;
    [Inject] private AccountUI AccountUI { get; init; } = null!;
    [Inject] private IAvatars Avatars { get; init; } = null!;
    private ShareUI ShareUI => Services.GetRequiredService<ShareUI>();
    private ModalUI ModalUI => ShareUI.ModalUI;

    protected override ComputedState<AccountFull>.Options GetStateOptions()
        => new() {
            InitialValue = AccountUI.OwnAccount.Value,
            Category = GetStateCategory(),
        };

    protected override async Task<AccountFull> ComputeState(CancellationToken cancellationToken)
        => await AccountUI.OwnAccount.Use(cancellationToken);

    private void OnEditClick()
        => ModalUI.Show(OwnAccountEditorModal.Model.Default);

    private void OnShareClick()
        => _ = ShareUI.ShareOwnAccount();
}
