@inherits ComputedStateComponent<Theme>
@{
    var isDark = State.Value is Theme.Dark;
}

<Toggle IsChecked="@isDark" IsCheckedChanged="OnThemeChanged"/>

@code {
    [Inject] ThemeUI ThemeUI { get; init; } = null!;

    protected override ComputedState<Theme>.Options GetStateOptions()
        => new() {
            InitialValue = ThemeUI.State.Value.CurrentTheme,
            UpdateDelayer = FixedDelayer.Instant,
            Category = GetStateCategory(),
        };

    protected override async Task<Theme> ComputeState(CancellationToken cancellationToken) {
        var themeInfo = await ThemeUI.State.Use(cancellationToken).ConfigureAwait(false);
        return themeInfo.CurrentTheme;
    }

    private void OnThemeChanged()
        => ThemeUI.SetTheme(State.Value switch {
            Theme.Light => Theme.Dark,
            _ => Theme.Light,
        });
}
