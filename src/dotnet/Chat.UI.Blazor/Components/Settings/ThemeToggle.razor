@inherits ComputedStateComponent<Theme>
@{
    var isDark = State.Value is Theme.Dark;
}

<Toggle IsChecked="@isDark" IsCheckedChanged="OnThemeChanged"/>

@code {
    [Inject] ThemeUI ThemeUI { get; init; } = null!;

    protected override ComputedState<Theme>.Options GetStateOptions()
        => new() {
            InitialValue = ThemeUI.ComputedTheme.Value.FinalTheme,
            UpdateDelayer = FixedDelayer.Instant,
            Category = GetStateCategory(),
        };

    protected override async Task<Theme> ComputeState(CancellationToken cancellationToken) {
        var (_, finalTheme) = await ThemeUI.ComputedTheme.Use(cancellationToken).ConfigureAwait(false);
        return finalTheme;
    }

    private void OnThemeChanged()
        => ThemeUI.Theme.Value = ThemeUI.ComputedTheme.Value.FinalTheme switch {
            Theme.Light => Theme.Dark,
            _ => Theme.Light,
        };
}
