@namespace ActualChat.Chat.UI.Blazor.Components
@inherits ComputedStateComponent<TranscriptionSettings.Model>
@{
    var m = State.Value;
    if (ReferenceEquals(m, Model.Loading))
        return;

    var languages = m.Languages.ToList();
    _formModel.PrimaryLanguageId = languages.GetOrDefault(0).Value;
    _formModel.SecondaryLanguageId = languages.GetOrDefault(1).Value;
    _formModel.TertiaryLanguageId = languages.GetOrDefault(2).Value;
    var shouldDisplayTranscriberEngineSettings = m.ShouldDisplayTranscriberEngineSettings;
}

<TileTopic Topic="Languages"/>

<Tile>
    <Form Model="@_formModel">
        <DataAnnotationsValidator/>

        <FormBlock Class="languages-form">
            <FormSection
                For="() => _formModel.PrimaryLanguageId"
                InputId="@_formModel.PrimaryLanguageFormId"
                IsLabelInsideInput="true"
                Label="Primary language">
                <InputSelect
                    Value="_formModel.PrimaryLanguageId"
                    ValueExpression="@(() => _formModel.PrimaryLanguageId)"
                    ValueChanged="@((string languageId) => OnLanguageChanged(0, languageId))">
                    @foreach (var language in Languages.All) {
                        <option value="@language.Id">@language.Title</option>
                    }
                </InputSelect>
            </FormSection>

            <FormSection
                For="() => _formModel.SecondaryLanguageId"
                InputId="@_formModel.SecondaryLanguageFormId"
                IsLabelInsideInput="true"
                Label="2nd language">
                <InputSelect
                    Value="_formModel.SecondaryLanguageId"
                    ValueExpression="@(() => _formModel.SecondaryLanguageId)"
                    ValueChanged="@((string languageId) => OnLanguageChanged(1, languageId))">
                    <option value="">None</option>
                    @foreach (var language in Languages.All) {
                        <option value="@language.Id">@language.Title</option>
                    }
                </InputSelect>
            </FormSection>

            <FormSection
                For="() => _formModel.TertiaryLanguageId"
                InputId="@_formModel.TertiaryLanguageFormId"
                IsLabelInsideInput="true"
                Label="3rd language">
                <InputSelect
                    Value="_formModel.TertiaryLanguageId"
                    ValueExpression="@(() => _formModel.TertiaryLanguageId)"
                    ValueChanged="@((string languageId) => OnLanguageChanged(2, languageId))">
                    <option value="">None</option>
                    @foreach (var language in Languages.All) {
                        <option value="@language.Id">@language.Title</option>
                    }
                </InputSelect>
            </FormSection>
        </FormBlock>
    </Form>
</Tile>

@if (shouldDisplayTranscriberEngineSettings) {
    <TileTopic Topic="Transcription Engines"/>
    <Tile Class="theme-tile">
        <TranscriptionEngineSettings/>
    </Tile>
}


@code {
    private FormModel _formModel = null!;

    [Inject] private ChatUIHub Hub { get; init; } = null!;
    [Inject] private ComponentIdGenerator ComponentIdGenerator { get; init; } = null!;

    protected override void OnInitialized()
        => _formModel = new FormModel(ComponentIdGenerator);

    protected override ComputedState<Model>.Options GetStateOptions()
        => ComputedStateComponent.GetStateOptions(GetType(),
            static t => new ComputedState<Model>.Options() {
                InitialValue = Model.Loading,
                Category = ComputedStateComponent.GetStateCategory(t),
            });

    protected override async Task<Model> ComputeState(CancellationToken cancellationToken) {
        var languages = await Hub.LanguageUI.Settings.Use(cancellationToken).ConfigureAwait(false);
        var enableIncompleteUI = await Hub.Features().Get<Features_EnableIncompleteUI, bool>(cancellationToken).ConfigureAwait(false);
        return new(languages, enableIncompleteUI);
    }

    private void OnLanguageChanged(int index, string languageId) {
        var language = Language.ParseOrNone(languageId);
        var languages = State.Value.Languages;
        Hub.LanguageUI.UpdateSettings(languages.With(index, language));
        State.Recompute(); // Necessary, coz otherwise zero-effect changes won't be reflected
    }

    // Nested types

    public sealed class FormModel {
        public string PrimaryLanguageId { get; set; } = "";
        public string SecondaryLanguageId { get; set; } = "";
        public string TertiaryLanguageId { get; set; } = "";

        private string FormId { get; }
        public string PrimaryLanguageFormId { get; }
        public string SecondaryLanguageFormId { get; }
        public string TertiaryLanguageFormId { get; }

        public FormModel(ComponentIdGenerator componentIdGenerator) {
            FormId = componentIdGenerator.Next("new-chat-form");
            PrimaryLanguageFormId = $"{FormId}-primary-language";
            SecondaryLanguageFormId = $"{FormId}-secondary-language";
            TertiaryLanguageFormId = $"{FormId}-tertiary-language";
        }
    }

    public sealed record Model(UserLanguageSettings Languages, bool ShouldDisplayTranscriberEngineSettings) {
        public static readonly Model Loading = new(new(), false);
    }
}
