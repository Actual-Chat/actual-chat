@namespace ActualChat.Chat.UI.Blazor.Components

<TileTopic Topic="Blazor Mode"/>
<Tile Class="blazor-mode-tile">
    <Form Model="@_formModel">
        <DataAnnotationsValidator/>
        <ValidationSummary/>

        <FormBlock>
            <InputRadioGroup
                Name="blazor-mode"
                DisplayName="Blazor Mode"
                @bind-Value="_formModel.IsServerMode">

                <TileItem Click="@(() => ChangeMode(true))" IsActive="@(BlazorModeHelper.IsBlazorServer)">
                    <Icon>
                        <FormRadio Id="@_formModel.ServerModeFormId" Value="@true"/>
                    </Icon>
                    <Content>
                        <Label InputId="@_formModel.ServerModeFormId" Text="Server-Side Rendering"></Label>
                        <div class="c-comment">
                            Works best for less powerful devices; less responsive if you're outside of the U.S.
                        </div>
                    </Content>
                </TileItem>

                <TileItem Click="@(() => ChangeMode(false))" IsActive="@(!BlazorModeHelper.IsBlazorServer)">
                    <Icon>
                        <FormRadio Id="@_formModel.WasmModeFormId" Value="@false"/>
                    </Icon>
                    <Content>
                        <Label InputId="@_formModel.WasmModeFormId" Text="WebAssembly Client"></Label>
                        <div class="c-comment">
                            Works best on more powerful devices; more responsive, requires less bandwidth,
                            but downloads ~10MB once you enable this mode.
                        </div>
                    </Content>
                </TileItem>

            </InputRadioGroup>
        </FormBlock>
    </Form>
</Tile>

@code {
    private FormModel _formModel = null!;

    [Inject] private UIHub Hub { get; init; } = null!;
    private BlazorModeHelper BlazorModeHelper => Hub.GetRequiredService<BlazorModeHelper>();

    [Inject] private ComponentIdGenerator ComponentIdGenerator { get; init; } = null!;

    protected override void OnInitialized() {
        _formModel = new (ComponentIdGenerator) {
            IsServerMode = BlazorModeHelper.IsBlazorServer,
        };
        _formModel.ModeChanged += OnBlazorModeChanged;
    }

    private void OnBlazorModeChanged(bool isServerMode)
        => BlazorModeHelper.ChangeMode(isServerMode);

    private void ChangeMode(bool serverMode) {
        if (BlazorModeHelper.IsBlazorServer == serverMode)
            return;
        OnBlazorModeChanged(serverMode);
    }

    public sealed class FormModel {
        private bool _isServerMode;

        private string FormId { get; }
        public string ServerModeFormId { get; }
        public string WasmModeFormId { get; }

        public bool IsServerMode {
            get => _isServerMode;
            set {
                if (_isServerMode == value)
                    return;
                _isServerMode = value;
                ModeChanged?.Invoke(value);
            }
        }

        public event Action<bool>? ModeChanged;

        public FormModel(ComponentIdGenerator componentIdGenerator) {
            FormId = componentIdGenerator.Next("blazor-mode-form");
            ServerModeFormId = $"{FormId}-server-mode";
            WasmModeFormId = $"{FormId}-wasm-mode";
        }
    }
}
