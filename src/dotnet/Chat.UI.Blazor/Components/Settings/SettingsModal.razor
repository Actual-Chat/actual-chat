@using Stl.Extensibility
@implements IModalView<SettingsModal.Model>
@attribute [MatchFor(typeof(Model), typeof(IModalView))]

<DialogFrame Title="Settings">
    <Body>
        <ButtonRound Click="OnCloseClick" Class="modal-close-btn">
            <i class="icon-close text-2xl"></i>
        </ButtonRound>
        <div class="flex-x justify-center w-full h-full">
            <SettingsPanel Title="Settings" OnCloseModalClick="OnCloseClick">
                <SettingsTab Title="My account" Id="myAccount" IconTitle="person">
                    <UserSettings/>
                </SettingsTab>

                @if (_enableIncompleteUI) {
                    <SettingsTab Title="Chat folder" Id="chatFolder" IconTitle="folder">
                        <ChildContent>
                        </ChildContent>
                    </SettingsTab>
                <SettingsTab Title="Notification" Id="notification" IconTitle="bell">
                    <ChildContent>
                    </ChildContent>
                </SettingsTab>
                    <SettingsTab Title="Language" Id="language" IconTitle="language">
                        <TitleContent>
                            <LanguageShortcut/>
                        </TitleContent>
                        <ChildContent>
                        </ChildContent>
                    </SettingsTab>
                }

                <SettingsTab Title="Night mode" Separator="true" Id="nightMode" IconTitle="night-mode" IsToggle="true">
                    <TitleContent>
                        <NightModeToggle/>
                    </TitleContent>
                </SettingsTab>
                <SettingsTab Title="Log out" Id="logOut" IconTitle="log-out">
                    <ChildContent>
                    </ChildContent>
                </SettingsTab>
            </SettingsPanel>
        </div>
    </Body>
    <Buttons>
    </Buttons>
</DialogFrame>

@code {
    private bool _enableIncompleteUI;

    [Inject] private Features Features { get; init; } = null!;

    [CascadingParameter] public BlazoredModalInstance ModalInstance { get; set; } = null!;
    [Parameter] public Model ModalModel { get; set; } = null!;

    protected override async Task OnInitializedAsync() {
        _enableIncompleteUI = await Features.Get<UIFeatures.EnableIncompleteUI, bool>(CancellationToken.None);
    }

    private async Task OnCloseClick()
        => await ModalInstance.CloseAsync().ConfigureAwait(false);

    public sealed record Model {
        public static Model None { get; } = new();
    }
}
