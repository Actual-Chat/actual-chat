@using ActualChat.Hosting
@implements IModalView<SettingsModal.Model>
@inherits ComputedStateComponent<AccountFull>
@{
    var account = State.Value;
    if (ReferenceEquals(account, AccountFull.Loading))
        return;

    var isGuestOrNone = account.IsGuestOrNone;
    var showMyAccount = !isGuestOrNone;
    var showNotifications = !isGuestOrNone && _enableIncompleteUI;
    var showLogout = !isGuestOrNone;
    var showQuit = HostInfo.HostKind.IsMauiApp() && HostInfo.AppKind == AppKind.Windows;
}

<ModalFrame Class="settings-modal">
    <ButtonX Click="OnCloseClick"/>
    <SettingsPanel Title="Settings" CloseModalClick="OnCloseClick">
        @if (showMyAccount) {
            <SettingsTab @key="1" Title="Your Account" Id="account" IconClass="icon-person">
                <YourAccount/>
            </SettingsTab>
        }

        @if (showNotifications) {
            <SettingsTab @key="3" Title="Notifications" Id="notifications" IconClass="icon-bell">
                <ChildContent>
                </ChildContent>
            </SettingsTab>
        }

        <SettingsTab @key="4" Title="Transcription" Id="transcription" IconClass="icon-transcription">
            <TitleContent>
                <LanguageShortcut/>
            </TitleContent>
            <ChildContent>
                <TranscriptionSettings/>
            </ChildContent>
        </SettingsTab>

        <SettingsTab @key="5" Title="User Interface" Id="userInterface" IconClass="icon-sort-by-alphabet">
            <UserInterface/>
        </SettingsTab>

        <SettingsTab @key="6" Title="Application" Id="app" IconClass="icon-settings">
            <AppSettings />
        </SettingsTab>

        <SettingsTab @key="7" Title="Emails" Id="emails" IconClass="icon-email">
            <EmailSettings/>
        </SettingsTab>

        @if (showLogout) {
            <SettingsTab @key="100" Title="Log out" Id="signOut" IconClass="icon-log-out" HasSeparatorBefore="true">
            </SettingsTab>
        }
        @if (showQuit) {
            <SettingsTab @key="101" Title="Quit Actual Chat" Id="quit" IconClass="icon-close" HasSeparatorBefore="false">
            </SettingsTab>
        }

    </SettingsPanel>
</ModalFrame>

@code {
    private bool _enableIncompleteUI;

    [Inject] private ChatUIHub Hub { get; init; } = null!;
    private HostInfo HostInfo => Hub.HostInfo();
    private Features Features => Hub.Features();
    private AccountUI AccountUI => Hub.AccountUI;

    [CascadingParameter] public Modal Modal { get; set; } = null!;
    [Parameter] public Model ModalModel { get; set; } = null!;

    protected override async Task OnInitializedAsync()
        => _enableIncompleteUI = await Features.Get<Features_EnableIncompleteUI, bool>(CancellationToken.None);

    protected override ComputedState<AccountFull>.Options GetStateOptions()
        => new() {
            InitialValue = AccountUI.OwnAccount.Value,
            Category = ComputedStateComponent.GetStateCategory(GetType()),
        };

    protected override async Task<AccountFull> ComputeState(CancellationToken cancellationToken)
        => await AccountUI.OwnAccount.Use(cancellationToken).ConfigureAwait(false);

    private void OnCloseClick()
        => Modal.Close();

    // Nested types

    public sealed record Model {
        public static readonly Model Instance = new();
    }
}
