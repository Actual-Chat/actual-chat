@using ActualChat.Hosting
@implements IModalView<SettingsModal.Model>
@inherits ComputedStateComponent<AccountFull>
@{
    var account = State.Value;
    if (ReferenceEquals(account, AccountFull.Loading))
        return;

    var isGuestOrNone = account.IsGuestOrNone;
    var showMyAccount = !isGuestOrNone;
    var showNotifications = !isGuestOrNone && _enableIncompleteUI;
    var showLanguages = true;
    var showUserInterface = true;
    var showLogout = !isGuestOrNone;
    var showQuit = HostInfo.HostKind.IsMauiApp() && HostInfo.AppKind == AppKind.Windows;
}

<ModalFrame Class="settings-modal">
    <ButtonX Click="OnCloseClick"/>
    <SettingsPanel Title="Settings" CloseModalClick="OnCloseClick">
        @if (showMyAccount) {
            <SettingsTab @key="1" Title="Your Account" Id="account" IconTitle="person">
                <YourAccount/>
            </SettingsTab>
        }

        @if (showNotifications) {
            <SettingsTab @key="3" Title="Notifications" Id="notifications" IconTitle="bell">
                <ChildContent>
                </ChildContent>
            </SettingsTab>
        }

        @if (showLanguages) {
            <SettingsTab @key="4" Title="Transcription" Id="transcription" IconTitle="transcription">
                <TitleContent>
                    <LanguageShortcut/>
                </TitleContent>
                <ChildContent>
                    <TranscriptionSettings/>
                </ChildContent>
            </SettingsTab>
        }

        @if (showUserInterface) {
            <SettingsTab @key="5" Title="User Interface" Id="userInterface" IconTitle="sort-by-alphabet">
                <UserInterface/>
            </SettingsTab>
        }

        <SettingsTab @key="6" Title="Application" Id="app" IconTitle="settings">
            <ChildContent>
                @if (NativeAppSettings != null) {
                    <AppSettingsView NativeAppSettings="@NativeAppSettings"></AppSettingsView>
                }
                @if (HostInfo.HostKind != HostKind.MauiApp) {
                    <SettingsBlazorModeToggle/>
                }
                <TileTopic Topic="Walk-through"/>
                <Button
                    Class="add-avatar-btn"
                    Click="@(OnRestartWalkThrough)">
                    <IconContent><i class="icon-refresh text-xl"></i></IconContent>
                    <TitleContent>Restart walk-through</TitleContent>
                </Button>
            </ChildContent>
        </SettingsTab>


        @if (showLogout) {
            <SettingsTab @key="100" Title="Log out" Id="signOut" IconTitle="log-out" HasSeparatorBefore="true">
            </SettingsTab>
        }
        @if (showQuit) {
            <SettingsTab @key="101" Title="Quit Actual Chat" Id="quit" IconTitle="close" HasSeparatorBefore="false">
            </SettingsTab>
        }

    </SettingsPanel>
</ModalFrame>

@code {
    private bool _enableIncompleteUI;

    [Inject] private HostInfo HostInfo { get; init; } = null!;
    [Inject] private Features Features { get; init; } = null!;
    [Inject] private AccountUI AccountUI { get; init; } = null!;
    [Inject] private BubbleUI BubbleUI { get; init; } = null!;
    [Inject] private ToastUI ToastUI { get; init; } = null!;

    [CascadingParameter] public Modal Modal { get; set; } = null!;
    [Parameter] public Model ModalModel { get; set; } = null!;

    private INativeAppSettings? NativeAppSettings { get; set; }

    protected override async Task OnInitializedAsync() {
        NativeAppSettings = Services.GetService<INativeAppSettings>();
        _enableIncompleteUI = await Features.Get<Features_EnableIncompleteUI, bool>(CancellationToken.None);
    }

    protected override ComputedState<AccountFull>.Options GetStateOptions()
        => new() {
            InitialValue = AccountUI.OwnAccount.Value,
            Category = GetStateCategory(),
        };

    protected override async Task<AccountFull> ComputeState(CancellationToken cancellationToken)
        => await AccountUI.OwnAccount.Use(cancellationToken).ConfigureAwait(false);

    private void OnCloseClick()
        => Modal.Close();

    private async Task OnRestartWalkThrough() {
        await BubbleUI.ResetSettings().ConfigureAwait(true);
        ToastUI.Show("Walk-through tips are back!", "icon-checkmark-circle", ToastDismissDelay.Short);
    }

    // Nested types

    public sealed record Model {
        public static readonly Model Instance = new();
    }
}
