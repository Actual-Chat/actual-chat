@using Stl.Extensibility
@using LanguageSettings = ActualChat.Chat.UI.Blazor.Components.LanguageSettings
@implements IModalView<SettingsModal.Model>
@attribute [MatchFor(typeof(Model), typeof(IModalView))]

<DialogFrame Title="Settings" NoNarrowHeader="true">
    <Body>
        <ButtonX Click="OnCloseClick"/>
        <SettingsPanel Title="Settings" OnCloseModalClick="OnCloseClick">
            <SettingsTab Title="My account" Id="myAccount" IconTitle="person">
                <MyAccount/>
            </SettingsTab>

            @if (_enableIncompleteUI) {
                <SettingsTab Title="Chat folder" Id="chatFolder" IconTitle="folder">
                    <ChildContent>
                    </ChildContent>
                </SettingsTab>
                <SettingsTab Title="Notification" Id="notification" IconTitle="bell">
                    <ChildContent>
                    </ChildContent>
                </SettingsTab>
            }

            <SettingsTab Title="Language" Id="language" IconTitle="language">
                <TitleContent>
                    <LanguageShortcut/>
                </TitleContent>
                <ChildContent>
                    <LanguageSettings/>
                </ChildContent>
            </SettingsTab>

            <SettingsTab Title="Dark theme" Separator="true" Id="darkTheme" IconTitle="night-mode" IsToggle="true">
                <TitleContent>
                    <ThemeToggle/>
                </TitleContent>
            </SettingsTab>
            <SettingsTab Title="Log out" Id="logOut" IconTitle="log-out">
                <ChildContent>
                </ChildContent>
            </SettingsTab>
        </SettingsPanel>
    </Body>
    <Buttons>
    </Buttons>
</DialogFrame>

@code {
    private bool _enableIncompleteUI;

    [Inject] private Features Features { get; init; } = null!;

    [CascadingParameter] public BlazoredModalInstance ModalInstance { get; set; } = null!;
    [Parameter] public Model ModalModel { get; set; } = null!;

    protected override async Task OnInitializedAsync() {
        _enableIncompleteUI = await Features.Get<UIFeatures.EnableIncompleteUI, bool>(CancellationToken.None);
    }

    private Task OnCloseClick()
        => ModalInstance.CloseAsync();

    public sealed record Model {
        public static Model None { get; } = new();
    }
}
