@using Stl.Extensibility
@using LanguageSettings = ActualChat.Chat.UI.Blazor.Components.LanguageSettings
@implements IModalView<SettingsModal.Model>
@attribute [MatchFor(typeof(Model), typeof(IModalView))]
@inherits ComputedStateComponent<AccountFull>
@{
    var account = State.Value;
    if (ReferenceEquals(account, AccountFull.Loading))
        return;

    var isGuestOrNone = account.IsGuestOrNone;
    var showMyAccount = !isGuestOrNone;
    var showChatFolder = !isGuestOrNone && _enableIncompleteUI;
    var showNotification = !isGuestOrNone && _enableIncompleteUI;
    var showLanguages = true;
    var showThemeToggle = _enableIncompleteUI;
    var showLogout = !isGuestOrNone;
}

<DialogFrame Title="Settings" NoNarrowHeader="true">
    <Body>
    <ButtonX Click="OnCloseClick"/>
    <SettingsPanel Title="Settings" OnCloseModalClick="OnCloseClick">
        @if (showMyAccount) {
            <SettingsTab Title="My account" Id="myAccount" IconTitle="person">
                <MyAccount/>
            </SettingsTab>
        }

        @if (showChatFolder) {
            <SettingsTab Title="Chat folder" Id="chatFolder" IconTitle="folder">
                <ChildContent>
                </ChildContent>
            </SettingsTab>
        }

        @if (showNotification) {
            <SettingsTab Title="Notification" Id="notification" IconTitle="bell">
                <ChildContent>
                </ChildContent>
            </SettingsTab>
        }

        @if (showLanguages) {
            <SettingsTab Title="Languages" Id="languages" IconTitle="language">
                <TitleContent>
                    <LanguageShortcut/>
                </TitleContent>
                <ChildContent>
                    <LanguageSettings/>
                </ChildContent>
            </SettingsTab>
        }

        @if (showThemeToggle) {
            <SettingsTab Title="Dark theme" TitleComment="Work in progress" HasSeparator="true" Id="darkTheme" IconTitle="night-mode" IsToggle="true">
                <TitleContent>
                    <ThemeToggle/>
                </TitleContent>
            </SettingsTab>
        }

        @if (showLogout) {
            <SettingsTab Title="Log out" Id="logOut" IconTitle="log-out">
                <ChildContent>
                </ChildContent>
            </SettingsTab>
        }
    </SettingsPanel>
    </Body>
    <Buttons>
    </Buttons>
</DialogFrame>

@code {
    private bool _enableIncompleteUI;

    [Inject] private Features Features { get; init; } = null!;
    [Inject] private Session Session { get; init; } = null!;
    [Inject] private AccountUI AccountUI { get; init; } = null!;

    [CascadingParameter] public Modal Modal { get; set; } = null!;
    [Parameter] public Model ModalModel { get; set; } = null!;

    protected override async Task OnInitializedAsync() {
        _enableIncompleteUI = await Features.Get<UIFeatures.EnableIncompleteUI, bool>(CancellationToken.None);
    }

    protected override ComputedState<AccountFull>.Options GetStateOptions()
        => new() {
            InitialValue = AccountUI.OwnAccount.Value,
            Category = GetStateCategory(),
        };

    protected override async Task<AccountFull> ComputeState(CancellationToken cancellationToken)
        => await AccountUI.OwnAccount.Use(cancellationToken).ConfigureAwait(false);

    private void OnCloseClick()
        => Modal.Close();

    public sealed record Model {
        public static Model Instance { get; } = new();
    }
}
