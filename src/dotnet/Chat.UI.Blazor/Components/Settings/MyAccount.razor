@inherits ComputedStateComponent<AccountFull>
@{
    var account = State.Value;
    if (ReferenceEquals(account, AccountFull.Loading))
        return;

    var avatar = account.Avatar;
}

<Tile>
    <TileItem IsHoverable="false" Class="first-tile-item">
        <Icon>
            <AccountBadge
                UserSid="@account.Id"
                Size="SquareSize.Size9"
                ShowPresence="false"
                NameClass="hidden" />
        </Icon>
        <Right>
            <TileButtons HideSetDefaultButton="true" OnEditClick="@OnEditClick"/>
        </Right>
        <Content>
            @account.FullName
        </Content>
        <Caption>
            Name
        </Caption>
    </TileItem>

    <TileItem>
        <Icon>
            <i class="icon-at text-xl"></i>
        </Icon>
        <Content>
            @account.Email
        </Content>
        <Caption>
            Email
        </Caption>
        <Right>
            <CopyToClipboard InputClass="hidden" ButtonClass="btn-sm transparent tile-hidden-btn" Text="@account.Email" HideCopiedTag="true"/>
        </Right>
    </TileItem>

    <TileItem>
        <Icon>
            <i class="icon-phone text-xl"></i>
        </Icon>
        <Right>
            <CopyToClipboard InputClass="hidden" ButtonClass="btn-sm transparent tile-hidden-btn" Text="+71234567890" HideCopiedTag="true"/>
        </Right>
        <Content>
            @account.Phone
        </Content>
        <Caption>
            Phone
        </Caption>
    </TileItem>

    <TileItem>
        <Icon>
            <i class="icon-info text-xl"></i>
        </Icon>
        <Content>
            @avatar.Bio
        </Content>
        <Caption>
            Bio
        </Caption>
    </TileItem>

    <LinkTileItem Link="@Links.User(account.Id)" Caption="Link to your account"/>
</Tile>

<TileTopic Topic="My avatars"/>

<OwnAvatarList Account="@account"/>

@code {
    [Inject] private Session Session { get; init; } = null!;
    [Inject] private IAccounts Accounts { get; init; } = null!;
    [Inject] private IAvatars Avatars { get; init; } = null!;
    [Inject] private ModalUI ModalUI { get; init; } = null!;
    [Inject] private UrlMapper UrlMapper { get; init; } = null!;

    protected override ComputedState<AccountFull>.Options GetStateOptions()
        => new() {
            InitialValue = AccountFull.Loading,
            Category = GetStateCategory(),
        };

    protected override Task<AccountFull> ComputeState(CancellationToken cancellationToken)
        => Accounts.GetOwn(Session, cancellationToken);

    private Task OnEditClick()
        => ModalUI.Show(OwnAccountEditorModal.Model.Default);
}
