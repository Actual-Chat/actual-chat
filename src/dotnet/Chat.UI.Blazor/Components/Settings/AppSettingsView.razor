<Tile Class="app-settings">
    @if (_autoStartState != null) {
        <TileItem Class="auto-start">
            <Icon>
                <i class="icon-settings text-xl"></i>
            </Icon>
            <Content>
                Auto-start on log-on
            </Content>
            <Caption>
                @if (_autoStartState.Fix != null) {
                    <span class="disable-reason active" @onclick="@(() => _autoStartState.Fix())">@_autoStartState.CanNotChangeReason</span>
                } else {
                    <span class="disable-reason">@_autoStartState.CanNotChangeReason</span>
                }
            </Caption>
            <Right>
                <Toggle
                    IsDisabled="@(!_autoStartState.CanChange)"
                    IsChecked="@_autoStartState.IsEnabled"
                    IsCheckedChanged="OnAutoStartChanged"
                    Class="toggle-sm"/>
            </Right>
        </TileItem>
    }
    <TileItem Class="quit" @onclick="OnQuitClick">
        <Icon>
            <i class="icon-close text-xl"></i>
        </Icon>
        <Content>
            Quit Actual Chat
        </Content>
    </TileItem>
</Tile>

@code {
    private AutoStartState? _autoStartState;

    [Inject] private ReloadUI ReloadUI { get; init; } = null!;

    [Parameter, EditorRequired] public INativeAppSettings NativeAppSettings { get; set; } = null!;

    protected override Task OnInitializedAsync()
        => UpdateAutoStart();

    private async Task UpdateAutoStart()
        => _autoStartState = await NativeAppSettings.GetAutoStartState();

    private async Task OnAutoStartChanged(bool isEnabled) {
        await NativeAppSettings.SetAutoStart(isEnabled);
        await UpdateAutoStart();
    }

    private void OnQuitClick() {
        throw new NotImplementedException();
    }

}
