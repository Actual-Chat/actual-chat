@namespace ActualChat.Chat.UI.Blazor.Components
@using ActualChat.Chat.UI.Blazor.Components.Notifications
@inherits ComputedStateComponent<LanguageSettings.Model>
@{
    var m = State.Value;
    if (ReferenceEquals(m, Model.Loading))
        return;

    var languages = m.Languages;
    _formModel.PrimaryLanguageId = languages.Primary.Id;
    _formModel.SecondaryLanguageId = languages.Secondary?.Id ?? "";
}

<TileTopic Topic="Languages"/>

<Tile>
    <Form Model="@_formModel">
        <DataAnnotationsValidator/>
        <ValidationSummary/>

        <FormBlock>
            <FormSection
                Class="field-transcription-primary-language"
                For="() => _formModel.PrimaryLanguageId"
                InputId="@_formModel.PrimaryLanguageFormId"
                IsLabelInsideInput="true"
                Label="My primary language">
                <InputSelect Value="_formModel.PrimaryLanguageId"
                             ValueExpression="@(() => _formModel.PrimaryLanguageId)"
                             ValueChanged="@((string languageId) => OnPrimaryChanged(languageId))">
                    @foreach (var language in Languages.All) {
                        <option value="@language.Id">@language.Title</option>
                    }
                </InputSelect>
            </FormSection>

            <FormSection
                Class="field-transcription-secondary-language"
                For="() => _formModel.SecondaryLanguageId"
                InputId="@_formModel.SecondaryLanguageFormId"
                IsLabelInsideInput="true"
                Label="My secondary language">
                <InputSelect Value="_formModel.SecondaryLanguageId"
                             ValueExpression="@(() => _formModel.SecondaryLanguageId)"
                             ValueChanged="@((string languageId) => OnSecondaryChanged(languageId))">
                    <option value="">None</option>
                    @foreach (var language in Languages.All) {
                        <option value="@language.Id">@language.Title</option>
                    }
                </InputSelect>
            </FormSection>
        </FormBlock>
    </Form>
</Tile>


@code {
    private FormModel _formModel = null!;

    [Inject] private LanguageUI LanguageUI { get; init; } = null!;
    [Inject] private ComponentIdGenerator ComponentIdGenerator { get; init; } = null!;

    protected override void OnInitialized() {
        base.OnInitialized();
        _formModel = new FormModel(ComponentIdGenerator);
    }

    protected override ComputedState<Model>.Options GetStateOptions()
        => new() {
            InitialValue = Model.Loading,
            Category = GetStateCategory(),
        };

    protected override async Task<Model> ComputeState(CancellationToken cancellationToken) {
        var languages = await LanguageUI.Settings.Use(cancellationToken);
        return new(languages);
    }

    private Language? GetLanguage(string id)
        => Languages.All.FirstOrDefault(c => c.Id == id);

    private void OnPrimaryChanged(string languageId) {
        var language = !languageId.IsNullOrEmpty() ? GetLanguage(languageId) : null;
        if (language.HasValue)
            SetPrimary(language.Value);
    }

    private void OnSecondaryChanged(string languageId) {
        var language = !languageId.IsNullOrEmpty() ? GetLanguage(languageId) : null;
        SetSecondary(language);
    }

    private void SetPrimary(Language language) {
        var languages = State.Value.Languages;
        if (languages.Secondary == language)
            languages = languages with { Secondary = languages.Primary };

        LanguageUI.UpdateSettings(languages with { Primary = language });
    }

    private void SetSecondary(Language? language) {
        var languages = State.Value.Languages;
        if (languages.Primary == language && languages.Secondary != null)
            languages = languages with { Primary = languages.Secondary.Value };

        LanguageUI.UpdateSettings(languages with { Secondary = language });
    }

    public sealed class FormModel {
        public string PrimaryLanguageId { get; set; } = "";
        public string SecondaryLanguageId { get; set; } = "";

        private string FormId { get; }
        public string PrimaryLanguageFormId { get; }
        public string SecondaryLanguageFormId { get; }

        public FormModel(ComponentIdGenerator componentIdGenerator) {
            FormId = componentIdGenerator.Next("new-chat-form");
            PrimaryLanguageFormId = $"{FormId}-primary-language";
            SecondaryLanguageFormId = $"{FormId}-secondary-language";
        }
    }

    // Nested types

    public sealed record Model(UserLanguageSettings Languages) {
        public static readonly Model Loading = new(new UserLanguageSettings());
    }
}
