@namespace ActualChat.UI.Blazor.Components
@using ActualChat.Search
@implements IModalView<ShareModalModel>

@{
    var shareDialogButtonsClass = _selectedChats.Count == 0 ? "" : "hidden";
    var editorClass = _selectedChats.Count == 0 ? "hidden" : "";
    _viewSettings.CanSubmit = _selectedChats.Count > 0;
}

<DialogFrame
    Class="share-modal"
    HasCloseButton="true"
    Title="@(ModalModel.Title.NullIfEmpty() ?? "Share")"
    NarrowViewSettings="_viewSettings">
    <Body>
    <SearchBoxNew
        Placeholder="Who would you like to share with"
        MaxLength="@Constants.Chat.MaxSearchFilterLength"
        TextChanged="@OnFilter"/>
    <ContactSelect
        SearchPhrase="_searchPhrase"
        SelectionChanged="OnSelectionChanged" />
    </Body>
    <Buttons>
        <div class="share-modal-footer">
            <ShareDialogButtons
                Class="@shareDialogButtonsClass"
                Title="@ModalModel.Title"
                Text="@ModalModel.Text"
                Link="@ModalModel.Link"
                LinkDescription="@ModalModel.LinkDescription" />
            <EmbeddedMessageEditor
                Class="@editorClass"
                Post="OnPost"/>
        </div>
    </Buttons>
</DialogFrame>


@code {
    private DialogFrameNarrowViewSettings _viewSettings = null!;
    private SearchPhrase _searchPhrase = "".ToSearchPhrase(true, false);
    private IReadOnlyCollection<ChatId> _selectedChats = Array.Empty<ChatId>();

    [Inject] private IServiceProvider Services { get; init; } = null!;

    [CascadingParameter] public Modal Modal { get; set; } = null!;
    [CascadingParameter] public ScreenSize ScreenSize { get; set; }
    [Parameter] public ShareModalModel ModalModel { get; set; } = null!;

    protected override void OnInitialized() {
        _viewSettings = DialogFrameNarrowViewSettings.SubmitButton(OnShareClicked, "Share");
        _viewSettings = _viewSettings with { ShouldHideButtons = false };
    }

    private void OnFilter(string filter) {
        _searchPhrase = filter.ToSearchPhrase(true, false);
        StateHasChanged();
    }

    private void OnSelectionChanged(IReadOnlyCollection<ChatId> selectedChats) {
        _selectedChats = selectedChats;
    }

    private Task OnShareClicked()
        => ShareWithContacts();

    private Task OnPost(string message)
        => ShareWithContacts(message);

    private async Task ShareWithContacts(string message = "")
    {
        var text = ModalModel.Text.NullIfEmpty() ?? ModalModel.Link?.ToString() ?? "";

        var session = Services.Session();
        var uiCommander = Services.UICommander();
        foreach (var chatId in _selectedChats) {
            var cmd = new Chats_UpsertTextEntry(session, chatId, null, text);
            _ = await uiCommander.Run(cmd, CancellationToken.None);

            if (!message.IsNullOrEmpty()) {
                var cmd2 = new Chats_UpsertTextEntry(session, chatId, null, message);
                _ = await uiCommander.Run(cmd2, CancellationToken.None);
            }
        }

        Modal.Close(true);

        var history = Services.GetRequiredService<History>();
        await history.NavigateTo(Links.Chat(_selectedChats.First()));
    }
}
