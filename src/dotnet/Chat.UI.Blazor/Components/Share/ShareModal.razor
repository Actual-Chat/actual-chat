@namespace ActualChat.Chat.UI.Blazor.Components
@using ActualChat.Search
@implements IModalView<ShareModalModel>
@{
    var canSend = HasSelectedItems;
    var shareExternallyButtonClass = !canSend && !_hideShareExternallyButton ? "" : "hidden";
    var shareButtonClass = !canSend ? "hidden" : "";
    shareButtonClass += " btn-modal btn-primary share-button";
    var cls = "share-modal";
    if (_selectorKind == SelectorKind.Contact)
        cls += " share-modal-with-contact-selector";
    else if (_selectorKind == SelectorKind.Members)
        cls += " share-modal-with-member-selector";
}

<DialogFrame
    Class="@cls"
    HasCloseButton="true"
    Title="@(ModalModel.Title.NullIfEmpty() ?? "Share")"
    NarrowViewSettings="@DialogFrameNarrowViewSettings.Stretch">
    <Body>
    <FormBlock class="with-contact-list">
        @if (_selectorKind == SelectorKind.Contact) {
            <ContactSelector
                @ref="@_contactSelectorRef"
                SearchPhrase="_searchPhrase"
                ChatListPreOrder="@ChatListPreOrder.ChatList"
                Changed="@StateHasChanged">
                <SearchBox
                    Placeholder="Who would you like to share with"
                    MaxLength="@Constants.Chat.MaxSearchFilterLength"
                    TextChanged="@OnFilter"/>
                <ContactSelectorPlacePicker/>
                <ContactSelectorListView/>
            </ContactSelector>
        }
        else if (_selectorKind == SelectorKind.Members) {
            <MemberSelector
                @ref="_memberSelectorRef"
                DataProvider="@_memberSelectorDataProvider"
                SearchBoxPlaceholder="Who would you like to share with"
                Changed="@(() => StateHasChanged())" />
        }
    </FormBlock>
    </Body>
    <Footer>
        <EmbeddedMessageEditor
            Text="@_comment"
            IsTransparent="@true"
            Placeholder="Add your comment (optional)"
            PlaceholderIcon="icon-message-ellipse"
            TextChanged="OnCommentChanged" />
        @if (ModalModel.Request.HasLink(out var link)) {
            <input type="hidden" @ref="@_copyTextSourceRef" value="@RequestWithComment.GetShareTextAndLink(UrlMapper)" />
            @if (!_copyTextSourceRef.Id.IsNullOrEmpty()) {
                <ShareLinkBadge Link="@link" CopyTextSource="@_copyTextSourceRef"/>
            }
        }
    </Footer>
    <Buttons>
        <ShareExternallyButton
            Class="@shareExternallyButtonClass"
            Request="@RequestWithComment"
            />
        <Button Class="@shareButtonClass" IsDisabled="@(!canSend)" Click="OnSendClicked">
            <IconContent><i class="icon-share text-2xl"></i></IconContent>
            <TitleContent>Send to selected contacts</TitleContent>
        </Button>
    </Buttons>
</DialogFrame>


@code {
    private ContactSelector? _contactSelectorRef;
    private MemberSelector? _memberSelectorRef;
    private SearchPhrase _searchPhrase = SearchPhrase.None;
    private string _comment = "";
    private ElementReference _copyTextSourceRef;
    private SelectorKind _selectorKind = SelectorKind.Contact;
    private IMemberSelectorDataProvider? _memberSelectorDataProvider;
    private bool _hideShareExternallyButton;

    private bool HasSelectedItems
        => (_contactSelectorRef?.SelectedChatIds.Value.Count
            ?? _memberSelectorRef?.SelectedUserIds.Value.Count ?? 0) > 0;
    private ShareRequest RequestWithComment => ModalModel.Request.WithText(_comment);

    [Inject] private ChatUIHub Hub { get; init; } = null!;
    private UrlMapper UrlMapper => Hub.UrlMapper();
    private Session Session => Hub.Session();
    private UICommander UICommander => Hub.UICommander();
    private IPlaces Places => Hub.Places;
    private UserId OwnAccountId => Hub.AccountUI.OwnAccount.Value.Id;

    [CascadingParameter] public Modal Modal { get; set; } = null!;
    [Parameter] public ShareModalModel ModalModel { get; set; } = null!;

    protected override void OnInitialized()
        => _comment = ModalModel.Request.Text;

    protected override async Task OnInitializedAsync() {
        if (ModalModel.SelectorPrefs is PrivatePlaceMembersShareSelector selector) {
            var placeId = selector.ChatId.PlaceId;
            if (!placeId.IsNone) {
                _selectorKind = SelectorKind.Unknown;
                var place = await Places.Get(Session, placeId, default).ConfigureAwait(false);
                if (place?.IsPublic == false) {
                    _memberSelectorDataProvider = new PlaceMemberProvider(Hub, placeId, new [] { OwnAccountId });
                    _hideShareExternallyButton = true;
                    _selectorKind = SelectorKind.Members;
                } else {
                    _selectorKind = SelectorKind.Contact;
                }
            }
        }
    }

    protected override void OnAfterRender(bool firstRender) {
        if (firstRender) {
            // Trigger StateHasChanged to render ShareLinkBadge with CopyTextSource reference
            StateHasChanged();
        }
    }

    // Event handlers

    private void OnFilter(string filter) {
        _searchPhrase = filter.ToSearchPhrase(true, false);
        StateHasChanged();
    }

    private async Task OnSendClicked() {
        var text = RequestWithComment.GetShareTextAndLink(UrlMapper);
        IEnumerable<ChatId> selectedChatIds = ImmutableHashSet<ChatId>.Empty;
        if (_selectorKind == SelectorKind.Contact)
            selectedChatIds = _contactSelectorRef?.SelectedChatIds.Value ?? ImmutableHashSet<ChatId>.Empty;
        else if (_selectorKind == SelectorKind.Members) {
            var ownUserId = OwnAccountId;
            var selectedUserIds = _memberSelectorRef?.SelectedUserIds.Value ?? ImmutableHashSet<UserId>.Empty;
            selectedChatIds = selectedUserIds.Select(userId => new PeerChatId(ownUserId, userId).ToChatId());
        }

        foreach (var chatId in selectedChatIds) {
            var cmd = new Chats_UpsertTextEntry(Session, chatId, null, text);
            _ = await UICommander.Run(cmd, CancellationToken.None);
        }
        Modal.Close(true);
    }

    private void OnCommentChanged(string text)
        => _comment = text;

    private enum SelectorKind { Unknown, Contact, Members }
}
