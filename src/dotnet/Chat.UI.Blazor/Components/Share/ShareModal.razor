@namespace ActualChat.Chat.UI.Blazor.Components
@using ActualChat.Search
@implements IModalView<ShareModalModel>
@{
    var selectedChatIds = SelectedChatIds;
    var shareDialogButtonsClass = selectedChatIds.Count == 0 ? "" : "hidden";
    var shareButtonClass = selectedChatIds.Count == 0 ? "hidden" : "";
    shareButtonClass += " btn-modal btn-primary share-button";
    var canSend = selectedChatIds.Count > 0;
}

<DialogFrame
    Class="share-modal"
    HasCloseButton="true"
    Title="@(ModalModel.Title.NullIfEmpty() ?? "Share")"
    NarrowViewSettings="@DialogFrameNarrowViewSettings.Stretch">
    <Body>
    <FormBlock>
        <ContactSelector
            @ref="@_contactSelectorRef"
            SearchPhrase="_searchPhrase"
            Changed="@StateHasChanged">
            <SearchBoxNew
                Placeholder="Who would you like to share with"
                MaxLength="@Constants.Chat.MaxSearchFilterLength"
                TextChanged="@OnFilter"/>
            <ContactSelectorList/>
        </ContactSelector>
    </FormBlock>
    </Body>
    <Footer>
        <EmbeddedMessageEditor
            Text="@_comment"
            Placeholder="Add your comment (optional)"
            TextChanged="OnCommentChanged" />
        @if (ModalModel.Request.HasLink(out var link)) {
            <input type="hidden" @ref="@_copyTextSourceRef" value="@RequestWithComment.GetShareTextAndLink(UrlMapper)" />
            @if (!_copyTextSourceRef.Id.IsNullOrEmpty()) {
                <ShareLinkBadge Link="@link" CopyTextSource="@_copyTextSourceRef"/>
            }
        }
    </Footer>
    <Buttons>
        <ShareExternallyButton
            Class="@shareDialogButtonsClass"
            Request="@RequestWithComment"
            />
        <Button Class="@shareButtonClass" IsDisabled="@(!canSend)" Click="OnSendClicked">
            <i class="icon-share text-2xl"></i>
            <span>Send to selected contacts</span>
        </Button>
    </Buttons>
</DialogFrame>


@code {
    private ContactSelector? _contactSelectorRef;
    private SearchPhrase _searchPhrase = SearchPhrase.None;
    private string _comment = "";
    private ElementReference _copyTextSourceRef;

    private IReadOnlySet<ChatId> SelectedChatIds
        => _contactSelectorRef?.SelectedChatIds.Value ?? ImmutableHashSet<ChatId>.Empty;
    private ShareRequest RequestWithComment => ModalModel.Request.WithText(_comment);

    [Inject] private IServiceProvider Services { get; init; } = null!;
    [Inject] private UrlMapper UrlMapper { get; init; } = null!;

    [CascadingParameter] public Modal Modal { get; set; } = null!;
    [CascadingParameter] public ScreenSize ScreenSize { get; set; }
    [Parameter] public ShareModalModel ModalModel { get; set; } = null!;

    protected override void OnInitialized()
        => _comment = ModalModel.Request.Text;

    protected override void OnAfterRender(bool firstRender) {
        if (firstRender) {
            // Trigger StateHasChanged to render ShareLinkBadge with CopyTextSource reference
            StateHasChanged();
        }
    }

    // Event handlers

    private void OnFilter(string filter) {
        _searchPhrase = filter.ToSearchPhrase(true, false);
        StateHasChanged();
    }

    private async Task OnSendClicked() {
        var text = RequestWithComment.GetShareTextAndLink(UrlMapper);
        var session = Services.Session();
        var uiCommander = Services.UICommander();
        var selectedChatIds = SelectedChatIds;
        foreach (var chatId in selectedChatIds) {
            var cmd = new Chats_UpsertTextEntry(session, chatId, null, text);
            _ = await uiCommander.Run(cmd, CancellationToken.None);
        }
        Modal.Close(true);
        if (selectedChatIds.Count != 0) {
            var history = Services.GetRequiredService<History>();
            await history.WhenNavigationCompleted();
            await history.NavigateTo(Links.Chat(selectedChatIds.First()));
        }
    }

    private void OnCommentChanged(string text)
        => _comment = text;
}
