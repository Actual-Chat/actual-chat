@namespace ActualChat.Chat.UI.Blazor.Components
@inherits ComputedStateComponent<ChatActivities.Model>
@{
    var m = State.Value;
    var size = ScreenSize.IsNarrow() ? SquareSize.Size8 : SquareSize.Size6;
}

<AuthorCircleGroup
    Class="chat-activity-panel"
    MaxIconCount="@MaxIconCount"
    Size="@size"
    AuthorSids="@m.RecordingAuthorSids" />

@code {
    [Inject] private ChatUIHub Hub { get; set; } = null!;
    private IAuthors Authors => Hub.Authors;
    private ChatActivity ChatActivity => Hub.ChatActivity;

    private IChatStreamingActivity? ChatRecordingActivity { get; set; }

    [CascadingParameter] public ScreenSize ScreenSize { get; set; }

    [Parameter, EditorRequired] public Chat Chat { get; set; } = null!;
    [Parameter] public int MaxIconCount { get; set; } = 5;

    public override async ValueTask DisposeAsync() {
        await base.DisposeAsync();
        ChatRecordingActivity?.Dispose();
    }

    protected override async Task OnParametersSetAsync() {
        ChatRecordingActivity?.Dispose();
        ChatRecordingActivity = Chat.Id.IsNone ? null
            : await ChatActivity.GetStreamingActivity(Chat.Id, CancellationToken.None);
        await base.OnParametersSetAsync();
    }

    protected override ComputedState<Model>.Options GetStateOptions()
        => ComputedStateComponent.GetStateOptions(GetType(),
            static t => new ComputedState<Model>.Options() {
                InitialValue = Model.None,
                Category = ComputedStateComponent.GetStateCategory(t),
            });

    protected override async Task<Model> ComputeState(CancellationToken cancellationToken) {
        if (ChatRecordingActivity == null)
            return Model.None;

        var authorIds = await ChatRecordingActivity.GetStreamingAuthorIds(cancellationToken).ConfigureAwait(false);
        return new() {
            RecordingAuthorSids = authorIds
                .Select(id => id.Value)
                .ToList(),
        };
    }

    // Nested types

    public sealed class Model {
        public static readonly Model None = new();

        public List<string> RecordingAuthorSids { get; init; } = [];
    }
}
