@using Stl.Extensibility
@implements IModalView<InviteChatAuthor.Model>
@implements IDisposable
@attribute [MatchFor(typeof(Model), typeof(IModalView))]

<DialogFrame Class="invite-chat-author-modal" Title="Invite users" HasCloseButton="true">
    <Body>
    <div class="flex-y h-full w-full">
        <div class="relative text-placeholder -ml-0.5">
            <span class="absolute inset-y-0 left-1 flex items-center">
                <button type="submit" class="focus:outline-none focus:shadow-outline">
                    <svg fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" viewBox="0 0 24 24" class="w-6 h-6">
                        <path d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
                    </svg>
                </button>
            </span>
            <input type="search"
                   name="q"
                   @oninput="OnFilter"
                   placeholder="Search..."
                   autocomplete="off">
        </div>
        <div class="flex-1 overflow-y-auto custom-scrollbar mt-2 max-h-[60vh] min-h-[60vh]">
            @foreach (var contact in FilteredChatContacts) {
                <div class="flex-x w-full gap-x-2 hover:bg-02"
                     @key="@contact.Author.Id"
                     @onclick="() => OnContactClick(contact)">
                    @if (contact.IsExisting) {
                        <Checkbox Checked="true" Disabled="true" Class="self-center ml-4"/>
                    } else {
                        <Checkbox Checked="@contact.IsChecked" Class="self-center ml-4"/>
                    }
                    <AuthorBadge
                        Author="@contact.Author"
                        Presence="@contact.Presence"
                        Size="SquareSize.Size8"/>
                </div>
            }
        </div>
    </div>
    </Body>
    <Buttons>
        <div class="btn-group">
            <Button
                Click="OnCancel"
                Class="btn-outline">
                Cancel
            </Button>
            <Button
                Click="OnInvite"
                Type="@ButtonType.Submit"
                IsDisabled="@(!CanInvite)"
                Class="btn-primary">
                Invite
            </Button>
        </div>
    </Buttons>
</DialogFrame>

@code {
    [Inject] private Session Session { get; init; } = null!;
    [Inject] private IUserContacts UserContacts { get; init; } = null!;
    [Inject] private IAccounts Accounts { get; init; } = null!;
    [Inject] private IChatAuthors ChatAuthors { get; init; } = null!;
    [Inject] private IUserPresences UserPresences { get; init; } = null!;
    [Inject] private UICommander UICommander { get; init; } = null!;

    [CascadingParameter] public BlazoredModalInstance ModalInstance { get; set; } = null!;
    [Parameter] public Model ModalModel { get; set; } = null!;

    private Contact[] FilteredChatContacts { get; set; } = Array.Empty<Contact>();
    private Contact[] AllChatContacts { get; set; } = Array.Empty<Contact>();
    private bool CanInvite { get; set; }
    private CancellationTokenSource DisposeTokenSource { get; } = new();

    protected override async Task OnInitializedAsync() {
        var existingChatUserIds = new HashSet<Symbol>(
            await ChatAuthors
                .ListUserIds(Session, ModalModel.Chat.Id, DisposeTokenSource.Token));

        var contacts = await UserContacts.List(Session, DisposeTokenSource.Token).ConfigureAwait(false);
        var resolvedContacts = await contacts
            .Select(async userContact => {
                var userAuthor = await Accounts.GetUserAuthor(userContact.TargetUserId, DisposeTokenSource.Token).ConfigureAwait(false);
                if (userAuthor == null)
                    return null;

                if (string.IsNullOrWhiteSpace(userAuthor.Picture)) {
                    userAuthor = userAuthor with {
                        Picture = $"https://avatars.dicebear.com/api/avataaars/{userAuthor.Name}.svg",
                    };
                }

                var presence = await UserPresences.Get(userContact.TargetUserId, DisposeTokenSource.Token).ConfigureAwait(false);
                return new Contact(userAuthor, presence, existingChatUserIds.Contains(userAuthor.Id));
            })
            .Collect()
            .ConfigureAwait(false);

        AllChatContacts = resolvedContacts
            .SkipNullItems()
            .OrderBy(x => x.Author.Name)
            .ToArray();
        FilteredChatContacts = AllChatContacts;
    }

    public void Dispose() => DisposeTokenSource.Cancel();

    private async Task OnInvite() {
        CanInvite = false;

        var userIds = AllChatContacts
            .Where(x => !x.IsExisting && x.IsChecked)
            .Select(x => x.Author.Id.Value)
            .ToArray();
        var createChatAuthorsCommand = new IChatAuthors.CreateChatAuthorsCommand(Session, ModalModel.Chat.Id, userIds);
        await UICommander.Run(createChatAuthorsCommand, DisposeTokenSource.Token).ConfigureAwait(false);
        await ModalInstance.CloseAsync().ConfigureAwait(false);
    }

    private async Task OnCancel() => await ModalInstance.CancelAsync().ConfigureAwait(false);

    private void OnFilter(ChangeEventArgs args) {
        var filter = args.Value?.ToString();
        FilteredChatContacts = string.IsNullOrWhiteSpace(filter)
            ? AllChatContacts.ToArray()
            : AllChatContacts
                .Where(x => x.Author.Name.OrdinalIgnoreCaseContains(filter))
                .ToArray();
    }

    private void OnContactClick(Contact contact) {
        if (contact.IsExisting)
            return;

        contact.IsChecked = !contact.IsChecked;
        CanInvite = AllChatContacts.Any(x => !x.IsExisting && x.IsChecked);
    }

    private sealed class Contact {
        public UserAuthor Author { get; }
        public bool IsExisting { get; }
        public Presence Presence { get; }
        public bool IsChecked { get; set; }

        public Contact(UserAuthor author, Presence presence, bool isExisting) {
            Author = author;
            Presence = presence;
            IsExisting = isExisting;
            IsChecked = isExisting;
        }
    }

    public sealed record Model(Chat Chat);
}
