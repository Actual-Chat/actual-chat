@using ActualChat.Chat.UI.Blazor.Services
@inherits ComputedStateComponent<ChatHeaderPanel.Model>

@namespace ActualChat.Chat.UI.Blazor.Components

@{
    var model = State.LatestNonErrorValue;
    var chats = model.Chats;
}

<div class="w-full mx-1 justify-center z-20 bg-primary rounded-b-md border-accent md:bg-secondary shadow-md text-left">
    @foreach (var chat in chats) {
        <div class="p-1 px-4 text-sm hover:bg-accent">
            <div>
                <a href="/chat/@chat.Url">@chat.Name</a>
            </div>
        </div>
    }
</div>

@code {
    public class Model
    {
        public (string Name, string Url)[] Chats { get; set; } = new (string Name, string Url)[0];
    }

    [Inject] private Session Session { get; set; } = null!;
    [Inject] private IChats Chats { get; set; } = null!;
    [Inject] private ChatAuthorListeningChats ListeningChats { get; set; } = null!;

    protected override ComputedState<Model>.Options GetStateOptions()
        => new() { InitialValue = new () };

    protected override async Task<Model> ComputeState(CancellationToken cancellationToken) {
        var chatIds = ListeningChats.ListeningChatIds;
        var chats = await GetListeningChatsByIds(chatIds, cancellationToken);
        return new () {
            Chats = chats.OrderBy(c => c.Title).Select(c => (Name:c.Title, Url:(string)c.Id)).ToArray(),
        };
    }

    private async Task<List<Chat>> GetListeningChatsByIds(List<string> chatIds, CancellationToken cancellationToken) {
        var chats = new List<Chat>();
        foreach (var chatId in chatIds.Where(chatId => !string.IsNullOrWhiteSpace(chatId)))
        {
            var chat = await Chats.Get(Session, chatId, cancellationToken);
            if (chat != null && !chats.Contains(chat)) {
                chats.Add(chat);
            }
        }
        return chats;
    }

    protected override void OnInitialized() {
        base.OnInitialized();
        ListeningChats.Updated += ListeningChatsOnUpdated;
    }

    private void ListeningChatsOnUpdated(object? sender, EventArgs e) {
        State.Recompute();
    }

    public override ValueTask DisposeAsync() {
        ListeningChats.Updated -= ListeningChatsOnUpdated;
        return base.DisposeAsync();
    }
}
