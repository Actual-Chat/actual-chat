@using ActualChat.Chat.UI.Blazor.Services
@inherits ComputedStateComponent<ChatHeaderPanel.Model>

@namespace ActualChat.Chat.UI.Blazor.Components

@{
    var model = State.LatestNonErrorValue;
    var chats = model.Chats;
}

<div class="absolute w-full z-20 bg-primary -mt-3 rounded-b-md border-accent md:bg-secondary shadow-lg text-left">
    @foreach (var chat in chats) {
        <div class="p-1 px-4 text-xs hover:bg-primary">
            <div>
                <a href="/chat/@chat.Url">@chat.Name</a>
            </div>
        </div>
    }
    @if (model.AddDefault) {
        <div class="p-1 px-4 text-xs text-sm hover:bg-primary">
            <div>
                <a href="@($"/chat/{Constants.Chat.DefaultChatId}")">The Actual One</a>
            </div>
        </div>
    }
</div>

@code {
    public class Model
    {
        public (string Name, string Url)[] Chats { get; set; } = new (string Name, string Url)[0];
        public bool AddDefault { get; set; } = true;
    }

    [Inject] private Session Session { get; set; } = null!;
    [Inject] private IChats Chats { get; set; } = null!;
    [Inject] private ChatAuthorListeningChats ListeningChats { get; set; } = null!;

    [Inject]
    private ChatPlayers Players { get; set; } = null!;

    protected override ComputedState<Model>.Options GetStateOptions()
        => new() { InitialValue = new () };

    protected override async Task<Model> ComputeState(CancellationToken cancellationToken) {
        var chats = ListeningChats.ListeningChats;
        return new () {
            Chats = chats.OrderBy(c => c.Title).Select(c => (Name:c.Title, Url:(string)c.Id)).ToArray(),
            AddDefault = chats.Count == 0 || chats.All(c => c.Id != Constants.Chat.DefaultChatId)
        };
    }
}
