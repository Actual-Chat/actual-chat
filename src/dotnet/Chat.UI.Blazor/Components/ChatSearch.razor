@namespace ActualChat.Chat.UI.Blazor.Components

@if (!_isSearchEnabled) {
    return;
}

<ChatSearchBox
    Placeholder="Search in this chat..."
    IsCollapsed="true"
    ShowSpinner="true"
    ShowClose="true"
    MaxLength="@Constants.Chat.MaxSearchFilterLength"
    Triggered="OnSearchTriggered"
    Cancelled="OnSearchCancelled"/>

@code{
    private bool _isSearchEnabled;
    private ChatEntry? _lastFoundEntry;
    private string? _lastSearchText;

    [Inject] private IChats Chats { get; init; } = null!;
    [Inject] private Session Session { get; init; } = null!;
    [Inject] private UIEventHub UIEventHub { get; init; } = null!;
    [Inject] private ChatUI ChatUI { get; init; } = null!;
    [Inject] private Features Features { get; init; } = null!;

    [Parameter, EditorRequired] public Chat Chat { get; set; } = null!;

    protected override async Task OnInitializedAsync() {
        _isSearchEnabled = await Features.Get<UIFeatures.EnableChatMessageSearchUI, bool>(CancellationToken.None);
    }

    private async Task OnSearchTriggered(string text) {
        var chatId = Chat.Id;
        if (!OrdinalEquals(text, _lastSearchText))
            _lastFoundEntry = null;
        var nextEntry = await Chats.FindNext(Session, chatId, _lastFoundEntry?.LocalId, text, CancellationToken.None);
        if (nextEntry == null)
            return;

        ChatUI.HighlightEntry(nextEntry.Id, navigate: true);
        _lastFoundEntry = nextEntry;
        _lastSearchText = text;
    }

    private void OnSearchCancelled()
        => _lastFoundEntry = null;
}
