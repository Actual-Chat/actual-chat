@inherits ComputedStateComponent<ChatAuthorList.Model>
@{
    var m = State.LatestNonErrorValue;
}

<div class="flex-y w-full space-y-3">
    <div class="flex-x w-full">
        <div class="flex items-center">
            <div class="text-secondary text-sm uppercase font-medium">Users</div>
        </div>
        <div class="flex-1">
        </div>
        <div class="flex">
            <ButtonSquare OnClick="OnAddAuthorClick" Title="Invite user">
                <i class="fa fa-user-plus fa-fw" aria-hidden="true"></i>
            </ButtonSquare>
        </div>
    </div>
    @foreach (var authorId in m.AuthorIds) {
        <ChatAuthorBadge
            AuthorId="@authorId"
            Size="PersonCircleSize.Size12"
            ShowsPresence="true"
            OnClick="() => OnChatAuthorClick(authorId)"
            TextClass="text-sm font-medium text-primary select-none"/>
    }
</div>

@code {
    [Inject] private IChatAuthors Authors { get; init; } = null!;
    [Inject] private Session Session { get; init; } = null!;
    [Inject] private ModalUI ModalUI { get; init; } = null!;

    [CascadingParameter] public Chat Chat { get; set; } = null!;

    protected override ComputedState<Model>.Options GetStateOptions()
        => new() { InitialValue = Model.None };

    protected override async Task<Model> ComputeState(CancellationToken cancellationToken) {
        var authorIds = await Authors.GetAuthorIds(Session, Chat.Id, cancellationToken);
        return new() {
            AuthorIds = authorIds,
        };
    }

    private void OnAddAuthorClick() => ModalUI.Show(new InviteChatAuthor.Model(Chat));

    private void OnChatAuthorClick(string authorId) => ModalUI.Show(new ChatAuthorCard.Model(authorId));

    public sealed class Model {
        public static Model None { get; } = new();
        public ImmutableArray<string> AuthorIds { get; init; } = ImmutableArray<string>.Empty;
    }
}
