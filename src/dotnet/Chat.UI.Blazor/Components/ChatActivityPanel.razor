@namespace ActualChat.Chat.UI.Blazor.Components
@using ActualChat.Chat.UI.Blazor.Services
@inherits ComputedStateComponent<ChatActivityPanel.Model>

<div class="chat-activity-panel inline-flex mr-2">
@{
    var model = State.LatestNonErrorValue;
    var recording = model.Recording;
    var zIndex = 1;
    var range = MaxIconCount > recording.Length ? recording.Length : MaxIconCount;
    for (var i = 0; i < range; i++) {
        var author = recording[i];
        var picture = author.Picture;
        if (string.IsNullOrWhiteSpace(picture))
            // we don't want to bring System.Security.Cryptography to wasm, so just use hashcode
            picture = $"https://avatars.dicebear.com/api/avataaars/{author.Name.GetHashCode()}.svg";
        <div class="author-badge w-6 h-6 -mr-2 select-none bg-secondary rounded-full border border-primary" style="z-index: @zIndex;">
            <img src="@picture" alt="@author.Name" title="@author.Name" class="rounded-full"/>
        </div>
        zIndex++;
    }
    if (recording.Length > MaxIconCount) {
        if (recording.Length < 11) {
            <div class="author-badge w-6 h-6 -mr-1.5 select-none bg-avatar rounded-full text-center text-accent-muted" style="z-index: @(range + 1);">
                <div class="text-sm">+@(recording.Length - MaxIconCount)</div>
            </div>
        } else {
            <div class="author-badge w-6 h-6 -mr-2 select-none bg-avatar rounded-full border border-primary text-center text-accent-muted" style="z-index: @(range + 1);">
                <div class="text-sm">...</div>
            </div>
        }
    }
}
</div>

@code {
    [Inject] private IChatAuthors ChatAuthors { get; init; } = null!;
    [Inject] private ChatActivity ChatActivity { get; init; } = null!;
    private IChatRecordingActivity? ChatRecordingActivity { get; set; }

    [CascadingParameter] public Chat Chat { get; set; } = null!;
    [Parameter] public int MaxIconCount { get; set; } = 5;

    public override async ValueTask DisposeAsync() {
        await base.DisposeAsync();
        ChatRecordingActivity?.Dispose();
    }

    protected override async Task OnParametersSetAsync() {
        ChatRecordingActivity?.Dispose();
        ChatRecordingActivity = await ChatActivity.GetRecordingActivity(Chat.Id, CancellationToken.None);
        await base.OnParametersSetAsync();
    }

    protected override ComputedState<Model>.Options GetStateOptions()
        => new() { InitialValue = Model.None };

    protected override async Task<Model> ComputeState(CancellationToken cancellationToken) {
        if (ChatRecordingActivity == null)
            return Model.None;

        var authorIds = await ChatRecordingActivity.GetActiveAuthorIds(cancellationToken);
        var authorTasks = authorIds.Select(id => ChatAuthors.GetAuthor(Chat.Id, id, true, cancellationToken));
        var authors = await Task.WhenAll(authorTasks);
        return new() {
            Recording = authors.Where(a => a != null).ToArray()!,
        };
    }

    public sealed class Model {
        public static Model None { get; } = new();

        public Author[] Recording { get; init; } = Array.Empty<Author>();
    }
}
