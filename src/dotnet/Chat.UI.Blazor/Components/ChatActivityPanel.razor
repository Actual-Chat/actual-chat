@namespace ActualChat.Chat.UI.Blazor.Components
@using ActualChat.Chat.UI.Blazor.Services
@inherits ComputedStateComponent<ChatActivityPanel.ChatActivityPanelState>

<div class="inline-flex">

    @{
        var speaking = State.LatestNonErrorValue?.Speaking;
        if (speaking != null) {
            foreach (var author in speaking) {
                var picture = author.Picture;
                if (string.IsNullOrWhiteSpace(picture))
                    // we don't want to bring System.Security.Cryptography to wasm, so just use hashcode
                    picture = $"https://avatars.dicebear.com/api/avataaars/{author.Name.GetHashCode()}.svg";

                <div class="author-avatar w-6 h-6 mx-1 select-none bg-secondary rounded-md">
                    <img src="@picture" alt="@author.Name" title="@author.Name"/>
                </div>
            }
        }
    }
</div>

@code {
    [CascadingParameter]
    public Chat Chat { get; set; } = null!;

    [Inject]
    public ChatActivities ChatActivities { get; set; } = null!;
    [Inject]
    public IChatAuthors ChatAuthors { get; set; } = null!;

    private ChatActivityState? ChatActivityState { get; set; }

    protected override async Task OnParametersSetAsync() {
        await base.OnParametersSetAsync();
        ChatActivityState = await ChatActivities.GetRecordingActivity(Chat.Id);
    }

    protected override async Task<ChatActivityPanelState> ComputeState(CancellationToken cancellationToken) {
        if (ChatActivityState == null)
            return new() { Speaking = new() };

        var recordingActivity = await ChatActivityState.CurrentActivity.Use(cancellationToken);
        var authorTasks = recordingActivity
            .Select(ra => ChatAuthors.GetAuthor(Chat.Id, ra.AuthorId, true, cancellationToken));
        var authors = await Task.WhenAll(authorTasks);

        return new() {
            Speaking = authors.Where(a => a != null).ToList()!,
        };
    }

    public override async ValueTask DisposeAsync() {
        await base.DisposeAsync();

        ChatActivityState?.Dispose();
        GC.SuppressFinalize(this);
    }

    public class ChatActivityPanelState {
        public List<Author> Speaking { get; init; } = null!;
    }
}
