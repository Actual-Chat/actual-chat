@namespace ActualChat.Chat.UI.Blazor.Components
@inherits ComputedStateComponent<Symbol>
@{
    var isRecording = RecordingChatId == ChatId;
    var cls = $"recording-in-chat {(isRecording ? "on" : "off")} {Class}";
}

@if (isRecording) {
    <Tooltip Text="Stop" Position="TooltipPosition.Top">
        <ButtonRound
            Class="@cls"
            Click="_ => RecordingChatId = Symbol.Empty">
            <i class="icon-mic text-2xl"></i>
        </ButtonRound>
    </Tooltip>
} else {
    <Tooltip Text="Start" Position="TooltipPosition.Top">
        <ButtonRound
            Class="@cls"
            Click="_ => RecordingChatId = ChatId">
            <i class="icon-mic text-2xl"></i>
        </ButtonRound>
    </Tooltip>
}

@code {
    [Inject] private ChatUI ChatUI { get; init; } = null!;

    [Parameter] public string ChatId { get; set; } = "";
    [Parameter] public string Class { get; set; } = "";

    private Symbol RecordingChatId {
        get => State.ValueOrDefault;
        set => _ = ChatUI.SetRecordingState(value);
    }

    protected override ComputedState<Symbol>.Options GetStateOptions()
        => new() { UpdateDelayer = UpdateDelayer.ZeroDelay };

    protected override async Task<Symbol> ComputeState(CancellationToken cancellationToken)
        => await ChatUI.RecordingChatId.Use(cancellationToken).ConfigureAwait(false);
}
