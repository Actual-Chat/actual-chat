@namespace ActualChat.Chat.UI.Blazor.Components
@inherits ComputedStateComponent<bool>
@{
    var isRecording = State.Value;
    var cls = $"recording-in-chat {(isRecording ? "on" : "off")} {Class}";
}

@if (isRecording) {
    <ButtonRound
        Class="@cls"
        ContentClass="!bg-transparent"
        Click="@(_ => ChatUI.SetRecordingChatId(default))"
        Tooltip="Stop"
        FloatingPosition="FloatingPosition.Top">
        <i class="icon-mic text-2xl"></i>
    </ButtonRound>
} else {
    <ButtonRound
        Class="@cls"
        ContentClass="!bg-transparent"
        Click="@(_ => ChatUI.SetRecordingChatId(ChatId))"
        Tooltip="Start"
        FloatingPosition="FloatingPosition.Top">
        <i class="icon-mic text-2xl"></i>
    </ButtonRound>
}

@code {
    [Inject] private ChatUI ChatUI { get; init; } = null!;

    [Parameter] public string Class { get; set; } = "";
    [Parameter, EditorRequired] public ChatId ChatId { get; set; }

    protected override ComputedState<bool>.Options GetStateOptions()
        => new() { UpdateDelayer = FixedDelayer.Instant };

    protected override async Task<bool> ComputeState(CancellationToken cancellationToken) {
        var chat = await ChatUI.GetState(ChatId, false, cancellationToken).ConfigureAwait(false);
        return chat?.IsRecording ?? false;
    }

}
