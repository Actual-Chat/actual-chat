@using Stl.Extensibility
@implements IModalView<DeleteMessageModal.Model>
@attribute [MatchFor(typeof(Model), typeof(IModalView))]
@{
    var model = ModalModel.MessageModel;
}

<DialogFrame Title="Delete message" Class="delete-message-modal chat-message-modal">
    <Body>
        <div class="text-sm mb-2 min-h-8">
            Are you sure you want to delete this message?
        </div>
        <div class="bg-secondary rounded-md border border-primary py-1 drop-shadow-lg">
            <div class="chat-message group px-1">
                <div class="flex-1">
                    <div class="header chat-message-header ml-1 flex-x py-2">
                        <div class="">
                            <ChatMessageAuthorCircle AuthorId="@model.Entry.AuthorId"/>
                        </div>
                        <div class="flex-y float-left px-2">
                            <ChatAuthorName AuthorId="@model.Entry.AuthorId" Class="font-bold text-secondary"/>
                            <ChatMessageTimestamp Moment="model.Entry.BeginsAt"/>
                        </div>
                    </div>
                    <div class="content message-content custom-scrollbar max-h-48 rounded-sm ml-1">
                        @if (model.Attachments.Length > 0) {
                            var attachment = model.Attachments[0];
                            var isImage = attachment.ContentType.StartsWith("image", StringComparison.OrdinalIgnoreCase);
                            @if (isImage) {
                                <ImageAttachment Attachment="@attachment"/>
                            } else {
                                <FileAttachment Attachment="@attachment"/>
                            }
                        }
                        <CascadingValue Value="@model.Entry">
                            <MarkupView Markup="@model.Markup"/>
                        </CascadingValue>
                    </div>
                </div>
            </div>
        </div>
    </Body>
    <Buttons>
        <Button Class="btn-primary" Click="OnCancel" IsAutofocused="true">Cancel</Button>
        <Button Class="btn-error" Click="OnDelete">Delete</Button>
    </Buttons>
</DialogFrame>

@code {
    [Inject] private FeedbackUI FeedbackUI { get; set; } = null!;

    [CascadingParameter] BlazoredModalInstance ModalInstance { get; set; } = null!;

    [Parameter] public Model ModalModel { get; set; } = null!;

    private void OnCancel()
        => ModalInstance.CloseAsync(ModalResult.Cancel());

    private async Task OnDelete() {
        await ModalInstance.CloseAsync(ModalResult.Cancel());
        await FeedbackUI.AskFeatureRequestFeedback("message-menu/delete-message", "Delete Message");
    }

    public sealed record Model(ChatMessageModel MessageModel);
}
