@using Stl.Extensibility
@implements IModalView<DeleteMessageModal.Model>
@attribute [MatchFor(typeof(Model), typeof(IModalView))]
@{
    var m = ModalModel.MessageModel;
}

<DialogFrame Title="Delete message" Class="delete-message-modal">
    <Body>
        <div class="c-question">
            Are you sure you want to delete this message?
        </div>
        <div class="c-message">
            <div class="chat-message group px-1">
                <div class="flex-1 flex-y gap-y-2 p-2 pb-1">
                    <div class="flex-none flex-x gap-x-2">
                        <div class="flex-none">
                            <ChatMessageAuthorCircle AuthorSid="@m.Entry.AuthorId"/>
                        </div>
                        <div class="flex-1 flex-y overflow-hidden">
                            <AuthorName AuthorSid="@m.Entry.AuthorId" Class="font-bold text-03"/>
                            <LiveTimeDeltaText Class="chat-message-timestamp" Moment="@m.Entry.BeginsAt"/>
                        </div>
                    </div>
                    <div class="message-content">
                        @if (FirstAttachment != null) {
                            var isImage = FirstAttachment.ContentType.OrdinalIgnoreCaseStartsWith("image");
                            @if (isImage) {
                                <ImageAttachment Attachment="@FirstAttachment"/>
                            } else {
                                <FileAttachment Attachment="@FirstAttachment"/>
                            }
                        }
                        <CascadingValue Value="@m.Entry">
                            <MarkupView Markup="Markup"/>
                        </CascadingValue>
                    </div>
                </div>
            </div>
        </div>
    </Body>
    <Buttons>
        <div class="btn-group">
            <Button Class="btn-cancel" Click="OnCancel" IsAutofocused="true">Cancel</Button>
            <Button Class="btn-error" Click="OnDelete">Delete</Button>
        </div>
    </Buttons>
</DialogFrame>

@code {
    [Inject] private Session Session { get; init; } = null!;
    [Inject] private IChats Chats { get; init; } = null!;
    [Inject] private IMarkupParser MarkupParser { get; init; } = null!;
    [Inject] private UICommander UICommander { get; init; } = null!;

    private TextEntryAttachment? FirstAttachment { get; set; }
    private Markup Markup { get; set; } = Markup.Empty;
    private ChatEntry Entry => ModalModel.MessageModel.Entry; // Shortcut

    [CascadingParameter] public BlazoredModalInstance ModalInstance { get; set; } = null!;
    [Parameter] public Model ModalModel { get; set; } = null!;

    protected override async Task OnInitializedAsync() {
        await base.OnInitializedAsync();

        FirstAttachment = Entry.Attachments.FirstOrDefault();
        Markup = Entry.AudioEntryId == null
            ? MarkupParser.Parse(Entry.Content)
            : new PlayableTextMarkup(Entry.Content, Entry.TextToTimeMap);
    }

    private void OnCancel()
        => _ = ModalInstance.CloseAsync();

    private async Task OnDelete() {
        await ModalInstance.CloseAsync();
        var command = new IChats.RemoveTextEntryCommand(Session, Entry.ChatId, ModalModel.MessageModel.Entry.LocalId);
        await UICommander.Run(command);
    }

    public sealed record Model(ChatMessageModel MessageModel);
}
