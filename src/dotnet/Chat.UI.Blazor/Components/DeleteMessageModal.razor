@using Stl.Extensibility
@implements IModalView<DeleteMessageModal.Model>
@attribute [MatchFor(typeof(Model), typeof(IModalView))]
@{
    var model = ModalModel.MessageModel;
}

<DialogFrame Title="Delete message" Class="delete-message-modal chat-message-modal">
    <Body>
        <div class="mb-2 min-h-8">
            Are you sure you want to delete this message?
        </div>
        <div class="bg-secondary rounded-md border border-primary py-1 drop-shadow-lg">
            <div class="chat-message group px-1">
                <div class="flex-1">
                    <div class="header chat-message-header ml-1 flex-x py-2">
                        <div class="">
                            <ChatMessageAuthorCircle AuthorId="@model.Entry.AuthorId"/>
                        </div>
                        <div class="flex-y float-left px-2">
                            <ChatAuthorName AuthorId="@model.Entry.AuthorId" Class="font-bold text-secondary"/>
                            <ChatMessageTimestamp Moment="model.Entry.BeginsAt"/>
                        </div>
                    </div>
                    <div class="content message-content custom-scrollbar">
                        @if (FirstAttachment != null) {
                            var isImage = FirstAttachment.ContentType.StartsWith("image", StringComparison.OrdinalIgnoreCase);
                            @if (isImage) {
                                <ImageAttachment Attachment="@FirstAttachment"/>
                            } else {
                                <FileAttachment Attachment="@FirstAttachment"/>
                            }
                        }
                        <CascadingValue Value="@model.Entry">
                            <MarkupView Markup="Markup"/>
                        </CascadingValue>
                    </div>
                </div>
            </div>
        </div>
    </Body>
    <Buttons>
        <div class="btn-group">
            <Button Class="btn-cancel-outline" Click="OnCancel" IsAutofocused="true">Cancel</Button>
            <Button Class="btn-error" Click="OnDelete">Delete</Button>
        </div>
    </Buttons>
</DialogFrame>

@code {
    [Inject] private UICommandRunner Commander { get; set; } = null!;
    [Inject] private Session Session { get; set; } = null!;
    [Inject] private IChats Chats { get; set; } = null!;
    [Inject] private IMarkupParser MarkupParser { get; set; } = null!;

    [CascadingParameter] BlazoredModalInstance ModalInstance { get; set; } = null!;

    [Parameter] public Model ModalModel { get; set; } = null!;
    private TextEntryAttachment? FirstAttachment { get; set; }
    private Markup Markup { get; set; } = Markup.Empty;
    private ChatEntry ChatEntry => ModalModel.MessageModel.Entry;

    protected override async Task OnInitializedAsync() {
        await base.OnInitializedAsync();

        FirstAttachment = ChatEntry.HasAttachments
            ? await Chats.NewEntryReader(Session, ChatEntry.ChatId, ChatEntryType.Text).GetFirstAttachment(ChatEntry.Id, CancellationToken.None).ConfigureAwait(false)
            : null;
        Markup = ChatEntry.AudioEntryId == null
            ? MarkupParser.Parse(ChatEntry.Content)
            : new PlayableTextMarkup(ChatEntry.Content, ChatEntry.TextToTimeMap);
    }

    private void OnCancel()
        => ModalInstance.CloseAsync(ModalResult.Cancel());

    private async Task OnDelete() {
        await ModalInstance.CloseAsync(ModalResult.Cancel());
        var command = new IChats.RemoveTextEntryCommand(Session, ChatEntry.ChatId, ModalModel.MessageModel.Entry.Id);
        await Commander.Run(command);
    }

    public sealed record Model(ChatMessageModel MessageModel);
}
