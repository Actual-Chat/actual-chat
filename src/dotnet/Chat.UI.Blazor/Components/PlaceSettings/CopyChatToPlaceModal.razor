@namespace ActualChat.Chat.UI.Blazor.Components

@using System.ComponentModel.DataAnnotations
@implements IModalView<CopyChatToPlaceModal.Model>

<DialogFrame Title="Copy chat to place" HasCloseButton="true">
    <Body>
    <Form @ref="@_formRef" Class="h-full" Model="@_form">
        <FormBlock>
            <DataAnnotationsValidator/>

            <FormSection Label="Chat ID" Class="field-chat-id" For="() => _form.ChatId" InputId="@_form.ChatIdFormId" IsLabelInsideInput="true">
                <TextBox
                    @bind-Value="@_form.ChatId"
                    Id="@_form.ChatIdFormId"
                    Placeholder="Id of a chat to copy to the place"
                    ClearButton="true"/>
            </FormSection>
        </FormBlock>
    </Form>
    </Body>
    <Buttons>
        <Button Class="btn-modal" Click="@(() => Modal.Close())">Cancel</Button>
        <Button Class="btn-modal btn-primary" IsDisabled="@_isCopying" Click="OnCopyClick">Copy chat</Button>
    </Buttons>
</DialogFrame>

@code {
    private Form? _formRef;
    private FormModel _form = null!;
    private bool _isCopying;

    [Inject] private ChatUIHub Hub { get; init; } = null!;
    [Inject] private ComponentIdGenerator ComponentIdGenerator { get; init; } = null!;

    private Session Session => Hub.Session();
    private IChats Chats => Hub.Chats;
    private IPlaces Places => Hub.Places;
    private ToastUI ToastUI => Hub.ToastUI;
    private ModalUI ModalUI => Hub.ModalUI;
    private UICommander UICommander => Hub.UICommander();

    [CascadingParameter] public Modal Modal { get; set; } = null!;
    [Parameter] public Model ModalModel { get; set; } = null!;

    protected override void OnInitialized()
        => _form = new FormModel(ComponentIdGenerator);

    private async Task OnCopyClick() {
        if (_formRef is not { IsValid: true })
            return;

        var chatId = ChatId.Parse(_form.ChatId);
        var chat = await Chats.Get(Session, chatId, default).Require();
        var place = await Places.Get(Session, ModalModel.PlaceId, default).Require();
        var message = $"You are about to copy chat '{chat.Title}' to place '{place.Title}'. Do you want to proceed?";
        await ModalUI.Show(new ConfirmModal.Model(false, message, () => _ = CopyInternal()));

        async Task CopyInternal() {
            _isCopying = true;
            StateHasChanged();

            var correlationId = Guid.NewGuid().ToString();
            var command = new Chat_CopyChat(Session, chatId, ModalModel.PlaceId, correlationId);
            Chat_CopyChatResult? result;
            Exception? error;
            try {
                (result, error) = await UICommander.Run(command);
            }
            catch {
                UICommander.ShowError(StandardError.External("Failed to call server."));
                return;
            }
            finally {
                _isCopying = false;
                StateHasChanged();
            }
            Modal.Close();
            if (error != null)
                return;

            if (!result.HasErrors) {
                var info = result.HasChanges
                    ? $"Chat '{chat.Title}' was successfully copied to place '{place.Title}'."
                    : $"Nothing has been done on coping chat '{chat.Title}' to place '{place.Title}'.";
                ToastUI.Show(info, ToastDismissDelay.Long);
            } else {
                await ModalUI.Show(new CopyChatToPlaceErrorModal.Model(correlationId, result.HasChanges, chat.Title, place.Title));
            }
        }
    }

    public sealed class FormModel {
        [Required, MinLength(1)]
        public string ChatId { get; set; } = "";

        public string FormId { get; }
        public string ChatIdFormId { get; }

        public FormModel(ComponentIdGenerator componentIdGenerator) {
            FormId = componentIdGenerator.Next("copy-chat2place-form");
            ChatIdFormId = $"{FormId}-chatId";
        }
    }

    public sealed record Model(PlaceId PlaceId);
}
