@namespace ActualChat.Chat.UI.Blazor.Components
@using ActualChat.Media
@inherits ComputedStateComponent<PlaceSettingsStartModalPage.ComputedModel>
@{
    var m = State.Value;
    if (ReferenceEquals(m, ComputedModel.Loading))
        return;

    if (m.Place == null) {
        Context.Close();
        return;
    }

    Context.ModalDataBag.Set(nameof(ComputedModel.MembersCount), m.MembersCount);
    var isOwner = m.IsOwner;
    var status = m.Place.IsPublic ? "Public" : "Private";
}

<div class="chat-settings-header place">
    <div class="c-top">
        @if (m.Place.Background != null) {
            <Pic
                Picture="@m.Place.Background.ToPicture()"
                ImageSkeletonClass="image-cover"
                Size="@SquareSize.SizeFull"
                IsSquare="true"
                AvatarKind="@AvatarKind.Marble"
                AvatarKey="@PlaceId.Value"/>
        } else {
            <Pic
                Picture="@m.Place.Picture.ToPicture()"
                ImageSkeletonClass="image-cover"
                Size="@SquareSize.SizeFull"
                IsSquare="true"
                IsBlurred="true"
                AvatarKind="@AvatarKind.Marble"
                AvatarKey="@PlaceId.Value"/>
        }
        <ButtonRound
            Click="@(() => Context.Close())"
            Class="btn-sm right-panel-close-btn">
            <i class="icon-close text-2xl"></i>
        </ButtonRound>
    </div>
    <div class="c-center">
        <Pic
            IsSquare="true"
            Size="@SquareSize.Size16"
            Picture="@m.Place.Picture.ToPicture()"
            AvatarKind="@AvatarKind.Marble"
            AvatarKey="@PlaceId.Value"/>

        <div class="c-buttons">
            @if (m.EnableIncompleteUI) {
                <ButtonRound
                    Class="btn-sm"
                    TooltipPosition="@FloatingPosition.Bottom"
                    Tooltip="Notifications">
                    <i class="icon-bell text-2xl"></i>
                </ButtonRound>
            }
            @if (isOwner) {
                <ButtonRound
                    Class="btn-sm"
                    TooltipPosition="@FloatingPosition.Bottom"
                    Tooltip="Add member"
                    Click="@OnInviteMembersClick">
                    <i class="icon-person-add text-2xl"></i>
                </ButtonRound>
            }
            @if (isOwner) {
                <ButtonRound
                    Class="btn-sm"
                    TooltipPosition="@FloatingPosition.Bottom"
                    Tooltip="Edit Place"
                    Click="@OnOwnerSettingsClick">
                    <i class="icon-edit text-2xl"></i>
                </ButtonRound>
            }
        </div>
    </div>
</div>

<div class="chat-settings-subheader">
    <div class="c-title">@m.Place.Title</div>
    <div class="status-badge public">@status</div>
</div>

<div class="c-panel-content">
    <div class="c-panel-tabs">
        <TabPanel
            @key="@PlaceId.Value"
            TabsClass="left-panel-tabs wide-left-panel-tabs"
            BottomHill="true">

            <Tab @key="@("members")" Id="members" Title="Members" Order="0">
                <AuthorList PlaceId="@PlaceId"/>
            </Tab>

            @if (m.EnableIncompleteUI) {
                <Tab @key="@("media")" Id="media" Title="Media" Order="1">
                    <ToBeDone/>
                </Tab>
                <Tab @key="@("files")" Id="files" Title="Files" Order="2">
                    <ToBeDone/>
                </Tab>
                <Tab @key="@("links")" Id="links" Title="Links" Order="3">
                    <ToBeDone/>
                </Tab>
            }
        </TabPanel>
    </div>
</div>

@code {
    [Inject] private ChatUIHub Hub { get; init; } = null!;

    private Session Session => Hub.Session();
    private IPlaces Places => Hub.Places;

    [CascadingParameter] public DiveInModalPageContext Context { get; set; } = null!;
    [CascadingParameter] public ScreenSize ScreenSize { get; set; }

    private PlaceId PlaceId { get; set; }

    protected override void OnInitialized() {
        PlaceId = Context.GetTypedModel<PlaceId>();
        Context.SetTitle("Place Info");
    }

    protected override ComputedState<ComputedModel>.Options GetStateOptions()
        => ComputedStateComponent.GetStateOptions(GetType(),
            static t => new ComputedState<ComputedModel>.Options() {
                InitialValue = ComputedModel.Loading,
                UpdateDelayer = FixedDelayer.NextTick,
                Category = ComputedStateComponent.GetStateCategory(t),
            });

    protected override async Task<ComputedModel> ComputeState(CancellationToken cancellationToken) {
        var placeId = PlaceId;
        var place = await Places.Get(Session, placeId, cancellationToken).ConfigureAwait(false);
        if (place == null || !place.Rules.CanEditProperties())
            return new() { Place = place };

        var allAuthorIds = await Places.ListAuthorIds(Session, place.Id, cancellationToken).ConfigureAwait(false);
        var enableIncompleteUI = await Hub.Features().Get<Features_EnableIncompleteUI, bool>(cancellationToken);

        return new() {
            Place = place,
            MembersCount = allAuthorIds.Count,
            IsOwner = place.Rules.IsOwner(),
            EnableIncompleteUI = enableIncompleteUI,
        };
    }

    private void OnInviteMembersClick()
        => Context.StepIn(DiveInDialogPage.New<AddMemberModalPage>(PlaceId));

    private void OnOwnerSettingsClick()
        => Context.StepIn(DiveInDialogPage.New<PlaceSettingsOwnerModalPage>(PlaceId));

    // Nested types

    public sealed record ComputedModel {
        public static readonly ComputedModel Loading = new();

        public Place? Place { get; init; }
        public int MembersCount { get; init; }
        public bool IsOwner { get; init; }
        public bool EnableIncompleteUI { get; init; }
    }
}
