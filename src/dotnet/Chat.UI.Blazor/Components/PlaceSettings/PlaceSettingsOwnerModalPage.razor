@namespace ActualChat.Chat.UI.Blazor.Components
@using System.ComponentModel.DataAnnotations
@using ActualChat.Media
@inherits ComputedStateComponent<PlaceSettingsOwnerModalPage.ComputedModel>
@{
    var m = State.Value;
    if (ReferenceEquals(m, ComputedModel.Loading))
        return;

    if (m.Place == null || !m.Place.Rules.CanEditProperties()) {
        Context.Close();
        return;
    }
    if (_form == null)
        return;
    Context.ModalDataBag.Set(nameof(ComputedModel.MembersCount), m.MembersCount);
    var canEditMembers = m.Place.Rules.CanEditMembers();
    var isOwner = m.IsOwner;
}

<Form Class="h-full" @ref="@_formRef" Model="@_form">
    @{
        _submitButtonInfo.CanExecute = _formRef?.IsValid ?? false;
    }
    <FormBlock Class="chat-settings-header place">
        <DataAnnotationsValidator/>

        <div class="c-top">
            @if (_form.Background != null) {
                <Pic
                    Picture="@_form.Background"
                    ImageSkeletonClass="image-cover"
                    Size="@SquareSize.SizeFull"
                    IsSquare="true"
                    AvatarKind="@AvatarKind.Marble"
                    AvatarKey="@PlaceId.Value"/>
            } else {
                <Pic
                    Picture="@_form.Picture"
                    ImageSkeletonClass="image-cover"
                    Size="@SquareSize.SizeFull"
                    IsSquare="true"
                    IsBlurred="true"
                    AvatarKind="@AvatarKind.Marble"
                    AvatarKey="@PlaceId.Value"/>
            }
            <ButtonRound
                Click="@(() => Context.Close())"
                Class="btn-sm right-panel-close-btn">
                <i class="icon-close text-2xl"></i>
            </ButtonRound>
        </div>
        <div class="c-center">
            <PicUpload
                UploadUrl="@_form.ImageUploadUrl"
                IsSquare="true"
                Size="@SquareSize.Size16"
                Title="@_form.Title"
                Picture="@_form.Picture"
                AvatarKind="@AvatarKind.Marble"
                AvatarKey="@PlaceId.Value"
                Picked="@OnImagePicked"/>

            <div class="c-buttons">
                <PicUploadButton
                    UploadUrl="@_form.ImageUploadUrl"
                    Picked="@OnImagePicked"/>

                <PicUploadButton
                    UploadUrl="@_form.ImageUploadUrl"
                    Picked="@OnBackgroundPicked">
                    <Icon>
                        <i class="icon-image text-2xl"></i>
                    </Icon>
                </PicUploadButton>
            </div>
        </div>
    </FormBlock>

    <FormBlock>
        <DataAnnotationsValidator/>

        <FormSection Class="field-chat-title" For="() => _form.Title" InputId="@_form.TitleId" IsLabelInsideInput="true" Label="Place title">
            <TextBox
                @bind-Value="@_form.Title"
                Id="@_form.TitleId"
                Placeholder="Place title*"
                ClearButton="true"/>
        </FormSection>
        <FormSection Class="field-chat-title" For="() => _form.Description" InputId="@_form.DescriptionId" IsLabelInsideInput="true" Label="Place description">
            <TextBox
                @bind-Value="@_form.Description"
                Id="@_form.DescriptionId"
                Placeholder="Few words"
                ClearButton="true"/>
        </FormSection>
    </FormBlock>

    <div class="chat-settings-container">
        <TileItem Click="OnManagePlaceTypeClick" Class="chat-type-tile-item">
            <Icon>
                <i class="icon-key text-xl"></i>
            </Icon>
            <Content>
                Place type
            </Content>
            <Right>
                @(m.Place.IsPublic ? "Public" : "Private")
            </Right>
        </TileItem>
    </div>

    @if (canEditMembers || isOwner) {
        <div class="chat-settings-container">
            @if(canEditMembers) {
                <TileItem Class="item-manage-members" Click="OnManageMembersClick">
                    <Icon>
                        <i class="icon-people"></i>
                    </Icon>
                    <Content>
                        @m.MembersCount Members
                    </Content>
                    <Right>
                        <i class="icon-chevron-right text-3xl"></i>
                    </Right>
                </TileItem>
            }
            @if (isOwner) {
                <TileItem Click="OnCopyChatClick" Class="copy-chat-item">
                    <Icon>
                        <i class="icon-cloud-upload text-xl"></i>
                    </Icon>
                    <Content>
                        Copy chat into the Place
                    </Content>
                </TileItem>
                <TileItem Class="item-leave-group item-danger" Click="@(() => OnPlaceDeleteClick())">
                    <Icon><i class="icon-log-out"></i></Icon>
                    <Content>Leave place & delete</Content>
                </TileItem>
            }
        </div>
    }
</Form>

@code {
    private Form?_formRef;
    private FormModel? _form;
    private DialogButtonInfo _submitButtonInfo = null!;

    [Inject] private ChatUIHub Hub { get; init; } = null!;
    [Inject] private ComponentIdGenerator ComponentIdGenerator { get; init; } = null!;
    [Inject] private DiffEngine DiffEngine { get; init; } = null!;

    private Session Session => Hub.Session();
    private UICommander UICommander => Hub.UICommander();
    private IPlaces Places => Hub.Places;
    private ChatUI ChatUI => Hub.ChatUI;
    private AccountUI AccountUI => Hub.AccountUI;

    [CascadingParameter] public DiveInModalPageContext Context { get; set; } = null!;

    private PlaceId PlaceId { get; set; }

    protected override void OnInitialized() {
        PlaceId = Context.GetTypedModel<PlaceId>();
        Context.SetTitle("Place Settings");
        _submitButtonInfo = DialogButtonInfo.CreateSubmitButton("Save", OnSubmit);
        Context.RegisterButtons(DialogButtonInfo.CancelButton, _submitButtonInfo);
    }

    protected override async Task OnInitializedAsync() {
        const string formBagKey = "form";
        _form = Context.PageDataBag.Get<FormModel>(formBagKey);
        if (_form != null)
            return;

        var place = await Places.Get(Session, PlaceId, default).Require();
        _form = new FormModel(ComponentIdGenerator) {
            Title = place.Title,
            Description = place.Description,
            Picture = place.Picture?.ToPicture(),
            Background = place.Background?.ToPicture(),
            ImageUploadUrl = $"/api/chat-media/{place.Id.ToRootChatId()}/upload",
        };
        Context.PageDataBag.Set(formBagKey, _form);
    }

    protected override ComputedState<ComputedModel>.Options GetStateOptions()
        => ComputedStateComponent.GetStateOptions(GetType(),
            static t => new ComputedState<ComputedModel>.Options() {
                InitialValue = ComputedModel.Loading,
                UpdateDelayer = FixedDelayer.NextTick,
                Category = ComputedStateComponent.GetStateCategory(t),
            });

    protected override async Task<ComputedModel> ComputeState(CancellationToken cancellationToken) {
        var placeId = PlaceId;
        var place = await Places.Get(Session, placeId, cancellationToken).ConfigureAwait(false);
        if (place == null || !place.Rules.CanEditProperties())
            return new() { Place = place };

        var allAuthorIds = await Places.ListAuthorIds(Session, place.Id, cancellationToken).ConfigureAwait(false);

        return new() {
            Place = place,
            MembersCount = allAuthorIds.Count,
            IsOwner = place.Rules.IsOwner(),
        };
    }

    private void OnImagePicked(MediaContent mediaContent) {
        _form!.Picture = new (mediaContent);
        StateHasChanged();
    }

    private void OnBackgroundPicked(MediaContent mediaContent) {
        _form!.Background = new(mediaContent);
        StateHasChanged();
    }

    private void OnManagePlaceTypeClick()
        => Context.StepIn(DiveInDialogPage.New<PlaceSettingsEditTypeModalPage>(PlaceId));

    private void OnCopyChatClick()
        => Context.StepIn(DiveInDialogPage.New<PlaceSettingsCopyChatModalPage>(PlaceId));

    private void OnManageMembersClick()
        => Context.StepIn(DiveInDialogPage.New<PlaceSettingsEditMembersModalPage>(PlaceId));

    private async Task OnSubmit() {
        if (_formRef == null)
            return;
        if (!_formRef.IsValid)
            return;
        await Save();
        Context.Close();
    }

    private async Task Save() {
        var place = await Places.Get(Session, PlaceId, default).Require();
        var newPlace = place with {
            Title = _form!.Title,
            Description = _form!.Description,
            MediaId = _form.Picture?.MediaContent?.MediaId ?? MediaId.None,
            BackgroundMediaId = _form.Background?.MediaContent?.MediaId ?? MediaId.None,
        };
        var command = new Places_Change(Session, place.Id, place.Version, new() {
            Update = DiffEngine.Diff<Place, PlaceDiff>(place, newPlace),
        });
        await UICommander.Run(command);
    }

    private void OnPlaceDeleteClick()
        => ChatUI.DeletePlace(
            PlaceId,
            () => {
                Context.Close();
                return Task.CompletedTask;
            });

    // Nested types

    public sealed class FormModel {
        [Required, MinLength(1)]
        public string Title { get; set; } = "";

        public string Description { get; set; } = "";
        public Picture? Picture { get; set; }
        public Picture? Background { get; set; }
        public string ImageUploadUrl { get; init; } = "";

        public string FormId { get; }
        public string TitleId { get; }
        public string DescriptionId { get; }
        public string PictureFormId { get; }
        public string BackgroundFormId { get; }

        public FormModel(ComponentIdGenerator componentIdGenerator) {
            FormId = componentIdGenerator.Next("edit-place-form");
            TitleId = $"{FormId}-title";
            DescriptionId = $"{FormId}-description";
            PictureFormId = $"{FormId}-picture";
            BackgroundFormId = $"{FormId}-background";
        }
    }

    public sealed record ComputedModel {
        public static readonly ComputedModel Loading = new();

        public Place? Place { get; init; }
        public int MembersCount { get; init; }
        public bool IsOwner { get; init; }
    }
}
