@page "/join/{InviteId}"
@using ActualChat.Invite

<RequireAccount/>
<MainHeader>Joining via invite link</MainHeader>

@if (_useResult is { } useResult) {
    if (useResult.Error is { } error) {
        <p>Failed to join chat: @error.Message</p>
    } else {
        <p>Processing invite, please wait..</p>
    }
}

@code {
    private Result<Invite>? _useResult;

    [Inject] private Session Session { get; init; } = null!;
    [Inject] private NavigationManager Nav { get; init; } = null!;
    [Inject] private UICommander UICommander { get; init; } = null!;

    [Parameter] public string InviteId { get; set; } = "";

    protected override async Task OnParametersSetAsync() {
        var useCommand = new IInvites.UseCommand(Session, InviteId);
        _useResult = await UICommander.Run(useCommand).ConfigureAwait(true);
        if (_useResult is not { } useResult || useResult.HasError)
            return;
        var invite = useResult.Value;
        // Wait till subsequent commands that set session options are executed.
        // TODO(AY): provide a durable way to wait for subsequent commands completion.
        await Task.Delay(1000);
        Nav.NavigateTo(Links.ChatPage(invite.Details!.Chat!.ChatId));
    }
}
