@page "/chat/{ChatId}/invite"
@using ActualChat.Invite
@inherits ComputedStateComponent<ChatInvitePage.Model>
@attribute [Authorize(Policy = KnownPolicies.IsUserActive)]
@{
    var m = State.LatestNonErrorValue;
    if (m.IsUnavailable)
        Nav.Unavailable("chat");
    var chat = m.Chat;
    var invites = m.Invites;
}

@if (chat != null) {
    <MainHeader>Invite to&nbsp<b>"@(chat.Title)"</b></MainHeader>

    @if (!m.PermanentLink.IsNullOrEmpty()) {
        <div>
            <span class="block text-sm font-medium text-secondary">Permanent link</span>
            <div class="mt-1 flex-x">
                <input type="text" value="@m.PermanentLink" disabled
                       class="flex-1 px-2 py-1 border border-1 border-gray-300 rounded-md focus:outline-none focus:border-sky-500"/>
                <ButtonSquare Click="_ => CopyToClipboard(m.PermanentLink)" Class="transparent !mx-2">
                    <i class="fa fa-files-o w-5 h-5" aria-hidden="true"></i>
                </ButtonSquare>
            </div>
        </div>
    }

    <InviteList Invites="invites" LinkFormat="join/{0}">
        <Buttons>
            <Button Click="OnGenerateNewLinkClick" Class="btn-success">
                + Create a New Link
            </Button>
            <Button Click="OnNavigateToChatClick" Class="btn-cancel">
                Cancel
            </Button>
        </Buttons>
    </InviteList>
}

@code {
    [Inject] private Session Session { get; init; } = null!;
    [Inject] private IChats Chats { get; init; } = null!;
    [Inject] private IInvites Invites { get; init; } = null!;
    [Inject] private Clipboard Clipboard { get; init; } = null!;
    [Inject] private MomentClockSet Clocks { get; init; } = null!;
    [Inject] private UICommandRunner Cmd { get; init; } = null!;
    [Inject] private NavigationManager Nav { get; init; } = null!;

    [Parameter] public string ChatId { get; set; } = "";

    protected override ComputedState<Model>.Options GetStateOptions()
        => new() { InitialValue = Model.None };

    protected override async Task<Model> ComputeState(CancellationToken cancellationToken) {
        var chat = await Chats.Get(Session, ChatId, default);
        if (chat == null)
            return Model.Unavailable;

        var invites = await Invites.GetChatInvites(Session, ChatId, cancellationToken);
        var threshold = Clocks.SystemClock.Now - TimeSpan.FromDays(3);
        invites = invites
            .Where(c => c.ExpiresOn > threshold)
            .OrderByDescending(c => c.ExpiresOn)
            .ToImmutableArray();
        var permanentLink = chat.IsPublic ? Nav.BaseUri + "chat/" + chat.Id.Value : "";
        return new() { Chat = chat, Invites = invites, PermanentLink = permanentLink };
    }

    private async Task OnGenerateNewLinkClick() {
        var invite = new Invite {
            Details = new InviteDetails {
                Chat = new(ChatId),
            },
            Remaining = 10, // TODO: configurable
        };
        var command = new IInvites.GenerateCommand(Session, invite);
        _ = await Cmd.Run(command);
    }

    private void OnNavigateToChatClick()
        => Nav.NavigateTo($"/chat/{ChatId}");

    private async Task CopyToClipboard(string link)
        => await Clipboard.WriteText(link);

    public sealed record Model {
        public static Model None { get; } = new();
        public static Model Unavailable { get; } = new() { IsUnavailable = true };

        public bool IsUnavailable { get; init; }
        public Chat? Chat { get; init; }
        public string? PermanentLink { get; init; }
        public IImmutableList<Invite> Invites { get; init; } = ImmutableArray<Invite>.Empty;
    }
}
