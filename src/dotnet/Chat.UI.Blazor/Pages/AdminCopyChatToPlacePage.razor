@page "/admin/copy-chat2place"
@using System.ComponentModel.DataAnnotations
@inherits FusionComponentBase

<RequireAccount MustBeAdmin="true"/>
<MainHeader>Copy chat to place</MainHeader>

<Form Class="h-full" @ref="@_formRef" Model="@_form">
    <FormBlock>
        <DataAnnotationsValidator/>

        <FormSection Label="Chat ID" Class="field-chat-id" For="() => _form.ChatId" InputId="@_form.ChatIdFormId" IsLabelInsideInput="true">
            <TextBox
                @bind-Value="@_form.ChatId"
                Id="@_form.ChatIdFormId"
                Placeholder="Id of a chat to copy to the place"
                ClearButton="true"/>
        </FormSection>

        <FormSection Label="Place ID" Class="field-place-id" For="() => _form.PlaceId" InputId="@_form.PlaceIdFormId" IsLabelInsideInput="true">
            <TextBox
                @bind-Value="@_form.PlaceId"
                Id="@_form.PlaceIdFormId"
                Placeholder="Id of a place to copy the chat in"
                ClearButton="true"/>
        </FormSection>
    </FormBlock>

    <Button Type="@ButtonType.Button" Click="@(() => CopyChatToPlace())">Copy chat to place</Button>
    <Button Type="@ButtonType.Button" Click="@(() => PublishCopiedChat())">Publish copied chat</Button>
</Form>


@code {
    private Form? _formRef;
    private FormModel _form = null!;

    [Inject] private ChatUIHub Hub { get; init; } = null!;
    [Inject] private ComponentIdGenerator ComponentIdGenerator { get; init; } = null!;

    private ToastUI ToastUI => Hub.ToastUI;
    private ModalUI ModalUI => Hub.ModalUI;

    protected override void OnInitialized() {
        _form = new FormModel(ComponentIdGenerator);
    }

    private async Task CopyChatToPlace() {
        if (!EnsureFormIsValid())
            return;

        var session = Hub.Session();
        var chatId = ChatId.Parse(_form.ChatId);
        var placeId = PlaceId.Parse(_form.PlaceId);
        var chat = await Hub.Chats.Get(session, chatId, default);
        var place = await Hub.Places.Get(session, placeId, default).Require();
        var chatDescriptor = chat?.Title ?? chatId.Value;
        var message = $"You are about to copy chat '{chatDescriptor}' to place '{place.Title}'. Do you want to proceed?";
        await ModalUI.Show(new ConfirmModal.Model(false, message, () => _ = CopyInternal()));

        async Task CopyInternal() {
            var correlationId = Guid.NewGuid().ToString();
            var command = new Chat_CopyChat(session, chatId, placeId, correlationId);
            var (result, error) = await Hub.UICommander().Run(command, default);
            if (error != null)
                return;
            if (!result.HasErrors) {
                var info = result.HasChanges
                    ? $"Chat '{chatDescriptor}' was successfully copied to place '{place.Title}'."
                    : $"Nothing has been done on coping chat '{chatDescriptor}' to place '{place.Title}'.";
                ToastUI.Show(info, ToastDismissDelay.Long);
            } else {
                await ModalUI.Show(new CopyChatToPlaceErrorModal.Model(correlationId, result.HasChanges, chatDescriptor, place.Title));
            }
        }
    }

    private async Task PublishCopiedChat() {
        if (!EnsureFormIsValid())
            return;

        var session = Hub.Session();
        var sourceChatId = ChatId.Parse(_form.ChatId);
        var placeId = PlaceId.Parse(_form.PlaceId);
        var localChatId = sourceChatId.IsPlaceChat ? sourceChatId.PlaceChatId.LocalChatId : sourceChatId.Id;
        var placeChatId = new PlaceChatId(PlaceChatId.Format(placeId, localChatId));
        var newChatId = (ChatId)placeChatId;

        var newChat = await Hub.Chats.Get(session, newChatId, default).Require();
        var place = await Hub.Places.Get(session, placeId, default).Require();
        var message = $"You are about to publish copied chat '{newChat.Title}' from place '{place.Title}'. Do you want to proceed?";
        await ModalUI.Show(new ConfirmModal.Model(false, message, () => _ = PublishInternal()));

        async Task PublishInternal() {
            var command = new Chat_PublishCopiedChat(session, newChat.Id, sourceChatId);
            var (_, error) = await Hub.UICommander().Run(command);
            if (error != null)
                return;
            ToastUI.Show($"Chat '{newChat.Title}' was successfully published.", ToastDismissDelay.Long);
        }
    }

    private bool EnsureFormIsValid()
    {
        if (_formRef == null)
            return false;
        if (_formRef.IsValid)
            return true;
        Hub.UICommander().ShowError(StandardError.Constraint("Form is not valid"));
        return false;
    }

    public sealed class FormModel {
        [Required, MinLength(1)]
        public string ChatId { get; set; } = "";
        [Required, MinLength(1)]
        public string PlaceId { get; set; } = "";

        public string FormId { get; }
        public string ChatIdFormId { get; }
        public string PlaceIdFormId { get; }

        public FormModel(ComponentIdGenerator componentIdGenerator) {
            FormId = componentIdGenerator.Next("copy-chat2place-form");
            ChatIdFormId = $"{FormId}-chatId";
            PlaceIdFormId = $"{FormId}-placeId";
        }
    }
}
