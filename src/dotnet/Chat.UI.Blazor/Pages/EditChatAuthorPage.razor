@page "/chat/{ChatId}/edit/author"

<div class="px-2 py-2">
    <div>
        <h3>Your profile in <b>"@(_chat?.Title)"</b> chat:</h3>
    </div>

    <div class="mt-5">
        <EditForm Model="@_model" OnValidSubmit="@OnSave" >
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div>
                <label for="Name" class="block text-sm font-medium text-secondary">Name</label>
                <div class="mt-1">
                    <InputText @bind-Value="@_model.Name" placeholder="@_baseModel.Name" id="Name"
                               class="w-full px-2 py-1 border border-1 border-gray-300 rounded-md focus:outline-none focus:border-sky-500" />
                </div>
            </div>

            <div class="mt-2">
                <label for="Picture" class="block text-sm font-medium text-secondary">Picture</label>
                <div class="mt-1">
                    <InputText @bind-Value="_model.Picture" placeholder="@_baseModel.Picture" id="Picture"
                               class="w-full px-2 py-1 border border-1 border-gray-300 rounded-md focus:outline-none focus:border-sky-500" />
                </div>
            </div>

            <div class="mt-3 flex flex-row justify-end">
                <button type="submit" class="bg-green-500 hover:bg-green-700 text-white py-1 px-4 rounded">Save</button>
                <button class="bg-blue-500 hover:bg-blue-700 text-white py-1 px-4 rounded ml-3"
                        @onclick="NavigateToChat">Cancel</button>
            </div>
        </EditForm>
    </div>
</div>

@code {
    public class Model
    {
        public string Name { get; set; } = "";
        public string Picture { get; set; } = "";
    }

    [Inject] private NavigationManager Nav { get; set; } = default!;
    [Inject] private Session Session { get; set; } = default!;
    [Inject] private IChats Chats { get; set; } = default!;
    [Inject] private IChatAuthors ChatAuthors { get; set; } = default!;
    [Inject] private IUserAuthors UserAuthors { get; set; } = default!;
    [Inject] private IAuth Auth { get; set; } = default!;
    [Inject] private UICommandRunner Cmd { get; set; } = default!;

    private Chat? _chat;
    private Model _model = new();
    private Model _baseModel = new();

    [Parameter]
    public string ChatId { get; set; } = "";

    protected override async Task OnParametersSetAsync() {
        _chat = await Chats.Get(Session, ChatId, default);

        var chatAuthor = await ChatAuthors.GetChatAuthor(Session, ChatId, default);
        var user = await Auth.GetUser(Session, default);
        _baseModel = new();
        if (user.IsAuthenticated) {
            var userAuthor = await UserAuthors.Get(user.Id, true, default);
            if (userAuthor != null) {
                _baseModel.Name = userAuthor.Name;
                _baseModel.Picture = userAuthor.Picture;
            }
        }
        _model.Name = chatAuthor?.Name ?? "";
        _model.Picture = chatAuthor?.Picture ?? "";
    }

    private async void OnSave() {
        var command = new IChatAuthors.UpdateAuthorCommand(Session, ChatId, _model.Name, _model.Picture);
        await Cmd.Run(command, default);
        NavigateToChat();
    }

    private void NavigateToChat() {
        Nav.NavigateTo($"/chat/{ChatId}");
    }
}
