@inherits ComputedStateComponent<Theme>
@{
    var m = State.ValueOrDefault;

    RenderFragment ThemeButton(Theme theme) {
        var cls = m == theme ? "on" : "";
        return
            @<button type="button"
                     class="block bg-accent rounded-md w-full h-10 @cls"
                     onclick="@(() => SetTheme(theme))">
                <div class="flex-x self-center items-center px-1">
                    <Dot/>
                    <div class="text-secondary">@theme</div>
                </div>
            </button>;
    }
}

<div class="flex-y gap-y-2">
    @ThemeButton(Theme.Light)
    @ThemeButton(Theme.Dark)
</div>

@code {
    [Inject] ThemeUI ThemeUI { get; init; } = null!;

    private void SetTheme(Theme theme)
        => ThemeUI.CurrentTheme.Value = theme;

    protected override ComputedState<Theme>.Options GetStateOptions()
        => new() { UpdateDelayer = UpdateDelayer.MinDelay };

    protected override async Task<Theme> ComputeState(CancellationToken cancellationToken)
        => await ThemeUI.CurrentTheme.Use(cancellationToken).ConfigureAwait(false);
}
