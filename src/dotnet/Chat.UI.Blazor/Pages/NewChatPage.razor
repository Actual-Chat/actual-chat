@page "/new/chat/"
@using System.ComponentModel.DataAnnotations

<AuthorizeView Context="auth">
    <Authorized>
        <PageHeader Title="New chat"/>
        <div class="px-4">
            <div class="mt-2">
                <EditForm Model="@_model" OnValidSubmit="@OnCreate">
                    <DataAnnotationsValidator/>

                    <div>
                        <label for="Title" class="block text-sm font-medium text-secondary">Chat title</label>
                        <div class="mt-1">
                            <InputText @bind-Value="@_model.Title" id="Title" tabIndex="1" autofocus
                                       class="w-full px-2 py-1 border border-1 border-gray-300 rounded-md focus:outline-none focus:border-sky-500"/>
                        </div>
                    </div>

                    <div class="mt-3 flex flex-row justify-end">
                        <button type="submit" class="bg-button-success hover:bg-button-success-hover text-white py-1 px-4 rounded">Create</button>
                        <a type="button" class="bg-separate-line hover:bg-avatar text-white py-1 px-4 rounded ml-3" href="/">Cancel</a>
                    </div>
                </EditForm>
            </div>
        </div>
    </Authorized>
</AuthorizeView>

@code {
    public class Model
    {
        [Required]
        public string Title { get; set; } = "";
    }

    [Inject] private Session Session { get; set; } = default!;
    [Inject] private UICommandRunner Cmd { get; set; } = default!;
    [Inject] private NavigationManager Nav { get; set; } = default!;

    private readonly Model _model = new();

    private async Task OnCreate()
    {
        var command = new IChats.CreateChatCommand(Session, _model.Title) { IsPublic = true };
        var result = await Cmd.Run(command, default);
        if (!result.CommandEvent.IsCompletedSuccessfully)
            return;
        var chatId = result.Result.Id;
        Nav.NavigateTo($"/chat/{chatId}");
    }
}
