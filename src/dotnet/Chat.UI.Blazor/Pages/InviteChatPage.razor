@page "/chat/{ChatId}/invite"
@inherits ComputedStateComponent<InviteChatPage.Model>

@{
    var model = State.LatestNonErrorValue ?? new();
    if (model.IsUnavailable)
        Nav.Unavailable("chat");
    var chat = model.Chat;
    var inviteCodes = model.InviteCodes;
}

@if (chat != null) {
    <div class="px-2 py-2">
        <div>
            <h3>Invite people to <b>"@(chat.Title)"</b></h3>
        </div>
        <div>
            @if (!model.PermanentLink.IsNullOrEmpty()) {
                <div class="mt-5">
                    <span  class="block text-sm font-medium text-secondary">Permanent link</span>
                    <div class="mt-1 flex flex-row">
                        <input type="text" value="@model.PermanentLink" disabled
                               class="flex-1 px-2 py-1 border border-1 border-gray-300 rounded-md focus:outline-none focus:border-sky-500"/>
                        <button type="button" @onclick="@(() => Copy(model.PermanentLink))" class="ml-2 px-2 hover:bg-accent">
                            @* <svg xmlns="http://www.w3.org/2000/svg" class="w-6 h-6" viewBox="0 0 24 24"><path d="M16 10c3.469 0 2 4 2 4s4-1.594 4 2v6h-10v-12h4zm.827-2h-6.827v16h14v-8.842c0-2.392-4.011-7.158-7.173-7.158zm-8.827 12h-6v-16h4l2.102 2h3.898l2-2h4v2.145c.656.143 1.327.391 2 .754v-4.899h-3c-1.229 0-2.18-1.084-3-2h-8c-.82.916-1.771 2-3 2h-3v20h8v-2zm2-18c.553 0 1 .448 1 1s-.447 1-1 1-1-.448-1-1 .447-1 1-1zm4 18h6v-1h-6v1zm0-2h6v-1h-6v1zm0-2h6v-1h-6v1z"/></svg> *@
                            <i class="fa fa-files-o w-5 h-5" aria-hidden="true"></i>
                        </button>
                    </div>
                </div>
            }

            <div class="mt-5">
                <span class="block text-sm font-medium text-secondary">Invite Links</span>
                @* <button type="button" *@
                @*         class="mt-2 bg-accent rounded-md py-1 px-3 font-medium text-secondary hover:text-primary" *@
                @*         @onclick="OnGenerateNewLink" >+ Create a New Link</button> *@
                <button type="button"
                        class="mt-2 bg-green-500 hover:bg-green-700 text-white py-1 px-4 rounded"
                        @onclick="OnGenerateNewLink" >+ Create a New Link</button>


                @if (inviteCodes.Length > 0) {
                    <ul class="mt-3">
                        @foreach (var inviteCode in inviteCodes) {
                            <li>
                                @{
                                    var link = GenerateLink(inviteCode);
                                    var expiresOn = inviteCode.ExpiresOn.ToLocalTime();
                                    var now = DateTime.Now;
                                    var remained = expiresOn - now;
                                    var description = remained > TimeSpan.Zero ? GetRemainedTimeDescription(remained) : "Expired";
                                }
                                <div class="mt-4">
                                    <div class="mt-1 flex flex-row">
                                        <span class="font-medium">@inviteCode.Value</span>
                                        <button type="button" @onclick="@(() => Copy(link))" class="ml-2 px-1 hover:bg-accent">

                                            @* <svg xmlns="http://www.w3.org/2000/svg" class="w-6 h-6" viewBox="0 0 24 24"><path d="M16 10c3.469 0 2 4 2 4s4-1.594 4 2v6h-10v-12h4zm.827-2h-6.827v16h14v-8.842c0-2.392-4.011-7.158-7.173-7.158zm-8.827 12h-6v-16h4l2.102 2h3.898l2-2h4v2.145c.656.143 1.327.391 2 .754v-4.899h-3c-1.229 0-2.18-1.084-3-2h-8c-.82.916-1.771 2-3 2h-3v20h8v-2zm2-18c.553 0 1 .448 1 1s-.447 1-1 1-1-.448-1-1 .447-1 1-1zm4 18h6v-1h-6v1zm0-2h6v-1h-6v1zm0-2h6v-1h-6v1z"/></svg> *@
                                            <i class="fa fa-files-o w-5 h-5" aria-hidden="true"></i>
                                        </button>
                                    </div>
                                    <div>
                                        <span class="text-sm">@description</span>
                                    </div>
                                </div>
                            </li>
                        }
                    </ul>
                }
            </div>

            <div class="mt-3 flex flex-row justify-end">
                <button type="button" class="bg-blue-500 hover:bg-blue-700 text-white py-1 px-4 rounded ml-3"
                        @onclick="NavigateToChat">Cancel</button>
            </div>
        </div>
    </div>
}

@code {
    public record Model {
        public bool IsUnavailable { get; init; }
        public Chat? Chat { get; init; }
        public string? PermanentLink { get; set; }
        public ImmutableArray<InviteCode> InviteCodes { get; set; } = ImmutableArray.Create<InviteCode>();
    }

    [Inject] private Session Session { get; set; } = default!;
    [Inject] private IChats Chats { get; set; } = default!;
    [Inject] private IInviteCodes InviteCodes { get; set; } = default!;
    [Inject] private UICommandRunner Cmd { get; set; } = default!;
    [Inject] private NavigationManager Nav { get; set; } = default!;
    [Inject] private ClipboardService Clipboard { get; set; } = default!;

    [Parameter]
    public string ChatId { get; set; } = "";

    private string GenerateLink(InviteCode inviteCode)
        => Nav.BaseUri + "join/" + inviteCode.Value;

    private string GetRemainedTimeDescription(TimeSpan remained) {
        var totalDays = (int)remained.TotalDays;
        if (totalDays > 0) {
            if (totalDays == 1)
                return "1 day left";
            return $"{totalDays} days left";
        }
        var totalHours = (int) remained.TotalHours;
        if (totalHours > 0) {
            if (totalHours == 1)
                return "1 hour left";
            return $"{totalHours} hours left";
        }
        return "less than 1 hour";
    }

    protected override async Task<Model> ComputeState(CancellationToken cancellationToken) {
        var chat = await Chats.Get(Session, ChatId, default);
        if (chat == null)
            return new () { IsUnavailable = true };
        var inviteCodes = await InviteCodes.Get(Session, ChatId, cancellationToken);
        var threshold = DateTime.Now.AddDays(-3);
        inviteCodes = inviteCodes
            .Where(c => c.ExpiresOn > threshold)
            .OrderByDescending(c => c.ExpiresOn)
            .ToImmutableArray();
        var permanentLink = chat.IsPublic ? Nav.BaseUri + "chat/" + chat.Id.Value : "";
        return new () {Chat = chat, InviteCodes = inviteCodes, PermanentLink = permanentLink };
    }

    private void OnGenerateNewLink() {
        var command = new IInviteCodes.GenerateCommand(Session, ChatId);
        _ = Cmd.Run(command);
    }

    private void NavigateToChat()
        => Nav.NavigateTo($"/chat/{ChatId}");

    private async Task Copy(string link)
        => await Clipboard.WriteTextAsync(link);
}
