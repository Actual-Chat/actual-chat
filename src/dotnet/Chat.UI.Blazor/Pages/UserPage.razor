@page "/u/{UserId}"
@using System.Net
@inherits ComputedStateComponent<UserPage.Model>
@attribute [Authorize(Policy = KnownPolicies.IsUserActive)]
@{
    var m = State.LatestNonErrorValue;
    var user = m.User;
    if (user == null) {
        if (ReferenceEquals(m, Model.Unavailable))
            Nav.Unavailable("user");
        return;
    }
}

<MainHeader>
    <span class="text-secondary">User: @user.Name</span>
</MainHeader>

<div class="user-info_badge">
    <UserAuthorCircle UserId="@user.Id" Size="PersonCircleSize.Size12" ShowsPresence="true" />
    <UserAuthorName UserId="@user.Id" Class="text-primary font-semibold text-lg"/>
</div>

@if (m.CanAddContact || m.CanSendMessage) {
    <div class="user-info_buttons">
        <div class="btn-group btn-group-font-normal">
            @if (m.CanAddContact) {
                <Button Class="btn-success" Click="OnAddContactClick" IsDisabled="@IsAddingContact">Add to Contacts</Button>
            }
            @if (m.CanSendMessage) {
                <Button Class="btn-success" Click="OnSendMessageClick">Send Message</Button>
            }
        </div>
    </div>
}

<h4 class="section section-top">Link to this page</h4>
<UserPageLink/>

@code {
    [Inject] public Session Session { get; init; } = null!;
    [Inject] public IUserProfiles UserProfiles { get; init; } = null!;
    [Inject] private IChats Chats { get; init; } = null!;
    [Inject] private IChatAuthors ChatAuthors { get; init; } = null!;
    [Inject] private NavigationManager Nav { get; init; } = null!;
    [Inject] private UICommandRunner Cmd { get; init; } = null!;

    private bool IsAddingContact { get; set; }

    [Parameter] public string UserId { get; set; } = "";

    protected override ComputedState<Model>.Options GetStateOptions()
        => new() {
            InitialValue = Model.None,
            UpdateDelayer = UpdateDelayer.MinDelay,
        };

    protected override async Task<Model> ComputeState(CancellationToken cancellationToken) {
        var userProfile = await UserProfiles.GetByUserId(Session, UserId, cancellationToken);
        if (userProfile == null)
            return Model.Unavailable;

        return new Model {
            User = userProfile.User,
            CanAddContact = await ChatAuthors.CanAddToContacts(Session, UserId, default).ConfigureAwait(false),
            CanSendMessage = await Chats.CanSendPeerChatMessage(Session, UserId, default).ConfigureAwait(false),
        };
    }

    public sealed record Model {
        public static Model None { get; } = new();
        public static Model Unavailable { get; } = new();

        public User? User { get; init; }
        public bool CanAddContact { get; init; }
        public bool CanSendMessage { get; init; }
    }

    private async Task OnAddContactClick() {
        if (IsAddingContact)
            return;
        IsAddingContact = true;
        StateHasChanged();
        try {
            var (_, e) = await Cmd.Run(new IChatAuthors.AddToContactsCommand(Session, UserId));
        }
        finally {
            IsAddingContact = false;
            StateHasChanged();
        }
    }

    private async Task OnSendMessageClick() {
        var peerChatId = await Chats.GetPeerChatId(Session, UserId, default);
        if (peerChatId.IsNullOrEmpty())
            return;
        Nav.NavigateTo($"/chat/{peerChatId.UrlEncode()}");
    }
}
