@page "/u/{UserId}"
@using ActualChat.Contacts
@inherits ComputedStateComponent<UserPage.Model>
@{
    var m = State.LatestNonErrorValue;
    var account = m.Account;
    if (!Account.MustExist.IsSatisfied(account)) {
        if (ReferenceEquals(m, Model.None)) {
            <RequireOtherAccount UserId="@UserId" />
            return;
        }
        // Model isn't loaded yet
        return;
    }
}

<RequireAccount/>
<MainHeader>
    <span>User:&nbsp;</span>
    <span class="text-01">@account.Avatar.Name</span>
</MainHeader>

<div class="user-info_badge">
    <AccountCircle UserId="@UserId" Size="SquareSize.Size12" ShowPresence="true" />
    <AccountName UserId="@UserId" Class="text-02 font-semibold text-lg"/>
</div>

@if (m.CanAddContact || m.CanChat) {
    <div class="user-info_buttons">
        <div class="btn-group btn-group-font-normal">
            @if (m.CanAddContact) {
                <Button Class="btn-primary" Click="OnAddContactClick" IsDisabled="@IsAddingContact">Add to Contacts</Button>
            }
            @if (m.CanChat) {
                <Button Class="btn-primary" Click="OnSendMessageClick">Send Message</Button>
            }
        </div>
    </div>
}

<h4 class="section section-top">Link to this page</h4>
<UserPageLink/>

@code {
    [Inject] private Session Session { get; init; } = null!;
    [Inject] private IAccounts Accounts { get; init; } = null!;
    [Inject] private IChats Chats { get; init; } = null!;
    [Inject] private IContacts Contacts { get; init; } = null!;
    [Inject] private NavigationManager Nav { get; init; } = null!;
    [Inject] private UICommander UICommander { get; init; } = null!;

    private bool IsAddingContact { get; set; }

    [Parameter] public string UserId { get; set; } = "";

    protected override ComputedState<Model>.Options GetStateOptions()
        => new() {
            InitialValue = Model.Loading,
            UpdateDelayer = FixedDelayer.Instant,
        };

    protected override async Task<Model> ComputeState(CancellationToken cancellationToken) {
        var userId = new UserId(UserId, ParseOptions.OrNone);
        if (userId.IsNone)
            return Model.None;

        var ownAccount = await Accounts.GetOwn(Session, default);
        var account = await Accounts.Get(Session, userId, cancellationToken);
        if (account == null)
            return Model.None;

        var peerChatId = new PeerChatId(ownAccount.Id, account.Id);
        var contactId = new ContactId(ownAccount.Id, peerChatId, ParseOptions.Skip);
        var contactIds = await Contacts.ListIds(Session, cancellationToken).ConfigureAwait(false);
        return new Model {
            OwnAccount = ownAccount,
            Account = account,
            PeerChatId = peerChatId,
            ContactId = contactId,
            CanAddContact = !contactIds.Any(x => x == contactId),
            CanChat = true,
        };
    }

    private async Task OnAddContactClick() {
        if (IsAddingContact)
            return;

        IsAddingContact = true;
        StateHasChanged();
        try {
            var m = State.LatestNonErrorValue;
            m.Account.Require();
            var command = new IContacts.ChangeCommand(Session, m.ContactId, null, new Change<Contact>() {
                Create = new Contact(m.ContactId),
            });
            await UICommander.Run(command);
        }
        finally {
            IsAddingContact = false;
            StateHasChanged();
        }
    }

    private void OnSendMessageClick() {
        var m = State.LatestNonErrorValue;
        m.Account.Require();
        Nav.NavigateTo(Links.ChatPage(m.PeerChatId));
    }

    // Nested types

    public sealed record Model {
        public static Model None { get; } = new();
        public static Model Loading { get; } = new() { Account = Account.Loading }; // Should differ by ref. from None

        public AccountFull OwnAccount { get; init; } = AccountFull.None;
        public Account Account { get; init; } = Account.None;
        public PeerChatId PeerChatId { get; init; }
        public ContactId ContactId { get; init; }
        public bool CanAddContact { get; init; }
        public bool CanChat { get; init; }
    }
}
