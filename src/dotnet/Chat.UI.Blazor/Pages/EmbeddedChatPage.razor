@page "/embedded/{ChatSid}"
@inherits ChatPage
@layout BaseLayout
@{
    var m = Rendered = State.Value;

    var chatContext = m.ChatContext;
    var chat = m.ChatContext.Chat;
    var chatKey = chat.Id.Value;
    // Log.LogDebug("Rendered for #{ChatId}", chat.Id);
}

<div class="page-with-header-and-footer">
    <ErrorBarrier Name="EmbeddedChatPage">
        <RegionVisibilityProvider IsRegionVisible="@PanelsUI.Middle.IsVisible">
            <div class="list-view-layout">
                <div class="layout-header">
                    <ChatHeader
                        @key="@chatKey"
                        ChatContext="@chatContext"
                        IsLeftNavigateButtonVisible="@false"
                        IsRightNavigateButtonVisible="@false" />
                </div>
                <div class="layout-subheader">
                    @if (chatContext.HasChat) {
                        <Banners @key="@chatKey" ChatContext="@chatContext"/>
                    }
                </div>
                <div class="layout-body-wrapper">
                    <div class="c-container">
                        <div class="layout-footer">
                            <ChatFooter @key="@chatKey" ChatContext="@chatContext" Model="m.FooterModel" />
                        </div>
                        <div class="layout-subfooter">
                            <RenderStack Name="SubFooter"/>
                        </div>
                        <div class="layout-body">
                            @if (ReferenceEquals(chat, SpecialChat.Loading)) {
                                <chat-view-skeleton count="15" />
                            } else if (ReferenceEquals(chat, SpecialChat.NoChatSelected)) {
                                <NoChatSelected/>
                            } else if (ReferenceEquals(chat, SpecialChat.Unavailable)) {
                                <ChatNotFound ShowSignIn="@(!chatContext.OwnAccount.IsActive())"/>
                            } else {
                                <ChatView @ref="ChatViewRef" @key="@chatKey" ChatContext="@chatContext"/>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </RegionVisibilityProvider>
    </ErrorBarrier>
</div>

@code {
    protected override void OnInitialized() {
        PanelsUI.Left.SetIsVisible(false);
        PanelsUI.Right.SetIsVisible(false);
        base.OnInitialized();
    }

    protected override async Task<Model> ComputeState(CancellationToken cancellationToken) {
        // We intentionally use ChatUI.SelectedChatId rather than ChatSid here,
        // coz OnSetParametersAsync anyway propagates ChatSid to SelectedChatId,
        // and moreover, we want to make sure ComputeState gets invalidated
        // specifically when SelectedChatId changes (vs when ChatSid changes).

        // var computed = Computed.GetCurrent()!;
        // computed.Invalidated += c => {
        //     Log.LogDebug("Invalidated: {Computed}", c.DebugDump());
        // };

        await ChatUI.WhenLoaded.WaitAsync(cancellationToken);
        var chatId = await ChatUI.SelectedChatId.Use(cancellationToken);
        var lastState = State.ValueOrDefault;
        var lastContext = lastState?.ChatContext;
        var lastChatId = lastContext?.Chat.Id ?? ChatId.None;
        // Log.LogDebug("ComputeState(), ChatId: #{ChatId}", chatId);

        var account = await Accounts.GetOwn(Session, cancellationToken);
        try {
            var chat = SpecialChat.NoChatSelected;
            if (!chatId.IsNone) {
                chat = await Chats.Get(Session, chatId, cancellationToken);
                chat ??= SpecialChat.Unavailable;
            }
            if (chat is not { IsTemplate: true }) {
                var footerModel = await GetFooterModel(chat, account, cancellationToken);
                var chatContext = ChatContext.New(Services, Session, chat, account, lastContext);
                return new Model(chatContext, footerModel);
            }

            // Create new chat based on a template and redirect to the new clone
            {
                var command = new Chats_GetOrCreateFromTemplate(Session, chatId);
                var (newChat, createChatError) = await UICommander.Run(command, CancellationToken.None);
                if (createChatError != null)
                    throw StandardError.Unavailable("Unable to create new chat from template");

                // Short delay to process the invalidation
                await Task.Delay(TimeSpan.FromSeconds(0.25), cancellationToken);

                // Set new ChatSid
                ChatSid = newChat.Id;
                await SelectChat(ChatSid);

                // Subscribe to chat changes
                chat = await Chats.Get(Session, newChat.Id, cancellationToken).Require();
                var footerModel = await GetFooterModel(chat, account, cancellationToken);
                var chatContext = ChatContext.New(Services, Session, chat, account, lastContext);
                return new Model(chatContext, footerModel);
            }
        }
        catch (Exception e) when (e is not OperationCanceledException) {
            Log.LogWarning(e, "Failed to get Chat #{ChatId}", chatId);
            this.NotifyStateHasChanged();
            return Model.Unavailable(Services, Session, account, lastContext);
        }
    }
}
