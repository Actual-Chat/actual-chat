@page "/embedded/{ChatSid}"
@using System.Diagnostics.CodeAnalysis
@inherits ComputedStateComponent<EmbeddedChatPage.Model>
@layout BaseLayout
@{
    var m = _rendered = State.Value;
    var chat = m.Chat;
    var chatOrNone = m.Chat ?? Chat.None;
    var isLoading = ReferenceEquals(m, Model.Loading);
    var chatOrLoading = isLoading
        ? ChatUI.Loading
        : chatOrNone;
    // Log.LogDebug("Rendered for #{ChatId}", m.ChatId);
}

<div class="page-with-header-and-footer h-full w-full flex-x">
    <ErrorBarrier>
        <RegionVisibilityProvider IsRegionVisible="@PanelsUI.Middle.IsVisible">
            <div class="list-view-layout relative h-full w-full flex-y flex-nowrap justify-between overflow-hidden">
                <div class="layout-header flex-none flex-y w-full overflow-hidden bg-02">
                    <ChatHeader Chat="@chatOrLoading" IsLeftNavigateButtonVisible="@false" IsRightNavigateButtonVisible="@false" />
                </div>
                <div class="layout-subheader flex-none flex-y w-full overflow-visible absolute top-14 z-10">
                    <Banners Chat="@chatOrLoading"/>
                </div>
                <div class="flex-1 flex-x h-full overflow-hidden">
                    <div class="flex-1 -flex-y h-full overflow-hidden relative">
                        <div class="layout-footer flex-none flex-y w-full overflow-visible z-10">
                            <ChatFooter ChatSid="@ChatSid" />
                        </div>
                        <div class="layout-subfooter flex-none flex-y w-full overflow-visible">
                            <RenderStack Name="SubFooter"/>
                        </div>
                        <div class="layout-body flex-1 custom-scrollbar">
                            @if (m.ChatId.IsNone) {
                                <NoChatSelected/>
                            } else if (chat == null) {
                                <ChatNotFound ShowSignIn="@(!m.Account.IsActive())"/>
                            } else {
                                <CascadingValue Value="chat" @key="ChatSid">
                                    <ChatView @ref="_chatViewRef" Chat="@chatOrLoading" />
                                </CascadingValue>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </RegionVisibilityProvider>
    </ErrorBarrier>
</div>

@code {
    private Model? _rendered;
    private ChatView _chatViewRef = null!;

    private ChatId ChatId { get; set; } = ChatId.None;

    [Inject] private Session Session { get; init; } = null!;
    [Inject] private PanelsUI PanelsUI { get; init; } = null!;
    [Inject] private IAccounts Accounts { get; init; } = null!;
    [Inject] private IChats Chats { get; init; } = null!;
    [Inject] private ChatUI ChatUI { get; init; } = null!;
    [Inject] private History History { get; init; } = null!;
    [Inject] private UICommander UICommander { get; init; } = null!;
    [Inject] private ChatAudioUI ChatAudioUI { get; init; } = null!;
    [Inject] private BrowserInfo BrowserInfo { get; init; } = null!;
    [Inject] private ILogger<ChatPage> Log { get; init; } = null!;

    [Parameter] public string? ChatSid { get; set; }

    protected override Task OnInitializedAsync() {
        // Set ChatId before calling ComputeState
        ChatId = new (ChatSid, ParseOrNone.Option);
        ChatAudioUI.Enable();
        PanelsUI.Left.SetIsVisible(false);
        PanelsUI.Right.SetIsVisible(false);
        return ChatUI.WhenLoaded; // Nothing happens until we load everything
    }

    protected override Task OnParametersSetAsync() {
        ChatId = new (ChatSid, ParseOrNone.Option);
        ChatUI.SelectChat(ChatId);

        // No need to call base.OnParametersSetAsync() here, coz
        // ChatUI.SelectChat(...) triggers UICommander.RunNothing() anyway
        return Task.CompletedTask;
    }

    protected override ComputedState<Model>.Options GetStateOptions()
        => new() {
            InitialValue = Model.Loading,
            Category = GetStateCategory(),
        };

    protected override async Task<Model> ComputeState(CancellationToken cancellationToken) {
        // Log.LogDebug("ComputeState(), ChatId: #{ChatId}", ChatId);
        var screenSize = await BrowserInfo.ScreenSize.Use(cancellationToken);
        if (ChatId.IsNone) // Weird case: this should never happen due to code in OnParametersSetAsync
            return Model.None(screenSize);

        var account = await Accounts.GetOwn(Session, cancellationToken);
        try {
            var chat = await Chats.Get(Session, ChatId, cancellationToken);
            if (chat is not {IsTemplate: true })
                return new (ChatId, chat, account, screenSize);

            // create new chat based on a template and redirect to the new clone
            var command = new IChats.GetOrCreateFromTemplateCommand(Session, ChatId);
            var (newChat, createChatError) = await UICommander.Run(command, CancellationToken.None);
            if (createChatError != null)
                return Model.None(screenSize);

            // Short delay to process invalidation
            await Task.Delay(TimeSpan.FromSeconds(0.25), cancellationToken);
            _ = History.NavigateTo(Links.EmbeddedChat(newChat.Id));
            return Model.Loading;
        }
        catch (Exception e) when (e is not OperationCanceledException) {
            Log.LogWarning(e, "Failed to get Chat #{ChatId}", ChatId);
            return new (ChatId, null, account, screenSize);
        }
    }

    protected override bool ShouldRender()
        => ReferenceEquals(_rendered, null)
            || State.HasError
            || !State.Value.IsIdenticalTo(_rendered);

    // Nested types

    public sealed record Model(
        ChatId ChatId,
        Chat? Chat,
        AccountFull Account,
        ScreenSize ScreenSize = ScreenSize.Unknown
    ) {
        public static Model Loading { get; } = new(default, null, AccountFull.Loading); // Should differ by ref. from None
        public static Model None(ScreenSize screenSize) => new(default, null, AccountFull.None, screenSize);

        public bool IsIdenticalTo([NotNullWhen(true)] Model? other) {
            if (other == null)
                return false;

            return ChatId == other.ChatId
                   && ReferenceEquals(Chat, other.Chat)
                   && ReferenceEquals(Account, other.Account)
                   && ScreenSize == other.ScreenSize;
        }
    }
}
