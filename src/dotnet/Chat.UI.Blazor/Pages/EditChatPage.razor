@page "/chat/{ChatId}/edit"
@using System.ComponentModel.DataAnnotations

@if (_chat != null) {
    <div class="px-2 py-2">
        <div>
            <h3>Chat <b>"@(_chat.Title)"</b> properties:</h3>
        </div>
        <div class="mt-5">
            <EditForm Model="@_model" OnValidSubmit="@OnSave">
                <DataAnnotationsValidator/>

                <div>
                    <label for="Title" class="block text-sm font-medium text-secondary">Chat title</label>
                    <div class="mt-1">
                        <InputText @bind-Value="@_model.Title" id="Title"
                                   class="w-full px-2 py-1 border border-1 border-gray-300 rounded-md focus:outline-none focus:border-sky-500"/>
                    </div>
                </div>

                <div>
                    <label for="ChatType" class="block text-sm font-medium text-secondary">Type</label>
                    <InputRadioGroup @bind-Value="_model.IsPublic" id="ChatType">
                        <InputRadio Value="@true"/><text>&nbsp;</text>Public chat<br>
                        <InputRadio Value="@false"/><text>&nbsp;</text>Private chat<br>
                    </InputRadioGroup>
                </div>

                <div class="mt-3 flex flex-row justify-end">
                    <button type="submit" class="bg-green-500 hover:bg-green-700 text-white py-1 px-4 rounded">Save</button>
                    <button type="button" class="bg-blue-500 hover:bg-blue-700 text-white py-1 px-4 rounded ml-3"
                            @onclick="NavigateToChat">Cancel</button>
                </div>
            </EditForm>
        </div>
    </div>
}

@code {
    private Chat? _chat;
    private readonly Model _model = new();

    [Inject] private Session Session { get; init; } = null!;
    [Inject] private IChats Chats { get; init; } = null!;
    [Inject] private UICommandRunner Cmd { get; init; } = null!;
    [Inject] private NavigationManager Nav { get; init; } = null!;

    [Parameter] public string ChatId { get; set; } = "";

    protected override async Task OnParametersSetAsync() {
        _chat = await Chats.Get(Session, ChatId, default);
        if (_chat == null) {
            Nav.Unavailable("chat");
            return;
        }

        _model.Title = _chat.Title;
        _model.IsPublic = _chat.IsPublic;
    }

    private async Task OnSave() {
        if (_chat == null)
            return;
        var modifiedChat = _chat with {
            Title = _model.Title,
            IsPublic = _model.IsPublic
        };
        var command = new IChats.UpdateChatCommand(Session, modifiedChat);
        await Cmd.Run(command);
        NavigateToChat();
    }

    private void NavigateToChat()
        => Nav.NavigateTo($"/chat/{ChatId}");

    public class Model
    {
        [Required]
        public string Title { get; set; } = "";
        public bool IsPublic { get; set; }
    }
}
