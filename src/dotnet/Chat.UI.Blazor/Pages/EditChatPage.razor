@page "/chat/{ChatId}/edit"
@using System.ComponentModel.DataAnnotations
@attribute [Authorize(Policy = KnownPolicies.IsUserActive)]

@if (_chat != null) {
    <MainHeader><b>"@(_chat.Title)"</b> chat properties</MainHeader>

    <EditForm Model="@_model" OnValidSubmit="@OnSave">
        <DataAnnotationsValidator/>

        <div>
            <label for="Title" class="block text-sm font-medium text-secondary">Chat title</label>
            <div class="mt-1">
                <TextBox @bind-Value="@_model.Title" id="Title" Autofocus="true"
                           class="input-imprinted w-full px-2 py-1 rounded-md focus:outline-none focus:border-sky-500"/>
            </div>
        </div>

        <div>
            <label for="ChatType" class="block text-sm font-medium text-secondary">Type</label>
            <InputRadioGroup @bind-Value="_model.IsPublic" id="ChatType">
                <InputRadio Value="@true"/><text>&nbsp;</text>Public chat<br>
                <InputRadio Value="@false"/><text>&nbsp;</text>Private chat<br>
            </InputRadioGroup>
        </div>

        <div class="mt-3 flex-x justify-end">
            <Button Type="@ButtonType.Submit">Save</Button>
            <Button Class="btn-cancel ml-2" Click="OnNavigateToChatClick">Cancel</Button>
        </div>
    </EditForm>
}

@code {
    private Chat? _chat;
    private readonly Model _model = new();

    [Inject] private Session Session { get; init; } = null!;
    [Inject] private IChats Chats { get; init; } = null!;
    [Inject] private UICommandRunner Cmd { get; init; } = null!;
    [Inject] private NavigationManager Nav { get; init; } = null!;

    [Parameter] public string ChatId { get; set; } = "";

    protected override async Task OnParametersSetAsync() {
        _chat = await Chats.Get(Session, ChatId, default);
        if (_chat == null) {
            Nav.Unavailable("chat");
            return;
        }

        _model.Title = _chat.Title;
        _model.IsPublic = _chat.IsPublic;
    }

    private async Task OnSave() {
        if (_chat == null)
            return;
        var modifiedChat = _chat with {
            Title = _model.Title,
            IsPublic = _model.IsPublic
        };
        var command = new IChats.UpdateChatCommand(Session, modifiedChat);
        await Cmd.Run(command);
        OnNavigateToChatClick();
    }

    private void OnNavigateToChatClick()
        => Nav.NavigateTo($"/chat/{ChatId}");

    public class Model
    {
        [Required]
        public string Title { get; set; } = "";
        public bool IsPublic { get; set; }
    }
}
