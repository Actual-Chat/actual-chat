@page "/chat/{ChatSid}"
@page "/chat"
@using System.Diagnostics.CodeAnalysis
@inherits ComputedStateComponent<ChatPage.Model>
@layout ListViewLayout
@{
    var m = _rendered = State.Value;
    var chat = m.Chat;
    var chatOrNone = m.Chat ?? Chat.None;
    var chatOrLoading = ReferenceEquals(m, Model.Loading) ? Chat.Loading : chatOrNone;
    // Log.LogDebug("Rendered for #{ChatId}", m.ChatId);
}

<AutoNavigateOnSignIn SourceUrl="@Links.Chats" TargetUrl="@Links.Chats" />

<RenderIntoSlot Name="MainHeader">
    <CascadingValue Value="@chatOrLoading">
        <ChatHeader />
    </CascadingValue>
</RenderIntoSlot>

<RenderIntoStack Name="SubHeader" Order="1000_000" Key="BannersSubHeader">
    @if (chat != null) {
        <CascadingValue Value="@chat">
            <Banners/>
        </CascadingValue>
    }
</RenderIntoStack>

<RenderIntoSlot Name="MainRightDrawer">
    @if (chat != null) {
        <CascadingValue Value="@chat">
            <ChatRightPanel/>
        </CascadingValue>
    }
</RenderIntoSlot>

<RenderIntoSlot Name="MainFooter">
    <CascadingValue Value="@chatOrLoading">
        <ChatFooter/>
    </CascadingValue>
</RenderIntoSlot>

@if (ReferenceEquals(m, Model.Loading)) {
    return;
}
@if (m.ChatId.IsNone) {
    <NoChatSelected/>
} else if (chat == null) {
    <ChatNotFound ShowSignIn="@(!m.Account.IsActive())"/>
} else {
    <CascadingValue Value="chat" @key="ChatSid">
        <ChatView @ref="_chatViewRef" />
    </CascadingValue>
}

@code {
    private Model? _rendered;
    private ChatView _chatViewRef = null!;
    private bool _isFirstLoad = true;

    [Inject] private Session Session { get; init; } = null!;
    [Inject] private IAccounts Accounts { get; init; } = null!;
    [Inject] private IChats Chats { get; init; } = null!;
    [Inject] private ChatUI ChatUI { get; init; } = null!;
    [Inject] private ChatAudioUI ChatAudioUI { get; init; } = null!;
    [Inject] private AutoNavigationUI AutoNavigationUI { get; init; } = null!;
    [Inject] private History History { get; init; } = null!;
    [Inject] private BrowserInfo BrowserInfo { get; init; } = null!;
    [Inject] private ILogger<ChatPage> Log { get; init; } = null!;

    [Parameter] public string? ChatSid { get; set; }

    protected override Task OnInitializedAsync() {
        ChatAudioUI.Enable();
        return ChatUI.WhenLoaded; // Nothing happens until we load everything
    }

    protected override Task OnParametersSetAsync() {
        var chatId = new ChatId(ChatSid ?? "", ParseOrNone.Option);
        ChatUI.SelectChat(chatId);

        // No need to call base.OnParametersSetAsync() here, coz
        // ChatUI.SelectChat(...) triggers UICommander.RunNothing() anyway
        return Task.CompletedTask;
    }

    protected override ComputedState<Model>.Options GetStateOptions()
        => new() {
            InitialValue = Model.Loading,
            Category = GetStateCategory(),
        };

    protected override async Task<Model> ComputeState(CancellationToken cancellationToken) {
        // We intentionally use ChatUI.SelectedChatId rather than ChatSid here,
        // coz OnSetParametersAsync anyway propagates ChatSid to SelectedChatId,
        // and moreover, we want to make sure ComputeState gets invalidated
        // specifically when SelectedChatId changes (vs when ChatSid changes).

        // var computed = Computed.GetCurrent()!;
        // computed.Invalidated += c => {
        //     Log.LogDebug("Invalidated: {Computed}", c.DebugDump());
        // };
        try {
            var chatId = await ChatUI.SelectedChatId.Use(cancellationToken);
            // Log.LogDebug("ComputeState(), ChatId: #{ChatId}", chatId);
            var screenSize = await BrowserInfo.ScreenSize.Use(cancellationToken);
            if (chatId.IsNone) // Weird case: this should never happen due to code in OnParametersSetAsync
                return Model.None(screenSize);

            // Let's delay chat loading when it it is invisible and it happens for the first time
            if (_isFirstLoad) {
                _isFirstLoad = false;
                if (screenSize.IsNarrow()) {
                    var panelsUI = Services.GetRequiredService<PanelsUI>();
                    if (panelsUI.Left.IsVisible.Value) {
                        Log.LogDebug("Delay loading for chat #{ChatId}", chatId);
                        await Task.Delay(TimeSpan.FromSeconds(0.75), cancellationToken);
                    }
                }
            }

            var account = await Accounts.GetOwn(Session, cancellationToken);
            try {
                var chat = await Chats.Get(Session, chatId, cancellationToken);
                return new Model(chatId, chat, account, screenSize);
            }
            catch (Exception e) when (e is not OperationCanceledException) {
                Log.LogWarning(e, "Failed to get Chat #{ChatId}", chatId);
                return new Model(chatId, null, account, screenSize);
            }
        }
        finally {
            // Log.LogDebug("ComputeState() - exit: {Computed}", computed.DebugDump());
        }
    }

    protected override bool ShouldRender()
        => ReferenceEquals(_rendered, null)
            || State.HasError
            || !State.Value.IsIdenticalTo(_rendered);

    // Nested types

    public sealed record Model(
        ChatId ChatId,
        Chat? Chat,
        AccountFull Account,
        ScreenSize ScreenSize = ScreenSize.Unknown
    ) {
        public static Model Loading { get; } = new(default, null, AccountFull.Loading); // Should differ by ref. from None
        public static Model None(ScreenSize screenSize) => new(default, null, AccountFull.None, screenSize);

        public bool IsIdenticalTo([NotNullWhen(true)] Model? other) {
            if (other == null)
                return false;

            return ChatId == other.ChatId
                   && ReferenceEquals(Chat, other.Chat)
                   && ReferenceEquals(Account, other.Account)
                   && ScreenSize == other.ScreenSize;
        }
    }
}
