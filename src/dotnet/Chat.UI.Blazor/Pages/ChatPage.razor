@page "/chat/{ChatId}"
@page "/chat/"
@using ActualChat.Notification.UI.Blazor
@using System.Diagnostics.CodeAnalysis
@inherits ComputedStateComponent<ChatPage.Model>
@layout ListViewLayout
@{
    var m = _rendered = State.Value;
    var error = State.Error; // AY: Add code displaying the error bar later
    var chat = m.Chat;
    if (m.ShowHome) {
        Nav.NavigateTo(Links.Home);
        return;
    }
}

@* @key=... ensures child components are recreated on navigation to another chat *@

@if (m == Model.Loading) {
    /* Chat isn't yet fetched, so nothing to render on the right side */
    return;
}

@if (m.IsNotSelected) {
    if (ScreenSize.IsWide()) {
        <NoChatSelected/>
    }
    return;
}

@if (m.IsUnavailable && ScreenSize.IsWide()) {
    <ChatNotFound ShowSignIn="@(!m.Account.IsActive())"/>
    return;
}

<RenderIntoSlot Name="MainHeader">
    <CascadingValue Value="chat">
        <ChatHeader/>
    </CascadingValue>
</RenderIntoSlot>

<RenderIntoStack Name="SubHeader" Order="1000_000" Key="UnreadMessagesSubHeader">
    <CascadingValue Value="chat">
        <UnreadCountSubHeader Click="@OnUnreadCountSubHeaderClick"/>
    </CascadingValue>
</RenderIntoStack>

<RenderIntoStack Name="SubHeader" Order="1000_000" Key="BannersSubHeader">
    <CascadingValue Value="chat">
        <Banners/>
    </CascadingValue>
</RenderIntoStack>

<RenderIntoSlot Name="MainFooter">
    <CascadingValue Value="chat">
        <ChatFooter/>
    </CascadingValue>
</RenderIntoSlot>

<RenderIntoSlot Name="MainRightDrawer">
    <CascadingValue Value="chat">
        <ChatRightPanel/>
    </CascadingValue>
</RenderIntoSlot>

<CascadingValue Value="chat" @key="chat!.Id">
    <ChatView @ref="_chatViewRef" />
</CascadingValue>

@code {
    private Model? _rendered;
    private ChatView _chatViewRef = null!;

    [Inject] private Session Session { get; init; } = null!;
    [Inject] private NotificationUI NotificationUI { get; init; } = null!;
    [Inject] private IAccounts Accounts { get; init; } = null!;
    [Inject] private IChats Chats { get; init; } = null!;
    [Inject] private ChatUI ChatUI { get; init; } = null!;
    [Inject] private AuthUI AuthUI { get; init; } = null!;
    [Inject] private OnboardingUI OnboardingUI { get; init; } = null!;
    [Inject] private NavigationManager Nav { get; init; } = null!;

    [Parameter] public string ChatId { get; set; } = "";
    [CascadingParameter] public ScreenSize ScreenSize { get; set; }

    protected override bool ShouldRender()
        => ReferenceEquals(_rendered, null)
            || State.HasError
            || !ReferenceEquals(_rendered, State.Value);

    protected override Task OnAfterRenderAsync(bool firstRender) {
        if (!firstRender)
            return Task.CompletedTask;

        _ = NotificationUI.EnsureDeviceRegistered(CancellationToken.None);
        _ = OnboardingUI.TryShow();

        return Task.CompletedTask;
    }

    protected override ComputedState<Model>.Options GetStateOptions()
        => new() {
            InitialValue = Model.Loading,
            Category = GetStateCategory(),
        };

    protected override async Task<Model> ComputeState(CancellationToken cancellationToken) {
        var model = await ComputeStateInternal(cancellationToken);
        return model.IsIdenticalTo(_rendered) ? _rendered : model;
    }

    private async Task<Model> ComputeStateInternal(CancellationToken cancellationToken)
    {
        var chatId = new ChatId(ChatId, ParseOrNone.Option);
        if (chatId.IsNone)
            chatId = await ChatUI.SelectedChatId.Use(cancellationToken);
        if (chatId.IsNone)
            return Model.NotSelected(ScreenSize);

        if (ChatUI.SelectedChatId.Value != chatId)
        {
            ChatUI.SelectChat(chatId);
            if (ChatUI.RelatedChatEntry.Value != null)
                ChatUI.HideRelatedEntry(false);
        }

        var chat = await Chats.Get(Session, chatId, cancellationToken);
        var account = await Accounts.GetOwn(Session, cancellationToken);
        var hasEverSignedIn = await AuthUI.HasEverSignedIn.Use(cancellationToken);
        return new Model(chatId, chat, account, hasEverSignedIn, ScreenSize);
    }

    private void OnUnreadCountSubHeaderClick()
        => _ = _chatViewRef.NavigateToUnreadEntry();

    public sealed record Model(ChatId ChatId, Chat? Chat, AccountFull Account, bool HasEverSignedIn, ScreenSize ScreenSize = ScreenSize.Unknown) {
        public static Model Loading { get; } = new(default, null, AccountFull.Loading, false); // Should differ by ref. from None
        public static Model NotSelected(ScreenSize screenSize) => new(default, null, AccountFull.None, false, screenSize);

        public bool IsNotSelected => ChatId.Id.IsEmpty && Chat is null;
        public bool IsUnavailable => !ChatId.Id.IsEmpty && Chat is null;
        public bool ShowHome => IsUnavailable && !Account.IsActive() && !HasEverSignedIn;

        public bool IsIdenticalTo([NotNullWhen(true)] Model? other) {
            if (other == null)
                return false;
            return ChatId == other.ChatId
                   && ReferenceEquals(Chat, other.Chat)
                   && ReferenceEquals(Account, other.Account)
                   && ScreenSize == other.ScreenSize;
        }
    }
}
