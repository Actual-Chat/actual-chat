@page "/chat/{ChatId}"
@using ActualChat.Notification.UI.Blazor
@using Blazored.LocalStorage
@inherits ComputedStateComponent<ChatPage.Model>
@layout ChatPageLayout
@{
    var m = _lastRenderedModel = State.LatestNonErrorValue;
    var error = State.Error;
    if (!m.NavigateToChatId.IsNullOrEmpty())
        Nav.Chat(m.NavigateToChatId);
    if (m.IsUnavailable)
        Nav.Unavailable("chat");
    if (m.MustLogin)
        Nav.Login("to view this chat");
    var chat = m.Chat;
}

@if (error != null) {
    <Error Title="Update error" Class="mb-3">@error.Message</Error>
    return;
}
@if (chat == null) {
    <div>Loading...</div>
    return;
}
@if (!chat.IsPublic) {
    <RequireAccount/>
}
@* @key=... ensures child components are recreated on navigation to another chat *@
<RenderIntoSlot Name="MainHeader">
    <CascadingValue Value="chat" @key="chat.Id">
        <ChatHeader/>
    </CascadingValue>
</RenderIntoSlot>

<RenderIntoStack Name="SubHeader" Order="-1000_000">
    <CascadingValue Value="chat" @key="chat.Id">
        <HistoricalPlaybackSubHeader/>
    </CascadingValue>
</RenderIntoStack>
<RenderIntoStack Name="SubHeader" Order="1000_000">
    <CascadingValue Value="chat" @key="chat.Id">
        <UnreadMessagesSubHeader Click="@OnUnreadMessagesClick"/>
    </CascadingValue>
</RenderIntoStack>

<RenderIntoSlot Name="MainFooter">
    <CascadingValue Value="chat" @key="chat.Id">
        <ChatFooter/>
    </CascadingValue>
</RenderIntoSlot>

<RenderIntoStack Name="SubFooter" Order="-1000_000">
    <CascadingValue Value="chat" @key="chat.Id">
        <RecordingElsewhereSubHeader/>
    </CascadingValue>
</RenderIntoStack>

<RenderIntoSlot Name="MainRightPanel">
    <CascadingValue Value="chat" @key="chat.Id">
        <ChatRightPanel/>
    </CascadingValue>
</RenderIntoSlot>

<CascadingValue Value="chat" @key="chat.Id">
    <ChatView @ref="_chatView" />
</CascadingValue>

@code {
    private Model? _lastRenderedModel;
    private ChatView _chatView = null!;

    [Inject] private Session Session { get; init; } = null!;
    [Inject] private IChats Chats { get; init; } = null!;
    [Inject] private ChatUI ChatUI { get; init; } = null!;
    [Inject] private RightPanelUI RightPanelUI { get; init; } = null!;
    [Inject] private NavigationManager Nav { get; init; } = null!;
    [Inject] private DeviceInfo DeviceInfo { get; init; } = null!;
    [Inject] private ILocalStorageService LocalStorage { get; init; } = null!;

    [Parameter] public string ChatId { get; set; } = "";

    protected override bool ShouldRender()
        => ReferenceEquals(_lastRenderedModel, null)
            || State.HasError
            || !ReferenceEquals(_lastRenderedModel, State.LatestNonErrorValue);

    protected override Task OnAfterRenderAsync(bool firstRender) {
        if (!firstRender)
            return Task.CompletedTask;

        _ = DeviceInfo.EnsureDeviceRegistered(CancellationToken.None);
        return Task.CompletedTask;
    }

    protected override ComputedState<Model>.Options GetStateOptions()
        => new() {
            InitialValue = Model.None,
            UpdateDelayer = UpdateDelayer.ZeroDelay,
        };

    protected override async Task<Model> ComputeState(CancellationToken cancellationToken) {
        var lastRenderedChat = _lastRenderedModel?.Chat;
        var chat = await Chats.Get(Session, ChatId, cancellationToken);
        if (chat == null) {
            if (lastRenderedChat != null && lastRenderedChat.Id == ChatId) {
                // Chat became unavailable - let's redirect the user to the first available chat
                var chats = await Chats.GetChats(Session, CancellationToken.None);
                var chat1 = chats.FirstOrDefault();
                if (chat1 != null)
                    return new Model() { NavigateToChatId = chat1.Id };
            }
            return new() { IsUnavailable = true };
        }

        // We want to return the same Chat instance while it stays unchanged
        var isTheSameModel = lastRenderedChat != null
            && lastRenderedChat.Id == chat.Id
            && lastRenderedChat.Version == chat.Version;
        return isTheSameModel ? _lastRenderedModel! : new() { Chat = chat };
    }

    protected override async Task OnParametersSetAsync() {
        if (ChatUI.ActiveChatId.Value != ChatId) {
            ChatUI.ActiveChatId.Value = ChatId;
            await LocalStorage.SetActiveChatId(ChatId).ConfigureAwait(false);
        }

        await base.OnParametersSetAsync();
    }

    private void OnUnreadMessagesClick()
        => _ = _chatView.NavigateToUnreadEntry();

    public sealed record Model {
        public static Model None { get; } = new();

        public bool IsUnavailable { get; init; }
        public string? NavigateToChatId { get; init; }
        public bool MustLogin { get; init; }
        public Chat? Chat { get; init; }
    }
}
