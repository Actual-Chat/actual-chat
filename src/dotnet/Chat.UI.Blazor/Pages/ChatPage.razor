@page "/chat/{ChatSid}"
@page "/chat"
@using ActualChat.Hosting
@inherits ComputedStateComponent<ChatPage.Model>
@layout ListViewLayout
@{
    var m = Rendered = State.Value;
    if (_isVeryFirstLoad && !PanelsUI.Middle.IsVisible.Value)
        return;

    var chat = m.Chat;
    var hasChat = !chat.Id.IsNone;
    // Log.LogDebug("Rendered for #{ChatId}", m.ChatId);
}

<RenderIntoSlot Name="MainHeader">
    <ChatHeader @key="@chat" Chat="@chat" />
</RenderIntoSlot>

<RenderIntoSlot Name="MainFooter">
    <ChatFooter ChatPageModel="@m" />
</RenderIntoSlot>

<RenderIntoStack Name="SubHeader" Order="1000_000" Key="BannersSubHeader">
    @if (hasChat) {
        <Banners @key="@chat" Chat="@chat"/>
    } else {
        <AlwaysVisibleBanners/>
    }
</RenderIntoStack>

<RenderIntoSlot Name="MainRightDrawer">
    @if (hasChat) {
        <ChatRightPanel @key="@chat" Chat="@chat"/>
    }
</RenderIntoSlot>

@if (ReferenceEquals(chat, SpecialChat.Loading)) {
    <chat-view-skeleton count="15" />
    return;
}
@if (ReferenceEquals(chat, SpecialChat.NoChatSelected)) {
    <NoChatSelected/>
} else if (ReferenceEquals(chat, SpecialChat.Unavailable)) {
    <ChatNotFound ShowSignIn="@(!m.Account.IsActive())"/>
} else {
    <ChatView @ref="ChatViewRef" @key="@chat.Id.Value" Chat="@chat"/>
}

@code {
    protected static TimeSpan VeryFirstLoadDelay = TimeSpan.FromSeconds(1.5);
    protected static TimeSpan LoadTimeout = TimeSpan.FromSeconds(1);
    private static bool _isVeryFirstLoad = true;

    protected Model? Rendered;
    protected ChatView ChatViewRef = null!;

    [Inject] protected Session Session { get; init; } = null!;
    [Inject] protected IAccounts Accounts { get; init; } = null!;
    [Inject] protected IChats Chats { get; init; } = null!;
    [Inject] protected IAvatars Avatars { get; init; } = null!;
    [Inject] protected ChatUI ChatUI { get; init; } = null!;
    [Inject] protected ChatAudioUI ChatAudioUI { get; init; } = null!;
    [Inject] protected PanelsUI PanelsUI { get; init; } = null!;
    [Inject] protected BrowserInfo BrowserInfo { get; init; } = null!;
    [Inject] protected ILogger<ChatPage> Log { get; init; } = null!;

    [Parameter] public string? ChatSid { get; set; }

    protected override void OnInitialized() {
        ChatAudioUI.Enable();
        // We need to call SelectChat() before ComputeState starts working,
        // coz ComputeState relies on ChatUI.SelectedChatId, which is set there.
        _ = SelectChat(ChatSid);
        base.OnInitialized();
    }

    protected override Task OnParametersSetAsync() {
        _ = SelectChat(ChatSid);
        return base.OnParametersSetAsync();
    }

    protected override ComputedState<Model>.Options GetStateOptions()
        => new() {
            InitialValue = Model.Loading,
            Category = GetStateCategory(),
        };

    protected override async Task<Model> ComputeState(CancellationToken cancellationToken) {
        // We intentionally use ChatUI.SelectedChatId rather than ChatSid here,
        // coz OnSetParametersAsync anyway propagates ChatSid to SelectedChatId,
        // and moreover, we want to make sure ComputeState gets invalidated
        // specifically when SelectedChatId changes (vs when ChatSid changes).

        try {
            await ChatUI.WhenLoaded;
            var chatId = await ChatUI.SelectedChatId.Use(cancellationToken);
            var lastState = State.ValueOrDefault;
            var lastChatId = lastState?.Chat.Id ?? ChatId.None;
            // Log.LogDebug("ComputeState(), ChatId: #{ChatId}", chatId);

            if (_isVeryFirstLoad) {
                _isVeryFirstLoad = false;
                var hostInfo = Services.GetRequiredService<HostInfo>();
                var mustDelayVeryFirstLoad =
                    hostInfo.AppKind.IsClient()
                    && ChatSid.IsNullOrEmpty()
                    && BrowserInfo.ScreenSize.Value.IsNarrow();
                if (mustDelayVeryFirstLoad) {
                    // Postpone chat loading when it's invisible
                    Log.LogDebug("Delay loading for chat #{ChatId}", chatId);
                    await Task.Delay(VeryFirstLoadDelay, cancellationToken).ConfigureAwait(false);
                    this.NotifyStateHasChanged();
                }
            }

            var account = AccountFull.Loading;
            try {
                account = await Accounts
                    .GetOwn(Session, cancellationToken)
                    .WaitAsync(LoadTimeout, cancellationToken);
                var chat = SpecialChat.NoChatSelected;
                if (!chatId.IsNone) {
                    if (OSInfo.IsAndroid) {
                        // Postponing chat change to let left panel slide smoothly - don't change this delay!
                        var isChatChange = !lastChatId.IsNone && chatId != lastChatId;
                        if (isChatChange && PanelsUI.ScreenSize.Value.IsNarrow())
                            await Task.Delay(TimeSpan.FromSeconds(0.2), cancellationToken).ConfigureAwait(false);
                    }

                    chat = await Chats
                        .Get(Session, chatId, cancellationToken)
                        .WaitAsync(LoadTimeout, cancellationToken);
                    chat ??= SpecialChat.Unavailable;
                }
                var footer = await GetFooterModel(chat, account, cancellationToken);
                return new Model(chat, account, footer);
            }
            catch (TimeoutException) {
                return Model.Loading;
            }
            catch (Exception e) when (e is not OperationCanceledException) {
                Log.LogWarning(e, "Failed to get Chat #{ChatId}", chatId);
                return new Model(SpecialChat.Unavailable, account, new());
            }
        }
        finally {
            // Log.LogDebug("ComputeState() - exit: {Computed}", computed.DebugDump());
        }
    }

    protected async Task<FooterModel> GetFooterModel(Chat chat, Account account, CancellationToken cancellationToken) {
        var otherUserId = chat.Id.IsPeerChat(out var peerChatId)
            ? peerChatId.UserIds.OtherThan(account.Id)
            : default;
        var canPost = chat.Rules.CanWrite();
        var canJoin = !canPost && chat.Rules.CanJoin();
        var hasMultipleAvatars = false;
        var canJoinWithGuestAccount = false;
        var canJoinAnonymously = false;
        if (canJoin) {
            if (account.IsGuestOrNone) {
                canJoinWithGuestAccount = chat.AllowGuestAuthors;
            } else {
                canJoinAnonymously = chat.AllowAnonymousAuthors;
                var avatars = await Avatars
                    .ListOwnAvatarIds(Session, cancellationToken)
                    .WaitAsync(LoadTimeout, cancellationToken);
                hasMultipleAvatars = avatars.Count > 1 || canJoinAnonymously;
            }
        }

        return new() {
            OtherUserId = otherUserId,
            IsGuest = account.IsGuestOrNone,
            CanPost = canPost,
            CanJoin = canJoin,
            HasMultipleAvatars = hasMultipleAvatars,
            CanJoinWithGuestAccount = canJoinWithGuestAccount,
            CanJoinAnonymously = canJoinAnonymously,
        };
    }

    protected override bool ShouldRender()
        => ReferenceEquals(Rendered, null)
            || State.HasError
            || State.Value != Rendered;

    protected async ValueTask SelectChat(string? chatSid) {
        var chatId = new ChatId(chatSid, ParseOrNone.Option);
        if (ChatSid == null) {
            await ChatUI.WhenLoaded;
            chatId = ChatUI.SelectedChatId.Value;
            if (chatId.IsNone)
                chatId = Constants.Chat.AnnouncementsChatId;
        }
        ChatUI.SelectChat(chatId);
    }

    // Nested types

    public sealed record Model(
        Chat Chat,
        AccountFull Account,
        FooterModel Footer
    ) {
        public static Model Loading { get; } =
            new(SpecialChat.Loading, AccountFull.Loading, new FooterModel());
    }

    public sealed record FooterModel {
        public UserId OtherUserId { get; init; }
        public bool IsGuest { get; init; }
        public bool CanPost { get; init; }
        public bool CanJoin { get; init; }
        public bool HasMultipleAvatars { get; init; }
        public bool CanJoinWithGuestAccount { get; init; }
        public bool CanJoinAnonymously { get; init; }
    }
}
