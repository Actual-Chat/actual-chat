@page "/chat"
@page "/chat/{ChatId}"
@page "/direct/{ContactId}"
@using ActualChat.UI.Blazor.Module
@using ActualChat.Notification
@inherits ComputedStateComponent<ChatPage.Model>
@layout ChatPageLayout

@{
    _lastRenderedModel = State.LatestNonErrorValue ?? new();
    var model = _lastRenderedModel;
    var error = State.Error;
    if (model.IsUnavailable)
        Nav.Unavailable("chat");
    if (model.MustLogin)
        Nav.Login("to view this chat");
    var chat = model.Chat;
}

@if (error != null) {
    <WhenError Error="error"/>
} else if (chat != null) {
    @* @key=... ensures child components are recreated on navigation to another chat *@
    <RenderIntoSlot Name="MainHeader" @key="@(chat.Id + "-header")">
        <CascadingValue Value="chat">
            <div class="flex flex-row justify-end md:justify-between mt-0 font-medium bg-primary md:bg-secondary text-primary py-2 px-3 select-none border-b border-accent z-10">
                <NavbarIcon/>
                <ChatHeader/>
                <ChatActivityPanel/>
            </div>
        </CascadingValue>
    </RenderIntoSlot>

    <RenderIntoSlot Name="MainFooter" @key="@(chat.Id + "-footer")">
        <CascadingValue Value="chat">
            <ChatFooter AutoJoin="@AutoJoin"/>
        </CascadingValue>
    </RenderIntoSlot>

    <NoComponent @key="chat.Id">
        <CascadingValue Value="chat">
            <ChatView/>
            <HistoricalPlaybackPanel/>
        </CascadingValue>
    </NoComponent>
} else {
    <div>Loading...</div>
}

@code {
    private static string? _deviceToken;

    public const string AutoJoinQueryParameter = "auto-join";

    private Model? _lastRenderedModel;
    private IComputed? _activeChatIdComputed;

    [Inject] private Session Session { get; init; } = null!;
    [Inject] private IChats Chats { get; init; } = null!;
    [Inject] private ChatPageState ChatPageState { get; init; } = null!;
    [Inject] private NavigationManager Nav { get; init; } = null!;
    [Inject] private IJSRuntime Js { get; set; } = null!;
    [Inject] private UICommandRunner Cmd { get; init; } = null!;

    [Parameter] public string ChatId { get; set; } = "";
    [Parameter] public string ContactId { get; set; } = "";
    [Parameter, SupplyParameterFromQuery(Name = AutoJoinQueryParameter)]
    public string? AutoJoin { get; set; }

    protected override bool ShouldRender()
        => ReferenceEquals(_lastRenderedModel, null)
            || !ReferenceEquals(_lastRenderedModel, State.LatestNonErrorValue);

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (!firstRender)
            return;

        if (_deviceToken != null)
            return;

        _deviceToken = await Js.InvokeAsync<string?>($"{BlazorUICoreModule.ImportName}.getDeviceToken")
            .ConfigureAwait(true);
        if (_deviceToken != null)
            _ = RegisterDevice();
     }

    protected override async Task<Model> ComputeState(CancellationToken cancellationToken) {
        Chat? chat = null;
        if (!string.IsNullOrEmpty(ChatId))
            chat = await Chats.Get(Session, ChatId, cancellationToken).ConfigureAwait(true);
        if (chat == null)
            return new () { IsUnavailable = true };

        // We want to return the same Chat instance while it stays unchanged
        var renderedChat = _lastRenderedModel?.Chat;
        if (renderedChat != null && renderedChat.Id == chat.Id && renderedChat.Version == chat.Version)
            return _lastRenderedModel!;
        return new () { Chat = chat };
    }

    protected override void OnParametersSet() {
        base.OnParametersSet();
        ChatPageState.ActiveChatId.Value = ChatId;
        _activeChatIdComputed = ChatPageState.ActiveChatId.Computed;
    }

    public override async ValueTask DisposeAsync() {
        await base.DisposeAsync();
        _ = BackgroundTask.Run(async () => {
            await Task.Delay(TimeSpan.FromMilliseconds(50)).ConfigureAwait(false);
            // We want to avoid unnecessarily frequent ActiveChatId changes
            // (to Symbol.Empty on disposal & back on the next render)
            if (ChatPageState.ActiveChatId.Computed == _activeChatIdComputed)
                ChatPageState.ActiveChatId.Value = Symbol.Empty;
        });
    }

    private async Task RegisterDevice() {
        if (_deviceToken == null)
            return;

        var command = new INotifications.RegisterDeviceCommand(Session, _deviceToken, DeviceType.WebBrowser);
        await Cmd.Run(command);
    }

    public record Model {
        public bool IsUnavailable { get; init; }
        public bool MustLogin { get; init; }
        public Chat? Chat { get; init; }
    }
}
