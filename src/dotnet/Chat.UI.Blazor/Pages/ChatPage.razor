@page "/chat/{ChatSid}"
@page "/chat"
@using ActualChat.Hosting
@inherits ComputedStateComponent<ChatPage.Model>
@layout ListViewLayout
@{
    var m = Rendered = State.Value;
    if (_isVeryFirstLoad && !PanelsUI.Middle.IsVisible.Value)
        return;

    var chatContext = m.ChatContext;
    var chat = m.ChatContext.Chat;
    var chatKey = chat.Id.Value;
    // Log.LogDebug("Rendered for #{ChatId}", chat.Id);
}

@if (ReferenceEquals(chat, SpecialChat.Unavailable) && m is { IsInaccessiblePlace: true, EnableIncompleteUI: true }) {
     <RenderIntoSlot Name="MainLeftDrawer">
         <LeftPanel IsSkeletonWidePanel="@true">
             <WidePanelBottomContent>
                 <InaccessiblePlaceLeftPanelBottom/>
             </WidePanelBottomContent>
         </LeftPanel>
     </RenderIntoSlot>
}

<RenderIntoSlot Name="MainHeader">
    @if (ReferenceEquals(chat, SpecialChat.Unavailable)) {
        <SkeletonChatHeader/>
    } else {
        <ChatHeader @key="@chatKey" ChatContext="@chatContext"/>
    }
</RenderIntoSlot>

<RenderIntoSlot Name="MainFooter">
    <ChatFooter @key="@chatKey" ChatContext="@chatContext" Model="m.FooterModel" />
</RenderIntoSlot>

<RenderIntoStack Name="SubHeader" Order="1000_000" Key="BannersSubHeader">
    @if (chatContext.HasChat) {
        <Banners @key="@chatKey" ChatContext="@chatContext"/>
    } else {
        <AlwaysVisibleBanners/>
    }
</RenderIntoStack>

<RenderIntoSlot Name="MainRightDrawer">
    @if (ReferenceEquals(chat, SpecialChat.Unavailable) && m is { IsInaccessiblePlace: true, EnableIncompleteUI: true }) {
        <SkeletonRightPanel/>
    } else if (chatContext.HasChat) {
        <ChatRightPanel @key="@chatKey" ChatContext="@chatContext"/>
    }
</RenderIntoSlot>

@if (ReferenceEquals(chat, SpecialChat.Loading)) {
    <chat-view-skeleton count="15" />
    return;
}
@if (ReferenceEquals(chat, SpecialChat.NoChatSelected)) {
    <NoChatSelected/>
} else if (ReferenceEquals(chat, SpecialChat.Unavailable)) {
    if (m is { IsInaccessiblePlace: true, EnableIncompleteUI: true }) {
        <InaccessiblePlace ShowSignIn="@(!chatContext.OwnAccount.IsActive())"/>
    } else {
        <ChatNotFound ShowSignIn="@(!chatContext.OwnAccount.IsActive())"/>
    }
} else {
    <ChatView @ref="ChatViewRef" @key="@chatKey" ChatContext="@chatContext"/>
}

@code {
    protected static TimeSpan VeryFirstLoadDelay = TimeSpan.FromSeconds(1.5);
    protected static TimeSpan LoadTimeout = TimeSpan.FromSeconds(1);
    protected static TimeSpan LoadTimeoutToReloadDelay = TimeSpan.FromSeconds(2);
    private static bool _isVeryFirstLoad = true;
    private ILogger? _log;

    protected Model? Rendered;
    protected ChatView ChatViewRef = null!;

    [Inject] protected ChatUIHub Hub { get; init; } = null!;
    private Features Features => Hub.Features();
    protected Session Session => Hub.Session();
    protected IChats Chats => Hub.Chats;
    protected IAccounts Accounts => Hub.Accounts;
    protected IAvatars Avatars => Hub.Avatars;
    protected ChatUI ChatUI => Hub.ChatUI;
    protected AccountUI AccountUI => Hub.AccountUI;
    protected PanelsUI PanelsUI => Hub.PanelsUI;
    protected BrowserInfo BrowserInfo => Hub.BrowserInfo;
    protected UICommander UICommander => Hub.UICommander();
    protected ILogger Log => _log ??= Services.LogFor(GetType());

    [Parameter] public string? ChatSid { get; set; }

    protected override void OnInitialized() {
        Services.GetRequiredService<ChatAudioUI>().Enable();
        // We need to call SelectChat() before ComputeState starts working,
        // coz ComputeState relies on ChatUI.SelectedChatId, which is set there.
        _ = SelectChat(ChatSid);
        base.OnInitialized();
    }

    protected override Task OnParametersSetAsync() {
        _ = SelectChat(ChatSid);
        return base.OnParametersSetAsync();
    }

    protected override ComputedState<Model>.Options GetStateOptions()
        => new() {
            InitialValue = Model.Loading(Hub),
            Category = GetStateCategory(),
        };

    protected override async Task<Model> ComputeState(CancellationToken cancellationToken) {
        // We intentionally use ChatUI.SelectedChatId rather than ChatSid here,
        // coz OnSetParametersAsync anyway propagates ChatSid to SelectedChatId,
        // and moreover, we want to make sure ComputeState gets invalidated
        // specifically when SelectedChatId changes (vs when ChatSid changes).

        await ChatUI.WhenLoaded.WaitAsync(cancellationToken);
        var chatId = await ChatUI.SelectedChatId.Use(cancellationToken);
        var lastState = State.ValueOrDefault;
        var lastContext = lastState?.ChatContext;
        var lastChatId = lastContext?.Chat.Id ?? ChatId.None;

        var isInaccessiblePlace = !chatId.PlaceChatId.PlaceId.IsNone;
        var enableIncompleteUI = await Features.Get<Features_EnableIncompleteUI, bool>(cancellationToken);
        // Log.LogDebug("ComputeState(), ChatId: #{ChatId}", chatId);

        if (_isVeryFirstLoad) {
            _isVeryFirstLoad = false;
            var hostInfo = Services.HostInfo();
            var mustDelayVeryFirstLoad =
                hostInfo.HostKind.IsApp()
                && ChatSid.IsNullOrEmpty()
                && BrowserInfo.ScreenSize.Value.IsNarrow();
            if (mustDelayVeryFirstLoad) {
                // Postpone chat loading when it's invisible
                Log.LogDebug("Delay loading for chat #{ChatId}", chatId);
                await Task.Delay(VeryFirstLoadDelay, cancellationToken).ConfigureAwait(false);
                this.NotifyStateHasChanged();
            }
        }

        var account = AccountFull.Loading;
        try {
            if (!AccountUI.WhenLoaded.IsCompleted)
                await AccountUI.WhenLoaded.WaitAsync(LoadTimeout, cancellationToken);
            account = await AccountUI.OwnAccount.Use(cancellationToken);
            var chat = SpecialChat.NoChatSelected;
            if (!chatId.IsNone) {
#if false // NOTE(AY): Let's try to disable this for now, maybe it works better after rendering changes
                if (OSInfo.IsAndroid) {
                    // Postponing chat change to let left panel slide smoothly - don't change this delay!
                    var isChatChange = !lastChatId.IsNone && chatId != lastChatId;
                    if (isChatChange && PanelsUI.ScreenSize.Value.IsNarrow())
                        await Task.Delay(TimeSpan.FromSeconds(0.2), cancellationToken).ConfigureAwait(false);
                }
#endif

                chat = await Chats
                    .Get(Session, chatId, cancellationToken)
                    .WaitAsync(LoadTimeout, cancellationToken);
                chat ??= SpecialChat.Unavailable;
            }
            var footerModel = await GetFooterModel(chat, account, cancellationToken);
            var chatContext = new ChatContext(Hub, chat, account);
            return new Model(chatContext, footerModel, isInaccessiblePlace, enableIncompleteUI);
        }
        catch (TimeoutException) {
            Computed.GetCurrent()?.Invalidate(LoadTimeoutToReloadDelay);
            this.NotifyStateHasChanged();
            return lastState != null && chatId == lastChatId
                ? lastState
                : Model.Loading(Hub);
        }
        catch (Exception e) when (e is not OperationCanceledException) {
            Log.LogWarning(e, "Failed to get Chat #{ChatId}", chatId);
            this.NotifyStateHasChanged();
            return Model.Unavailable(Hub, account, isInaccessiblePlace, enableIncompleteUI);
        }
    }

    protected async ValueTask<FooterModel> GetFooterModel(Chat chat, Account account, CancellationToken cancellationToken) {
        if (chat.Id.IsNone)
            return FooterModel.None;

        var otherUserId = chat.Id.IsPeerChat(out var peerChatId)
            ? peerChatId.UserIds.OtherThan(account.Id)
            : default;
        var canPost = chat.Rules.CanWrite();
        var canJoin = !canPost && chat.Rules.CanJoin();
        var shouldJoinPlaceFirst = false;
        Place? place = null;
        if (!canPost && chat.Id.IsPlaceChat) {
            shouldJoinPlaceFirst = chat.IsPublic;
            place = await Hub.Places.Get(Session, chat.Id.PlaceId, cancellationToken).ConfigureAwait(false);
            if (place == null) {
                Log.LogWarning("Can't read Place #Id='{PlaceId}' while it should be possible to join to it", chat.Id.PlaceId);
                canJoin = false;
            }
        }
        var hasMultipleAvatars = false;
        var canJoinWithGuestAccount = false;
        var canJoinAnonymously = false;
        if (canJoin) {
            if (account.IsGuestOrNone) {
                canJoinWithGuestAccount = chat.AllowGuestAuthors;
            } else {
                canJoinAnonymously = chat.AllowAnonymousAuthors;
                var avatars = await Avatars
                    .ListOwnAvatarIds(Session, cancellationToken)
                    .WaitAsync(LoadTimeout, cancellationToken);
                hasMultipleAvatars = avatars.Count > 1 || canJoinAnonymously;
            }
        }

        return new() {
            OtherUserId = otherUserId,
            IsGuest = account.IsGuestOrNone,
            CanPost = canPost,
            CanJoin = canJoin,
            ShouldJoinPlaceFirst = shouldJoinPlaceFirst,
            HasMultipleAvatars = hasMultipleAvatars,
            CanJoinWithGuestAccount = canJoinWithGuestAccount,
            CanJoinAnonymously = canJoinAnonymously,
            Place = place,
        };
    }

    protected override bool ShouldRender()
        => ReferenceEquals(Rendered, null)
            || State.HasError
            || State.Value != Rendered;

    protected async ValueTask SelectChat(string? chatSid) {
        var chatId = new ChatId(chatSid, ParseOrNone.Option);
        if (ChatSid == null) {
            await ChatUI.WhenLoaded;
            chatId = ChatUI.SelectedChatId.Value;
            // If Selected place is defined and chat id is not specified then apparently place has no chats
            // and we want to display blank chat screen. Do not show Announcements chat.
            if (chatId.IsNone && Hub.ChatUI.SelectedPlaceId.Value.IsNone)
                chatId = Constants.Chat.AnnouncementsChatId;
        }
        ChatUI.SelectChatOnNavigation(chatId);
    }

    // Nested types

    public sealed record Model(
        ChatContext ChatContext,
        FooterModel FooterModel,
        bool IsInaccessiblePlace,
        bool EnableIncompleteUI
    ) {
        public static Model Loading(ChatUIHub hub) {
            var chatContext = new ChatContext(hub, SpecialChat.Loading, AccountFull.Loading);
            return new(chatContext, FooterModel.None, false, false);
        }

        public static Model Unavailable(ChatUIHub hub, AccountFull account, bool isInaccessiblePlace, bool enableIncompleteUI) {
            var chatContext = new ChatContext(hub, SpecialChat.Unavailable, account);
            return new(chatContext, new FooterModel(), isInaccessiblePlace, enableIncompleteUI);
        }
    }

    public sealed record FooterModel {
        public static readonly FooterModel None = new();

        public UserId OtherUserId { get; init; }
        public bool IsGuest { get; init; }
        public bool CanPost { get; init; }
        public bool CanJoin { get; init; }
        public bool HasMultipleAvatars { get; init; }
        public bool CanJoinWithGuestAccount { get; init; }
        public bool CanJoinAnonymously { get; init; }
        public bool ShouldJoinPlaceFirst { get; init; }
        public Place? Place { get; init; }
    }
}
