@page "/chat"
@page "/chat/{ChatId}"
@inherits ComputedStateComponent<ChatPage.Model>
@inject Session _session
@inject IAuth _auth
@inject IChats _chats
@inject NavigationManager _nav

@{
    _renderedModel = State.LatestNonErrorValue ?? new();
    var model = _renderedModel;
    var error = State.Error;
    if (model.IsUnavailable)
        _nav.Unavailable("chat");
    if (model.MustLogin)
        _nav.Login("to view this chat");
    var chat = model.Chat;
}

@if (error != null) {
    <WhenError Error="error"/>
} else if (chat != null) {
    <CascadingValue Value="chat">
        @* @key=... ensures child components are recreated on navigation to another chat *@
        <PageWithHeaderAndFooter @key="chat.Id" Class="@this.DefaultClass()">
            <Header>
                <ChatHeader />
            </Header>
            <Body>
                <ChatView />
                <HistoricalPlaybackPanel/>
            </Body>
            <Footer>
                <ChatFooter AutoJoin="@AutoJoin" />
            </Footer>
        </PageWithHeaderAndFooter>
    </CascadingValue>
} else {
    <div>Loading...</div>
}

@code {
    private Model? _renderedModel;

    public const string AutoJoinQueryParameter = "auto-join";

    public record Model {
        public bool IsUnavailable { get; init; }
        public bool MustLogin { get; init; }
        public Chat? Chat { get; init; }
    }

    [Parameter]
    public string ChatId { get; set; } = "";
    [Parameter]
    [SupplyParameterFromQuery(Name = AutoJoinQueryParameter)]
    public string? AutoJoin { get; set; }

    protected override bool ShouldRender()
        => ReferenceEquals(_renderedModel, null)
            || !ReferenceEquals(_renderedModel, State.LatestNonErrorValue);

    protected override async Task<Model> ComputeState(CancellationToken cancellationToken) {
        var chatId = ChatId;
        var chat = await _chats.Get(_session, chatId, cancellationToken).ConfigureAwait(true);
        if (chat == null)
            return new () { IsUnavailable = true };

        // We want to return the same Chat instance while it stays unchanged
        var renderedChat = _renderedModel?.Chat;
        if (renderedChat != null && renderedChat.Id == chat.Id && renderedChat.Version == chat.Version)
            return _renderedModel!;
        return new () { Chat = chat };
    }
}
