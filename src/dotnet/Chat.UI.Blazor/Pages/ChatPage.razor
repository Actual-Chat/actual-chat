@page "/chat/{ChatId}"
@using ActualChat.Notification.UI.Blazor
@inherits ComputedStateComponent<ChatPage.Model>
@layout ChatLayout
@{
    var m = _lastRenderedModel = State.LatestNonErrorValue;
    var error = State.Error;
    if (m.IsUnavailable) {
        <RequireChat/>
        return;
    }
    var chat = m.Chat;
}

@if (error != null) {
    <Error Title="Update error" Class="mb-3">@error.Message</Error>
    return;
}
@if (chat == null) {
    <div>Loading...</div>
    return;
}
@if (!chat.IsPublic && !m.Account.IsActive()) {
    /* We check account here to avoid excessive render */
    <RequireAccount/>
}
@* @key=... ensures child components are recreated on navigation to another chat *@
<RenderIntoSlot Name="MainHeader">
    <CascadingValue Value="chat" @key="chat.Id">
        <ChatHeader/>
    </CascadingValue>
</RenderIntoSlot>

<RenderIntoStack Name="SubHeader" Order="-1000_000">
    <CascadingValue Value="chat">
        <HistoricalPlaybackSubHeader/>
    </CascadingValue>
</RenderIntoStack>
<RenderIntoStack Name="SubHeader" Order="1000_000">
    <CascadingValue Value="chat" @key="chat.Id">
        <UnreadMessagesSubHeader Click="@OnUnreadMessagesClick"/>
    </CascadingValue>
</RenderIntoStack>

<RenderIntoSlot Name="MainFooter">
    <CascadingValue Value="chat" @key="chat.Id">
        <ChatFooter/>
    </CascadingValue>
</RenderIntoSlot>

<RenderIntoStack Name="SubFooter" Order="-1000_000">
    <CascadingValue Value="chat" @key="chat.Id">
        <RecordingElsewhereSubHeader/>
    </CascadingValue>
</RenderIntoStack>

<RenderIntoSlot Name="MainRightPanel">
    <CascadingValue Value="chat" @key="chat.Id">
        <ChatRightPanel/>
    </CascadingValue>
</RenderIntoSlot>

<CascadingValue Value="chat" @key="chat.Id">
    <ChatView @ref="_chatView" />
</CascadingValue>

@code {
    private Model? _lastRenderedModel;
    private ChatView _chatView = null!;

    [Inject] private Session Session { get; init; } = null!;
    [Inject] private IAccounts Accounts { get; init; } = null!;
    [Inject] private IChats Chats { get; init; } = null!;
    [Inject] private ChatUI ChatUI { get; init; } = null!;
    [Inject] private RightPanelUI RightPanelUI { get; init; } = null!;
    [Inject] private NavigationManager Nav { get; init; } = null!;
    [Inject] private DeviceInfo DeviceInfo { get; init; } = null!;
    [Inject] private LocalSettings LocalSettings { get; init; } = null!;

    [Parameter] public string ChatId { get; set; } = "";

    protected override bool ShouldRender()
        => ReferenceEquals(_lastRenderedModel, null)
            || State.HasError
            || !ReferenceEquals(_lastRenderedModel, State.LatestNonErrorValue);

    protected override Task OnAfterRenderAsync(bool firstRender) {
        if (!firstRender)
            return Task.CompletedTask;

        _ = DeviceInfo.EnsureDeviceRegistered(CancellationToken.None);
        return Task.CompletedTask;
    }

    protected override ComputedState<Model>.Options GetStateOptions()
        => new() {
            InitialValue = Model.None,
            UpdateDelayer = UpdateDelayer.MinDelay,
        };

    protected override async Task<Model> ComputeState(CancellationToken cancellationToken) {
        var chat = await Chats.Get(Session, ChatId, cancellationToken);
        if (chat == null)
            return Model.Unavailable;

        var account = await Accounts.Get(Session, cancellationToken).ConfigureAwait(false);
        var result = new Model(chat, account);
        return result.IsSame(_lastRenderedModel) ? _lastRenderedModel! : result;
    }

    protected override async Task OnParametersSetAsync() {
        if (ChatUI.ActiveChatId.Value != ChatId) {
            ChatUI.ActiveChatId.Value = ChatId;
            LocalSettings.SetActiveChatId(ChatId);
        }
        await base.OnParametersSetAsync();
    }

    private void OnUnreadMessagesClick()
        => _ = _chatView.NavigateToUnreadEntry();

    public sealed record Model(Chat? Chat, Account? Account) {
        public static Model None { get; } = new(null, null);
        public static Model Unavailable { get; } = new(null, null) { IsUnavailable = true };

        public bool IsUnavailable { get; init; }

        public bool IsSame(Model? other) {
            if (other == null)
                return false;
            return ReferenceEquals(Chat, other.Chat) && ReferenceEquals(Account, other.Account);
        }
    }
}
