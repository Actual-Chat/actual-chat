@page "/settings"
@using ActualChat.Chat.UI.Blazor.Components.Settings
@inherits ComputedStateComponent<SettingsPage.Model>
@{
    var m = State.LatestNonErrorValue;
}

<RequireAccount/>
<MainHeader>Settings</MainHeader>

<div class="flex-x justify-center w-full">
    <div class="flex-none flex-y w-full lg:w-2/3 xl:w-1/2 xxl:w-1/3 p-3">
        <TabPanel BottomBorder="true">
            <Tab Title="My Account" Class="px-2">
                <UserSettings/>
            </Tab>
            @if (m.EnableIncompleteUI) {
                <Tab Title="Appearance" Class="px-2">
                    <AppearanceSettings/>
                </Tab>
            }
        </TabPanel>
    </div>
</div>

@code {
    [Inject] private Features Features { get; init; } = null!;

    protected override ComputedState<Model>.Options GetStateOptions()
        => new() {
            InitialValue = Model.None,
            UpdateDelayer = FixedDelayer.Instant,
        };

    protected override async Task<Model> ComputeState(CancellationToken cancellationToken)
        => new() {
            EnableIncompleteUI = await Features
                .Get<UIFeatures.EnableIncompleteUI, bool>(cancellationToken)
                .ConfigureAwait(false), // Ok here
        };

    // Nested types

    public sealed record Model {
        public static Model None { get; } = new();

        public bool EnableIncompleteUI { get; init; }
    }
}
