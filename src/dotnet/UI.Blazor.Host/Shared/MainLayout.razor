@namespace ActualChat.UI.Blazor.Host
@inherits LayoutComponentBase
@implements IDisposable
@inject NavigationManager _navigator
@inject UICommandFailureList _commandFailureList
@{
    var failures = _commandFailureList.Items;
    var version = (GetType().Assembly.GetInformationalVersion() ?? "n/a").Replace('+', ' ');
}

<Navbar />
<div class="flex-1 flex flex-row justify-items-stretch bg-gray-800 h-full max-h-full overflow-y-hidden relative">
    <input id="navbar-toggle" class="hidden" type="checkbox" />
    <nav id="navbar-links" class="z-50 absolute top-0 left-0 h-full md:static flex flex-col justify-between transform -translate-x-full md:translate-x-0 w-full md:w-72 lg:w-96 transition duration-200 ease-in-out bg-gray-800 text-gray-200 p-3">
        <div class="flex-1 flex flex-col overflow-y-auto">
            <div class="hidden md:flex flex-row flex-nowrap justify-center">
                <NavbarLogo />
            </div>
            <div class="flex-1 flex flex-col overflow-y-auto">
                <NavbarLinks />
            </div>
        </div>
        @* Bottom sticky panel *@
        <div class="flex flex-col sticky items-stretch">
            <div class="text-xs font-semibold text-gray-500 opacity-75 hover:opacity-100 mb-1">
                @version
            </div>
            <div class="flex flex-row justify-between items-center w-full pt-3 border-t border-gray-700">
                <AccountDropdown />
                <BlazorModeToggle />
            </div>
        </div>
    </nav>
    <div class="flex-1 overflow-y-auto flex flex-col relative">
        <div class="bg-white flex-1 overflow-y-auto">
            @foreach (var failure in failures)
            {
                <WhenCommandError Error="failure.Result?.Error"
                            Dismissed="@(_ => _commandFailureList.Remove(failure.CommandId))" />
            }
            @Body
        </div>
    </div>
</div>

@code {

    protected override void OnInitialized()
    {
        _navigator.LocationChanged += OnLocationChanged;
        _commandFailureList.Changed += OnCommandFailureListChanged;
    }

    public void Dispose()
    {
        _navigator.LocationChanged -= OnLocationChanged;
        _commandFailureList.Changed -= OnCommandFailureListChanged;
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
        => _commandFailureList.Clear();

    private void OnCommandFailureListChanged()
        => InvokeAsync(StateHasChanged);
}
