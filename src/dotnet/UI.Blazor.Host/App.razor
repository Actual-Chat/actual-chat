@using Stl.Plugins
@using Blazored.Modal
@using ActualChat.UI.Blazor.Services
@implements IDisposable
@{
    var moduleAssemblies = Plugins.GetPlugins<IBlazorUIModule>()
        .Select(p => p.GetType().Assembly)
        .ToArray();
}

<CascadingAuthState SessionId="@SessionId">
    <CascadingBlazoredModal>
        <Router AppAssembly="@typeof(Program).Assembly" AdditionalAssemblies="moduleAssemblies">
            <Found>
                <CascadingValue Value="@context">
                    <RouteView RouteData="@context" DefaultLayout="@typeof(MainLayout)"/>
                </CascadingValue>
            </Found>
            <NotFound>
                <LayoutView Layout="@typeof(MainLayout)">
                    <p>Sorry, there's nothing here.</p>
                </LayoutView>
            </NotFound>
        </Router>
    </CascadingBlazoredModal>
</CascadingAuthState>

@code {
    [Parameter] public string SessionId { get; set; } = Symbol.Empty;

    [Inject] private IPluginHost Plugins { get; init; } = null!;
    [Inject] private BlazorCircuitContext CircuitContext { get; init; } = null!;
    [Inject] private ISessionProvider SessionProvider { get; init; } = null!;
    [Inject] private StateRestore StateRestore { get; init; } = null!;
    [Inject] private NavigationManager Nav { get; init; } = null!;

    protected override void OnInitialized()
    {
        if (!SessionId.IsNullOrEmpty()) {
            var session = new Session(SessionId);
            if (SessionProvider.HasSession) {
                if (SessionProvider.Session != session)
                    // No way to change Session other than page reload
                    Nav.NavigateTo(Nav.Uri, true);
            }
            else
                SessionProvider.Session = session;
        }
        if (!CircuitContext.IsPrerendering) {
            CircuitContext.RootComponent = this;
            StateRestore.Restore(CancellationToken.None);
        }
    }

    public void Dispose()
        => CircuitContext.Dispose();
}
