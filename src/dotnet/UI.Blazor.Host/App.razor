@using Stl.Plugins
@using Blazored.Modal
@implements IDisposable
@inject IPluginHost _plugins
@inject BlazorCircuitContext _circuitContext

@{
    var moduleAssemblies = _plugins.GetPlugins<IBlazorUIModule>()
        .Select(p => p.GetType().Assembly)
        .ToArray();
}

<StateRestoreActivator/>
<CascadingAuthState SessionId="@SessionId">
    <CascadingBlazoredModal>
        <Router AppAssembly="@typeof(Program).Assembly" AdditionalAssemblies="moduleAssemblies">
            <Found>
                <CascadingValue Value="@context">
                    <RouteView RouteData="@context" DefaultLayout="@typeof(MainLayout)"/>
                </CascadingValue>
            </Found>
            <NotFound>
                <LayoutView Layout="@typeof(MainLayout)">
                    <p>Sorry, there's nothing here.</p>
                </LayoutView>
            </NotFound>
        </Router>
    </CascadingBlazoredModal>
</CascadingAuthState>

@code {
    [Parameter]
    public string SessionId { get; set; } = Symbol.Empty;

    protected override void OnInitialized()
    {
        if (!_circuitContext.IsPrerendering)
            _circuitContext.RootComponent = this;
    }

    public void Dispose()
        => _circuitContext.Dispose();
}
