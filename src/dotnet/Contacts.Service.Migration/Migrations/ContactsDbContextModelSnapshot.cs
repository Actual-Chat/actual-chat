// <auto-generated />
using System;
using ActualChat.Contacts.Db;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ActualChat.Contacts.Migrations
{
    [DbContext(typeof(ContactsDbContext))]
    partial class ContactsDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ActualChat.Contacts.Db.DbContact", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("ChatId")
                        .HasColumnType("text")
                        .HasColumnName("chat_id");

                    b.Property<bool>("IsPinned")
                        .HasColumnType("boolean")
                        .HasColumnName("is_pinned");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("owner_id");

                    b.Property<DateTime>("TouchedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("touched_at");

                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<long>("Version")
                        .IsConcurrencyToken()
                        .HasColumnType("bigint")
                        .HasColumnName("version");

                    b.HasKey("Id")
                        .HasName("pk_contacts");

                    b.HasIndex("OwnerId")
                        .HasDatabaseName("ix_contacts_owner_id");

                    b.ToTable("contacts");
                });

            modelBuilder.Entity("ActualChat.Contacts.Db.DbExternalContact", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("display_name");

                    b.Property<string>("FamilyName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("family_name");

                    b.Property<string>("GivenName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("given_name");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("middle_name");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_at");

                    b.Property<string>("NamePrefix")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name_prefix");

                    b.Property<string>("NameSuffix")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name_suffix");

                    b.Property<long>("Version")
                        .IsConcurrencyToken()
                        .HasColumnType("bigint")
                        .HasColumnName("version");

                    b.HasKey("Id")
                        .HasName("pk_external_contacts");

                    b.ToTable("external_contacts");
                });

            modelBuilder.Entity("ActualChat.Contacts.Db.DbExternalEmail", b =>
                {
                    b.Property<string>("DbExternalContactId")
                        .HasColumnType("text")
                        .HasColumnName("external_contact_id");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.HasKey("DbExternalContactId", "Email")
                        .HasName("pk_external_emails");

                    b.HasIndex("DbExternalContactId")
                        .HasDatabaseName("ix_external_emails_external_contact_id");

                    b.HasIndex("Email")
                        .HasDatabaseName("ix_external_emails_email");

                    b.ToTable("external_emails");
                });

            modelBuilder.Entity("ActualChat.Contacts.Db.DbExternalPhone", b =>
                {
                    b.Property<string>("DbExternalContactId")
                        .HasColumnType("text")
                        .HasColumnName("external_contact_id");

                    b.Property<string>("Phone")
                        .HasColumnType("text")
                        .HasColumnName("phone");

                    b.HasKey("DbExternalContactId", "Phone")
                        .HasName("pk_external_phones");

                    b.HasIndex("DbExternalContactId")
                        .HasDatabaseName("ix_external_phones_external_contact_id");

                    b.HasIndex("Phone")
                        .HasDatabaseName("ix_external_phones_phone");

                    b.ToTable("external_phones");
                });

            modelBuilder.Entity("Stl.Fusion.EntityFramework.Operations.DbOperation", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("AgentId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("agent_id");

                    b.Property<string>("CommandJson")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("command_json");

                    b.Property<DateTime>("CommitTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("commit_time");

                    b.Property<string>("ItemsJson")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("items_json");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_time");

                    b.HasKey("Id")
                        .HasName("pk_operations");

                    b.HasIndex(new[] { "CommitTime" }, "IX_CommitTime")
                        .HasDatabaseName("ix_commit_time");

                    b.HasIndex(new[] { "StartTime" }, "IX_StartTime")
                        .HasDatabaseName("ix_start_time");

                    b.ToTable("_operations");
                });

            modelBuilder.Entity("ActualChat.Contacts.Db.DbExternalEmail", b =>
                {
                    b.HasOne("ActualChat.Contacts.Db.DbExternalContact", null)
                        .WithMany("ExternalEmails")
                        .HasForeignKey("DbExternalContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_external_emails_external_contacts_external_contact_id");
                });

            modelBuilder.Entity("ActualChat.Contacts.Db.DbExternalPhone", b =>
                {
                    b.HasOne("ActualChat.Contacts.Db.DbExternalContact", null)
                        .WithMany("ExternalPhones")
                        .HasForeignKey("DbExternalContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_external_phones_external_contacts_external_contact_id");
                });

            modelBuilder.Entity("ActualChat.Contacts.Db.DbExternalContact", b =>
                {
                    b.Navigation("ExternalEmails");

                    b.Navigation("ExternalPhones");
                });
#pragma warning restore 612, 618
        }
    }
}
