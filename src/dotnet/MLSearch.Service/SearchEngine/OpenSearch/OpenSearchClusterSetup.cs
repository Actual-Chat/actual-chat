using ActualChat.MLSearch.SearchEngine.OpenSearch.Extensions;
using OpenSearch.Client;
using ActualChat.Hosting;
using ActualChat.MLSearch.ApiAdapters;

namespace ActualChat.MLSearch.SearchEngine.OpenSearch;

//TODO: Understand Distribute Lock Context usage and requirements.
internal class OpenSearchDistributedLockContext;

internal class OpenSearchClusterSetup(
    IOpenSearchClient openSearch, OpenSearchClusterSettings settings, ILoggerSource loggerSource, ITracerSource tracerSource
    ) : IModuleInitializer
{
    private ILogger? _log;
    private ILogger Log => _log ??= loggerSource.GetLogger(GetType());

    public Task Initialize(CancellationToken cancellationToken) => Run(cancellationToken);

    private async Task Run(CancellationToken cancellationToken)
    {
        // Notes:
        // There's no reason make this script efficient.
        // It is called once and only once to setup an opensearch cluster.
        // After the initial setup this would never be called again.
        var tracer = tracerSource.GetTracer();
        using var _1 = tracer.Region();
        var ingestPipelineId = settings.IntoIngestPipelineId();
        var searchIndexId = settings.IntoSearchIndexId();
        var modelId = settings.ModelId ?? throw new InvalidOperationException("Model Id is not set.");
        if (settings.ModelDimension == 0) {
            throw new InvalidOperationException("Model Dimension is not set.");
        }
        var modelDimension = settings.ModelDimension.ToString("D", CultureInfo.InvariantCulture);

        var ingestResult = await openSearch.RunAsync(
            $$"""
              PUT /_ingest/pipeline/{{ingestPipelineId}}
              {
                  "description": "Autogenerated pipeline",
                  "processors": [{
                    "text_embedding": {
                        "model_id": "{{modelId}}",
                        "field_map": {
                            "{{nameof(IndexedDocument.Text)}}": "event_dense_embedding"
                        }
                    }
                  }]
              }
              """,
              cancellationToken
        ).ConfigureAwait(false);
        // TODO: Assert success and http 200
        var searchIndexResult = await openSearch.RunAsync(
            $$"""
              PUT /{{searchIndexId}}
              {
                "settings": {
                    "index.knn": true,
                    "default_pipeline": "{{ingestPipelineId}}"
                },
                "mappings": {
                    "_source": {
                        "excludes": [
                          "event_dense_embedding"
                        ]
                    },
                    "properties": {
                        "{{nameof(IndexedDocument.Uri)}}": {
                            "type": "keyword"
                        },
                        "{{nameof(IndexedDocument.Text)}}": {
                            "type": "text"
                        },
                        "event_dense_embedding": {
                            "type": "knn_vector",
                            "dimension": {{modelDimension}},
                            "method": {
                                "engine": "lucene",
                                "space_type": "l2",
                                "name": "hnsw",
                                "parameters": {}
                            }
                        }
                    }
                }
              }
              """,
              cancellationToken
        ).ConfigureAwait(false);
        // TODO: Assert success and http 200
    }
}
