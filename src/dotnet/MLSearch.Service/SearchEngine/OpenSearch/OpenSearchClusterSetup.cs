using ActualChat.MLSearch.SearchEngine.OpenSearch.Extensions;
using OpenSearch.Client;
using ActualChat.Redis;
using OpenSearch.Net;

namespace ActualChat.MLSearch.SearchEngine.OpenSearch;

//TODO: Understand Distribute Lock Context usage and requirements.
public class OpenSearchDistributedLockContext;

public class OpenSearchClusterSetup(
    IOpenSearchClient openSearch, OpenSearchClusterSettings settings, ILogger log, DistributedLocks<OpenSearchDistributedLockContext> distributedLocks
    ) : WorkerBase
{
    private readonly TaskCompletionSource _whenCompleted = new ();

    private OpenSearchClusterSettings Settings { get; } = settings;
    private IOpenSearchClient OpenSearchClient { get; } = openSearch;
    private DistributedLocks<OpenSearchDistributedLockContext> DistributedLocks { get; } = distributedLocks;

    private ILogger Log { get; } = log;

    public Task WhenCompleted => _whenCompleted.Task;

    protected override async Task OnRun(CancellationToken cancellationToken)
    {
        try {
            await Run(cancellationToken).ConfigureAwait(false);
            _whenCompleted.SetResult();
        }
        catch (Exception e)
        {
            _whenCompleted.SetException(e);
            throw;
        }
    }

    private async Task Run(CancellationToken cancellationToken)
    {
        var clusterSetupSyncLockKey = Settings.IntoUniqueKey();
        await DistributedLocks.Run(EnsureClusterSetup, "EnsureClusterSetup-"+clusterSetupSyncLockKey, cancellationToken)
            .ConfigureAwait(false);
    }
    private async Task EnsureClusterSetup(CancellationToken cancellationToken)
    {
        // Notes:
        // There's no reason make this script efficient.
        // It is called once and only once to setup an opensearch cluster.
        // After the initial setup this would never be called again.
        using var _1 = Tracer.Default.Region();
        var ingestPipelineId = Settings.IntoIngestPipelineId();
        var searchIndexId = Settings.IntoSearchIndexId();
        var modelId = Settings.ModelId;
        var modelDimension = Settings.ModelDimension.ToString("D", CultureInfo.InvariantCulture);
        await OpenSearchClient.Http.RunAsync(
            $$"""
              PUT /_ingest/pipeline/{{ingestPipelineId}}
              {
                  "description": "Autogenerated pipeline",
                  "processors": [
                    "text_embedding": {
                        "model_id": "{{modelId}}",
                        "field_map": {
                            "{{nameof(IndexedDocument.Text)}}": "event_dense_embedding"
                        }
                    }
                  ]
              }
              """,
              cancellationToken
        ).ConfigureAwait(false);
        // TODO: Assert success and http 200
        await OpenSearchClient.Http.RunAsync(
            $$"""
              PUT /{{searchIndexId}}
              {
                "settings": {
                    "index.knn": true,
                    "default_pipeline": "{{ingestPipelineId}}"
                },
                "mappings": {
                    "_source": {
                        "excludes": [
                          "event_dense_embedding"
                        ]
                    },
                    "properties": {
                        "{{nameof(IndexedDocument.Uri)}}": {
                            "type": "keyword"
                        },
                        "{{nameof(IndexedDocument.Text)}}": {
                            "type": "text"
                        },
                        "event_dense_embedding": {
                            "type": "knn_vector",
                            "dimension": {{modelDimension}},
                            "method": {
                                "engine": "lucene",
                                "space_type": "l2",
                                "name": "hnsw",
                                "parameters": {}
                            }
                        }
                    }
                }
              }
              """,
              cancellationToken
        ).ConfigureAwait(false);
        // TODO: Assert success and http 200
    }
}
