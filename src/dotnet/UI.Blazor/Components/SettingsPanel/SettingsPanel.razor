@using ActualChat.UI.Blazor.Services
@using ActualChat.Hosting
@namespace ActualChat.UI.Blazor.Components

@{
    var cls = _isRightSideVisible ? "hide-panel" : "hide-tabs";

    RenderFragment RenderCommonButton(SettingsTab tab) {
        var isActive = tab == ActiveTab;
        var tabCls = tab.ButtonClass;
        if (!tab.IsToggle) {
            return @<Button Class="@tabCls" Click="@(_ => OnTabTitleClick(tab))" data-tab-id="@tab.Id" role="tab" aria-selected="@isActive">
                       @RenderTabTitle(tab)
                   </Button>;
        }
        return @<Button Class="@tabCls" data-tab-id="@tab.Id" role="tab" aria-selected="@isActive">
                   @RenderTabTitle(tab)
               </Button>;
    }

    RenderFragment RenderSignOutBtn(SettingsTab tab) {
        return @<Button Class="" Click="@OnSignOutClick" data-tab-id="@tab.Id" role="tab">
                   @RenderTabTitle(tab)
               </Button>;
    }

    RenderFragment RenderTabTitle(SettingsTab tab) =>
        @<div class="flex-x items-center justify-between w-full">
            <div class="settings-tab-title">
                <i class="icon-@tab.IconTitle text-2xl icon-title"></i>
                <span>@tab.Title</span>
            </div>
            <div class="flex-x">
                @tab.TitleContent
            </div>
        </div>;
}

<CascadingValue Value="@this" IsFixed="true" >
    <div class="@Class settings-panel @cls">
        <div class="@TabsClass settings-panel-tabs" role="tablist">
            <div class="settings-panel-header">
                <SettingsHeader Title="@Title" OnArrowClick="OnCloseModalClick"/>
            </div>
            <div class="relative btn-group">
                @foreach (var tab in Tabs) {
                    var isActive = tab == ActiveTab;
                    var activeCls = $"{(isActive ? "on" : "")}";
                    var containerCls = tab.IsToggle ? "container-toggle" : "";
                    <div class="flex-y btn-group-container @containerCls @activeCls">
                        @switch (tab.Id) {
                            case "logOut":
                                @RenderSignOutBtn(tab);
                                break;
                            default:
                                @RenderCommonButton(tab)
                                break;
                        }
                    </div>
                    @if (!tab.Separator) {
                        continue;
                    }
                    <div class="w-auto bg-04 h-px my-4 mx-4"></div>
                }
            </div>
            <div class="flex-y w-full bg-03 border-t border-bg-04">
                <div class="flex-x items-center justify-between px-4 gap-x-2 text-xxs">
                    <div class="flex-initial text-03 font-medium truncate">@Version</div>
                    @if (HostInfo.HostKind != HostKind.Maui) {
                        <div class="flex-none">
                            <BlazorModeToggle/>
                        </div>
                    }
                </div>
            </div>
        </div>
        @ChildContent
    </div>
</CascadingValue>

@code {
    private static readonly string Version =
        "v" + (typeof(SettingsPanel).Assembly.GetInformationalVersion() ?? "n/a").Replace('+', ' ');
    private bool _isRightSideVisible;
    private readonly List<SettingsTab> _tabs = new();
    private SettingsTab? _activeTab;

    [Inject] private IClientAuth ClientAuth { get; init; } = null!;
    [Inject] private NavigationManager Nav { get; init; } = null!;
    [Inject] private HostInfo HostInfo { get; init; } = null!;

    [CascadingParameter] public BlazoredModalInstance ModalInstance { get; set; } = null!;

    [Parameter] public string Class { get; set; } = "";
    [Parameter] public string TabsClass { get; set; } = "";
    [Parameter] public string Title { get; set; } = "";
    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Parameter] public EventCallback<SettingsTab?> ActiveTabChanged { get; set; }
    [Parameter] public EventCallback OnCloseModalClick { get; set; }

    public IReadOnlyList<SettingsTab> Tabs => _tabs;
    [Parameter]
    public SettingsTab? ActiveTab {
        get => _activeTab;
        set {
            if (_activeTab == value)
                return;
            if (value != null && !_tabs.Contains(value))
                throw StandardError.Constraint("This tab does not belong to the panel.");
            _activeTab = value;
            ActiveTabChanged.InvokeAsync(value);
        }
    }
    [Parameter]
    public string? DefaultTabId {
        get => _activeTab?.Id;
        set {
            if (_activeTab?.Id == value)
                return;
            var tab = _tabs.FirstOrDefault(t => t.Id == value);
            if (tab != null && !_tabs.Contains(tab))
                throw StandardError.Constraint("This tab does not belong to the panel.");
            _activeTab = tab;
            ActiveTabChanged.InvokeAsync(tab);
        }
    }

    internal void RegisterTab(SettingsTab tab) {
        var indexToInsert = -1;
        if (tab.TabIndex.HasValue && _tabs.Count > 0) {
            for (var i = 0; i < _tabs.Count; i++) {
                var c = _tabs[i];
                if (!c.TabIndex.HasValue || c.TabIndex > tab.TabIndex) {
                    indexToInsert = i;
                    break;
                }
            }
        }
        if (indexToInsert >= 0)
            _tabs.Insert(indexToInsert, tab);
        else
            _tabs.Add(tab);
        ActiveTab ??= tab;
        StateHasChanged();
    }

    public void UnregisterTab(SettingsTab tab) {
        var tabIndex = _tabs.IndexOf(tab);
        _tabs.Remove(tab);
        tabIndex = tabIndex.Clamp(0, _tabs.Count - 1);
        ActiveTab = tabIndex >= 0 ? _tabs[tabIndex] : null;
        StateHasChanged();
    }

    private void OnTabTitleClick(SettingsTab tab) {
        ActiveTab = tab;
        _isRightSideVisible = true;
        StateHasChanged();
    }

    public void OnTabArrowClick() {
        _isRightSideVisible = false;
        StateHasChanged();
    }

    private async Task OnSignOutClick() {
        await ModalInstance.CloseAsync().ConfigureAwait(false);
        await ClientAuth.SignOut();
        Nav.NavigateTo("/");
    }
}
