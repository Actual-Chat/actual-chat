@using ActualChat.UI.Blazor.Services
@using ActualChat.Hosting
@namespace ActualChat.UI.Blazor.Components
@{
    var cls = _isRightSideVisible ? "hide-panel" : "hide-tabs";
    var attr = _isRightSideVisible ? "hide-panel" : "hide-tabs";
    var link = Links.User(AccountUI.OwnAccount.Value.Id);

    RenderFragment RenderCommonButton(SettingsTab tab) {
        var isActive = tab == ActiveTab;
        var tabCls = tab.ButtonClass;
        if (!tab.IsToggle) {
            return
                @<Button Class="@tabCls" Click="@(_ => OnTabTitleClick(tab))" data-tab-id="@tab.Id" role="tab" aria-selected="@isActive">
                    @RenderTabTitle(tab)
                </Button>;
        }
        return
            @<Button Class="@tabCls" data-tab-id="@tab.Id" role="tab" aria-selected="@isActive">
                @RenderTabTitle(tab)
            </Button>;
    }

    RenderFragment RenderSignOutBtn(SettingsTab tab)
        => @<Button Class="" Click="@OnSignOutClick" data-tab-id="@tab.Id" role="tab">
               @RenderTabTitle(tab)
           </Button>;

    RenderFragment RenderTabTitle(SettingsTab tab) =>
        @<div class="flex-x gap-x-4 items-center justify-between w-full">
            <div class="settings-tab-title">
                <i class="icon-@tab.IconTitle text-2xl icon-title"></i>
                @if (tab.TitleComment.IsNullOrEmpty()) {
                    <span>@tab.Title</span>
                } else {
                    <div class="flex-y items-start">
                        <span>@tab.Title</span>
                        <span class="text-xxs text-primary">@tab.TitleComment</span>
                    </div>
                }
            </div>
            <div class="flex-x">
                @tab.TitleContent
            </div>
        </div>;
}

<CascadingValue Value="@this" IsFixed="true" >
    <div class="@Class settings-panel @cls" data-settings-panel="@attr">
        <div class="c-tabs" role="tablist">
            <div class="c-header">
                <SettingsHeader Title="@Title" ArrowClick="CloseModalClick"/>
            </div>
            <div class="c-tab-items">
                @foreach (var tab in Tabs) {
                    var isActive = tab == ActiveTab;
                    var activeCls = $"{(isActive ? "on" : "")}";
                    var containerCls = tab.IsToggle ? "container-toggle" : "";
                    <div class="c-tab-item @containerCls @activeCls">
                        @switch (tab.Id) {
                            case "logOut":
                                @RenderSignOutBtn(tab)
                                break;
                            default:
                                @RenderCommonButton(tab)
                                break;
                        }
                    </div>
                    @if (!tab.HasSeparator) {
                        continue;
                    }
                    <div class="w-auto bg-04 h-px my-4 mx-4"></div>
                }
            </div>
            <div class="px-3">
                <LinkTileItem Link="@link" Caption="Link to your account" IsHoverable="false"/>
            </div>
            <div class="c-footer">
                <div class="flex-none flex-x items-center justify-between px-4 gap-x-2 text-xxs">
                    <div class="flex-1 text-03 font-medium truncate">@AppInfo.DisplayVersion</div>
                    <div class="flex-none">
                        <LoadingTime/>
                    </div>
                    @if (HostInfo.AppKind != AppKind.MauiApp) {
                        <div class="flex-none">
                            <BlazorModeToggle/>
                        </div>
                    }
                </div>
            </div>
        </div>
        @ChildContent
    </div>
</CascadingValue>

@code {
    private bool _isRightSideVisible;
    private readonly List<SettingsTab> _tabs = new();
    private SettingsTab? _activeTab;

    [Inject] private AccountUI AccountUI { get; init; } = null!;
    [Inject] private IClientAuth ClientAuth { get; init; } = null!;
    [Inject] private NavigationManager Nav { get; init; } = null!;
    [Inject] private HostInfo HostInfo { get; init; } = null!;

    [CascadingParameter] public Modal Modal { get; set; } = null!;

    [Parameter] public string Class { get; set; } = "";
    [Parameter] public string Title { get; set; } = "";
    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Parameter] public EventCallback<SettingsTab?> ActiveTabChanged { get; set; }
    [Parameter] public EventCallback CloseModalClick { get; set; }

#pragma warning disable BL0007
    [Parameter] public SettingsTab? ActiveTab {
        get => _activeTab;
        set {
            if (_activeTab == value)
                return;
            if (value != null && !_tabs.Contains(value))
                throw StandardError.Constraint("This tab does not belong to the panel.");
            _activeTab = value;
            ActiveTabChanged.InvokeAsync(value);
        }
    }

    [Parameter] public string? DefaultTabId {
        get => _activeTab?.Id;
        set {
            if (_activeTab?.Id == value)
                return;
            var tab = _tabs.FirstOrDefault(t => t.Id == value);
            if (tab != null && !_tabs.Contains(tab))
                throw StandardError.Constraint("This tab does not belong to the panel.");
            _activeTab = tab;
            ActiveTabChanged.InvokeAsync(tab);
        }
    }
#pragma warning restore BL0007

    public IReadOnlyList<SettingsTab> Tabs => _tabs;

    internal void RegisterTab(SettingsTab tab) {
        var indexToInsert = -1;
        if (tab.TabIndex.HasValue && _tabs.Count > 0) {
            for (var i = 0; i < _tabs.Count; i++) {
                var c = _tabs[i];
                if (!c.TabIndex.HasValue || c.TabIndex > tab.TabIndex) {
                    indexToInsert = i;
                    break;
                }
            }
        }
        if (indexToInsert >= 0)
            _tabs.Insert(indexToInsert, tab);
        else
            _tabs.Add(tab);
        ActiveTab ??= tab;
        StateHasChanged();
    }

    public void UnregisterTab(SettingsTab tab) {
        var tabIndex = _tabs.IndexOf(tab);
        _tabs.Remove(tab);
        tabIndex = tabIndex.Clamp(0, _tabs.Count - 1);
        ActiveTab = tabIndex >= 0 ? _tabs[tabIndex] : null;
        StateHasChanged();
    }

    private void OnTabTitleClick(SettingsTab tab) {
        ActiveTab = tab;
        _isRightSideVisible = true;
        StateHasChanged();
    }

    public void OnTabArrowClick() {
        _isRightSideVisible = false;
        StateHasChanged();
    }

    private Task OnSignOutClick()
        => AccountUI.SignOut();
}
