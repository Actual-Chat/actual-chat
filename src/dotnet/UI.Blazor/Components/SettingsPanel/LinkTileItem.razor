@namespace ActualChat.UI.Blazor.Components
@using ActualChat.Users
@using ActualChat.UI.Blazor.Services
@inherits ComputedStateComponent<ActualChat.Users.AccountFull>
@{
    var account = State.Value;
    if (ReferenceEquals(account, AccountFull.Loading) || account.IsGuestOrNone)
        return;
}

<TileItem IsHoverable="false" Class="first-tile-item tile-item-my-account-link">
    <Icon>
        <AvatarCircle
            Avatar="@account.Avatar"
            Size="@SquareSize.Size12" />
    </Icon>
    <Content>
        @account.FullName
    </Content>
    <Right>
        <Button Class="btn-outline btn-sm btn-share" Click="@(() => OnShareClick(account.Id, account.Avatar.Name))">
            <i class="icon-share text-2xl"></i>
            <span>Share</span>
        </Button>
    </Right>
</TileItem>

@code {
    [Inject] private AccountUI AccountUI { get; init; } = null!;

    protected override ComputedState<AccountFull>.Options GetStateOptions()
        => new() {
            InitialValue = AccountUI.OwnAccount.Value,
            Category = GetStateCategory(),
        };

    protected override async Task<AccountFull> ComputeState(CancellationToken cancellationToken)
        => await AccountUI.OwnAccount.Use(cancellationToken);

    private void OnShareClick(UserId accountId, string name) {
        var shareUI = Services.GetRequiredService<ShareUI>();
        var request = new ShareRequest($"{name} on Actual Chat", Links.User(accountId));
        shareUI.Share(ShareKind.Contact, "Share your contact", name, request);
    }
}
