@using ActualChat.UI.Blazor.Module
@using ActualChat.UI.Blazor.Services
@using ActualChat.Hosting
@using ActualChat.Security
@using System.Diagnostics.CodeAnalysis
@implements IAsyncDisposable

<input @ref="InputRef" type="file" @attributes="InputAttributes"/>

@code {
    private static readonly string JSCreateMethod = $"{BlazorUICoreModule.ImportName}.FileUpload.create";

    private ElementReference InputRef { get; set; }
    private DotNetObjectReference<FileUpload> BlazorRef { get; set; } = null!;
    private IJSObjectReference JSRef { get; set; } = null!;

    [Inject] private Session Session { get; init; } = null!;
    [Inject] private BrowserInfo BrowserInfo { get; init; } = null!;
    [Inject] private UICommander UICommander { get; init; } = null!;
    [Inject] private IJSRuntime JS { get; init; } = null!;

    [Parameter, EditorRequired] public string UploadUrl { get; set; } = "";
    [Parameter] public int? MaxSize { get; set; }
    [Parameter] public EventCallback<MediaContent> Uploaded { get; set; }

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object> InputAttributes { get; set; } = new();

    [DynamicDependency(DynamicallyAccessedMemberTypes.All, typeof(FileUpload))]
    public FileUpload() { }

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (!firstRender)
            return;

        BlazorRef = DotNetObjectReference.Create(this);
        var options = new JSOptions {
            MaxSize = MaxSize,
            UploadUrl = UploadUrl,
        };
        JSRef = await JS.InvokeAsync<IJSObjectReference>(JSCreateMethod, InputRef, BlazorRef, options);
    }

    public async ValueTask DisposeAsync() {
        await JSRef.DisposeSilentlyAsync("dispose");
        JSRef = null!;
        BlazorRef.DisposeSilently();
        BlazorRef = null!;
    }

    [JSInvokable]
    public Task OnUploaded(MediaContent mediaContent)
        => Uploaded.InvokeAsync(mediaContent);

    [JSInvokable]
    public void OnInvalidSize() {
        if (!MaxSize.HasValue)
            return;

        var size = FileSizeFormatter.Format(MaxSize.Value);
        UICommander.ShowError(StandardError.Constraint($"File is too big. Max file size: {size}."));
    }

    // Nested types

    public class JSOptions
    {
        public int? MaxSize { get; set; }
        public string? UploadUrl { get; set; }
    }
}
