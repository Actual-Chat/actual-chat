@using ActualChat.UI.Blazor.Module
@using ActualChat.UI.Blazor.Services
@using ActualChat.Hosting
@using ActualChat.Security
@inherits ComputedStateComponent<FileUpload.Model>

<input @ref="InputRef" type="file" @attributes="InputAttributes"/>

@code {
    private ElementReference InputRef { get; set; }
    private DotNetObjectReference<FileUpload> BlazorRef { get; set; } = null!;
    private IJSObjectReference JSRef { get; set; } = null!;

    [Inject] private IJSRuntime JS { get; init; } = null!;
    [Inject] private ErrorUI ErrorUI { get; init; } = null!;
    [Inject] private Session Session { get; init; } = null!;
    [Inject] private BrowserInfo BrowserInfo { get; init; } = null!;
    [Inject] private SecureTokenProvider SecureTokenProvider { get; init; } = null!;

    [Parameter, EditorRequired] public string UploadUrl { get; set; } = "";
    [Parameter] public int? MaxSize { get; set; }
    [Parameter] public EventCallback<MediaContent> Uploaded { get; set; }

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object> InputAttributes { get; set; } = new();

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (!firstRender)
            return;

        var m = State.ValueOrDefault;
        var secureToken = m?.SecureToken?.Token;

        BlazorRef = DotNetObjectReference.Create(this);
        var options = new JsOptions {
            MaxSize = MaxSize,
            UploadUrl = UploadUrl,
            SecureToken = BrowserInfo is { AppKind: AppKind.MauiApp, IsIos: true }
                ? secureToken
                : null,
        };
        JSRef = await JS
            .InvokeAsync<IJSObjectReference>(
                $"{BlazorUICoreModule.ImportName}.FileUpload.create",
                InputRef,
                BlazorRef,
                options);
    }

    protected override async Task<Model> ComputeState(CancellationToken cancellationToken) {
        var token = await SecureTokenProvider.CurrentToken.Use(cancellationToken);

        await JSRef.InvokeVoidAsync("updateSecureToken", cancellationToken, token?.Token ?? "");

        return new (token);
    }

    [JSInvokable]
    public async Task OnUploaded(MediaContent mediaContent) {
        await Uploaded.InvokeAsync(mediaContent).ConfigureAwait(false);
    }

    [JSInvokable]
    public void OnInvalidSize() {
        if (!MaxSize.HasValue)
            return;

        var size = FileSizeFormatter.Format(MaxSize.Value);
        ErrorUI.ShowError(StandardError.Constraint($"File is too big. Max file size: {size}."));
    }

    public override async ValueTask DisposeAsync() {
        await JSRef.DisposeSilentlyAsync("dispose");
        JSRef = null!;
        BlazorRef.DisposeSilently();
        BlazorRef = null!;
        await base.DisposeAsync();
    }

    // Nested types

    public class JsOptions
    {
        public int? MaxSize { get; set; }
        public string? UploadUrl { get; set; }
        public string? SecureToken { get; set; }
    }

    public record Model(SecureToken? SecureToken);

}
