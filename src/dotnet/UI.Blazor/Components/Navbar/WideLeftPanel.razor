@namespace ActualChat.UI.Blazor.Components
@using ActualChat.UI.Blazor.Services
@inherits ComputedStateComponent<bool>

@{
    var isOpened = State.ValueOrDefault;
    var cls = isOpened ? "thin-opened" : "thin-closed";
}

<div class="wide-left-panel-wrapper @cls">
    <div class="wide-left-panel">
        <div class="flex-x justify-center items-center min-h-mobile-header border-b border-bg-04 px-2 gap-x-2 panel-content">
            <div class="md:hidden w-12">
                <input id="navbar-toggle" class="hidden" type="checkbox" @bind="@IsOpened"/>
                <NavbarToggle/>
            </div>
            <Search Class="mobile-hidden"/>
            <div class="w-16 flex-1 float-right mobile-hidden">
                <ButtonRound Click="@Click" Class="add-to-chat">
                    <svg class="fill-current w-6 h-6" viewBox="2 2 22 22" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path fill-rule="evenodd" clip-rule="evenodd" d="M12 10C11.448 10 11 10.448 11 11C11 11.552 11.448 12 12 12C12.552 12 13 11.552 13 11C13 10.448 12.552 10 12 10ZM20 16C20 16.551 19.551 17 19 17H8.554C8.011 17 7.477 17.148 7.01 17.428L4 19.234V6C4 5.449 4.449 5 5 5H19C19.551 5 20 5.449 20 6V16ZM19 3H5C3.346 3 2 4.346 2 6V21C2 21.36 2.194 21.693 2.507 21.87C2.66 21.957 2.83 22 3 22C3.178 22 3.356 21.953 3.515 21.857L8.039 19.143C8.195 19.049 8.373 19 8.554 19H19C20.654 19 22 17.654 22 16V6C22 4.346 20.654 3 19 3Z"/>
                        <rect x="8" y="10" width="8" height="2" rx="1"/>
                        <rect x="13" y="7" width="8" height="2" rx="1" transform="rotate(90 13 7)"/>
                    </svg>
                </ButtonRound>
            </div>
        </div>
        <div class="navbar-content flex-auto flex-y overflow-y-hidden h-full panel-content">
            <NavbarContent/>
        </div>
    </div>
</div>

@code {
    [Inject] private NavbarUI NavbarUI { get; init; } = null!;
    [Inject] private ModalUI ModalUI { get; init; } = null!;
    private bool _isOpened;

    private bool IsOpened {
        get => _isOpened;
        set {
            _isOpened = !NavbarUI.IsThinPanelOpened.Value;
            NavbarUI.IsThinPanelOpened.Value = _isOpened;
        }
    }

    protected override ComputedState<bool>.Options GetStateOptions()
        => new() { UpdateDelayer = UpdateDelayer.MinDelay };

    protected override async Task<bool> ComputeState(CancellationToken cancellationToken)
        => await NavbarUI.IsThinPanelOpened.Use(cancellationToken).ConfigureAwait(false);

    private void Click() {
        if (NavbarUI.AddButtonAction.TryGetValue(NavbarUI.ActiveGroupId, out var addAction)) {
            addAction();
        }
    }
}
