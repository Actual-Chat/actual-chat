@using ActualChat.Hosting
@using ActualChat.UI.Blazor.Authorization
@using ActualChat.Users
@using Microsoft.AspNetCore.Authorization
@namespace ActualChat.UI.Blazor.Components
@inherits ComputedStateComponent<NavbarContent.Model>

@code {
    [Inject] private IAuthorizationService AuthorizationService { get; set; } = null!;
    [Inject] private AuthStateProvider AuthStateProvider { get; set; } = null!;
    [Inject] private IEnumerable<NavbarWidget> Widgets { get; set; } = null!;
    [Inject] private HostInfo HostInfo { get; set; } = null!;

    protected override ComputedState<Model>.Options GetStateOptions()
        => new() { InitialValue = new Model(false) };

    protected override async Task<Model> ComputeState(CancellationToken cancellationToken) {
        var authenticationState = await AuthStateProvider.GetAuthenticationStateAsync();
        var authorizationResult = await AuthorizationService.AuthorizeAsync(authenticationState.User, KnownPolicies.IsUserActive);
        return new Model(authorizationResult.Succeeded);
    }

    public sealed record Model(bool IsActive);
}

@if (State.LatestNonErrorValue.IsActive) {
    @foreach (var widget in Widgets.OrderBy(c => c.Order)) {
        @widget.Content
    }
}

@if (HostInfo.IsDevelopmentInstance) {
    <NavbarGroup Title="Test pages" Class="navbar-pages" Id="testPages">
        <NavbarItem Url="/test/virtual-list">Virtual List</NavbarItem>
        <NavbarItem Url="/test/audio-player">Audio Player</NavbarItem>
        <NavbarItem Url="/test/audio-recorder">Audio Recorder</NavbarItem>
        <NavbarItem Url="/test/render-slot">Render Slot</NavbarItem>
        <NavbarItem Url="/test/slate-editor">Slate Editor</NavbarItem>
        <NavbarItem Url="/test/auth">Authentication</NavbarItem>
    </NavbarGroup>
}
