@using ActualChat.UI.Blazor.Module
@namespace ActualChat.UI.Blazor.Components
@implements IAsyncDisposable

<CascadingValue Value="_targetRefReceiver">
    @ChildContent
</CascadingValue>

<div @ref="_tooltipRef" class="ac-tooltip">
    @Text
    <div @ref="_arrowRef" class="ac-tooltip-arrow"></div>
</div>

@code {
    private TargetRefReceiver _targetRefReceiver = new();
    private ElementReference _tooltipRef;
    private ElementReference _arrowRef;
    private IJSObjectReference _jsRef = null!;
    private DotNetObjectReference<Tooltip> _blazorRef = null!;

    [Inject] private IJSRuntime JS { get; init; } = null!;

    [Parameter] public TooltipPosition Position { get; set; } = TooltipPosition.Top;
    [Parameter] public RenderFragment ChildContent { get; set; } = null!;
    [Parameter] public string Text { get; set; } = "";

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (firstRender) {
            var targetRef = await _targetRefReceiver.Get();
            _blazorRef = DotNetObjectReference.Create(this);
            var identifier = $"{BlazorUICoreModule.ImportName}.Tooltip.create";
            _jsRef = await JS.InvokeAsync<IJSObjectReference>(
                identifier,
                targetRef,
                _tooltipRef,
                _arrowRef,
                _blazorRef,
                new {
                    Position,
                });
        }
    }

    public async ValueTask DisposeAsync() {
        _targetRefReceiver.Dispose();
        await _jsRef.DisposeSilentlyAsync("dispose");
        _jsRef = null!;
        _blazorRef.DisposeSilently();
        _blazorRef = null!;
    }
}
