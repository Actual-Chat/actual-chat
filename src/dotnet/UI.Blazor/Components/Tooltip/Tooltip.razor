@using ActualChat.UI.Blazor.Module
@implements IAsyncDisposable

<div @ref="TooltipRef" class="ac-tooltip">
    @ChildContent
    <div @ref="ArrowRef" class="ac-tooltip-arrow"></div>
</div>

@code {
    [Inject] private IJSRuntime JS { get; init; } = null!;

    [Parameter] public TooltipPosition Position { get; set; } = TooltipPosition.Bottom;
    [Parameter] public RenderFragment ChildContent { get; set; } = null!;
    [Parameter] public ElementReference Reference { get; set; }

    private ElementReference TooltipRef { get; set; }
    private ElementReference ArrowRef { get; set; }
    private IJSObjectReference JSRef { get; set; } = null!;
    private DotNetObjectReference<Tooltip> BlazorRef { get; set; } = null!;

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (firstRender) {
            BlazorRef = DotNetObjectReference.Create(this);
            var identifier = $"{BlazorUICoreModule.ImportName}.Tooltip.create";
            var options = new TooltipOptions {
                Position = Position,
            };
            JSRef = await JS.InvokeAsync<IJSObjectReference>(
                identifier,
                TooltipRef,
                Reference,
                ArrowRef,
                BlazorRef,
                options);
        }
    }

    public async ValueTask DisposeAsync() {
        await JSRef.DisposeSilentlyAsync("dispose");
        JSRef = null!;
        BlazorRef.DisposeSilently();
        BlazorRef = null!;
    }

    public class TooltipOptions
    {
        public TooltipPosition Position { get; set; }
    }

    public enum TooltipPosition
    {
        None,
        Top,
        TopStart,
        TopEnd,
        Right,
        RightStart,
        RightEnd,
        Bottom,
        BottomStart,
        BottomEnd,
        Left,
        LeftStart,
        LeftEnd,
    }
}
