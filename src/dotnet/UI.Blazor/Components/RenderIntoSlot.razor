@implements IDisposable
@using ActualChat.UI.Blazor.Services
@{
    if (_slot != null) {
        _slot.NotifyChanged();
        return;
    }

    _slot = RenderVars.RenderSlot(Name);
    _slot.Value.Add(this);
    _slot.NotifyChanged();
}
@code {
    private RenderVar<List<RenderIntoSlot>>? _slot;

    [Inject] private RenderVars RenderVars { get; init; } = null!;

    [Parameter, EditorRequired] public string Name { get; set; } = "";
    [Parameter] public RenderFragment? ChildContent { get; set; }

    public void Dispose() {
        if (_slot == null)
            return;

        if (!_slot.Value.Remove(this))
            throw StandardError.Internal($"Something is off: couldn't remove <{nameof(RenderIntoSlot)}> with Name = '{Name}'.");

        _slot.NotifyChanged();
    }
}
