@namespace ActualChat.UI.Blazor.Components
@using ActualChat.UI.Blazor.Module
@implements IScreenSizeProviderBackend

@if (_screenSize.HasValue) {
    <CascadingValue Value="@_screenSize.Value">
        @ChildContent
    </CascadingValue>
}

@code {
    private ScreenSize? _screenSize;

    private DotNetObjectReference<IScreenSizeProviderBackend> BlazorRef { get; set; } = null!;
    private IJSObjectReference JSRef { get; set; } = null!;

    [Inject] IJSRuntime JS { get; set; } = null!;
    [Parameter] public RenderFragment ChildContent { get; set; } = null!;

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (!firstRender)
            return;
        BlazorRef = DotNetObjectReference.Create<IScreenSizeProviderBackend>(this);
        JSRef = await JS.InvokeAsync<IJSObjectReference>(
            $"{BlazorUICoreModule.ImportName}.ScreenSizeProvider.create",
            BlazorRef
            );
    }

    [JSInvokable("OnSizeChanged")]
    public void OnSizeChanged(bool isDesktopScreenSize) {
        _screenSize = isDesktopScreenSize ? ScreenSize.Desktop : ScreenSize.Mobile;
        StateHasChanged();
    }

    public async ValueTask DisposeAsync() {
        await JSRef.DisposeSilentlyAsync("dispose");
        JSRef = null!;
        BlazorRef.DisposeSilently();
        BlazorRef = null!;
    }
}
