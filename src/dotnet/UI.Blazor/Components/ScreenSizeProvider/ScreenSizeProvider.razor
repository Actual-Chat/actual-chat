@namespace ActualChat.UI.Blazor.Components
@using ActualChat.UI.Blazor.Module
@implements IScreenSizeProviderBackend

<NoComponent> @* Add @key="ScreenSize" if you want to re-render everything on size change *@
    <CascadingValue Value="@ScreenSize">
        @ChildContent
    </CascadingValue>
</NoComponent>

<NoComponent @key="this">
    <div class="h-0 max-h-0 w-full" @ref="_ref">
        <div class="hidden 2xl:block" data-size="ExtraLarge2"></div>
        <div class="hidden xl:block" data-size="ExtraLarge"></div>
        <div class="hidden lg:block" data-size="Large"></div>
        <div class="hidden md:block" data-size="Medium"></div>
        <div class="hidden sm:block" data-size="Small"></div>
    </div>
</NoComponent>

@code {
    private ElementReference _ref;
    private DotNetObjectReference<IScreenSizeProviderBackend>? _blazorRef;
    private IJSObjectReference? _jSRef;

    [Inject] IJSRuntime JS { get; set; } = null!;

    [Parameter] public RenderFragment ChildContent { get; set; } = null!;

    public ScreenSize ScreenSize { get; private set; } = ScreenSize.Unknown;

    public async ValueTask DisposeAsync() {
        await _jSRef.DisposeSilentlyAsync("dispose");
        _jSRef = null!;
        _blazorRef.DisposeSilently();
        _blazorRef = null!;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (!firstRender)
            return;
        _blazorRef = DotNetObjectReference.Create<IScreenSizeProviderBackend>(this);
        _jSRef = await JS.InvokeAsync<IJSObjectReference>(
            $"{BlazorUICoreModule.ImportName}.ScreenSizeProvider.create",
            _ref, _blazorRef);
    }

    [JSInvokable("OnSizeChanged")]
    public void OnSizeChanged(string screenSizeText) {
        if (!Enum.TryParse<ScreenSize>(screenSizeText, true, out var screenSize))
            screenSize = ScreenSize.Unknown;

        ScreenSize = screenSize;
        StateHasChanged();
    }
}
