@using ActualChat.Search
@using ActualChat.UI.Blazor.Services
@inherits ComputedStateComponent<SearchMatch>

<SearchMatchHighlighter Match="@State.Value"/>

@code {
    private static IUpdateDelayer UpdateDelayer { get; } = FixedDelayer.Get(0.333);

    [Inject] private SearchUI SearchUI { get; init; } = null!;

    [Parameter, EditorRequired] public string Text { get; set; } = "";

    protected override ComputedState<SearchMatch>.Options GetStateOptions()
        => new() {
            InitialValue = SearchMatch.New(Text),
            UpdateDelayer = UpdateDelayer, // De-bounces the re-renders
            Category = ComputedStateComponent.GetStateCategory(GetType()),
        };

    protected override async Task<SearchMatch> ComputeState(CancellationToken cancellationToken) {
        if (Text.IsNullOrEmpty())
            return SearchMatch.Empty;

        var text = Text;
        var searchPhrase = await SearchUI.GetSearchPhrase(cancellationToken).ConfigureAwait(false);
        return searchPhrase.GetMatch(text);
    }
}
