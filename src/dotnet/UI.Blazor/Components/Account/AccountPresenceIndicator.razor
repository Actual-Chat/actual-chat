@namespace ActualChat.UI.Blazor.Components
@using ActualChat.Users
@inherits ComputedStateComponent<Presence>
@{
    var presence = State.Value;
}

<PresenceIndicator Presence="@presence" />

@code {
    [Inject] private IUserPresences UserPresences { get; init; } = null!;

    protected UserId UserId { get; private set; }

    [Parameter, EditorRequired] public string UserSid { get; set; } = "";

    protected override void OnParametersSet()
        => UserId = new UserId(UserSid);

    protected override ComputedState<Presence>.Options GetStateOptions() {
        if (UserId.IsNone)
            return ComputedStateComponent.GetStateOptions(GetType(),
                static t => new ComputedState<Presence>.Options() {
                    InitialValue = Presence.Unknown,
                    Category = ComputedStateComponent.GetStateCategory(t),
                });

        var presenceComputed = Computed.GetExisting(() => UserPresences.Get(UserId, default));
        var presence = presenceComputed?.IsConsistent() == true &&  presenceComputed.HasValue ? presenceComputed.Value : Presence.Unknown;
        return new() {
            InitialValue = presence,
            Category = ComputedStateComponent.GetStateCategory(GetType()),
        };
    }

    protected override Task<Presence> ComputeState(CancellationToken cancellationToken)
        => UserId.IsNone
            ? Task.FromResult(Presence.Unknown)
            : UserPresences.Get(UserId, cancellationToken);
}
