@using ActualChat.UI.Blazor.Services
@inherits ComputedStateComponent<ImmutableList<RenderIntoStack>>
@{
    var items = State.Value;
    if (items.Count == 0)
        return;

    var orderedItems = items
        .OrderBy(x => x.Order).ThenBy(x => x.Key) as IEnumerable<RenderIntoStack>;
    if (IsReversed)
        orderedItems = orderedItems.Reverse();

    var knownKeys = new HashSet<string>(StringComparer.Ordinal);
}

@foreach (var item in orderedItems) {
    if (item.IsDisposed)
        continue;

    if (!item.Key.IsNullOrEmpty()) {
        if (!knownKeys.Add(item.Key))
            continue;  // It seems sometimes Blazor disposes the component way too late

        <NoComponent @key="item.Key">
            @(Item?.Invoke(item.ChildContent) ?? item.ChildContent)
        </NoComponent>
    } else {
        <NoComponent>
            @(Item?.Invoke(item.ChildContent) ?? item.ChildContent)
        </NoComponent>
    }
}

@code {
    [Inject] private RenderVars RenderVars { get; init; } = null!;

    [Parameter, EditorRequired] public string Name { get; set; } = "";
    [Parameter] public bool IsReversed { get; set; }
    [Parameter] public RenderFragment<RenderFragment?>? Item { get; set; }

    protected override ComputedState<ImmutableList<RenderIntoStack>>.Options GetStateOptions()
        => new () {
            InitialValue = ImmutableList<RenderIntoStack>.Empty,
            UpdateDelayer = FixedDelayer.Instant,
            Category = GetStateCategory(),
        };

    protected override async Task<ImmutableList<RenderIntoStack>> ComputeState(CancellationToken cancellationToken)
        => await RenderVars.RenderStack(Name).Use(cancellationToken);
}
