@implements IDisposable
@using ActualChat.UI.Blazor.Services
@{
    var items = _stack?.Value;
    if (items == null || items.Count == 0)
        return;

    var orderedItems = items
        .OrderBy(x => x.Order).ThenBy(x => x.Key) as IEnumerable<RenderIntoStack>;
    if (IsReversed)
        orderedItems = orderedItems.Reverse();

    var knownKeys = new HashSet<string>(StringComparer.Ordinal);
}

@foreach (var item in orderedItems) {
    if (!item.Key.IsNullOrEmpty()) {
        if (!knownKeys.Add(item.Key))
            continue;  // It seems sometimes Blazor disposes the component way too late

        <NoComponent @key="item.Key">
            @(Item?.Invoke(item.ChildContent) ?? item.ChildContent)
        </NoComponent>
    } else {
        <NoComponent>
            @(Item?.Invoke(item.ChildContent) ?? item.ChildContent)
        </NoComponent>
    }
}

@code {
    private RenderVar<List<RenderIntoStack>>? _stack;
    private Action<RenderVar>? _onStackChanged;

    [Inject] private RenderVars RenderVars { get; init; } = null!;

    [Parameter, EditorRequired] public string Name { get; set; } = "";
    [Parameter] public bool IsReversed { get; set; }
    [Parameter] public RenderFragment<RenderFragment?>? Item { get; set; }

    protected override void OnInitialized() {
        _onStackChanged = OnStackChanged;
        _stack = RenderVars.RenderStack(Name);
        _stack.Changed += _onStackChanged;
    }

    public void Dispose() {
        if (_stack != null)
            _stack.Changed -= _onStackChanged;
    }

    private void OnStackChanged(RenderVar _)
        => StateHasChanged();
}
