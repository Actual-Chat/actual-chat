@namespace ActualChat.UI.Blazor.Components
@using ActualChat.Users
@using ActualChat.UI.Blazor.Services;
@inherits ComputedStateComponent<AccountFull?>

@code {
    private AccountFull? _lastAccount;

    [Inject] private Session Session { get; init; } = null!;
    [Inject] private IAccounts Accounts { get; init; } = null!;
    [Inject] private AutoNavigationUI AutoNavigationUI { get; init; } = null!;
    [Inject] private NavigationManager Nav { get; init; } = null!;

    [Parameter] public bool NavigateIfAlreadySignedIn { get; set; }

    protected override ComputedState<AccountFull?>.Options GetStateOptions()
        => new () {
            UpdateDelayer = FixedDelayer.Instant,
            Category = GetStateCategory(),
        };

    protected override async Task<AccountFull?> ComputeState(CancellationToken cancellationToken) {
        var account = await Accounts.GetOwn(Session, CancellationToken.None).ConfigureAwait(false);
        _lastAccount ??= account;

        var isSignedIn = !account.IsGuest;
        var wasSignedIn = !_lastAccount.IsGuest;
        _lastAccount = account;

        if (isSignedIn && (NavigateIfAlreadySignedIn || !wasSignedIn))
            AutoNavigationUI.TryNavigateToChatsOnSignIn();
        return account;
    }
}
