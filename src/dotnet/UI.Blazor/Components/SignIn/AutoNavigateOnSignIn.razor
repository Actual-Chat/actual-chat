@namespace ActualChat.UI.Blazor.Components
@using ActualChat.UI.Blazor.Services;
@using ActualChat.UI.Blazor.Events

<OnUIEvent TEvent="OwnAccountChangedEvent" Handler="@OnOwnAccountChanged"/>

@code {
    [Inject] private AutoNavigationUI AutoNavigationUI { get; init; } = null!;
    [Inject] private History History { get; init; } = null!;

    [Parameter] public string? SourceUrl { get; set; } = null;
    [Parameter] public string TargetUrl { get; set; } = "";

    private Task OnOwnAccountChanged(OwnAccountChangedEvent @event, CancellationToken cancellationToken) {
        var (account, oldAccount) = @event;
        var isSignedIn = !account.IsGuestOrNone;
        var wasSignedIn = !oldAccount.IsGuestOrNone;

        if (!isSignedIn || wasSignedIn)
            return Task.CompletedTask;
        if (SourceUrl != null && History.LocalUrl != new LocalUrl(SourceUrl))
            return Task.CompletedTask;

        var targetUrl = new LocalUrl(TargetUrl);
        AutoNavigationUI.NavigateTo(targetUrl, AutoNavigationReason.SignIn);
        return Task.CompletedTask;
    }
}
