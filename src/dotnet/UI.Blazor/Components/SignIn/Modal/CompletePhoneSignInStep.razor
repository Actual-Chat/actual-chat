@namespace ActualChat.UI.Blazor.Components
@using ActualChat.Users
@using ActualChat.UI.Blazor.Services
@using TaskExt = ActualLab.Async.TaskExt
@using ActualChat.Hosting
@inherits Step;

@{
    var phone = PhoneSignInModel.Phone;
    @if (CurrentStep != this || phone is null)
        return;
}

<div class="sign-in-step verify-phone-step" @onclick="@TryFocusTotpInput">
    <div class="c-title">Phone number verification</div>
    <div class="flex-x flex-1 justify-center">
        <phone-verification-cat-svg/>
    </div>
    <TotpVerifier @ref="_totpVerifier" Purpose="TotpPurpose.SignIn" Phone="@phone.Value" Verified="OnTotpVerified"/>
</div>

@code {
    private TotpVerifier? _totpVerifier;

    [Inject] private UrlMapper UrlMapper { get; init; } = null!;
    [Inject] private History History { get; init; } = null!;
    [Inject] private HostInfo HostInfo { get; init; } = null!;

    [Parameter, EditorRequired] public PhoneSignInModel PhoneSignInModel { get; set; } = null!;

    public override bool IsCompleted { get; } = false;

    protected override async Task<bool> Save() {
        var url = UrlMapper.ToAbsolute(Constants.Auth.Phone.CallbackPath);
        if (HostInfo.AppKind == AppKind.MauiApp)
            await History.NavigateTo(Links.Chats);
        else
            await History.NavigateTo(url, force: true);
        return true;
    }

    protected override void MarkCompleted()
    { }

    protected override Task<bool> Validate()
        => TaskExt.TrueTask;

    private Task TryFocusTotpInput()
        => _totpVerifier?.Focus().AsTask() ?? Task.CompletedTask;

    private Task OnTotpVerified()
        => Stepper.TryMoveForward().AsTask();
}
