@namespace ActualChat.UI.Blazor.Components
@using ActualChat.Users
@using ActualChat.UI.Blazor.Services
@inherits Step;

@if (CurrentStep != this || PhoneSignInModel.Phone is null) {
    return;
}

<UITimer Period="@(TotpTtl)" Tick="OnTotpExpired"/>
<div class="sign-in-step verify-phone-step" @onclick="@TryFocusTotpInput">
    <div class="flex-y gap-y-8 items-center">
        <div class="flex-y gap-y-4">
            <div class="sign-in-step-title">Enter code</div>
            <p class="sign-in-step-description">We have sent an SMS with an activation code to your phone @PhoneSignInModel.Phone.Value.ToReadable()</p>
        </div>
        <TotpInput @ref="_totpInput" Completed="OnTotpEntered"/>
    </div>
    @if (Clocks.SystemClock.Now < PhoneSignInModel.TotpExpiresAt) {
        <div class="pt-20 flex-x justify-center gap-x-1">
            <span>You can resend code in</span>
            <Countdown EndsAt="@PhoneSignInModel.TotpExpiresAt.Value"/>
        </div>
    } else {
        <Button Class="btn-primary btn-modal sign-in" Click="OnResendCodeClick">Resend</Button>
    }

</div>

@code {
    private TotpInput? _totpInput;
    private int? _totp;

    [Inject] private Session Session { get; init; } = null!;
    [Inject] private UrlMapper UrlMapper { get; init; } = null!;
    [Inject] private TuneUI TuneUI { get; init; } = null!;
    [Inject] private UICommander UICommander { get; init; } = null!;
    [Inject] private NavigationManager Nav { get; init; } = null!;
    [Inject] private MomentClockSet Clocks { get; init; } = null!;

    [Parameter, EditorRequired] public PhoneSignInModel PhoneSignInModel { get; set; } = null!;

    public override bool IsCompleted { get; } = false;

    private TimeSpan TotpTtl
        => PhoneSignInModel.TotpExpiresAt != null
            ? PhoneSignInModel.TotpExpiresAt.Value - Clocks.SystemClock.Now + TimeSpan.FromMilliseconds(10)
            : TimeSpan.Zero;

    protected override Task<bool> Validate() {
        return Task.FromResult(_totp != null);
    }

    protected override async Task<bool> Save() {
        var phone = PhoneSignInModel.Phone!.Value;
        var cmd = new PhoneAuth_ValidateTotp(Session, phone, _totp!.Value);
        var (success, error) = await UICommander.Run(cmd);
        if (!success || error != null) {
            _totp = null;
            await _totpInput!.Clear();
            await _totpInput.ShowError();
            _ = TuneUI.Play("input-error");
            return false;
        }
        var url = UrlMapper.ToAbsolute(Constants.Auth.Phone.CallbackPath);
        Nav.NavigateTo(url, true);
        return true;
    }

    protected override void MarkCompleted()
    { }

    private Task OnTotpEntered(int value) {
        _totp = value;
        return Stepper.TryMoveForward().AsTask();
    }

    private async Task OnResendCodeClick() {
        var phone = PhoneSignInModel.Phone!.Value;
        var (expiresAt, error) = await UICommander.Run(new PhoneAuth_SendTotp(Session, phone));
        if (error != null)
            return;

        PhoneSignInModel.TotpExpiresAt = expiresAt;
    }

    private Task TryFocusTotpInput()
        => _totpInput?.Focus().AsTask() ?? Task.CompletedTask;

    private void OnTotpExpired() {
        // Do nothing, just re-render
    }
}
