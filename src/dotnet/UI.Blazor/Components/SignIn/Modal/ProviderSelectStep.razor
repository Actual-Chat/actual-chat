@namespace ActualChat.UI.Blazor.Components
@using ActualChat.UI.Blazor.Services
@using System.ComponentModel.DataAnnotations
@using ActualChat.Users
@inherits Step;
@if (CurrentStep != this) {
    return;
}

@if (_authSchemas is null) {
    return;
}

<div class="sign-in-step provider-select-step">
    <div class="c-auth-providers">
        @foreach (var schema in _authSchemas!) {
            <Button
                Class="btn-modal sign-in sign-in-with"
                Click="@(_ => OnSignInWith(schema.Name))">
                <Icon>
                    @if (schema.Icon != null) {
                        <img draggable="false" src="@schema.Icon" class="@schema.Class" alt="@schema.DisplayName">
                    }
                </Icon>
                <Title>@("Sign in with " + schema.DisplayName)</Title>
            </Button>
        }
    </div>

    @if (_isPhoneAuthEnabled) {
        <div class="c-separator">or</div>

        <div class="c-header">
            <div class="c-title">Sign-in with your phone number</div>
            <p class="c-description">
                Enter your phone number and click "Continue" to receive a text message
                with one-time verification code.
            </p>
        </div>

        <Form
            Class="c-phone-form"
            Model="@_stepModel"
            OnValidSubmit="OnSignInWithPhone">
            <AsyncDataAnnotationsValidator @ref="_validator"/>
            <FormSection
                For="() => _stepModel.Phone"
                InputId="@_stepModel.PhoneFieldId"
                Label="Phone"
                Class="grow"
                IsLabelInsideInput="true"
                IsRequired="true">
                <InputText
                    id="@_stepModel.PhoneFieldId"
                    @bind-Value="_stepModel.Phone"
                    autocomplete="tel"
                    type="tel"
                    inputmode="tel"/>
            </FormSection>
             <FormButtons IsEndAligned="false">
                <Button Type="@ButtonType.Submit" Class="btn-primary btn-modal sign-in">Continue</Button>
            </FormButtons>
        </Form>
    }
</div>

@code {
    private StepModel _stepModel = null!;
    private List<AuthSchemaModel>? _authSchemas;
    private bool _isPhoneAuthEnabled;
    private AsyncDataAnnotationsValidator _validator = null!;

    [Inject] private Session Session { get; init; } = null!;
    [Inject] private Features Features { get; init; } = null!;
    [Inject] private IClientAuth ClientAuth { get; init; } = null!;
    [Inject] private AccountUI AccountUI { get; init; } = null!;
    [Inject] private IPhones Phones { get; init; } = null!;
    [Inject] private ComponentIdGenerator ComponentIdGenerator { get; init; } = null!;
    [Inject] private ModalUI ModalUI { get; init; } = null!;
    [Inject] private UICommander UICommander { get; init; } = null!;

    [Parameter, EditorRequired] public PhoneSignInModel PhoneSignInModel { get; set; } = null!;
    [CascadingParameter] public Modal Modal { get; set; } = null!;

    protected override async Task OnInitializedAsync() {
        _isPhoneAuthEnabled = await Features.Get<Features_EnablePhoneAuth, bool>(CancellationToken.None);
        _stepModel = new StepModel(ComponentIdGenerator).CopyToBase();
        var schemas = await ClientAuth.GetSchemas();
        _authSchemas = schemas
            .Select(schema => new AuthSchemaModel {
                Name = schema.Name,
                DisplayName = schema.DisplayName,
                Icon = schema.Name switch
                {
                    IClientAuth.GoogleSchemeName => "/dist/images/landing/google-icon-color.svg",
                    IClientAuth.AppleIdSchemeName => "/dist/images/landing/apple-icon-black.svg",
                    _ => null,
                },
                Class = schema.Name switch
                {
                    IClientAuth.AppleIdSchemeName => "logo-apple",
                    _ => "",
                },
            })
            .ToList();
    }

    protected override Task<bool> Validate()
        => _validator.Validate();

    protected override async Task<bool> Save() {
        var phone = await Phones.Parse(_stepModel.Phone, CancellationToken.None);
        PhoneSignInModel.Phone = phone;
        return phone.IsValid;
    }

    private void OnSignInWith(string schema) {
        Modal.Close();
        _ = AccountUI.SignIn(schema);
    }

    private Task OnSignInWithPhone()
        => Stepper.TryMoveForward().AsTask();

    // Nested types

    private class AuthSchemaModel {
        public string Name { get; init; } = null!;
        public string DisplayName { get; init; } = null!;
        public string? Icon { get; init; }
        public string Class { get; init; } = null!;
    }

    public sealed class StepModel(ComponentIdGenerator? componentIdGenerator = null)
        : FormModel<StepModel>("phone-signin", componentIdGenerator) {
        [Required, PhoneNumber] public string Phone { get; set; } = PhoneCodes.Default.DisplayCode;
        public string PhoneFieldId { get; set; } = "";
    }
}
