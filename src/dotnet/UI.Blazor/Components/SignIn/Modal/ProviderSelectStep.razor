@namespace ActualChat.UI.Blazor.Components
@using ActualChat.UI.Blazor.Services
@using System.ComponentModel.DataAnnotations
@using ActualChat.Users
@inherits Step<ProviderSelectStep.Model>;
@{
    if (CurrentStep != this)
        return;

    if (_authSchemas is null)
        return;

    var m = State.LastNonErrorValue;
    var codeHasBeenSent = m.HasSentCodeRecently;
}


<div class="sign-in-step provider-select-step">
    <div class="c-auth-providers">
        @foreach (var schema in _authSchemas!) {
            <Button
                Class="btn-modal sign-in sign-in-with"
                Click="@(_ => OnSignInWith(schema.Name))">
                <Icon>
                    @if (schema.Icon != null) {
                        <img draggable="false" src="@schema.Icon" class="@schema.Class" alt="@schema.DisplayName">
                    }
                </Icon>
                <Title>@("Sign in with " + schema.DisplayName)</Title>
            </Button>
        }
    </div>

    @if (_isPhoneAuthEnabled) {
        <div class="c-separator">or</div>

        <div class="c-header">
            <div class="c-title">Sign-in with your phone number</div>
            <p class="c-description">
                Enter your phone number and click "Continue" to receive a text message
                with one-time verification code.
            </p>
        </div>

        <Form
            Class="c-phone-form"
            Model="@_stepModel"
            OnValidSubmit="OnSignInWithPhone">
            <AsyncDataAnnotationsValidator @ref="_validator"/>
            <FormSection
                For="() => _stepModel.Phone"
                InputId="@_stepModel.PhoneFieldId"
                Label="Phone"
                Class="grow"
                IsLabelInsideInput="true"
                IsRequired="true">
                <InputText
                    id="@_stepModel.PhoneFieldId"
                    @bind-Value="_stepModel.Phone"
                    disabled="@(codeHasBeenSent)"
                    autocomplete="tel"
                    type="tel"
                    inputmode="tel"/>
                @if (codeHasBeenSent) {
                    <div class="c-info">
                        <i class="icon-info"></i>
                        <span>Code sent. Check your phone.</span>
                    </div>
                }
            </FormSection>
            @if (CaptchaUI.IsConfigured) {
                <div class="c-recaptcha-info">
                    This site is protected by reCAPTCHA and the Google
                    <a href="https://policies.google.com/privacy">Privacy Policy</a> and
                    <a href="https://policies.google.com/terms">Terms of Service</a> apply.
                </div>
            }
            <FormButtons IsEndAligned="false">
                <Button Type="@ButtonType.Submit"  Class="btn-primary btn-modal sign-in" IsDisabled="@(_validationState == ValidationState.Invalid)">
                    @switch (_validationState) {
                        case ValidationState.Validating:
                            <i class="icon-refresh"></i><span>Validating...</span>
                            break;
                        case ValidationState.Invalid:
                            <span>Unavailable</span>
                            break;
                        case ValidationState.None:
                        case ValidationState.Valid:
                        case ValidationState.CodeSentRecently:
                        default:
                            <span>Continue</span>
                            break;
                    }
                </Button>
            </FormButtons>

        </Form>
    }
</div>

@code {
    private ValidationState _validationState = ValidationState.None;
    private StepModel _stepModel = null!;
    private List<AuthSchemaModel>? _authSchemas;
    private bool _isPhoneAuthEnabled;
    private AsyncDataAnnotationsValidator _validator = null!;

    [Inject] private UIHub UIHub { get; init; } = null!;
    [Inject] private CaptchaUI CaptchaUI { get; init; } = null!;
    [Inject] private ICaptcha Captcha { get; init; } = null!;
    [Inject] private IPhones Phones { get; init; } = null!;
    [Inject] private TotpUI TotpUI { get; init; } = null!;
    [Inject] private ComponentIdGenerator ComponentIdGenerator { get; init; } = null!;
    private Session Session => UIHub.Session();
    private Features Features => UIHub.Features();
    private UICommander UICommander => UIHub.UICommander();
    private AccountUI AccountUI => UIHub.AccountUI;
    private ModalUI ModalUI => UIHub.ModalUI;


    [Parameter, EditorRequired] public PhoneSignInModel PhoneSignInModel { get; set; } = null!;
    [CascadingParameter] public Modal Modal { get; set; } = null!;

    protected override async Task OnInitializedAsync() {
        _authSchemas = AccountUI.GetAuthSchemas()
            .Select(schema => new AuthSchemaModel {
                Name = schema.Name,
                DisplayName = schema.DisplayName,
                Icon = schema.Name switch {
                    AuthSchema.Google => "/dist/images/landing/google-icon-color.svg",
                    AuthSchema.Apple => "/dist/images/landing/apple-icon-black.svg",
                    _ => null,
                },
                Class = schema.Name switch {
                    AuthSchema.Apple => "logo-apple",
                    _ => "",
                },
            })
            .ToList();
        _isPhoneAuthEnabled = await Features.Get<Features_EnablePhoneAuth, bool>(CancellationToken.None);
        _stepModel = new StepModel(ComponentIdGenerator).CopyToBase();
        await CaptchaUI.EnsureInitialized().ConfigureAwait(false);
    }

    protected override ComputedState<Model>.Options GetStateOptions() {
        return new() {
            InitialValue = new (),
            UpdateDelayer = FixedDelayer.MinDelay,
            Category = ComputedStateComponent.GetStateCategory(GetType()),
        };
    }

    protected override async Task<Model> ComputeState(CancellationToken cancellationToken) {
        var hasSentCodeRecently = await TotpUI.HasSentCodeRecently(CancellationToken.None);
        return new (hasSentCodeRecently);
    }

    protected override Task<bool> Validate()
        => _validator.Validate();

    protected override async Task<bool> Save() {
        var phone = await Phones.Parse(_stepModel.Phone, CancellationToken.None);
        PhoneSignInModel.Phone = phone;
        return phone.IsValid;
    }

    private void OnSignInWith(string schema)
        => _ = AccountUI.SignIn(schema);

    private async Task OnSignInWithPhone() {
        var hasSentCodeRecently = await TotpUI.HasSentCodeRecently(CancellationToken.None);
        if (hasSentCodeRecently) {
            _validationState = ValidationState.CodeSentRecently;
            StateHasChanged();
            await Stepper.TryMoveForward().AsTask();
            return;
        }

        if (CaptchaUI.IsConfigured) {
            _validationState = ValidationState.Validating;
            StateHasChanged();
            try {
                var captchaToken = await CaptchaUI.GetActionToken(Constants.Recaptcha.Actions.PhoneSignIn, CancellationToken.None);
                var validationResult = await Captcha.Validate(captchaToken, Constants.Recaptcha.Actions.PhoneSignIn, CancellationToken.None);
                _validationState = validationResult.Success
                    ? ValidationState.Valid
                    : ValidationState.Invalid;
            }
            catch {
                _validationState = ValidationState.Invalid;
            }
            finally {
                StateHasChanged();
            }
        }

        await Stepper.TryMoveForward().AsTask();
    }

    // Nested types

    private class AuthSchemaModel {
        public string Name { get; init; } = null!;
        public string DisplayName { get; init; } = null!;
        public string? Icon { get; init; }
        public string Class { get; init; } = null!;
    }

    public sealed record Model(bool HasSentCodeRecently = false);

    public sealed class StepModel(ComponentIdGenerator? componentIdGenerator = null)
        : FormModel<StepModel>("phone-signin", componentIdGenerator) {
        [Required, PhoneNumber] public string Phone { get; set; } = PhoneCodes.Default.DisplayCode;
        public string PhoneFieldId { get; set; } = "";
    }
}
