@using ActualChat.UI.Blazor.Services
@using ActualChat.Users
@namespace ActualChat.UI.Blazor.Components
@inherits ComputedMenuBase<AccountFull>
@{
    if (!CanBeRendered())
        return;

    var usedAuthSchemas = State.Value.User.Identities.Select(kv => kv.Key.Schema).ToHashSet();
    var unusedAuthSchemas = AuthSchemas!.Where(p => !usedAuthSchemas.Contains(p.Name)).ToArray();
}

@foreach (var schema in unusedAuthSchemas) {
    var title = "Sign in with " + schema.DisplayName;
    <MenuEntry Click="@(_ => SignIn(schema.Name))">
        <IconContent>
            @if (schema.Icon != null) {
                <img draggable="false" src="@schema.Icon" alt="@schema.DisplayName" class="h-8 w-8">
            }
        </IconContent>
        <TextContent>
            @title
        </TextContent>
    </MenuEntry>
}

@code {
    private List<AuthSchemaModel>? AuthSchemas { get; set; }

    [Inject] private AccountUI AccountUI { get; init; } = null!;
    [Inject] private IClientAuth ClientAuth { get; init; } = null!;

    protected override ComputedState<AccountFull>.Options GetStateOptions()
        => new() {
            InitialValue = AccountUI.OwnAccount.Value,
            UpdateDelayer = FixedDelayer.Instant,
            Category = GetStateCategory(),
        };

    protected override async Task<AccountFull> ComputeState(CancellationToken cancellationToken)
        => await AccountUI.OwnAccount.Use(cancellationToken);

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (firstRender) {
            var schemas = await ClientAuth.GetSchemas();
            AuthSchemas = schemas
                .Select(schema => new AuthSchemaModel {
                    Name = schema.Name,
                    DisplayName = schema.DisplayName,
                    Icon = schema.Name switch
                    {
                        IClientAuth.GoogleSchemeName => "/dist/images/landing/google-icon-color.svg",
                        IClientAuth.AppleIdSchemeName => "/dist/images/landing/apple-icon-black.svg",
                        _ => null,
                    },
                })
                .ToList();
            StateHasChanged();

            return;
        }

        if (CanBeRendered())
            await Host.Position(this);
    }

    private bool CanBeRendered()
        => State.Value.IsGuestOrNone && AuthSchemas != null;

    private void SignIn(string name)
        => ClientAuth.SignIn(name);

    private class AuthSchemaModel {
        public string Name { get; init; } = null!;
        public string DisplayName { get; init; } = null!;
        public string? Icon { get; init; }
    }
}
