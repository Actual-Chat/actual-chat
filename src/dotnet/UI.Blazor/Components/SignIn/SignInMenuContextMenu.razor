@using ActualChat.UI.Blazor.Services
@using ActualChat.Users
@namespace ActualChat.UI.Blazor.Components
@inherits ComputedMenuBase<AccountFull>
@{
    if (!CanBeRendered())
        return;

    var usedAuthSchemas = State.Value.User.Identities.Select(kv => kv.Key.Schema).ToHashSet();
    var unusedAuthSchemas = AuthSchemas!.Where(p => !usedAuthSchemas.Contains(p.Name)).ToArray();
}

@foreach (var (name, displayName) in unusedAuthSchemas) {
    var title = "Sign in with " + displayName;
    <MenuEntry Text="@title" Click="@(_ => SignIn(name))"/>
}

@code {
    private static readonly HashSet<string> NoAuthSchemas = new();
    private (string Name, string DisplayName)[]? AuthSchemas { get; set; } = Array.Empty<(string, string)>();

    [Inject] private AccountUI AccountUI { get; init; } = null!;
    [Inject] private IClientAuth ClientAuth { get; init; } = null!;

    protected override ComputedState<AccountFull>.Options GetStateOptions()
        => new() {
            InitialValue = AccountUI.OwnAccount.Value,
            UpdateDelayer = FixedDelayer.Instant,
            Category = GetStateCategory(),
        };

    protected override async Task<AccountFull> ComputeState(CancellationToken cancellationToken)
        => await AccountUI.OwnAccount.Use(cancellationToken);

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (firstRender) {
            AuthSchemas = await ClientAuth.GetSchemas();
            StateHasChanged();
            return;
        }
        if (CanBeRendered())
            await Host.Position(this);
    }

    private bool CanBeRendered()
        => State.Value.IsGuestOrNone && AuthSchemas != null;

    private void SignIn(string name)
        => ClientAuth.SignIn(name);
}
