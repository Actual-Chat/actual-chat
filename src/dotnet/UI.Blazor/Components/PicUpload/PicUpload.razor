@using Microsoft.Toolkit.HighPerformance
@using ActualChat.UI.Blazor.Services
@using ActualChat.UI.Blazor.Components.FileUpload
@using ActualChat.UI.Blazor.Module
@using ActualChat.Media
@using ActualLab.Generators
@namespace ActualChat.UI.Blazor.Components
@implements IAsyncDisposable

@{
    var sizeClass = $"pic-size-{(int)Size}";
    var hasButtons = GenerateAvatar.HasDelegate;
    var picUploadCls = hasButtons ? " left-0" : " inset-x-auto";
    var btnCls = IsButton ? "pic-upload-btn" : "";
}

<div class="pic-upload pic-upload-drop-zone @btnCls" @ref="_dropZoneRef">
    <Pic
        Title="@Title"
        Picture="@Picture"
        Size="@Size"
        NoPicture="@NoPicture"
        IsSquare="@IsSquare"
        AvatarKind="@AvatarKind"
        AvatarKey="@AvatarKey"
        IsButton="@IsButton"
        Click="@Click"/>
    <div class="pic-upload-picker @(sizeClass) @picUploadCls">
        <FileUpload
            id="@_inputId"
            UploadUrl="@UploadUrl"
            Uploaded="OnUploaded"
            MaxSize="Constants.Attachments.AvatarPictureFileSizeLimit"
            accept="image/*"
            hidden>
        </FileUpload>
        <label for="@_inputId"
               class="pic-upload-input-file-label">
        </label>
    </div>
    @if (GenerateAvatar.HasDelegate && !IsButton) {
        <div class="c-btn-group">
            <Button Class="btn-modal btn-sm">
                <Icon><i class="icon-image"></i></Icon>
                <Title>Upload image
                <label for="@_inputId"
                       class="pic-upload-input-file-label absolute">
                </label>
                </Title>
            </Button>
            <Button Class="btn-modal btn-sm" Click="GenerateAvatar">
                <Icon><i class="icon-sync"></i></Icon>
                <Title>Generate avatar</Title>
            </Button>
        </div>
    }
</div>

@code {
    private static readonly string JSCreateMethod = $"{BlazorUICoreModule.ImportName}.{nameof(PicUpload)}.create";
    private static RandomStringGenerator IdGenerator { get; } = new(10, Alphabet.AlphaNumeric);

    private string _inputId = "";
    private ElementReference _dropZoneRef;
    private IJSObjectReference _jsRef = null!;

    [Inject] private ComponentIdGenerator ComponentIdGenerator { get; init; } = null!;
    [Inject] private UrlMapper UrlMapper { get; init; } = null!;
    [Inject] private IJSRuntime JS { get; init; } = null!;

    [Parameter] public string Title { get; set; } = "";
    [Parameter] public Picture? Picture { get; set; }
    [Parameter] public SquareSize Size { get; set; } = SquareSize.Size10;
    [Parameter] public AvatarKind AvatarKind { get; set; } = AvatarKind.Beam;
    [Parameter] public bool IsButton { get; set; }
    [Parameter] public bool IsSquare { get; set; }
    [Parameter] public string? AvatarKey { get; set; }
    [Parameter] public string UploadUrl { get; set; } = "";
    [Parameter] public RenderFragment? NoPicture { get; set; }
    [Parameter] public EventCallback<MouseEventArgs> Click { get; set; }
    [Parameter] public EventCallback<MediaContent> Picked { get; set; }
    [Parameter] public EventCallback GenerateAvatar { get; set; }

    protected override void OnInitialized() {
        _inputId = ComponentIdGenerator.Next("pic-upload-input-file");
    }

    public async ValueTask DisposeAsync() {
        await _jsRef.DisposeSilentlyAsync("dispose");
        _jsRef = null!;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (firstRender)
            _jsRef = await JS.InvokeAsync<IJSObjectReference>(JSCreateMethod, _dropZoneRef, _inputId);
    }

    private async Task OnUploaded(MediaContent mediaContent)
        => await Picked.InvokeAsync(mediaContent).ConfigureAwait(false);

    private void UploadImage() {

    }
}
