@using Microsoft.Toolkit.HighPerformance
@using ActualChat.UI.Blazor.Services
@using ActualChat.UI.Blazor.Components.FileUpload
@using ActualChat.UI.Blazor.Module
@using ActualChat.Media
@using Stl.Generators
@namespace ActualChat.UI.Blazor.Components
@implements IAsyncDisposable

@{
    var sizeClass = $"pic-size-{(int)Size}";
}

<div class="pic-upload pic-upload-drop-zone" @ref="_dropZoneRef">
    <Pic Title="@Title"
         Size="@Size"
         Picture="Picture"
         Click="Click"
         NoPicture="NoPicture"/>
    <div class="pic-upload-picker @(sizeClass)">
        <FileUpload
            id="@_inputId"
            UploadUrl="@UploadUrl"
            Uploaded="OnUploaded"
            MaxSize="Constants.Attachments.FileSizeLimit"
            accept="image/*"
            hidden>
        </FileUpload>
        <label for="@_inputId"
               class="pic-upload-input-file-label">
        </label>
    </div>
    <div class="flex-1 flex-y gap-4">
        <Button Class="btn-modal !justify-start">
            <i class="icon-image text-2xl mx-2"></i>
            <span class="mx-2">Upload image</span>
            <label for="@_inputId"
                   class="pic-upload-input-file-label absolute">
            </label>
        </Button>
        @if (GenerateAvatar.HasDelegate) {
            <Button Class="btn-modal !justify-start" Click="GenerateAvatar">
                <i class="icon-sync text-2xl mx-2"></i>
                <span class="mx-2">Generate avatar</span>
            </Button>
        }
    </div>
</div>

@code {
    private static RandomStringGenerator IdGenerator { get; } = new(10, Alphabet.AlphaNumeric);
    private string _inputId = "";
    private ElementReference _dropZoneRef;
    private IJSObjectReference _jsRef = null!;

    [Inject] private ComponentIdGenerator ComponentIdGenerator { get; init; } = null!;
    [Inject] private UrlMapper UrlMapper { get; init; } = null!;
    [Inject] private IJSRuntime JS { get; init; } = null!;

    [Parameter] public string Title { get; set; } = "";
    [Parameter] public Picture? Picture { get; set; }
    [Parameter] public SquareSize Size { get; set; } = SquareSize.Size10;
    [Parameter] public string UploadUrl { get; set; } = "";
    [Parameter] public RenderFragment? NoPicture { get; set; }
    [Parameter] public EventCallback<MouseEventArgs> Click { get; set; }
    [Parameter] public EventCallback<MediaContent> Picked { get; set; }
    [Parameter] public EventCallback GenerateAvatar { get; set; }

    protected override void OnInitialized() {
        _inputId = ComponentIdGenerator.Next("pic-upload-input-file");
    }

    public async ValueTask DisposeAsync() {
        await _jsRef.DisposeSilentlyAsync("dispose");
        _jsRef = null!;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (firstRender)
            _jsRef = await JS.InvokeAsync<IJSObjectReference>(
                $"{BlazorUICoreModule.ImportName}.{nameof(PicUpload)}.create",
                _dropZoneRef,
                _inputId);
    }

    private async Task OnUploaded(MediaContent mediaContent)
        => await Picked.InvokeAsync(mediaContent).ConfigureAwait(false);

    private void UploadImage() {

    }
}
