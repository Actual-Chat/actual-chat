@namespace ActualChat.UI.Blazor.Components
@using System.Net.NetworkInformation
@using ActualChat.UI.Blazor.Module
@implements IDropdownBackend
@implements IAsyncDisposable
@{
    var buttonClass = "btn-dropdown " + ButtonClass;
}
<CascadingValue Value="@this" IsFixed="true">
    <div @ref="Ref" class="dropdown @Class">
            <Button Class="@buttonClass" Click="_ => _isOpen = !_isOpen">
                @ButtonTemplate
            </Button>
            <div class="dropdown-menu absolute z-50 @MenuClass @(_isOpen ? "dropdown-menu-opened" : "")">
                <div class="dropdown-menu relative @(_isOpen ? "" : "hidden")">
                    @MenuTemplate
                </div>
            </div>
    </div>
</CascadingValue>

@code {
    [Inject] private IJSRuntime JS { get; init; } = null!;

    private DotNetObjectReference<IDropdownBackend>? BlazorRef { get; set; } = null!;
    private IJSObjectReference? JSRef { get; set; } = null!;
    private ElementReference Ref { get; set; }
    private bool _isOpen;

    [Parameter] public string Class { get; set; } = "";
    [Parameter] public string ButtonClass { get; set; } = "";
    [Parameter] public string MenuClass { get; set; } = "";
    [Parameter] public RenderFragment ButtonTemplate { get; set; } = default!;
    [Parameter] public RenderFragment MenuTemplate { get; set; } = default!;
    [Parameter] public EventCallback<bool> OpenStateChanged { get; set; }

    public bool IsOpen {
        get => _isOpen;
        set {
            if (_isOpen == value)
                return;
            _isOpen = value;
            OpenStateChanged.InvokeAsync(value);
            StateHasChanged();
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (JSRef != null) {
            try {
                await JSRef.InvokeVoidAsync("dispose").ConfigureAwait(true);
                await JSRef.DisposeAsync().ConfigureAwait(true);
            }
            catch (JSDisconnectedException) { }
            JSRef = null;
        }
        if (BlazorRef != null) {
            BlazorRef.Dispose();
            BlazorRef = null;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (firstRender) {
            BlazorRef = DotNetObjectReference.Create<IDropdownBackend>(this);
            JSRef = await JS.InvokeAsync<IJSObjectReference>(
                $"{BlazorUICoreModule.ImportName}.Dropdown.create",
                Ref, BlazorRef
                ).ConfigureAwait(true);
        }
    }

    [JSInvokable]
    public Task Toggle(bool? mustOpen = null) {
        IsOpen = mustOpen ?? !IsOpen;
        return Task.CompletedTask;
    }
}
