@namespace ActualChat.UI.Blazor.Components
@using ActualChat.UI.Blazor.Module
@implements IDropdownBackend
@implements IAsyncDisposable
@{
    var buttonClass = "dropdown-menu-btn blackout " + ButtonClass;
}
<CascadingValue Value="@this" IsFixed="true">
    <div @ref="Ref" class="@Class dropdown">
        <Button
            Class="@buttonClass"
            Click="@(_ => _isOpen = !_isOpen)">
            @ButtonTemplate
        </Button>
        <div class="@MenuClass @(_isOpen ? "dropdown-menu-opened" : "") dropdown-menu">
            <div class="@(_isOpen ? "" : "hidden") dropdown-menu-inner relative">
                @MenuTemplate
            </div>
        </div>
    </div>
</CascadingValue>

@code {
    private static readonly string JSCreateMethod = $"{BlazorUICoreModule.ImportName}.Dropdown.create";

    [Inject] private IJSRuntime JS { get; init; } = null!;

    private DotNetObjectReference<IDropdownBackend> BlazorRef { get; set; } = null!;
    private IJSObjectReference JSRef { get; set; } = null!;
    private ElementReference Ref { get; set; }
    private bool _isOpen;

    [Parameter] public string Class { get; set; } = "";
    [Parameter] public string ButtonClass { get; set; } = "";
    [Parameter] public string MenuClass { get; set; } = "";
    [Parameter] public RenderFragment ButtonTemplate { get; set; } = default!;
    [Parameter] public RenderFragment MenuTemplate { get; set; } = default!;
    [Parameter] public EventCallback<bool> OpenStateChanged { get; set; }

    public bool IsOpen {
        get => _isOpen;
        set {
            if (_isOpen == value)
                return;
            _isOpen = value;
            OpenStateChanged.InvokeAsync(value);
            StateHasChanged();
        }
    }

    public async ValueTask DisposeAsync()
    {
        await JSRef.DisposeSilentlyAsync("dispose");
        JSRef = null!;
        BlazorRef.DisposeSilently();
        BlazorRef = null!;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (firstRender) {
            BlazorRef = DotNetObjectReference.Create<IDropdownBackend>(this);
            JSRef = await JS.InvokeAsync<IJSObjectReference>(JSCreateMethod, Ref, BlazorRef);
        }
    }

    [JSInvokable]
    public Task Toggle(bool? mustOpen = null) {
        IsOpen = mustOpen ?? !IsOpen;
        return Task.CompletedTask;
    }
}
