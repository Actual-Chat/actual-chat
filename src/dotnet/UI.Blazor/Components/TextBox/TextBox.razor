@namespace ActualChat.UI.Blazor.Components
@using ActualChat.UI.Blazor.Module
@inherits InputText
@implements IAsyncDisposable

@{
    var cls = CssClass + " " + Class;
}

<input @ref="Ref"
       id="@Id"
       type="text"
       autocomplete="@(Autocomplete ? "on" : "off")"
       class="@cls"
       value="@CurrentValue"
       @attributes="@AdditionalAttributes"
       @onchange="EventCallback.Factory.CreateBinder<string>(this, v => CurrentValueAsString = v, CurrentValueAsString!)" />

@code {
    [Inject] private IJSRuntime JS { get; init; } = null!;

    private IJSObjectReference JSRef { get; set; } = null!;
    private ElementReference Ref { get; set; }

    [Parameter] public string? Id { get; set; }
    [Parameter] public bool Autofocus { get; set; }
    [Parameter] public bool Autocomplete { get; set; } = true;
    [Parameter] public string Class { get; set; } = "";

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (firstRender) {
            JSRef = await JS.InvokeAsync<IJSObjectReference>(
                $"{BlazorUICoreModule.ImportName}.TextBox.create", Ref
                );
            if (Autofocus)
                await Focus();
        }
    }

    public virtual async ValueTask DisposeAsync() {
        Dispose(true);
        await JSRef.DisposeSilentlyAsync("dispose");
        JSRef = null!;
    }

    private async Task Focus()
        => await JSRef.InvokeVoidAsync("focus", Ref);
}
