@namespace ActualChat.UI.Blazor.Components
@using ActualChat.UI.Blazor.Module
@inherits InputText
@implements IAsyncDisposable

@{
    var cls = CssClass + " " + Class;
}

<div class="text-box flex-x">
    <input @ref="Ref"
           id="@Id"
           type="text"
           autocomplete="@(Autocomplete ? "on" : "off")"
           class="flex-1 @cls"
           value="@CurrentValue"
           placeholder="@Placeholder"
           @attributes="@AdditionalAttributes"
           @onchange="EventCallback.Factory.CreateBinder<string>(this, v => CurrentValueAsString = v, CurrentValueAsString!)" />
    @if (ClearButton && !string.IsNullOrEmpty(CurrentValue)) {
        <button type="button" class="text-box-btn" @onclick="@OnClearClick">
            <i class="icon-close"></i>
        </button>
    }
</div>

@code {
    private static readonly string JSCreateMethod = $"{BlazorUICoreModule.ImportName}.TextBox.create";

    [Inject] private IJSRuntime JS { get; init; } = null!;

    private IJSObjectReference JSRef { get; set; } = null!;
    private ElementReference Ref { get; set; }

    [Parameter] public string? Id { get; set; }
    [Parameter] public bool Autofocus { get; set; }
    [Parameter] public bool Autocomplete { get; set; } = true;
    [Parameter] public string Class { get; set; } = "";
    [Parameter] public string Placeholder { get; set; } = "";
    [Parameter] public bool ClearButton { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (firstRender) {
            JSRef = await JS.InvokeAsync<IJSObjectReference>(JSCreateMethod, Ref);
            if (Autofocus)
                await Focus();
        }
    }

    public virtual async ValueTask DisposeAsync() {
        Dispose(true);
        await JSRef.DisposeSilentlyAsync("dispose");
        JSRef = null!;
    }

    private async Task Focus()
        => await JSRef.InvokeVoidAsync("focus", Ref);

    private void OnClearClick()
        => CurrentValue = "";
}
