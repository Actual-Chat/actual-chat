@namespace ActualChat.UI.Blazor.Components

<UITimer Period="@TickPeriod" Tick="@OnTick"/>
@{
    if (MustReloadSilently)
        return;

    var text = Kind == ErrorBarrierKind.Full
        ? "Something went wrong while displaying this area."
        : "Something went wrong...";
    var buttonText = "Reload";
    if (_reloadAt is { } reloadAt) {
        var remaining = (int)(reloadAt - CpuNow).TotalSeconds;
        buttonText += $" in {remaining}s";
    }
    var cls = Kind switch {
        ErrorBarrierKind.Full => "full",
        ErrorBarrierKind.Medium => "medium",
        ErrorBarrierKind.Compact => "compact",
        _ => throw new ArgumentOutOfRangeException(nameof(Kind)),
    };
}

<div class="error-barrier @cls">
    @if (Kind != ErrorBarrierKind.Compact) {
        <div class="c-image"></div>
    }
    <div class="c-text">
        <p class="c-header">Aw, Snap!</p>
        <p>@text</p>
    </div>
    <Button Class="btn-secondary" Click="OnReloadClicked">@buttonText</Button>
</div>

@code {
    private static readonly RetryDelaySeq AutoReloadDelays = RetryDelaySeq.Exp(5, 60);
    private static readonly TimeSpan FastTickPeriod = TimeSpan.FromSeconds(0.2);
    private static readonly TimeSpan SlowTickPeriod = TimeSpan.FromSeconds(1);
    private const int SilentReloadLimit = 3;

    private int _retryIndex;
    private Moment? _reloadAt;

    private Moment CpuNow => Clocks.CpuClock.Now;
    private bool MustReloadSilently => _retryIndex == 0;
    private TimeSpan TickPeriod => MustReloadSilently
        ? FastTickPeriod
        : _reloadAt.HasValue ? SlowTickPeriod : TimeSpan.Zero;

    [Inject] private MomentClockSet Clocks { get; init; } = null!;

    // Use explicit namespace - otherwise it doesn't compile on 7.0.302 SDK
    // ReSharper disable once RedundantNameQualifier
    [Parameter, EditorRequired] public ActualChat.UI.Blazor.Components.ErrorBarrier Barrier { get; set; } = null!;
    [Parameter, EditorRequired] public ErrorBarrierKind Kind { get; set; }
    [Parameter, EditorRequired] public int ErrorCount { get; set; }
    [Parameter, EditorRequired] public bool MustAutoReload { get; set; }

    protected override void OnParametersSet() {
        _retryIndex = Math.Max(0, ErrorCount - SilentReloadLimit);
        _reloadAt = MustAutoReload
            ? CpuNow + AutoReloadDelays[_retryIndex]
            : null;
    }

    private void OnTick() {
        if (MustReloadSilently || CpuNow >= (_reloadAt ?? Moment.MaxValue))
            Barrier.Reload();
    }

    private void OnReloadClicked()
        => Barrier.Reload();
}
