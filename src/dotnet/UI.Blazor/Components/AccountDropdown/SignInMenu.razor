@using ActualChat.UI.Blazor.Services
@namespace ActualChat.UI.Blazor.Components
@{
    var usedAuthSchemas = User.OrGuest().Identities.Select(kv => kv.Key.Schema).ToHashSet();
    var unusedAuthSchemas = AuthSchemas.Where(p => !usedAuthSchemas.Contains(p.Name)).ToArray();
    var buttonClass = "btn-success " + ButtonClass;
}

<Dropdown MenuClass="@ContentPositionClass" ButtonClass="@buttonClass">
    <ButtonTemplate>
        <span>Sign in</span>
        <svg class="ml-1 -mr-2 w-5 h-5" xmlns="http://www.w3.org/2000/svg" viewBox="-12 -12 48 48">
            <path d="M0 16.67l2.829 2.83 9.175-9.339 9.167 9.339 2.829-2.83-11.996-12.17z"/>
        </svg>
    </ButtonTemplate>
    <MenuTemplate>
        <Menu Class="rounded-md border border-bg-03 p-1 mt-1" ItemClass="text-left">
            @foreach (var (name, displayName) in unusedAuthSchemas) {
                var title = "Sign in with " + displayName;
                <MenuItem Title="@title" Click="(() => SignIn(name))"/>
            }
        </Menu>
    </MenuTemplate>
</Dropdown>

@code {
    [Inject] private IClientAuth ClientAuth { get; init; } = null!;

    private (string Name, string DisplayName)[] AuthSchemas { get; set; } = Array.Empty<(string, string)>();
    private User? User { get; set; }

    [CascadingParameter] private Task<AuthState> AuthStateTask { get; set; } = null!;
    [Parameter] public string ButtonClass { get; set; } = "";
    [Parameter] public string ContentPositionClass { get; set; } = "";

    protected override async Task OnParametersSetAsync() {
        User = (await AuthStateTask).User;
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (firstRender) {
    // GetSchemas requires JS interop for web version, so it can be called only at this point
            AuthSchemas = await ClientAuth.GetSchemas();
            StateHasChanged();
        }
    }

    private void SignIn(string name)
        => ClientAuth.SignIn(name);
}
