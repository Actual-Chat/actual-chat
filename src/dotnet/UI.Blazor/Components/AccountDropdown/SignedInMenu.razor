@namespace ActualChat.UI.Blazor.Components
@using ActualChat.Users
@using ActualChat.UI.Blazor.Services
@using ActualChat.Hosting
@inject NavigationManager Navigator

<Dropdown Class="flex items-center justify-end" ButtonClass="account-btn btn-square">
    <ButtonTemplate>
        <AccountView/>
    </ButtonTemplate>
    <MenuTemplate>
        <Menu Class="account-dropdown-menu -right-24 md:-left-12 -bottom-2" ItemClass="text-left">
            <div class="flex-y bg-01 rounded-t-xl">
                <div class="flex-x text-xxs py-1 items-baseline border-b border-bg-04">
                    <div class="px-4"><b class="text-03 font-medium">@Version</b></div>
                    @if (HostInfo.HostKind != HostKind.Maui)
                    {
                        <div class="pl-4"><BlazorModeToggle/></div>
                    }
                </div>
            </div>
            <MenuItem Title="Settings" Name="settings" Click="OnSettingsClick">
                <Icon>
                    <i class="icon-settings text-2xl"></i>
                </Icon>
            </MenuItem>
            <MenuItem Title="Sign Out" Name="singOut" Click="OnSignOutClick">
                <Icon>
                    <i class="icon-log-out text-2xl"></i>
                </Icon>
            </MenuItem>
        </Menu>
    </MenuTemplate>
</Dropdown>

@code {
    private static readonly string Version =
        "v" + (typeof(SignedInMenu).Assembly.GetInformationalVersion() ?? "n/a").Replace('+', ' ');

    [Inject] private Session Session { get; init; } = null!;
    [Inject] private IAccounts Accounts { get; init; } = null!;
    [Inject] private IClientAuth ClientAuth { get; init; } = null!;
    [Inject] private FeedbackUI FeedbackUI { get; init; } = null!;
    [Inject] private NavigationManager Nav { get; init; } = null!;
    [Inject] private HostInfo HostInfo { get; init; } = null!;
    [Inject] private ModalUI ModalUI { get; init; } = null!;
    [Inject] private UIEventHub UIEventHub { get; init; } = null!;

    private bool IsOpen { get; set; }

    private void OnSettingsClick()
        => _ = UIEventHub.Publish(new ShowSettingsModal());

    private async Task OnSignOutClick() {
        IsOpen = false;
        await ClientAuth.SignOut();
        Navigator.NavigateTo("/");
    }
}
