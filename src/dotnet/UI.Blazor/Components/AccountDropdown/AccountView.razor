@namespace ActualChat.UI.Blazor.Components
@using ActualChat.Users
@using ActualChat.UI.Blazor.Services
@inherits ComputedStateComponent<AccountView.Model>
@{
    var m = State.Value;
    var account = m.Account;
    if (account == AccountFull.Loading)
        return;
}

<AvatarBadge
    Avatar="@account.Avatar"
    Size="@SquareSize.Size9"
    Presence="@m.Presence"
    NameClass="hidden" />

@code {
    [Inject] private Session Session { get; init; } = null!;
    [Inject] private AccountUI AccountUI { get; init; } = null!;
    [Inject] private IUserPresences UserPresences { get; init; } = null!;

    protected override ComputedState<Model>.Options GetStateOptions()
        => new() {
            InitialValue = new Model(AccountUI.OwnAccount.Value),
            Category = GetStateCategory(),
        };

    protected override async Task<Model> ComputeState(CancellationToken cancellationToken) {
        var account = await AccountUI.OwnAccount.Use(cancellationToken);
        var presence = await UserPresences.Get(account.Id, cancellationToken);
        return new(account, presence);
    }

    public sealed record Model(Account Account, Presence Presence = Presence.Unknown);
}
