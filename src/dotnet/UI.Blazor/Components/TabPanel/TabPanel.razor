@namespace ActualChat.UI.Blazor.Components
@{
    _renderedSelectedTab = null;
    _renderedTabs = SortedTabs.ToList();
}

<CascadingValue Value="@this" IsFixed="true" >
    <div class="@Class tab-panel">
        <div class="@TabsClass tab-panel-tabs" role="tablist">
            <div class="relative btn-group">
                @if (AdditionalButton != null) {
                    @AdditionalButton
                }
                @foreach (var tab in _renderedTabs) {
                    var isActive = tab.Id == SelectedTabId && _renderedSelectedTab == null;
                    if (isActive)
                        _renderedSelectedTab = tab;

                    var cls = $"tab-btn {(isActive ? "on" : "")} {(BottomBorder ? "bottom-border-btn" : "")} {tab.ButtonClass} ";
                    <div @key="@tab.Id" class="btn-group-container">
                        <Button
                            data-tab-id="@tab.Id"
                            role="tab"
                            aria-selected="@isActive"
                            Class="@cls"
                            ContentClass="items-center"
                            Click="@(_ => SelectedTabId = tab.Id)">

                            @if (tab.TitleContent != null) {
                                @tab.TitleContent
                            } else {
                                @tab.Title
                            }
                        </Button>
                        @if (BottomHill) {
                            <div class="shape"></div>
                        }
                    </div>
                }
            </div>
        </div>
        @ChildContent
    </div>
</CascadingValue>

@code {
    private readonly List<Tab> _tabs = new();
    private string? _selectedTabId;
    private IReadOnlyList<Tab> _renderedTabs = Array.Empty<Tab>();
    private Tab? _renderedSelectedTab;

    [Parameter] public string Class { get; set; } = "";
    [Parameter] public string TabsClass { get; set; } = "";
    [Parameter] public bool BottomHill { get; set; }
    [Parameter] public bool BottomBorder { get; set; }
    [Parameter] public RenderFragment? AdditionalButton { get; set; }
    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Parameter] public EventCallback<string?> SelectedTabIdChanged { get; set; }

    public string? SelectedTabId {
        get => _selectedTabId;
        set {
            if (_selectedTabId == value)
                return;

            _selectedTabId = value;
            SelectedTabIdChanged.InvokeAsync(_selectedTabId);
            StateHasChanged();
        }
    }

    public IReadOnlyList<Tab> Tabs => _tabs;
    public IEnumerable<Tab> SortedTabs => Tabs.OrderBy(x => x.Order).ThenBy(x => x.Id);

    protected override void OnAfterRender(bool firstRender) {
        var tabs = SortedTabs.ToList();
        if (_renderedSelectedTab == null) {
            SelectedTabId = tabs.Count == 0 ? null : tabs[0].Id;
            return;
        }

        var newSelectedTab = _renderedTabs
            .SkipWhile(x => x != _renderedSelectedTab)
            .FirstOrDefault(x => tabs.Contains(x))
            ?? SortedTabs.LastOrDefault();
        SelectedTabId = newSelectedTab?.Id;
    }

    internal void RegisterTab(Tab tab) {
        _tabs.Add(tab);
    }

    internal void UnregisterTab(Tab tab) {
        _tabs.Remove(tab);
    }
}
