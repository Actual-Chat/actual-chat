@namespace ActualChat.UI.Blazor.Components
@using ActualChat.UI.Blazor.Services

<div class="@Class copy-to-clipboard">
    <input
        @ref="InputRef"
        class="@InputClass"
        type="text"
        value="@Text"
        @onclick="@OnClick"/>
    <ButtonRound
        Click="OnClick"
        ContentClass="flex-x gap-x-1"
        Class="@ButtonClass"
        Tooltip="Copy"
        TooltipPosition="FloatingPosition.Top">
        @if (OrdinalEquals(_lastCopiedText, GetCopyText()) && !HideCopiedTag) {
            <div class="c-copied">
                copied!
            </div>
        } else {
            <i class="icon-copy text-xl" aria-hidden="true"></i>
        }
    </ButtonRound>
</div>

@code {
    private string? _lastCopiedText = null;

    [Inject] private ClipboardUI ClipboardUI { get; init; } = null!;

    private ElementReference InputRef { get; set; }

    [Parameter] public string Class { get; set; } = "";
    [Parameter] public string ButtonClass { get; set; } = "";
    [Parameter] public string InputClass { get; set; } = "";
    [Parameter] public string Text { get; set; } = "";
    [Parameter] public string? CopyText { get; set; }
    [Parameter] public bool HideCopiedTag { get; set; }

    private async Task OnClick() {
        var copyText = GetCopyText();
        await ClipboardUI.CopyTextFrom(InputRef, copyText);
        _lastCopiedText = copyText;
    }

    private string GetCopyText()
        => CopyText ?? Text;
}

