@namespace ActualChat.UI.Blazor.Components
@using ActualChat.UI.Blazor.Services
@using ActualChat.UI.Blazor.Module
@implements IAsyncDisposable
@inherits FusionComponentBase

<div class="@Class copy-to-clipboard">
    <input
        @ref="_inputRef"
        class="@InputClass"
        type="text"
        value="@Text"
        data-copy-text="@CopyText"/>
    <ButtonRound
        @ref="_buttonRef"
        ContentClass="flex-x gap-x-1"
        Class="@ButtonClass"
        Tooltip="Copy"
        TooltipPosition="FloatingPosition.Top">
        <i class="icon-copy text-xl" aria-hidden="true"></i>
    </ButtonRound>
</div>

@code {
    [Inject] private IJSRuntime JS { get; init; } = null!;

    private ElementReference _inputRef;
    private ButtonRound _buttonRef = null!;
    private IJSObjectReference _jsRef = null!;

    [Parameter] public string Class { get; set; } = "";
    [Parameter] public string ButtonClass { get; set; } = "";
    [Parameter] public string InputClass { get; set; } = "";
    [Parameter] public string Text { get; set; } = "";
    [Parameter] public string? CopyText { get; set; }
    [Parameter] public bool HideCopiedTag { get; set; } // TODO: use it inside ts

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (firstRender)
            _jsRef = await JS.InvokeAsync<IJSObjectReference>($"{BlazorUICoreModule.ImportName}.CopyToClipboard.create", _inputRef, _buttonRef.ButtonRef);
    }

    public async ValueTask DisposeAsync() {
        await _jsRef.DisposeSilentlyAsync("dispose");
        _jsRef = null!;
    }
}

