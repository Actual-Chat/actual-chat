@namespace ActualChat.UI.Blazor.Components

<div class="@Class search-box">
    <label>
        <input type="text" class="w-full" placeholder="Search" value="@Text" @oninput="OnInput" @onkeyup="OnKeyUp"/>
        <ButtonRound Click="OnSearchButtonClick">
            <svg xmlns="http://www.w3.org/2000/svg" class="fill-current w-5 h-5" viewBox="0 0 24 24">
                <path fill-rule="evenodd" clip-rule="evenodd" d="M5.5 11C5.5 7.691 8.191 5 11.5 5C14.809 5 17.5 7.691 17.5 11C17.5 14.309 14.809 17 11.5 17C8.191 17 5.5 14.309 5.5 11ZM21.207 19.293L17.812 15.897C18.865 14.543 19.5 12.846 19.5 11C19.5 6.589 15.911 3 11.5 3C7.089 3 3.5 6.589 3.5 11C3.5 15.411 7.089 19 11.5 19C13.346 19 15.043 18.365 16.397 17.312L19.793 20.707C19.988 20.902 20.244 21 20.5 21C20.756 21 21.012 20.902 21.207 20.707C21.598 20.316 21.598 19.684 21.207 19.293Z"/>
            </svg>
        </ButtonRound>
    </label>
</div>

@code {
    private string _text = "";

    [Parameter] public string Class { get; set; } = "";
    [Parameter] public EventCallback<string> TextChanged { get; set; }
    [Parameter] public EventCallback<string> Triggered { get; set; }
    [Parameter] public RenderFragment? ChildContent { get; set; }

    public string Text {
        get => _text;
        set {
            if (value == null)
                throw new ArgumentNullException(nameof(value));
            if (value == _text)
                return;;

            _text = value;
            TextChanged.InvokeAsync(value);
            StateHasChanged();
        }
    }

    private async Task OnInput(ChangeEventArgs e) {
        _text = e.Value?.ToString() ?? "";
        await TextChanged.InvokeAsync(_text).ConfigureAwait(false);
    }

    private async Task OnKeyUp(KeyboardEventArgs e) {
        if (e.Key == "Enter" && HasNoModifier(e))
            await Triggered.InvokeAsync(Text).ConfigureAwait(false);
    }

    private Task OnSearchButtonClick()
        => Triggered.InvokeAsync(Text);

    private static bool HasNoModifier(KeyboardEventArgs e)
        => !e.AltKey && !e.CtrlKey && !e.ShiftKey && !e.MetaKey;
}
