@namespace ActualChat.UI.Blazor.Components
@inherits ComputedStateComponent<FailedRequirementSet>

<CascadingValue Value="this">
    @(Failures.Count == 0 ? Success : Failure(Failures))
</CascadingValue>

@code {
    private EventHandler<LocationChangedEventArgs> _onLocationChanged = null!;
    private MutableDictionary<RequirementComponent, Unit> _requirements = new();

    [Inject] private NavigationManager Nav { get; init; } = null!;
    [Inject] private ILogger<RequirementChecker> Log { get; init; } = null!;

    [Parameter, EditorRequired] public RenderFragment Success { get; set; } = null!;
    [Parameter, EditorRequired] public RenderFragment<FailedRequirementSet> Failure { get; set; } = null!;

    public FailedRequirementSet Failures => State.Value;

    protected override void OnInitialized() {
        base.OnInitialized();
        _onLocationChanged = OnLocationChanged;
        Nav.LocationChanged += _onLocationChanged;
    }

    public override ValueTask DisposeAsync() {
        Nav.LocationChanged -= _onLocationChanged;
        return base.DisposeAsync();
    }

    public virtual void Add(RequirementComponent requirement) {
        if (_requirements.ContainsKey(requirement)) return;

        Log.LogWarning("+ Requirement: {Requirement}", requirement.ToString());
        _requirements.Add(requirement, default);
        State.Invalidate();
    }

    public virtual void Remove(RequirementComponent requirement) {
        if (!_requirements.ContainsKey(requirement)) return;

        Log.LogWarning("- Requirement: {Requirement}", requirement.ToString());
        _requirements.Remove(requirement);
        State.Invalidate();
    }

    public virtual void Reset() {
        _requirements.Clear();
        State.Invalidate();
    }

    protected override ComputedState<FailedRequirementSet>.Options GetStateOptions()
        => new() {
            InitialValue = FailedRequirementSet.Empty,
            UpdateDelayer = FixedDelayer.Instant,
        };

    protected override async Task<FailedRequirementSet> ComputeState(CancellationToken cancellationToken) {
        var failures = ImmutableDictionary<RequirementComponent, Exception>.Empty;
        var recoveredRequirements = ImmutableList<RequirementComponent>.Empty;
        foreach (var requirement in _requirements.Keys) {
            try {
                await requirement.Require(cancellationToken);
                recoveredRequirements = recoveredRequirements.Add(requirement);
            }
            catch (Exception e) when (e is not OperationCanceledException) {
                failures = failures.Add(requirement, e);
            }
        }
        foreach (var requirement in recoveredRequirements)
            _requirements.Remove(requirement);

        return failures.Any() ? new FailedRequirementSet(failures) : FailedRequirementSet.Empty;
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e) {
        Log.LogDebug("Reset on location change");
        Reset();
    }
}


