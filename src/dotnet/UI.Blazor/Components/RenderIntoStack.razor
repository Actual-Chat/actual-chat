@implements IDisposable
@using ActualChat.UI.Blazor.Services
@{
    if (_stack != null) {
        _stack.NotifyChanged();
        return;
    }

    _stack = Hub.RenderVars.RenderStack(Name);
    if (MustPrepend)
        _stack.Value.Insert(0, this);
    else
        _stack.Value.Add(this);
    _stack.NotifyChanged();
}
@code {
    private RenderVar<List<RenderIntoStack>>? _stack = null!;

    [Inject] private UIHub Hub { get; init; } = null!;

    [Parameter, EditorRequired] public string Name { get; set; } = "";
    [Parameter, EditorRequired] public string Key { get; set; } = "";
    [Parameter] public double Order { get; set; } = 0;
    [Parameter] public bool MustPrepend { get; set; }
    [Parameter] public RenderFragment? ChildContent { get; set; }

    public void Dispose() {
        if (_stack == null)
            return;

        if (!_stack.Value.Remove(this)) {
            var log = Hub.LogFor(GetType());
            log.LogWarning("Couldn't remove RenderIntoStack with Name = '{Name}'", Name);
            return;
        }

        _stack.NotifyChanged();
    }
}
