@using ActualChat.Search
@using ActualChat.UI.Blazor.Services
@inherits ComputedStateComponent<SearchMatch>
@{
    var m = State.ValueOrDefault;
}

@if (m.Parts.Length > 0) {
    foreach (var part in m.PartsWithGaps) {
        var textClass = part.Rank > 0 ? "font-semibold" : "";
        <span class="@textClass">@(Text[part.Range.Start..part.Range.End])</span>
    }
} else {
    <span>@Text</span>
}

@code {
    private static UpdateDelayer UpdateDelayer { get; } =
        new(UIActionTracker.None, TimeSpan.FromMilliseconds(350));

    [Inject] private SearchUI SearchUI { get; init; } = null!;

    [Parameter, EditorRequired] public string Text { get; set; } = "";

    protected override ComputedState<SearchMatch>.Options GetStateOptions()
        => new() {
            InitialValue = "",
            // Just to de-bounce re-renders
            UpdateDelayer = UpdateDelayer,
        };

    protected override async Task<SearchMatch> ComputeState(CancellationToken cancellationToken) {
        if (Text.IsNullOrEmpty())
            return "";

        var text = Text;
        var searchPhrase = await SearchUI.GetSearchPhrase(cancellationToken).ConfigureAwait(false);
        return searchPhrase.GetMatch(text);
    }
}
