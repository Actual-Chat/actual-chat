@namespace ActualChat.UI.Blazor.Components
@using ActualChat.UI.Blazor.Module
@using ActualChat.UI.Blazor.Services
@implements IAsyncDisposable
@implements IMainContextMenuBackend

<div @ref="Ref" id="@Id">
    <RenderIntoSlot Name="@SlotName">
        <div class="context-menu-child">
            @ChildContent
        </div>
    </RenderIntoSlot>
</div>

@code {
    public enum Direction {
        Col,
        Row,
    }

    [Inject] private IJSRuntime JS { get; init; } = null!;
    [Inject] private ContextMenuUI ContextMenuUI { get; init; } = null!;

    [Parameter] public string SlotName { get; set; } = null!;
    [Parameter] public string Id { get; set; } = null!;
    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Parameter] public Direction MenuDirection { get; set; } = Direction.Row;

    private DotNetObjectReference<IMainContextMenuBackend> BlazorRef { get; set; } = null!;
    private IJSObjectReference? JSRef { get; set; } = null!;
    private ElementReference Ref { get; set; }

    public async ValueTask DisposeAsync() {
        if (JSRef != null) {
            try {
                await JSRef.InvokeVoidAsync("dispose").ConfigureAwait(true);
                await JSRef.DisposeAsync().ConfigureAwait(true);
            }
            catch (JSDisconnectedException) {
            }
            JSRef = null;
        }
        if (BlazorRef != null) {
            BlazorRef.Dispose();
            BlazorRef = null;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (firstRender) {
            BlazorRef = DotNetObjectReference.Create<IMainContextMenuBackend>(this);
            JSRef = await JS.InvokeAsync<IJSObjectReference>(
                $"{BlazorUICoreModule.ImportName}.MainContextMenu.create",
                Ref, BlazorRef, MenuDirection.ToString().ToLower()
                ).ConfigureAwait(true);
        }
    }

    [JSInvokable]
    public void CloseMenu() {
        ContextMenuUI.CloseMenu();
    }
}
