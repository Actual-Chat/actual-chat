@using ActualChat.UI.Blazor.Components.Internal
@using ActualChat.UI.Blazor.Module
@using ActualChat.UI.Blazor.Services
@using ActualChat.UI.Blazor.Services.Internal
@namespace ActualChat.UI.Blazor.Components
@{
    _afterRenderQueue.OnRenderStarted();
    var renderedRefs = _renderedRefs;
    _renderedRefs = _refs;
    var toRenderList = _refs.ToRenderList;
    if (_refs.CheckIfHasModelsToRenderChanged(renderedRefs, out var hasModals))
        JS.InvokeVoidAsync(JSUpdateBodyStyleMethod, hasModals);

    if (_refs.CheckIfHasActiveModelsToRenderChanged(renderedRefs, out var isOpen))
        TuneUI.Play(isOpen  ? Tune.OpenModal : Tune.CloseModal);
}

<CascadingValue Value="@this" IsFixed="@true">
    @foreach (var modalRef in toRenderList) {
        var isHidden = !_refs.ActiveList.Contains(modalRef);
        var extraClass = isHidden ? "hide" : "";
        if (isHidden)
            _afterRenderQueue.Enqueue(EliminateHiddenModal, modalRef);
        <Modal @key="@modalRef.Id" Ref="@modalRef" Class="@extraClass"></Modal>
    }
</CascadingValue>

@code {
    private static readonly string JSUpdateBodyStyleMethod = $"{BlazorUICoreModule.ImportName}.ModalHost.updateBodyStyle";

    private ModelRefsCollection _renderedRefs = new ();
    private ModelRefsCollection _refs = new ();
    private AfterRenderQueue _afterRenderQueue = new ();

    [Inject] internal HistoryStepper HistoryStepper { get; init; } = null!;
    [Inject] private UIHub Hub { get; set; } = null!;
    private ModalUI ModalUI => Hub.ModalUI;
    private TuneUI TuneUI => Hub.TuneUI;
    internal History History => Hub.History;
    private IJSRuntime JS => Hub.JSRuntime();

    public event Action? OnModalClosed;

    protected override void OnInitialized()
    {
        History.Register(new OwnHistoryState(this, ImmutableSortedSet<Symbol>.Empty));
        ((IHasAcceptor<ModalHost>)ModalUI).Acceptor.Accept(this);
    }

    protected override void OnAfterRender(bool firstRender)
        => _afterRenderQueue.OnAfterRender();

    public ModalRef Show(ModalOptions options, object model, RenderFragment content)
    {
        options = options.WithImplicit();
        var modalRef = new ModalRef(options, model, this, content);
        _refs.Add(modalRef);
        History.Save<OwnHistoryState>();
        StateHasChanged();
        return modalRef;
    }

    public bool Close(Symbol id, bool force, CloseBehavior closeBehavior = CloseBehavior.FadeOut)
    {
        var modalRef = FindRef(id);
        if (modalRef == null)
            return true;

        if (!CloseInternal(modalRef, force, closeBehavior))
            return false;

        OnModalClosed?.Invoke();
        History.Save<OwnHistoryState>();
        StateHasChanged();
        return true;
    }

    public bool CloseAll(bool force)
    {
        var modalRefs = _refs.ToRenderList;
        for (var i = modalRefs.Count - 1; i >= 0; i--) {
            var modalRef = modalRefs[i];
            if (!CloseInternal(modalRef, force))
                break;
        }
        if (ReferenceEquals(_refs.ToRenderList, modalRefs))
            return false;

        OnModalClosed?.Invoke();
        History.Save<OwnHistoryState>();
        StateHasChanged();
        return true;
    }

    // Private methods

    private ModalRef? FindRef(Symbol id)
        => _refs.ActiveList.SingleOrDefault(x => x.Id == id);

    private bool CloseInternal(ModalRef modalRef, bool force, CloseBehavior closeBehavior = CloseBehavior.Immediate)
    {
        var mustClose = force || modalRef.Model is not IOptionallyClosable oc || oc.CanBeClosed;
        if (!mustClose)
            return false;

        var modalRefImpl = (IModalRefImpl)modalRef;
        modalRefImpl.CloseSteps();

        if (closeBehavior == CloseBehavior.Immediate)
            _refs.Remove(modalRef);
        else
            _refs.MoveToClosing(modalRef);

        modalRefImpl.MarkClosed();
        return true;
    }

    private void EliminateHiddenModal(object state) {
        var modalRef = (ModalRef)state;
        _ = ExecuteDeferred().SuppressExceptions();

        async Task ExecuteDeferred()
        {
            await Task.Delay(300);
            if (_refs.ToRenderList.Contains(modalRef)) {
                _refs.Remove(modalRef);
                StateHasChanged();
            }
        }
    }

    // Nested types

    private sealed record OwnHistoryState(ModalHost Host, IReadOnlyList<Symbol> ModalIds) : HistoryState
    {
        public override int BackStepCount => ModalIds.Count;
        public override bool IsUriDependent => true;

        public override string Format()
            => ModalIds.ToDelimitedString();

        public override HistoryState Save()
            => this with {
                ModalIds = Host._refs.ActiveList.Select(x => x.Id).ToList(),
            };

        public override void Apply(HistoryTransition transition)
        {
            var isHistoryMove = transition.LocationChangeKind is LocationChangeKind.HistoryMove;
            var modalIds = isHistoryMove ? ModalIds : ImmutableSortedSet<Symbol>.Empty;
            var modalRefs = Host._refs.ActiveList;
            for (var i = modalRefs.Count - 1; i >= 0; i--) {
                var modalRef = modalRefs[i];
                if (!modalIds.Contains(modalRef.Id)) {
                    if (!Host.CloseInternal(modalRef, false, CloseBehavior.FadeOut))
                        return;
                    Host.StateHasChanged();
                }
            }
        }

        public override HistoryState? Back()
            => ModalIds.Count == 0
                ? null
                : this with { ModalIds = ModalIds.Take(ModalIds.Count - 1).ToList() };

        // Equality

        public bool Equals(OwnHistoryState? other)
        {
            if (ReferenceEquals(null, other))
                return false;
            if (ReferenceEquals(this, other))
                return true;
            return Host.Equals(other.Host)
                && ModalIds.SequenceEqual(other.ModalIds);
        }

        public override int GetHashCode() {
            var result = HashCode.Combine(Host.GetHashCode(), ModalIds.Count);
            foreach (var modalId in ModalIds)
                result = HashCode.Combine(result, modalId);
            return result;
        }
    }

    // Nested types

    public enum CloseBehavior  { Immediate, FadeOut }

    private struct ModelRefsCollection() {
        private ImmutableList<ModalRef> _refs = ImmutableList<ModalRef>.Empty;
        private ImmutableList<ModalRef> _refsToRender = ImmutableList<ModalRef>.Empty;
        private ImmutableList<ModalRef> _closingRefs = ImmutableList<ModalRef>.Empty;

        public IReadOnlyList<ModalRef> ToRenderList => _refsToRender;
        public IReadOnlyList<ModalRef> ActiveList => _refs;

        public void Add(ModalRef modalRef) {
            _refs = _refs.Add(modalRef);
            _refsToRender = _refsToRender.Add(modalRef);
        }

        public void MoveToClosing(ModalRef modalRef) {
            if (_refs.Contains(modalRef)) {
                _refs = _refs.Remove(modalRef);
                _closingRefs = _closingRefs.Add(modalRef);
            }
        }

        public void Remove(ModalRef modalRef) {
            _refs = _refs.Remove(modalRef);
            _refsToRender = _refsToRender.Remove(modalRef);
            _closingRefs = _closingRefs.Remove(modalRef);
        }

        public bool CheckIfHasModelsToRenderChanged(ModelRefsCollection prev, out bool hasModals) {
            hasModals = false;
            var prevToRenderList = prev.ToRenderList;
            var toRenderList = ToRenderList;
            if (ReferenceEquals(toRenderList, prevToRenderList))
                return false;

            var hadModals = prevToRenderList.Count != 0;
            hasModals = toRenderList.Count != 0;
            return hadModals != hasModals;
        }

        public bool CheckIfHasActiveModelsToRenderChanged(ModelRefsCollection prev, out bool isOpen) {
            isOpen = true;
            var prevActiveList = prev.ActiveList;
            var activeList = ActiveList;
            if (ReferenceEquals(activeList, prevActiveList))
                return false;

            var hadModals = prevActiveList.Count != 0;
            var hasModals = activeList.Count != 0;
            if (!hasModals && !hadModals)
                return false;

            isOpen = activeList.Count >= prevActiveList.Count;
            return true;

        }
    }
}
