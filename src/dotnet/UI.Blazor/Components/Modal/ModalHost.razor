@using System.Collections.ObjectModel
@using ActualChat.UI.Blazor.Components.Internal
@using ActualChat.UI.Blazor.Module
@using ActualChat.UI.Blazor.Services
@using ActualChat.UI.Blazor.Services.Internal
@using Microsoft.AspNetCore.Components.Routing
@namespace ActualChat.UI.Blazor.Components
@{
    var renderedRefs = _renderedRefs;
    _renderedRefs = _refs;
    if (renderedRefs != _refs) {
        var hadModals = renderedRefs.Count != 0;
        var hasModals = _refs.Count != 0;
        if (hadModals != hasModals)
            JS.InvokeVoidAsync(JSUpdateBodyStyleMethod, hasModals);
        if (hasModals || hadModals) {
            var tune = _refs.Count >= renderedRefs.Count ? Tune.OpenModal : Tune.CloseModal;
            TuneUI.Play(tune);
        }
    }
}

<CascadingValue Value="this">
    @foreach (IModalRefImpl modalRef in _refs) {
        @(modalRef.View)
    }
</CascadingValue>

@code {
    private static readonly string JSUpdateBodyStyleMethod = $"{BlazorUICoreModule.ImportName}.ModalHost.updateBodyStyle";

    private ImmutableList<ModalRef> _renderedRefs = ImmutableList<ModalRef>.Empty;
    private ImmutableList<ModalRef> _refs = ImmutableList<ModalRef>.Empty;

    [Inject] private ModalUI ModalUI { get; set; } = null!;
    [Inject] private TuneUI TuneUI { get; set; } = null!;
    [Inject] internal History History { get; init; } = null!;
    [Inject] private IJSRuntime JS { get; init; } = null!;
    [Inject] internal HistoryStepper HistoryStepper { get; init; } = null!;

    public IReadOnlyCollection<ModalRef> Refs => _refs;

    public event Action? OnModalClosed;

    protected override void OnInitialized()
    {
        History.Register(new OwnHistoryState(this, ImmutableSortedSet<Symbol>.Empty));
        ((IHasAcceptor<ModalHost>)ModalUI).Acceptor.Accept(this);
    }

    public ModalRef? FindRef(Symbol id)
        => Refs.SingleOrDefault(x => x.Id == id);

    public ModalRef Show(ModalOptions options, object model, RenderFragment content)
    {
        options = options.WithImplicit();
        var modalRef = new ModalRef(options, model, this);
        var modalRefImpl = (IModalRefImpl)modalRef;
        var view = new RenderFragment(builder => {
            builder.OpenComponent<Modal>(0);
            builder.SetKey(modalRef);
            builder.AddAttribute(1, "Ref", modalRef);
            builder.AddAttribute(2, "Content", content);
            builder.AddComponentReferenceCapture(3, modal => modalRefImpl.SetModal((Modal)modal));
            builder.CloseComponent();
        });
        modalRefImpl.SetView(view);
        _refs = _refs.Add(modalRef);
        History.Save<OwnHistoryState>();
        StateHasChanged();
        return modalRef;
    }

    public bool Close(Symbol id, bool force)
    {
        var modalRef = FindRef(id);
        if (modalRef == null)
            return true;

        if (!CloseInternal(modalRef, force))
            return false;

        OnModalClosed?.Invoke();
        History.Save<OwnHistoryState>();
        StateHasChanged();
        return true;
    }

    public bool CloseAll(bool force)
    {
        var modalRefs = _refs;
        for (var i = modalRefs.Count - 1; i >= 0; i--) {
            var modalRef = modalRefs[i];
            if (!CloseInternal(modalRef, force))
                break;
        }
        if (_refs == modalRefs)
            return false;

        OnModalClosed?.Invoke();
        History.Save<OwnHistoryState>();
        StateHasChanged();
        return true;
    }

    // Private methods

    private bool CloseInternal(ModalRef modalRef, bool force)
    {
        var mustClose = force || modalRef.Model is not IOptionallyClosable oc || oc.CanBeClosed;
        if (!mustClose)
            return false;

        var modalRefImpl = (IModalRefImpl)modalRef;
        modalRefImpl.CloseSteps();

        _refs = _refs.Remove(modalRef);
        modalRefImpl.MarkClosed();
        return true;
    }

    // Nested types

    private sealed record OwnHistoryState(ModalHost Host, IReadOnlyList<Symbol> ModalIds) : HistoryState
    {
        public override int BackStepCount => ModalIds.Count;
        public override bool IsUriDependent => true;

        public override string Format()
            => ModalIds.ToDelimitedString();

        public override HistoryState Save()
            => this with {
                ModalIds = Host._refs.Select(x => x.Id).ToList(),
            };

        public override void Apply(HistoryTransition transition)
        {
            var isHistoryMove = transition.LocationChangeKind is LocationChangeKind.HistoryMove;
            var modalIds = isHistoryMove ? ModalIds : ImmutableSortedSet<Symbol>.Empty;
            var modalRefs = Host._refs;
            for (var i = modalRefs.Count - 1; i >= 0; i--) {
                var modalRef = modalRefs[i];
                if (!modalIds.Contains(modalRef.Id)) {
                    if (!Host.CloseInternal(modalRef, false))
                        return;
                    Host.StateHasChanged();
                }
            }
        }

        public override HistoryState? Back()
            => ModalIds.Count == 0
                ? null
                : this with { ModalIds = ModalIds.Take(ModalIds.Count - 1).ToList() };

        // Equality

        public bool Equals(OwnHistoryState? other)
        {
            if (ReferenceEquals(null, other))
                return false;
            if (ReferenceEquals(this, other))
                return true;
            return Host.Equals(other.Host)
                && ModalIds.SequenceEqual(other.ModalIds);
        }

        public override int GetHashCode() {
            var result = HashCode.Combine(Host.GetHashCode(), ModalIds.Count);
            foreach (var modalId in ModalIds)
                result = HashCode.Combine(result, modalId);
            return result;
        }
    }
}
