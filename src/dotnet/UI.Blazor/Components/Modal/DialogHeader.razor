@using ActualChat.UI.Blazor.Services
@namespace ActualChat.UI.Blazor.Components
@{
    var isInnerStep = Modal.Ref.StepRef != null;
    var settings = DialogFrame.NarrowViewSettings;
    var useInteractiveHeader = ScreenSize.IsNarrow() && settings.ShouldUseInteractiveHeader;
}

@if (!useInteractiveHeader) {
    <div class="modal-header">
        @if (isInnerStep) {
            <HeaderButton Click="OnBackClick">
                <i class="icon-arrow-left"></i>
            </HeaderButton>
        }
        <h3 class="modal-title">@Title</h3>
        @if (HasCloseButton && !isInnerStep) {
            <HeaderButton Click="OnCloseClick">
                <i class="icon-close"></i>
            </HeaderButton>
        }
    </div>
} else {
    var submitText = settings.SubmitButtonText;
    if (submitText.IsNullOrEmpty())
        submitText = "Save";
    <DialogInteractiveHeader
        Title="@Title"
        Modal="@Modal"
        CloseClick="OnCloseClick"
        BackClick="OnBackClick"
        SubmitButtonType="@settings.SubmitButtonType"
        SubmitButtonText="@submitText"
        CanSubmit="@settings.CanSubmit"
        SubmitClick="@settings.SubmitClick" />
}

@code {
    [CascadingParameter] public Modal Modal { get; set; } = null!;
    [CascadingParameter] public ScreenSize ScreenSize { get; set; }

    // use explicit namespace - otherwise it doesn't compile on 7.0.302 SDK
    // ReSharper disable once RedundantNameQualifier
    [Parameter] public ActualChat.UI.Blazor.Components.DialogFrame DialogFrame { get; set; } = null!;
    [Parameter] public bool HasCloseButton { get; set; }
    [Parameter] public string Title { get; set; } = "";

    private void OnCloseClick()
        => _ = Modal.Close();

    private void OnBackClick()
        => _ = Modal.StepBack();
}
