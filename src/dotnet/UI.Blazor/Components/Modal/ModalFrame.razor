@namespace ActualChat.UI.Blazor.Components
@{
    var cls = $"modal-frame {Class}";
    var closeBtnCls = $"modal-close {CloseButtonCls}";
}

<ModalChrome Class="@cls">
    @if (ShowMobileHeader) {
        <div class="modal-mobile-header">
            <ButtonRound Click="OnCloseClick" Class="transparent">
                <i class="icon-arrow-left text-2xl"></i>
            </ButtonRound>
            <div class="text-xl font-semibold md:text-lg md:font-medium">
                @Title
            </div>
        </div>
    }
    @if (HasHeader) {
        <div class="modal-header">
            <h3 class="modal-title flex-1 text-xl md:text-lg font-semibold md:font-medium">@Title</h3>
            @if (HasCloseButton) {
                <div class="flex-none my-1 invisible md:visible">
                    <ButtonRound Class="@closeBtnCls" Click="OnCloseClick" tabindex="-1" aria-label="close">
                        <i class="icon-close text-2xl font-medium"></i>
                    </ButtonRound>
                </div>
            }
        </div>
    }
    @ChildContent
</ModalChrome>

@code {
    [CascadingParameter] public BlazoredModalInstance ModalInstance { get; set; } = null!;
    [Parameter] public string Class { get; set; } = "";
    [Parameter] public bool HasHeader { get; set; } = true;
    [Parameter] public bool HasCloseButton { get; set; }
    [Parameter] public string CloseButtonCls { get; set; } = "";
    [Parameter] public bool ShowMobileHeader { get; set; } = true;
    [Parameter] public string Title { get; set; } = "";
    [Parameter] public RenderFragment ChildContent { get; set; } = null!;

    private void OnCloseClick()
        => _ = ModalInstance.CloseAsync();
}
