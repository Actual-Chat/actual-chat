@using ActualChat.UI.Blazor.Services
@namespace ActualChat.UI.Blazor.Components
@implements IAsyncDisposable

<ModalFrame Class="@Class" Title="@Title"
            HasHeader="HasHeader"
            HasCloseButton="HasCloseButton"
            ShowMobileHeader="@ShowMobileHeader"
            CloseButtonCls="@CloseButtonCls">
    <div class="dialog-body">
        @Body
    </div>
    <div class="dialog-buttons @ButtonsClass">
        @Buttons
    </div>
</ModalFrame>

@code {
    [Inject] private Escapist Escapist { get; init; } = null!;

    private CancellationTokenSource TokenSource { get; } = new();
    private IAsyncDisposable? EscapeSubscription { get; set; }

    [CascadingParameter] public BlazoredModalInstance ModalInstance { get; set; } = null!;
    [Parameter] public string Class { get; set; } = "";
    [Parameter] public string ButtonsClass { get; set; } = "";
    [Parameter] public string CloseButtonCls { get; set; } = "";
    [Parameter] public bool HasHeader { get; set; } = true;
    [Parameter] public bool HasCloseButton { get; set; }
    [Parameter] public bool ShowMobileHeader { get; set; } = true;
    [Parameter] public string Title { get; set; } = "";
    [Parameter] public RenderFragment? Body { get; set; }
    [Parameter] public RenderFragment? Buttons { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (firstRender) {
            EscapeSubscription = await Escapist.SubscribeAsync(
                () => _ = ModalInstance.CloseAsync(),
                TokenSource.Token).ConfigureAwait(false);
        }
    }

    public async ValueTask DisposeAsync() {
        TokenSource.Cancel();
        if (EscapeSubscription != null) {
            await EscapeSubscription.DisposeAsync().AsTask().ConfigureAwait(false);
        }
    }
}
