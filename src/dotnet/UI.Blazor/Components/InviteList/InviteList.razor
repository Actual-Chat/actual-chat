@using ActualChat.Invite
@using ActualChat.UI.Blazor.Services
@using Cysharp.Text
@using ActualChat.Chat
@namespace ActualChat.UI.Blazor.Components

@if (Invites.Count > 0) {
    @foreach (var invite in Invites) {
        var link = GetLink(invite);
        var caption = GetCaption(invite);
        var isNew = !NewInviteId.IsNullOrEmpty() && invite.Id.Equals(NewInviteId);

        <div class="invite-list-item">
            <div class="link">
                <TileItem Class="unhovered">
                    <Icon>
                        <i class="icon-link-2 text-2xl"></i>
                    </Icon>
                    <Content>
                        @link.DisplayText
                        @if (isNew) {
                            <sup class="text-primary ml-0.5">new</sup>
                        }
                    </Content>
                    <Caption>
                        @caption
                    </Caption>
                    <Right>
                        @if (AllowRevoke) {
                            <HeaderButton Class="blackout" Click="@(() => Revoke(invite))">
                                <i class="icon-trash03 text-xl"></i>
                            </HeaderButton>
                        }
                        <HeaderButton Class="blackout" Click="@(() => OnShareClick(invite).AsTask())">
                            <i class="icon-share text-xl"></i>
                        </HeaderButton>
                    </Right>
                </TileItem>
            </div>
        </div>
    }
}

@code {
    [Inject] private UIHub UIHub { get; init; } = null!;

    private ShareUI ShareUI => UIHub.ShareUI;
    private UrlMapper UrlMapper => UIHub.UrlMapper();
    private UICommander UICommander => UIHub.UICommander();
    private Session Session => UIHub.Session();

    [Parameter, EditorRequired] public List<Invite> Invites { get; set; } = [];
    [Parameter, EditorRequired] public string LinkFormat { get; set; } = "";
    [Parameter] public bool AllowRevoke { get; set; }
    [Parameter] public string NewInviteId { get; set; } = "";

    private LocalUrl GetLink(Invite invite)
        => Links.Invite(LinkFormat, invite.Id);

    private string GetCaption(Invite invite) {
        switch (invite.Details.Option) {
            case UserInviteOption:
                return "User invite link";
            case ChatInviteOption:
                return "Private join link";
            case PlaceInviteOption:
                return "Private join link";
            default:
                return "Unknown link";
        }
    }

    private Task Revoke(Invite invite)
        => UICommander.Run(new Invites_Revoke(Session, invite.Id));

    private async ValueTask OnShareClick(Invite invite) {
        var link = GetLink(invite);
        switch (invite.Details.Option) {
            case UserInviteOption: {
                var request = new ShareRequest("Your Actual Chat invite", link);
                _ = ShareUI.Share(ShareKind.ActualChatInvite, "Share Actual Chat invite", "", request);
                return;
            }
            case ChatInviteOption chatDetails: {
                // The code here is ~ a copy of ShareUIExt.GetModel(ChatId...) - we can't reference it here, so...
                var chats = UIHub.GetRequiredService<IChats>();
                var chatId = chatDetails.ChatId;
                var chat = await chats.Get(Session, chatId, default);
                if (chat == null || !chat.CanInvite())
                    return;

                Place? place = null;
                if (!chatId.PlaceChatId.IsNone) {
                    var places = UIHub.GetRequiredService<IPlaces>();
                    place = await places.Get(Session, chatId.PlaceChatId.PlaceId, default).ConfigureAwait(false);
                    if (place is null)
                        return; // We should be able to get chat's place. Return if it's not like that.
                }

                var targetTitle = place is null ? chat.Title : ZString.Concat(place.Title, "/", chat.Title);
                var title = "Share private chat join link";
                var text = $"\"{targetTitle}\" on Actual Chat";
                var shareModalSelectorPrefs = ShareWithPlaceMembersOnly.GetFor(chat, place);
                var shareModel = new ShareModalModel(
                    ShareKind.ChatInvite, title, targetTitle,
                    new(text, link),
                    shareModalSelectorPrefs);
                _ = ShareUI.Share(shareModel);
                return;
            }
            case PlaceInviteOption placeDetails: {
                var places = UIHub.GetRequiredService<IPlaces>();
                var place = await places.Get(Session, placeDetails.PlaceId, default);
                if (place == null || !place.Rules.CanInvite())
                    return;

                var title = "Share private place join link";
                var text = $"\"{place.Title}\" on Actual Chat";
                var shareModel = new ShareModalModel(
                    ShareKind.PlaceInvite, title, place.Title,
                    new(text, link),
                    null);
                _ = ShareUI.Share(shareModel);
                return;
            }
            default:
                return;
        }
    }
}
