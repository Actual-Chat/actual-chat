@using ActualChat.Invite
@using ActualChat.UI.Blazor.Services
@namespace ActualChat.UI.Blazor.Components

<ButtonGroup>
    @Buttons
</ButtonGroup>

@if (Invites.Count > 0) {
    <div class="text-sm font-medium text-secondary">Active invite codes:</div>
    <ul>
        @foreach (var invite in Invites) {
            <li>
                @{
                    var link = GenerateLink(invite);
                    var expiresOn = invite.ExpiresOn.ToDateTime().ToLocalTime();
                    var now = DateTime.Now;
                    var remained = expiresOn - now;
                    var description = remained > TimeSpan.Zero ? GetRemainedTimeDescription(remained) : "Expired";
                }
                <div class="mt-2">
                    <div class="mt-1 flex-x">
                        <span class="font-medium">@invite.Id</span>
                        <span class="ml-3">Remaining:</span>
                        <span class="font-medium ml-1">@invite.Remaining</span>
                        <button type="button" @onclick="_ => CopyToClipboard(link)" class="ml-2 px-1 hover:bg-accent">

                            @* <svg xmlns="http://www.w3.org/2000/svg" class="w-6 h-6" viewBox="0 0 24 24"><path d="M16 10c3.469 0 2 4 2 4s4-1.594 4 2v6h-10v-12h4zm.827-2h-6.827v16h14v-8.842c0-2.392-4.011-7.158-7.173-7.158zm-8.827 12h-6v-16h4l2.102 2h3.898l2-2h4v2.145c.656.143 1.327.391 2 .754v-4.899h-3c-1.229 0-2.18-1.084-3-2h-8c-.82.916-1.771 2-3 2h-3v20h8v-2zm2-18c.553 0 1 .448 1 1s-.447 1-1 1-1-.448-1-1 .447-1 1-1zm4 18h6v-1h-6v1zm0-2h6v-1h-6v1zm0-2h6v-1h-6v1z"/></svg> *@
                            <i class="fa fa-files-o w-5 h-5" aria-hidden="true"></i>
                        </button>
                    </div>
                    <div>
                        <span class="text-sm">@description</span>
                    </div>
                </div>
            </li>
        }
    </ul>
}

@code {
    [Inject] private Session Session { get; init; } = null!;
    [Inject] private Clipboard Clipboard { get; init; } = null!;
    [Inject] private NavigationManager Nav { get; init; } = null!;

    [Parameter] public IImmutableList<Invite> Invites { get; set; } = ImmutableArray<Invite>.Empty;
    [Parameter] public string LinkFormat { get; set; } = "";
    [Parameter] public RenderFragment? Buttons { get; set; }

    private string GenerateLink(Invite invite)
        => Nav.BaseUri + string.Format(LinkFormat, invite.Id);

    private string GetRemainedTimeDescription(TimeSpan remained) {
        var totalDays = (int)remained.TotalDays;
        if (totalDays > 0) {
            if (totalDays == 1)
                return "1 day left";
            return $"{totalDays} days left";
        }
        var totalHours = (int)remained.TotalHours;
        if (totalHours > 0) {
            if (totalHours == 1)
                return "1 hour left";
            return $"{totalHours} hours left";
        }
        return "less than 1 hour";
    }

    private async Task CopyToClipboard(string link)
        => await Clipboard.WriteText(link);
}
