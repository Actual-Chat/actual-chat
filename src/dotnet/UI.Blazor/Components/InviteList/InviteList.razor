@using ActualChat.Invite
@using ActualChat.UI.Blazor.Services
@using ActualChat.Chat
@namespace ActualChat.UI.Blazor.Components

@if (Invites.Count > 0) {
    @foreach (var invite in Invites) {
        var link = GetLink(invite);
        var caption = GetCaption(invite);
        var isNew = !NewInviteId.IsNullOrEmpty() && invite.Id.Equals(NewInviteId);

        <div class="invite-list-item">
            <div class="link">
                <TileItem>
                    <Icon>
                        <i class="icon-link-2 text-2xl"></i>
                    </Icon>
                    <Content>
                        @link.DisplayText
                        @if (isNew) {
                            <sup class="text-badge ml-0.5">new</sup>
                        }
                    </Content>
                    <Caption>
                        @caption
                    </Caption>
                </TileItem>
            </div>
            <div class="actions">
                @if (AllowRevoke) {
                    <Button Class="btn-modal" Click="@(() => Revoke(invite))">
                        <i class="icon-trash03 text-xl"></i>
                        Revoke
                    </Button>
                }
                <Button Class="btn-modal" Click="@(() => _ = OnShareClick(invite))">
                    <i class="icon-share-more text-xl"></i>
                    Share
                </Button>
            </div>
        </div>
    }
}

@code {
    [Inject] private IServiceProvider Services { get; init; } = null!;
    [Inject] private UrlMapper UrlMapper { get; init; } = null!;

    private ShareUI ShareUI => Services.GetRequiredService<ShareUI>();

    [Parameter, EditorRequired] public ApiArray<Invite> Invites { get; set; } = ApiArray<Invite>.Empty;
    [Parameter, EditorRequired] public string LinkFormat { get; set; } = "";
    [Parameter] public bool AllowRevoke { get; init; }
    [Parameter] public string NewInviteId { get; init; } = "";

    private LocalUrl GetLink(Invite invite)
        => Links.Invite(LinkFormat, invite.Id);

    private string GetCaption(Invite invite) {
        switch (invite.Details.Option) {
            case UserInviteOption:
                return "User invite link";
            case ChatInviteOption:
                return "Private join link";
            default:
                return "Unknown link";
        }
    }

    private Task Revoke(Invite invite)
        => Services.UICommander().Run(new Invites_Revoke(Services.Session(), invite.Id));

    private async ValueTask OnShareClick(Invite invite) {
        var link = GetLink(invite);
        switch (invite.Details.Option) {
            case UserInviteOption: {
                var request = new ShareRequest("Your Actual Chat invite", link);
                _ = ShareUI.Share("Share Actual Chat invite", request);
                return;
            }
            case ChatInviteOption chatDetails: {
                // The code here is ~ a copy of ShareUIExt.GetModel(ChatId...) - we can't reference it here, so...
                var chats = Services.GetRequiredService<IChats>();
                var chat = await chats.Get(Services.Session(), chatDetails.ChatId, default);
                if (chat == null || chat.HasSingleAuthor || chat.Id.IsPeerChat(out _))
                    return;

                var title = "Share private chat join link";
                var text = $"\"{chat.Title}\" on Actual Chat";
                var shareModel = new ShareModalModel(title, new(text, link));
                _ = ShareUI.Share(shareModel);
                return;
            }
            default:
                return;
        }
    }
}
