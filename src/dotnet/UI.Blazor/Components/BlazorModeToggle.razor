@namespace ActualChat.UI.Blazor.Components
@using System.Reflection
@inject BlazorModeHelper _blazorModeHelper
@inject IJSRuntime _js

<div class="@(_class ??= this.DefaultClass()) group"
     @onclick="@(() => _blazorModeHelper.ChangeMode(!IsServerSideBlazor))">
    <span class="hover-item">@(IsPrerendering ? "Loading..." : GetActiveText(IsServerSideBlazor))</span>
    <span class="hover-item alt">@(IsPrerendering ? "Loading..." : GetInactiveText(IsServerSideBlazor))</span>
</div>

@code {
    private static string? _class;

    private bool IsPrerendering { get; set; }
    private bool IsServerSideBlazor { get; set; } = BlazorModeHelper.IsServerSideBlazor;

    protected override void OnInitialized()
    {
        var jsRuntimeType = _js.GetType();
        if (jsRuntimeType.Name != "RemoteJSRuntime") {
            IsPrerendering = false;
            return;
        }
        var fClientProxy = jsRuntimeType.GetField("_clientProxy", BindingFlags.Instance | BindingFlags.NonPublic);
        var clientProxy = fClientProxy?.GetValue(_js);
        IsPrerendering = fClientProxy != null && clientProxy == null;
    }

    private string GetActiveText(bool isServerSideBlazor)
        => isServerSideBlazor ? "Blazor Server" : "Blazor WASM";

    private string GetInactiveText(bool isServerSideBlazor)
        => isServerSideBlazor ? "Switch to WASM" : "Switch to Server";
}
