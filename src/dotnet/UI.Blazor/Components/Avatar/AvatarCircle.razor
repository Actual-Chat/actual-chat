@namespace ActualChat.UI.Blazor.Components
@using ActualChat.Users
@using Microsoft.Toolkit.HighPerformance
@using ActualChat.UI.Blazor.Services
@inherits FusionComponentBase
@{
    var title = HasTooltip ? Avatar.Name : "";
    var hasPicture = !_pictureUrl.IsNullOrEmpty();
    var isSvg = hasPicture && _pictureUrl.Contains("svg", StringComparison.OrdinalIgnoreCase);
    if (isSvg)
        _pictureUrl += "#svgView(preserveAspectRatio(none))";
}

<div class="avatar-circle">
    <div class="c-content">
        @if (ReferenceEquals(Avatar, Avatar.Loading)) {
            <div class="c-skeleton @_class"></div>
        } else if (!_pictureUrl.IsNullOrEmpty()){
            <image-skeleton
                class="c-avatar @_class"
                src="@_pictureUrl"
                title="@title"
                @onclick="@Click"/>
        } else if (!_avatarKey.IsNullOrEmpty()){
            <beam-avatar
                class="c-avatar @_class"
                key="@_avatarKey"
                @onclick="@Click"/>
        }
        @BadgeContent
    </div>
</div>

@code {
    private string _class = "";
    private string _pictureUrl = "";
    private string _avatarKey = "";

    [Inject] private UrlMapper UrlMapper { get; init; } = null!;

    [Parameter, EditorRequired] public Avatar Avatar { get; set; } = null!;
    [Parameter] public RenderFragment? BadgeContent { get; set; }
    [Parameter] public SquareSize Size { get; set; } = SquareSize.Size9;
    [Parameter] public bool IsBlurred { get; set; }
    [Parameter] public bool IsSquare { get; set; }
    [Parameter] public bool HasTooltip { get; set; }
    [Parameter] public EventCallback Click { get; set; }

    protected override void OnParametersSet() {
        _class = IsBlurred ? "pic-blurred" : $"pic-size-{(int) Size}";

        if (!IsSquare)
            _class += " pic-rounded";

        if (Click.HasDelegate)
            _class += " cursor-pointer";

        if (Avatar.Picture != null) {
            _pictureUrl = UrlMapper.PicturePreview128Url(Avatar.Picture);
            _avatarKey = _pictureUrl.IsNullOrEmpty() ? Avatar.Picture.AvatarKey ?? "" : "";
        } else {
            _avatarKey = DefaultUserPicture.GetAvatarKey(Avatar.Id);
        }
    }
}
