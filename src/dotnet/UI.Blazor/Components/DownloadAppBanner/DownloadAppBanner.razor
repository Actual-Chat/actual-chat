@namespace ActualChat.UI.Blazor.Components
@using ActualChat.Kvas
@using ActualChat.UI.Blazor.Services
@using ActualChat.Hosting
@inherits ComputedStateComponent<bool>
@{
    if (State.Value)
        return;
}

<div class="download-app-banner">
    <div
        class="download-app-banner-button"
        @onclick="@OnDownload">
        <div class="download-app-banner-filler"></div>
        <div class="download-app-banner-title">
            Get Actual Chat App
        </div>
        <i class="icon-download"></i>
        <div class="download-app-banner-filler"></div>
        @if (CanBeClosed) {
            <HeaderButton
                Click="@OnClose"
                PreventDefault="@true"
                StopPropagation="@true"
                Class="c-close-btn">
                <i class="icon-close"></i>
            </HeaderButton>
        }
    </div>
</div>

@code {
    private IStoredState<bool> _isDismissed = null!;

    [Inject] private UIHub Hub { get; init; } = null!;
    private HostInfo HostInfo => Hub.HostInfo();
    private LocalSettings LocalSettings => Hub.LocalSettings();
    private ModalUI ModalUI => Hub.ModalUI;

    [Parameter] public bool CanBeClosed { get; set; } = true;

    protected override void OnInitialized()
        => _isDismissed = StateFactory.NewKvasStored<bool>(new(LocalSettings, "DownloadAppBanner_Dismissed"));

    private void OnDownload()
        => ModalUI.Show(new DownloadAppModal.Model());

    private void OnClose()
        => _isDismissed.Value = true;

    protected override ComputedState<bool>.Options GetStateOptions()
        => new() {
            InitialValue = true, // We don't want to show & hide it every time
            Category = ComputedStateComponent.GetStateCategory(GetType()),
        };

    protected override async Task<bool> ComputeState(CancellationToken cancellationToken) {
        if (HostInfo.HostKind == HostKind.MauiApp && (HostInfo.AppKind.IsMobile() || CanBeClosed))
            return true; // No banner on mobile + only non-closable banner (in SettingsPanel) on Windows
        if (!CanBeClosed)
            return false;

        await _isDismissed.WhenRead.ConfigureAwait(false);
        return await _isDismissed.Use(cancellationToken).ConfigureAwait(false);
    }
}
