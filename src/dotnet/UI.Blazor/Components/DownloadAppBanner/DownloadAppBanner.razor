@namespace ActualChat.UI.Blazor.Components
@using ActualChat.Kvas
@using ActualChat.UI.Blazor.Services
@inherits ComputedStateComponent<bool>

@if (!State.Value) {
    return;
}

<div
    class="download-app-banner-download-button"
    @onclick="@OnDownload">
    <div class="download-app-banner-title">
        Download App
    </div>
    <i class="icon-download"></i>
    @if (CanBeClosed) {
        <i class="icon-close" @onclick="@OnClose"></i>
    }
</div>

@code {
    private IStoredState<bool> _dismissed = null!;

    [Inject] private AccountSettings AccountSettings { get; init; } = null!;
    [Inject] private ModalUI ModalUI { get; init; } = null!;

    [Parameter] public bool CanBeClosed { get; set; } = true;

    protected override void OnInitialized() {
        _dismissed = StateFactory.NewKvasStored<bool>(new(AccountSettings, "DownloadApplicationBanner"));
        base.OnInitialized();
    }

    private void OnDownload()
        => ModalUI.Show(new DownloadAppModal.Model());

    private void OnClose()
        => _dismissed.Value = true;

    protected override async Task<bool> ComputeState(CancellationToken cancellationToken) {
        if (!CanBeClosed)
            return true;

        await _dismissed.WhenRead;
        var dismissed = await _dismissed.Use(cancellationToken);
        return !dismissed;
    }
}
