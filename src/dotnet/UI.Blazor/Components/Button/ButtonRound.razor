@using System.Text
@using ActualChat.UI.Blazor.Components.Tooltip
@namespace ActualChat.UI.Blazor.Components

<button @ref="_ref"
        class="@Class btn btn-round"
        title="@Title"
        name="@Name"
        type="@GetButtonType()"
        disabled="@IsDisabled"
        autofocus="@IsAutofocused"
        oncontextmenu="return false;"
        @attributes="@AdditionalAttributes"
        @onclick="Click">
    <div class="@ContentClass btn-content" tabindex="-1">
        <div class="btn-content-inner">
            @ChildContent
        </div>
    </div>
</button>
@if (HasTooltip) {
    <Tooltip Reference="_ref">@Tooltip</Tooltip>
}

@code {
    private ElementReference _ref;

    [Parameter] public string Class { get; set; } = "";
    [Parameter] public string ContentClass { get; set; } = "";
    [Parameter] public string Title { get; set; } = "";
    [Parameter] public string Tooltip { get; set; } = "";
    [Parameter] public string Name { get; set; } = "";
    [Parameter] public ButtonType Type { get; set; } = ButtonType.Button;
    [Parameter] public bool IsDisabled { get; set; }
    [Parameter] public bool IsAutofocused { get; set; }
    [Parameter] public EventCallback<MouseEventArgs> Click { get; set; }
    [Parameter] public RenderFragment? ChildContent { get; set; }

    [Parameter(CaptureUnmatchedValues = true)]
    public IReadOnlyDictionary<string, object>? AdditionalAttributes { get; set; }

    private string GetButtonType()
        => Type.ToString().ToLower();

    private bool HasTooltip => !Tooltip.IsNullOrEmpty();
}
