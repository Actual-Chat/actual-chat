@namespace ActualChat.UI.Blazor.Components
@using Microsoft.AspNetCore.Components.Rendering
@using ActualChat.UI.Blazor.Services
@using System.Linq.Expressions
@typeparam TValue
@inherits ComponentBase
@implements IDisposable

@{
    var messages = CurrentEditContext.GetValidationMessages(_fieldIdentifier).ToList();
    var isInvalid = messages.Any();
    var cls = Class;
    if (isInvalid) {
        cls += " invalid";
    }
}

<section data-control-id="@InputId" class="@cls">
    @if (!IsLabelInsideInput) {
        @if (!Label.IsNullOrEmpty()) {
            <div class="@LabelClass form-section-label">
                <Label InputId="@InputId" Text="@Label" IsRequired="@IsRequired"></Label>
            </div>
        }
        <div class="@ContentClass form-section-content">
            @ChildContent
        </div>
    } else {
        <div class="@ContentClass form-section-content label-inside-input">
            <div class="c-left">
                @if (!Label.IsNullOrEmpty()) {
                    <div class="@LabelClass form-section-label">
                        <Label InputId="@InputId" Text="@Label" IsRequired="@IsRequired"></Label>
                    </div>
                }
                @ChildContent
            </div>
            @Right
        </div>
    }
    @if (!HideValidationMessage) {
        <div class="form-section-validation">
            @if (isInvalid) {
                @messages.FirstOrDefault()
            }
        </div>
    }
</section>

@code {
    private EditContext? _previousEditContext;
    private Expression<Func<TValue>>? _previousFieldAccessor;
    private EventHandler<ValidationStateChangedEventArgs>? _validationStateChangedHandler;
    private FieldIdentifier _fieldIdentifier;

    public FormSection() {
        _validationStateChangedHandler = (sender, eventArgs) => StateHasChanged();
    }

    [CascadingParameter] EditContext CurrentEditContext { get; set; } = default!;

    [Parameter] public string Class { get; set; } = "";
    [Parameter] public string LabelClass { get; set; } = "";
    [Parameter] public string ContentClass { get; set; } = "";
    [Parameter] public string Label { get; set; } = "";
    [Parameter] public string InputId { get; set; } = "";
    [Parameter] public bool IsRequired { get; set; }
    [Parameter] public bool IsLabelInsideInput { get; set; }
    [Parameter] public bool ShowErrors { get; set; }
    [Parameter] public bool HideValidationMessage { get; set; }
    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Parameter] public RenderFragment? Right { get; set; }
    [Parameter] public Expression<Func<TValue>>? For { get; set; }

    protected override void OnParametersSet() {
        if (CurrentEditContext == null)
            throw StandardError.Internal(
                $"{GetType()} requires a cascading parameter " +
                $"of type {nameof(EditContext)}. For example, you can use {GetType()} inside " +
                $"an {nameof(EditForm)}.");

        if (For == null)
            throw StandardError.Internal($"{GetType()} requires a value for the {nameof(For)} parameter.");

        if (For != _previousFieldAccessor) {
            _fieldIdentifier = FieldIdentifier.Create(For);
            _previousFieldAccessor = For;
        }

        if (CurrentEditContext != _previousEditContext) {
            DetachValidationStateChangedListener();
            CurrentEditContext.OnValidationStateChanged += _validationStateChangedHandler;
            _previousEditContext = CurrentEditContext;
        }
    }

    void IDisposable.Dispose() {
        DetachValidationStateChangedListener();
    }

    private void DetachValidationStateChangedListener() {
        if (_previousEditContext != null) {
            _previousEditContext.OnValidationStateChanged -= _validationStateChangedHandler;
        }
    }
}
