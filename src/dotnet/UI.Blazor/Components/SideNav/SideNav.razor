@using ActualChat.UI.Blazor.Module
@using ActualChat.UI.Blazor.Components.SideNav
@implements IAsyncDisposable

<div @ref="ElementRef" class="@_class">
    <div class="side-nav-drawer"></div>
    @ChildContent
</div>

@code {
    private string _class = "";

    [Inject] private IJSRuntime JS { get; init; } = null!;

    [Parameter] public SideNavSide Side { get; set; } = SideNavSide.Left;
    [Parameter] public bool IsOpen { get; set; }
    [Parameter] public RenderFragment ChildContent { get; set; } = null!;
    [Parameter] public EventCallback<bool> VisibilityChanged { get; set; }

    private ElementReference ElementRef { get; set; }
    private IJSObjectReference JSRef { get; set; } = null!;
    private DotNetObjectReference<SideNav> BlazorRef { get; set; } = null!;

    protected override void OnParametersSet() {
        _class = "side-nav";
        _class += Side == SideNavSide.Left
            ? " side-nav-left"
            : " side-nav-right";
        if (!IsOpen)
            _class += " closed";
    }

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (firstRender) {
            BlazorRef = DotNetObjectReference.Create(this);
            var identifier = $"{BlazorUICoreModule.ImportName}.SideNav.create";
            var options = new SideNavOptions {
                Side = Side,
            };
            JSRef = await JS.InvokeAsync<IJSObjectReference>(
                identifier,
                ElementRef,
                BlazorRef,
                options);
        }
    }

    public async ValueTask DisposeAsync() {
        await JSRef.DisposeSilentlyAsync("dispose");
        JSRef = null!;
        BlazorRef.DisposeSilently();
        BlazorRef = null!;
    }

    [JSInvokable]
    public Task OnVisibilityChanged(bool isOpen)
        => VisibilityChanged.InvokeAsync(isOpen);
}
