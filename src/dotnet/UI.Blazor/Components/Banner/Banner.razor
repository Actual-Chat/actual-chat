@namespace ActualChat.UI.Blazor.Components
@inherits FusionComponentBase
@using ActualChat.UI.Blazor.Services
@implements IDisposable
@{
    _animator.State = IsVisible && !_isDismissed;
    if (_animator.MustHideComponent)
        return;
}
<div class="banner @_animator.Class">
     @if (Icon != null) {
         @Icon
     } else {
         <SeverityIcon Severity="@Severity"/>
     }
     <div class="banner-body">
         @Body
     </div>
     @if (Buttons != null) {
         <div class="banner-buttons">
             @Buttons
             @if (ShowDismissButton) {
                 <Button
                     Class="btn-transparent blackout text-icons-01"
                     Click="OnClose"
                     Tooltip="Dismiss"
                     TooltipPosition="FloatingPosition.Top">
                     <i class="icon-close text-2xl"></i>
                 </Button>
             }
         </div>
     }
</div>
@code {
    private ShowHideAnimator _animator = null!;
    private bool _isDismissed = false;

    [CascadingParameter] public BannerDef? BannerDef { get; set; } = null!;

    [Parameter, EditorRequired] public RenderFragment Body { get; set; } = null!;
    [Parameter] public RenderFragment? Icon { get; set; }
    [Parameter] public RenderFragment? Buttons { get; set; }
    [Parameter] public bool ShowIconCircle { get; set; } = true;
    [Parameter] public bool ShowDismissButton { get; set; }
    [Parameter] public bool IsVisible { get; set; } = true;
    [Parameter] public BannerSeverity Severity { get; set; } = BannerSeverity.Info;
    [Parameter] public EventCallback Dismiss { get; set; }

    protected override void OnInitialized() {
        _animator = new ShowHideAnimator(this, TimeSpan.FromMilliseconds(300));
    }

    public void Dispose() {
        _animator.DisposeSilently();
    }

    private async Task OnClose() {
        if (Dismiss.HasDelegate)
            await Dismiss.InvokeAsync();
        else if (BannerDef?.HasDismissHandler == true)
            BannerDef.Dismiss();
        else
            _isDismissed = true; // NOTE(AY) You can't change IsVisible here, coz it's a parameter of component
        StateHasChanged();
    }
}
