@using Microsoft.Toolkit.HighPerformance
@using ActualChat.UI.Blazor.Services
@using ActualChat.UI.Blazor.Components.FileUpload
@namespace ActualChat.UI.Blazor.Components

<div class="chat-icon @_iconClass">
    @if (_hasPicture) {
        <img class="chat-icon-image @_iconClass"
             alt=""
             src="@_pictureUrl"
             @onclick="OnPictureClick"
             @onclick:preventDefault="true"/>
    } else {
        <div class="chat-icon-generated @_iconClass"
             style="@_iconStyle">
            @((Title.NullIfEmpty() ?? " ")[..1])
        </div>
    }
    @if (ShowImagePicker) {
        <div class="chat-icon-picker">
            <FileUpload id="chat-icon-input-file"
                        UploadUrl="@ImageUploadUrl"
                        Uploaded="OnUploaded"
                        MaxSize="Constants.Chat.PictureFileSizeLimit"
                        accept="image/*"
                        hidden>
            </FileUpload>
            <label for="chat-icon-input-file"
                   class="chat-icon-input-file-label">
                <i class="fa fa-camera" aria-hidden="true"></i>
            </label>
        </div>
    }
</div>

@code {
    private string _iconClass = "";
    private string _iconStyle = "";
    private string _pictureUrl = "";
    private bool _hasPicture = false;

    [Inject] private ContentUrlMapper ContentUrlMapper { get; set; } = null!;

    [Parameter] public string Title { get; set; } = "";
    [Parameter] public string Picture { get; set; } = "";
    [Parameter] public SquareSize Size { get; set; } = SquareSize.Size9;
    [Parameter] public bool ShowImagePicker { get; set; } = false;
    [Parameter] public string ImageUploadUrl { get; set; } = "";
    [Parameter] public EventCallback<MouseEventArgs> PictureClick { get; set; }
    [Parameter] public EventCallback<string> ImagePicked { get; set; }

    protected override void OnParametersSet() {
        _iconClass = $"chat-icon-size-{(int)Size}";
        if (PictureClick.HasDelegate)
            _iconClass += " chat-icon-show-cursor";
        _hasPicture = !Picture.IsNullOrEmpty();
        if (_hasPicture) {
            var contentUrl = ContentUrlMapper.ContentUrl(Picture);
            _pictureUrl = ContentUrlMapper.PicturePreviewUrl(contentUrl);
        } else {
            _iconStyle = $"background-color: {GenerateColor()}";
            _pictureUrl = "";
        }
    }

    private string GenerateColor() {
        var hash = Title.GetDjb2HashCode();
        var h = hash % 360;
        return $"hsl({h}, 30%, 80%)";
    }

    private async Task OnPictureClick(MouseEventArgs arg) {
        await PictureClick.InvokeAsync(arg).ConfigureAwait(false);
    }

    private async Task OnUploaded(string imageUrl) {
        await ImagePicked.InvokeAsync(imageUrl).ConfigureAwait(false);
    }
}
