@using ActualChat.UI.Blazor.Module
@namespace ActualChat.UI.Blazor.Components

<div @ref="Ref" class="reconnect-banner">
    <Banner>
        <Icon>
            <i class="icon-cloud-disconnected text-2xl text-icons-04"></i>
        </Icon>
        <Body>
        <div class="hidden md:flex-x gap-x-1">
            <div>Connection lost - reconnect in</div>
            <div class="reconnect-timer"></div>
            <div>sec</div>
        </div>

        <div class="flex-y md:hidden">
            <div class="text-title-1">Connection lost.</div>
            <div class="flex-x gap-x-1 items-center">Reconnect in
                <div class="reconnect-timer flex justify-center min-w-4"></div> s
            </div>
        </div>
        </Body>
        <Buttons>
            <Button Class="btn-transparent on" Click="OnRestartClick">Restart</Button>
        </Buttons>
    </Banner>
</div>

@code {
    private ElementReference Ref { get; set; }
    private IJSObjectReference _jsRef = null!;
    private DotNetObjectReference<ReconnectBanner> _blazorRef = null!;

    [Inject] private IJSRuntime JS { get; init; } = null!;

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (firstRender) {
            _blazorRef = DotNetObjectReference.Create(this);
            _jsRef = await JS.InvokeAsync<IJSObjectReference>(
                $"{BlazorUICoreModule.ImportName}.ReconnectBanner.create",
                Ref, _blazorRef
                );
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    public async ValueTask DisposeAsync() {
        await _jsRef.DisposeSilentlyAsync("dispose");
        _jsRef = null!;
        _blazorRef.DisposeSilently();
        _blazorRef = null!;
    }

    private void OnRestartClick() {

    }

    [JSInvokable]
    private void Restart()
        => OnRestartClick();

}
