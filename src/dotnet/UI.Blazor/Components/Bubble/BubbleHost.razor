@namespace ActualChat.UI.Blazor.Components
@using ActualChat.UI.Blazor.Module
@using ActualChat.UI.Blazor.Services
@using Stl.Generators
@implements IAsyncDisposable

<div class="ac-bubble-host">
    <CascadingValue Value="@this" IsFixed="true">
        @if (_bubble != null) {
            <div id="@_bubble.Id"
                 @key="_bubble.Id"
                 class="ac-bubble">
                <DynamicComponent Type="@_bubble.Ref.BubbleType" Parameters="@_bubble.Parameters"/>
            </div>
        }
    </CascadingValue>
</div>

@code {
    private static RandomStringGenerator IdGenerator { get; } = new(3, Alphabet.AlphaNumeric);

    private BubbleModel? _bubble;
    private List<BubbleModel>? _bubbles;
    private string? _bubbleGroup;
    private IJSObjectReference _jsRef = null!;
    private DotNetObjectReference<BubbleHost> _blazorRef = null!;

    [Inject] private IJSRuntime JS { get; init; } = null!;
    [Inject] private BubbleUI BubbleUI { get; set; } = null!;

    public async ValueTask DisposeAsync() {
        await _jsRef.DisposeSilentlyAsync("dispose");
        _jsRef = null!;
        _blazorRef.DisposeSilently();
        _blazorRef = null!;
    }

    protected override void OnInitialized() {
        ((IHasAcceptor<BubbleHost>)BubbleUI).Acceptor.Accept(this);
    }

    public async ValueTask ShowBubbleGroup(string group) {
        if (string.Equals(_bubbleGroup, group, StringComparison.Ordinal))
            return;

        _bubbleGroup = group;
        var bubbles = await _jsRef.InvokeAsync<BubbleInfo[]>("getBubblesByGroup", CancellationToken.None, group);
        _bubbles = bubbles
            .Select(x => {
                var id = IdGenerator.Next();
                return new BubbleModel(
                    id,
                    BubbleRef.Parse(x.BubbleRef),
                    x.Order,
                    new Dictionary<string, object> {
                        { nameof(IBubble.Id), id },
                    });
            })
            .OrderBy(x => x.Order)
            .ToList();
        _bubble = _bubbles.FirstOrDefault();
        StateHasChanged();
    }

    public async ValueTask ShowBubble(IBubble bubble) {
        var model = _bubbles?.Find(x => x.Id == bubble.Id);
        if (model == null)
            return;

        await _jsRef.InvokeVoidAsync("showBubble", CancellationToken.None, model.Id, model.Ref);
    }

    // Protected & private methods

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (firstRender) {
            _blazorRef = DotNetObjectReference.Create(this);
            var identifier = $"{BlazorUICoreModule.ImportName}.BubbleHost.create";
            _jsRef = await JS.InvokeAsync<IJSObjectReference>(identifier, _blazorRef);
        }
    }

    // Nested types

    private sealed record BubbleModel(
        string Id,
        BubbleRef Ref,
        int Order,
        Dictionary<string, object> Parameters);

    private sealed record BubbleInfo(
        string BubbleRef,
        int Order);
}
