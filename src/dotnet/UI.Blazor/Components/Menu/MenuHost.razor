@namespace ActualChat.UI.Blazor.Components
@using ActualChat.UI.Blazor.Module
@using ActualChat.UI.Blazor.Services
@implements IAsyncDisposable
@{
    RenderFragment RenderMenu(Model menu) =>
        @<div
             id="@menu.Id"
             @key="menu.Id"
             class="@(GetMenuCssClass(menu))">
            <ul class="ac-menu-list">
                <DynamicComponent Type="@menu.Type" Parameters="@menu.Parameters"/>
            </ul>
        </div>;
}

<div class="ac-menu-host @(GetHostCssClass())">
    <CascadingValue Value="@this" IsFixed="true">
        @if (IsOverlayVisible) {
            <div class="ac-menu-overlay">
                @foreach (var menu in _visibleMenus) {
                    @RenderMenu(menu);
                }
            </div>
        } else {
            @foreach (var menu in _visibleMenus) {
                @RenderMenu(menu);
            }
        }
    </CascadingValue>
</div>

@code {
    private readonly List<Model> _visibleMenus = new();
    private IJSObjectReference _jsRef = null!;
    private DotNetObjectReference<MenuHost> _blazorRef = null!;

    [Inject] private IJSRuntime JS { get; init; } = null!;

    [CascadingParameter] ScreenSize ScreenSize { get; set; }

    public async ValueTask DisposeAsync() {
        await _jsRef.DisposeSilentlyAsync("dispose");
        _jsRef = null!;
        _blazorRef.DisposeSilently();
        _blazorRef = null!;
    }

    public ValueTask ShowMenu(IMenu menu)
        => _jsRef.InvokeVoidAsync("showMenuById", menu.Id);

    public ValueTask HideMenu(IMenu menu)
        => _jsRef.InvokeVoidAsync("hideMenuById", menu.Id);

    // JS interface

    [JSInvokable]
    public Task OnRenderMenu(string menuRef, string id, bool isHoverMenu) {
        if (_visibleMenus.Any(m => m.Id == id))
            return Task.CompletedTask;

        var parsedMenuRef = MenuRef.Parse(menuRef);
        var model = new Model(
            id,
            parsedMenuRef.MenuType,
            new Dictionary<string, object>() {
                { nameof(IMenu.Id), id },
                { nameof(IMenu.Arguments), parsedMenuRef.Arguments },
            },
            isHoverMenu);
        _visibleMenus.Add(model);
        StateHasChanged();
        return Task.CompletedTask;
    }

    [JSInvokable]
    public Task OnHideMenu(string id) {
        var menu = _visibleMenus.FirstOrDefault(m => m.Id == id);
        if (menu == null)
            return Task.CompletedTask;

        _visibleMenus.Remove(menu);
        StateHasChanged();
        return Task.CompletedTask;
    }

    // Protected & private methods

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (firstRender) {
            _blazorRef = DotNetObjectReference.Create(this);
            var identifier = $"{BlazorUICoreModule.ImportName}.MenuHost.create";
            _jsRef = await JS.InvokeAsync<IJSObjectReference>(identifier, _blazorRef);
        }
    }

    private bool IsOverlayVisible
        => ScreenSize.IsNarrow() && _visibleMenus.Any(x => !x.IsHoverMenu);

    private string GetHostCssClass()
        => IsOverlayVisible ? "has-overlay" : "";

    private string GetMenuCssClass(Model menu) {
        var cls = menu.IsHoverMenu
            ? "ac-menu-hover"
            : "ac-menu";
        if (IsOverlayVisible)
            cls += " !block";
        return cls;
    }

    private sealed record Model(
        string Id,
        Type Type,
        Dictionary<string, object> Parameters,
        bool IsHoverMenu);
}
