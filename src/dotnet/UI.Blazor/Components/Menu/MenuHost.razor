@namespace ActualChat.UI.Blazor.Components
@using ActualChat.UI.Blazor.Module
@using ActualChat.UI.Blazor.Services
@implements IAsyncDisposable

<div class="ac-menu-host @(GetHostCssClass())">
    <CascadingValue Value="@this" IsFixed="true">
        @if (IsOverlayVisible) {
            <div class="ac-menu-overlay">
                @foreach (var menu in _menus) {
                    <div id="@menu.Id" @key="menu.Id" class="@(GetMenuCssClass(menu))">
                        <ul class="ac-menu-list">
                            <DynamicComponent Type="@menu.Type" Parameters="@menu.Parameters"/>
                        </ul>
                    </div>
                }
            </div>
        } else {
            @foreach (var menu in _menus) {
                <div id="@menu.Id" @key="menu.Id" class="@(GetMenuCssClass(menu))">
                    <ul class="ac-menu-list">
                        <DynamicComponent Type="@menu.Type" Parameters="@menu.Parameters"/>
                    </ul>
                </div>
            }
        }
    </CascadingValue>
</div>

@code {
    private readonly List<Model> _menus = new();
    private IJSObjectReference _jsRef = null!;
    private DotNetObjectReference<MenuHost> _blazorRef = null!;

    [Inject] private IJSRuntime JS { get; init; } = null!;
    [Inject] private HistoryUI HistoryUI { get; init; } = null!;

    [CascadingParameter] ScreenSize ScreenSize { get; set; }

    [JSInvokable]
    public Task RenderMenu(string menuRef, string id, bool isHoverMenu) {
        if (isHoverMenu)
            RenderMenuInternal(menuRef, id, isHoverMenu);
        else
            HistoryUI.NavigateTo(
            () => RenderMenuInternal(menuRef, id, isHoverMenu),
            () => HideMenuInternal(id));
        return Task.CompletedTask;
    }

    [JSInvokable]
    public Task HideMenu(string id) {
        var menu = _menus.LastOrDefault(x => x.Id == id);
        if (menu != null) {
            if (menu.IsHoverMenu)
                HideMenuInternal(id);
            else if (menu == _menus.LastOrDefault(x => !x.IsHoverMenu))
                HistoryUI.GoBack();
            else
                HideMenuInternal(id);
        }
        return Task.CompletedTask;
    }

    public async Task ShowMenu(MenuBase menu) {
        await _jsRef.InvokeVoidAsync("showMenu", menu.Id);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (firstRender) {
            _blazorRef = DotNetObjectReference.Create(this);
            var identifier = $"{BlazorUICoreModule.ImportName}.MenuHost.create";
            _jsRef = await JS.InvokeAsync<IJSObjectReference>(identifier, _blazorRef);
        }
    }

    public async ValueTask DisposeAsync() {
        await _jsRef.DisposeSilentlyAsync("dispose");
        _jsRef = null!;
        _blazorRef.DisposeSilently();
        _blazorRef = null!;
    }

     private void RenderMenuInternal(string menuRef, string id, bool isHoverMenu)
    {
        var parsedMenuRef = MenuRef.Parse(menuRef);
        var model = new Model(
            id,
            parsedMenuRef.MenuType,
            new Dictionary<string, object>()
            {
                {nameof(MenuBase.Id), id},
                {nameof(MenuBase.Arguments), parsedMenuRef.Arguments},
            },
            isHoverMenu);
        _menus.Add(model);
        StateHasChanged();
    }

    private void HideMenuInternal(string id)
    {
        _menus.RemoveAll(x => x.Id == id);
        StateHasChanged();
    }

    private string GetMenuCssClass(Model menu) {
        var cls = menu.IsHoverMenu
            ? "ac-menu-hover"
            : "ac-menu";
        if (ScreenSize.IsNarrow())
            cls += " mobile";
        return cls;
    }

    private string GetHostCssClass() {
        var cls = "";
        if (IsOverlayVisible)
            cls += "no-events";
        return cls;
    }

    private bool IsOverlayVisible
        => _menus.Any(x => !x.IsHoverMenu) && ScreenSize.IsNarrow();

    private sealed record Model(
        string Id,
        Type Type,
        Dictionary<string, object> Parameters,
        bool IsHoverMenu);
}
