@namespace ActualChat.UI.Blazor.Components
@using ActualChat.UI.Blazor.Module
@using ActualChat.UI.Blazor.Services
@implements IAsyncDisposable
@{
    RenderFragment RenderMenu(MenuModel menu) =>
        @<div
             id="@menu.Id"
             @key="menu.Id"
             class="@(GetMenuCssClass(menu))">
            <ul class="ac-menu-list">
                <DynamicComponent Type="@menu.Type" Parameters="@menu.Parameters"/>
            </ul>
        </div>;
    var menu = _menu;
}

<div class="ac-menu-host @(GetHostCssClass())">
    <CascadingValue Value="@this" IsFixed="true">
        @if (IsOverlayVisible()) {
            <div class="ac-menu-overlay">
                @if (menu != null) {
                    @RenderMenu(menu);
                }
            </div>
        } else {
            @if (menu != null) {
                @RenderMenu(menu);
            }
        }
    </CascadingValue>
</div>

@code {
    private MenuModel? _menu;
    private IJSObjectReference _jsRef = null!;
    private DotNetObjectReference<MenuHost> _blazorRef = null!;
    private EventHandler<LocationChangedEventArgs> _onLocationChanged = null!;

    [Inject] private NavigationManager Nav { get; init; } = null!;
    [Inject] private IJSRuntime JS { get; init; } = null!;

    [CascadingParameter] ScreenSize ScreenSize { get; set; }

    public async ValueTask DisposeAsync() {
        Nav.LocationChanged -= _onLocationChanged;
        await _jsRef.DisposeSilentlyAsync("dispose");
        _jsRef = null!;
        _blazorRef.DisposeSilently();
        _blazorRef = null!;
    }

    protected override void OnInitialized() {
        base.OnInitialized();
        _onLocationChanged = OnLocationChanged;
        Nav.LocationChanged += _onLocationChanged;
    }

    public ValueTask Show(
        MenuRef menuRef,
        string triggerElementId,
        string? placement = null,
        bool isHoverMenu = false)
        => _jsRef.InvokeVoidAsync("showOrPosition", menuRef, isHoverMenu, triggerElementId, placement);

    public ValueTask Show(
        MenuRef menuRef,
        ElementReference triggerElement,
        string? placement = null,
        bool isHoverMenu = false)
        => _jsRef.InvokeVoidAsync("showOrPosition", menuRef, isHoverMenu, triggerElement, placement);

    public ValueTask Hide(IMenu menu)
        => Hide(menu.Id);
    public ValueTask Hide(string menuId)
        => _jsRef.InvokeVoidAsync("hideById", menuId);

    public ValueTask Position(IMenu menu)
        => Position(menu.Id);
    public ValueTask Position(string menuId)
        => _jsRef.InvokeVoidAsync("positionById", menuId);

    // JS interface

    [JSInvokable]
    public Task OnRenderRequest(string id, string menuRef, bool isHoverMenu) {
        if (_menu?.Id == id)
            return Task.CompletedTask;

        var parsedMenuRef = MenuRef.Parse(menuRef);
        _menu = new MenuModel(
            id,
            parsedMenuRef.MenuType,
            new Dictionary<string, object>() {
                { nameof(IMenu.Id), id },
                { nameof(IMenu.Arguments), parsedMenuRef.Arguments },
            },
            isHoverMenu);

        StateHasChanged();
        return Task.CompletedTask;
    }

    [JSInvokable]
    public Task OnHideRequest(string id) {
        if (_menu?.Id != id)
            return Task.CompletedTask;

        _menu = null;
        StateHasChanged();
        return Task.CompletedTask;
    }

    // Protected & private methods

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (firstRender) {
            _blazorRef = DotNetObjectReference.Create(this);
            var identifier = $"{BlazorUICoreModule.ImportName}.MenuHost.create";
            _jsRef = await JS.InvokeAsync<IJSObjectReference>(identifier, _blazorRef);
        }
    }

    protected override void OnParametersSet() {
        if (ScreenSize.IsNarrow() && _menu?.IsHoverMenu == true) {
            Hide(_menu.Id);
            _menu = null;
        }
        StateHasChanged();
    }

    private bool IsOverlayVisible()
        => ScreenSize.IsNarrow() && _menu?.IsHoverMenu == false;

    private string GetHostCssClass()
        => IsOverlayVisible() ? "has-overlay" : "";

    private string GetMenuCssClass(MenuModel menu) {
        var cls = menu.IsHoverMenu
            ? "ac-menu-hover"
            : "ac-menu";
        if (IsOverlayVisible())
            cls += " !block";
        return cls;
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e) {
        if (_menu != null)
            Hide(_menu.Id);
    }

    private sealed record MenuModel(
        string Id,
        Type Type,
        Dictionary<string, object> Parameters,
        bool IsHoverMenu);
}
