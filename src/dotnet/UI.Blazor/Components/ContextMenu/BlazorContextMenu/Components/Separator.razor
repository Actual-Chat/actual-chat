@using BlazorContextMenu.Services
@inherits MenuTreeComponent

@namespace BlazorContextMenu

<li @attributes="@Attributes" id="@Id" class="@ClassCalc">
    <hr class="@HrClassCalc" />
</li>

@code{
    [Inject] private BlazorContextMenuSettings Settings { get; init; } = null!;

    [Inject] private IMenuTreeTraverser MenuTreeTraverser { get; init; } = null!;

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object>? Attributes { get; set; }

    /// <summary>
    /// Allows you to override the default css class of the <see cref="Separator"/>'s li element, for full customization.
    /// </summary>
    [Parameter]
    public string? OverrideDefaultCssClass { get; set; }

    /// <summary>
    /// Allows you to override the default css class of the <see cref="Separator"/>'s hr element, for full customization.
    /// </summary>
    [Parameter]
    public string? OverrideDefaultHrCssClass { get; set; }

    /// <summary>
    /// The id of the <see cref="Separator"/>'s li element. This is optional
    /// </summary>
    [Parameter]
    public string? Id { get; set; }

    /// <summary>
    /// Additional css class for the <see cref="Separator"/>'s li element. Use this to extend the default css.
    /// </summary>
    [Parameter]
    public string? CssClass { get; set; }

    /// <summary>
    /// Additional css class for the <see cref="Separator"/>'s hr element. Use this to extend the default css.
    /// </summary>
    [Parameter]
    public string? HrCssClass { get; set; }

    protected string Template { get; set; } = "";

    protected string ClassCalc {
        get {
            var template = Settings.GetTemplate(Template);
            return Helpers.AppendCssClasses(
                (OverrideDefaultCssClass ?? template.DefaultCssOverrides.SeparatorCssClass),
                (CssClass ?? Settings.GetTemplate(Template).SeparatorCssClass));
        }
    }

    protected string HrClassCalc {
        get {
            var template = Settings.GetTemplate(Template);
            return Helpers.AppendCssClasses(
               (OverrideDefaultHrCssClass ?? template.DefaultCssOverrides.SeparatorHrCssClass),
               (HrCssClass ?? Settings.GetTemplate(Template).SeparatorHrCssClass));
        }
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        var rootMenu = MenuTreeTraverser.GetRootContextMenu(this);
        if (rootMenu == null)
            throw new Exception("Separator component must be a child of a ContextMenu component");
        var parentMenu = MenuTreeTraverser.GetClosestContextMenu(this)!;
        Template = parentMenu.GetActiveTemplate();
    }
}
