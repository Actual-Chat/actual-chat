@namespace ActualChat.UI.Blazor.Components
@implements IMenu
@implements IContextMenuOldBackend
@implements IAsyncDisposable
@using ActualChat.UI.Blazor.Module

<CascadingValue Value="@((IMenu) this)" IsFixed="true">
    <div @ref="Ref" class="context-menu-old @Class">
        <button class="context-menu-old-button @ButtonClass" @onclick="_ => Toggle()">
            <div class="context-menu-old-button-inner">
                @ButtonTemplate
            </div>
        </button>
        @if (_isOpen) {
            <div class="context-menu-old-menu @MenuClass">
                <div class="select-none relative p-1 flex-y context-menu-old-menu-inner">
                    @MenuTemplate
                </div>
            </div>
        }
    </div>
</CascadingValue>

@code {
    [Inject] private IJSRuntime JS { get; init; } = null!;

    private DotNetObjectReference<IContextMenuOldBackend> BlazorRef { get; set; } = null!;
    private IJSObjectReference JSRef { get; set; } = null!;
    private ElementReference Ref { get; set; }
    private bool _isOpen;

    [Parameter] public string Class { get; set; } = "";
    [Parameter] public string ItemClass { get; set; } = "";
    [Parameter] public string ButtonClass { get; set; } = "";
    [Parameter] public string MenuClass { get; set; } = "";
    [Parameter] public MenuTooltipPosition TooltipPosition { get; set; } = MenuTooltipPosition.Top;
    [Parameter] public RenderFragment? ButtonTemplate { get; set; }
    [Parameter] public RenderFragment? MenuTemplate { get; set; }
    [Parameter] public EventCallback<bool> OpenStateChanged { get; set; }

    public bool IsOpen {
        get => _isOpen;
        set {
            if (_isOpen == value)
                return;
            _isOpen = value;
            OpenStateChanged.InvokeAsync(value);
            StateHasChanged();
        }
    }

    public async ValueTask DisposeAsync()
    {
        await JSRef.DisposeSilentlyAsync("dispose");
        JSRef = null!;
        BlazorRef.DisposeSilently();
        BlazorRef = null!;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (firstRender) {
            BlazorRef = DotNetObjectReference.Create<IContextMenuOldBackend>(this);
            JSRef = await JS.InvokeAsync<IJSObjectReference>(
                $"{BlazorUICoreModule.ImportName}.ContextMenu.create",
                Ref, BlazorRef
                );
        }
    }

    public Task OnItemClick(MenuItem item) {
        IsOpen = false;
        return Task.CompletedTask;
    }

    [JSInvokable]
    public Task Toggle(bool? mustOpen = null) {
        IsOpen = mustOpen ?? !IsOpen;
        return Task.CompletedTask;
    }
}
