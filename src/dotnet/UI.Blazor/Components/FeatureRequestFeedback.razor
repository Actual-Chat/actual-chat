@using ActualChat.Hosting
@using System.Net.Mime
@using ActualChat.UI.Blazor.Module
@implements IFeatureBackend
@inject IJSRuntime _js
@inject MomentClockSet _clocks
@inject HostInfo _hostInfo


<div class="relative">
    @{
        var featureTitle = FeatureTitle.IsNullOrEmpty() ? "This" : "'" + FeatureTitle + "'" ;
    }
    <h1 class="font-bold mb-8">@featureTitle feature is in development</h1>

    <p>Help us to prioritize features.</p>
    <p>Please vote how this feature is important for you.</p>
    <p>1 = not important, 5 = very important!</p>

    <div @ref="FeedbackRef" >
        @for (var i = 1; i <= 5; i++) {
            var cls = _rating >= i ? "fa-star" : "fa-star-o";
            var rating = i;
            var id = "star-" + (rating - 1);
            <button role="button" @onclick="@(() => SetRating(rating))"><i class="fa @cls" aria-hidden="true" id="@id"></i></button>
        }
    </div>
    <div class="mt-2">
        <label>Comment:</label>
        <textarea class="feedback-textarea border border-accent w-full" rows="5" @bind="_comment" @bind:event="oninput"></textarea>
    </div>
    <div class="mt-4">
        <button type="button" @onclick="OnSubmit"
                class="bg-button-success group rounded-md border border-success
                           hover:bg-button-success-hover hover:border-success-muted active:bg-button-success-hover
                           inline-flex px-3 py-1 text-sm font-medium leading-5
                           transition duration-150 ease-in-out">
            <span class="fill-current text-accent-muted group-hover:text-primary">Send feedback</span>
        </button>
    </div>

    <div class="absolute top-0 right-0 -mr-2 -mt-2 ">
        <CloseButton Click="OnCancel"/>
    </div>
</div>

@code {
    private int _rating;
    private string _comment = "";
    private ElementReference FeedbackRef { get; set; }
    private IJSObjectReference JSRef { get; set; } = null!;
    private DotNetObjectReference<IFeatureBackend> BlazorRef { get; set; } = null!;

    [CascadingParameter]
    BlazoredModalInstance ModalInstance { get; set; } = null!;

    [Parameter]
    public string? FeatureTitle { get; set; }

    [JSInvokable]
    private async Task SetRating(int rating) {
        _rating = rating == _rating ? 0 : rating;
        await JSRef.InvokeVoidAsync("updateRating", _rating - 1).ConfigureAwait(true);
    }

    private void OnSubmit() {
        ModalInstance.CloseAsync(ModalResult.Ok((_rating, _comment)));
    }

    private void OnCancel() {
        ModalInstance.CloseAsync(ModalResult.Cancel());
    }

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (firstRender) {
            BlazorRef = DotNetObjectReference.Create<IFeatureBackend>(this);
            JSRef = await _js.InvokeAsync<IJSObjectReference>(
                $"{BlazorUICoreModule.ImportName}.Feedback.create",
                FeedbackRef, BlazorRef
                ).ConfigureAwait(true);
        }
    }
}
