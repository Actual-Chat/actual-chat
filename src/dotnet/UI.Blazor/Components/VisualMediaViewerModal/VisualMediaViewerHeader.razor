@using ActualChat.Chat
@using ActualChat.Hosting
@using ActualChat.Media
@using ActualChat.UI.Blazor.Services
@using ActualChat.Users
@namespace ActualChat.UI.Blazor.Components
@{
    var canSave = MediaTypeExt.IsSupportedVisualMedia(ContentType) && !MediaTypeExt.IsSvg(ContentType);
}

<div class="image-viewer-header">
    @if (ChatEntry != null && _author != null) {
        <HeaderButton Class="mobile bleached" Click="CloseClick">
            <i class="icon-close"></i>
        </HeaderButton>
        <div class="c-author">
            <AvatarCircle
                Avatar="@_author.Avatar"
                Size="SquareSize.Size10"/>
            <div class="c-content">
                <AvatarName Avatar="@_author.Avatar" Class="c-name"/>
                <LiveTimeDeltaText Class="c-time" Moment="@ChatEntry.BeginsAt"/>
            </div>
        </div>
    }
    <div class="c-control-panel">
        @if (_enableIncompleteUI) {
            <HeaderButton Class="bleached">
                <i class="icon-share"></i>
            </HeaderButton>
        }
        @if (!DownloadUrl.IsNullOrEmpty()) {
            if (Saver != null && canSave) {
                <a href="#" download class="c-link" @onclick="@(_ => Saver.Save(DownloadUrl, ContentType))" @onclick:preventDefault>
                    <HeaderButton Class="bleached">
                        <i class="icon-download"></i>
                    </HeaderButton>
                </a>
            } else {
                <a href="@DownloadUrl" target="_blank" download class="c-link">
                    <HeaderButton Class="bleached">
                        <i class="icon-download"></i>
                    </HeaderButton>
                </a>
            }
        }
        <HeaderButton Class="desktop bleached" Click="CloseClick">
            <i class="icon-close"></i>
        </HeaderButton>
    </div>
</div>

@code {
    private Author? _author;
    private bool _enableIncompleteUI;
    private IAuthors? _authors;

    [Inject] private UIHub Hub { get; init; } = null!;
    private HostInfo HostInfo => Hub.HostInfo();
    private Session Session => Hub.Session();
    private IAuthors Authors => _authors ??= Hub.GetRequiredService<IAuthors>();
    private IMediaSaver? Saver { get; set; }

    private Features Features => Hub.Features();

    [Parameter] public ChatEntry? ChatEntry { get; set; }
    [Parameter] public EventCallback CloseClick { set; get; }
    [Parameter] public string DownloadUrl { set; get; } = "";
    [Parameter] public string ContentType { set; get; } = "";

    protected override async Task OnInitializedAsync() {
        Saver = Hub.GetService<IMediaSaver>();
        _enableIncompleteUI = await Features.EnableIncompleteUI(CancellationToken.None);
    }

    protected override async Task OnParametersSetAsync() {
        if (ChatEntry != null)
            _author = await Authors.Get(Session, ChatEntry.ChatId, ChatEntry.AuthorId, CancellationToken.None).ConfigureAwait(false);
    }
}
