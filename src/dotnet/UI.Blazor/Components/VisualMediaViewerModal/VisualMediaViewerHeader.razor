@using ActualChat.Chat
@using ActualChat.Hosting
@using ActualChat.Media
@using ActualChat.UI.Blazor.Services
@using ActualChat.Uploads
@using ActualChat.Users
@using Microsoft.AspNetCore.StaticFiles
@namespace ActualChat.UI.Blazor.Components

<div class="image-viewer-header">
    @if (ChatEntry != null && _author != null) {
        <HeaderButton Class="inverted mobile" Click="CloseClick">
            <i class="icon-close"></i>
        </HeaderButton>
        <div class="c-author">
            <AvatarCircle Avatar="@_author.Avatar" Size="SquareSize.Size10"/>
            <div class="c-content">
                <AvatarName Avatar="@_author.Avatar" Class="c-name"/>
                <LiveTimeDeltaText Class="c-time" Moment="@ChatEntry.BeginsAt"/>
            </div>
        </div>
    }
    <div class="c-control-panel">
        @if (_enableIncompleteUI) {
            <HeaderButton Class="inverted">
                <i class="icon-share"></i>
            </HeaderButton>
        }
        <MediaDownloadButton DownloadUrl="@DownloadUrl" ContentType="@ContentType"/>
        <HeaderButton Class="inverted desktop" Click="CloseClick">
            <i class="icon-close"></i>
        </HeaderButton>
    </div>
</div>

@code {
    private Author? _author;
    private bool _enableIncompleteUI;

    [Inject] private Features Features { get; init; } = null!;
    [Inject] private Session Session { get; init; } = null!;
    [Inject] private IAuthors Authors { get; init; } = null!;

    [Parameter] public ChatEntry? ChatEntry { get; set; }
    [Parameter] public EventCallback CloseClick { set; get; }
    [Parameter] public string DownloadUrl { set; get; } = "";
    [Parameter] public string ContentType { set; get; } = "";

    protected override async Task OnInitializedAsync() {
        _enableIncompleteUI = await Features.Get<Features_EnableIncompleteUI, bool>(CancellationToken.None);
    }

    protected override async Task OnParametersSetAsync() {
        if (ChatEntry != null)
            _author = await Authors.Get(Session, ChatEntry.ChatId, ChatEntry.AuthorId, CancellationToken.None).ConfigureAwait(false);
    }
}
