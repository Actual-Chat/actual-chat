@using ActualChat.Chat
@using ActualChat.UI.Blazor.Services
@using ActualChat.Users
@namespace ActualChat.UI.Blazor.Components

<div class="image-viewer-header">
    @if (ChatEntry != null && _author != null) {
        <ButtonRound Class="image-header-btn mobile" Click="CloseClick">
            <i class="icon-close text-xl"></i>
        </ButtonRound>
        <div class="flex-x w-full mx-4 items-center gap-x-2">
            <AvatarCircle Avatar="@_author.Avatar" Size="SquareSize.Size10"/>
            <div class="grid">
                <AvatarName Avatar="@_author.Avatar" Class="text-base md:text-sm text-icons-02 max-h-6 overflow-y-hidden truncate"/>
                <LiveTimeDeltaText Class="text-xs md:text-xxs text-icons-02" Moment="@ChatEntry.BeginsAt"/>
            </div>
        </div>
    }
    <div class="flex-x md:gap-x-2">
        @if (_enableIncompleteUI) {
            <ButtonRound Class="image-header-btn">
                <i class="icon-share"></i>
            </ButtonRound>
            <ButtonRound Class="image-header-btn">
                <i class="icon-download"></i>
            </ButtonRound>
        }
        <ButtonRound Class="image-header-btn desktop" Click="CloseClick">
            <i class="icon-close"></i>
        </ButtonRound>
    </div>
</div>

@code {
    private Author? _author;
    private bool _enableIncompleteUI;

    [Inject] private Features Features { get; init; } = null!;
    [Inject] private IChats Chats { get; init; } = null!;
    [Inject] private Session Session { get; init; } = null!;
    [Inject] private IAuthors Authors { get; init; } = null!;

    [Parameter] public ChatEntry? ChatEntry { get; set; }
    [Parameter] public EventCallback CloseClick { set; get; }

    protected override async Task OnInitializedAsync() {
        _enableIncompleteUI = await Features.Get<UIFeatures.EnableIncompleteUI, bool>(CancellationToken.None);
    }

    protected override async Task OnParametersSetAsync() {
        if (ChatEntry != null) {
            _author = await Authors.Get(Session, ChatEntry.ChatId, ChatEntry.AuthorId, CancellationToken.None).ConfigureAwait(false);
        }
    }

}
