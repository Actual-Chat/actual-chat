@using ActualChat.Chat
@using ActualChat.UI.Blazor.Module
@implements IAsyncDisposable
@implements IModalView<VisualMediaViewerModal.Model>
@namespace ActualChat.UI.Blazor.Components

@{
    var selectedAttachment = _attachments.ElementAtOrDefault(_selectedSlide);
    var selectedAttachmentDownloadUrl = selectedAttachment != null
        ? UrlMapper.ContentUrl(selectedAttachment.Media.ContentId)
        : ModalModel.Url;
}

<ModalFrame Class="image-viewer-modal">
    <VisualMediaViewerHeader
        CloseClick="CloseModal"
        ChatEntry="@ModalModel.ChatEntry"
        DownloadUrl="@selectedAttachmentDownloadUrl"
        ContentType="@(selectedAttachment?.Media.ContentType ?? "")"/>
    <swiper-container
        @ref="@Ref"
        style="--swiper-navigation-color: #fff; --swiper-pagination-color: #fff"
        class="media-swiper"
        space-between="10"
        zoom="true"
        mousewheel="true"
        initial-slide="@_selectedSlide"
        thumbs-swiper=".media-preview-swiper"
        navigation="true">
        @foreach (var attachment in _attachments) {
            var url = UrlMapper.ContentUrl(attachment.Media.ContentId);
            @if (attachment.IsSupportedImage()) {
                <swiper-slide>
                    <div class="swiper-zoom-container">
                        <img src="@url" alt=""/>
                    </div>
                </swiper-slide>
            } else if (attachment.IsSupportedVideo()) {
                <swiper-slide>
                    <div class="swiper-zoom-container">
                        <video
                            playsinline
                            controls
                            preload="auto">
                            <source src="@url" type="@attachment.Media.ContentType"/>
                        </video>
                    </div>
                </swiper-slide>
            }
        }
    </swiper-container>
    @if (_attachments.Count > 1) {
        <swiper-container
            class="media-preview-swiper image-viewer-footer"
            space-between="10"
            slides-per-view="@_attachments.Count"
            free-mode="true"
            watch-slides-progress="true">
            @foreach (var attachment in _attachments) {
                @if (attachment.IsSupportedImage()) {
                    var previewUrl = GetPreviewUrl(attachment);
                    <swiper-slide>
                        <image-skeleton src="@previewUrl"/>
                    </swiper-slide>
                } else if (attachment.IsSupportedVideo()) {
                    <swiper-slide>
                        <VideoAttachmentThumbnail Attachment="attachment"/>
                    </swiper-slide>
                }
            }
        </swiper-container>
    }
</ModalFrame>

@code {
    private static readonly string JSCreateMethod = $"{BlazorUICoreModule.ImportName}.VisualMediaViewer.create";
    private List<TextEntryAttachment> _attachments = new();
    private int _selectedSlide;
    private DotNetObjectReference<VisualMediaViewerModal> BlazorRef { get; set; } = null!;
    private IJSObjectReference JSRef { get; set; } = null!;
    private ElementReference Ref { get; set; }

    [Inject] private UrlMapper UrlMapper { get; init; } = null!;
    [Inject] private IJSRuntime JS { get; init; } = null!;

    [CascadingParameter] public Modal Modal { get; set; } = null!;
    [Parameter] public Model ModalModel { get; set; } = null!;

    public async ValueTask DisposeAsync() {
        await JSRef.DisposeSilentlyAsync("dispose");
        JSRef = null!;
        BlazorRef.DisposeSilently();
        BlazorRef = null!;
    }

    protected override void OnInitialized() {
        _attachments = ModalModel.ChatEntry?.Attachments.ToList() ?? new ();
        var selectedAttachment = _attachments.FirstOrDefault(x => OrdinalIgnoreCaseEquals(UrlMapper.ContentUrl(x.Media.ContentId), ModalModel.Url));
        if (selectedAttachment != null) {
            _selectedSlide = _attachments.IndexOf(selectedAttachment);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (firstRender) {
            BlazorRef = DotNetObjectReference.Create(this);
            JSRef = await JS.InvokeAsync<IJSObjectReference>(JSCreateMethod, Ref, BlazorRef);
        }
    }

    private void CloseModal()
        => Modal.Close();

    [JSInvokable]
    public void Close()
        => CloseModal();

    [JSInvokable]
    public void SlideChanged(int selectedSlide) {
        _selectedSlide = selectedSlide;
        StateHasChanged();
    }

    private string GetPreviewUrl(TextEntryAttachment attachment) {
        var url = UrlMapper.ContentUrl(attachment.Media.ContentId);

        if (attachment.IsGif() || attachment.IsSvg()) {
            return url; // currently image proxy fails on large gifs
        }

        if (attachment.IsSupportedImage()) {
            // this resolution is already cached in the media gallery
            return UrlMapper.ImagePreviewUrl(url, null, (int?)Constants.Attachments.MaxActualResolution.Y);
        }

        return url;
    }

    public sealed record Model(
        string Url,
        string? CachedImageUrl,
        string? AltText,
        ChatEntry? ChatEntry = default);
}
