@using ActualChat.UI.Blazor.Services
@using ActualChat.Chat
@using ActualChat.UI.Blazor.Module
@implements IAsyncDisposable
@implements IModalView<VisualMediaViewerModal.Model>
@namespace ActualChat.UI.Blazor.Components

@{
    List<TextEntryAttachment>? mediaList = null;
    if (ModalModel.ChatEntry?.Attachments.Count > 0) {
        mediaList = ModalModel.ChatEntry.Attachments.ToList();
    }

    RenderFragment RenderMedia(TextEntryAttachment media) {
        var cls = "gallery-item";
        var id = media.Media.ContentId;
        var url = UrlMapper.ContentUrl(media.Media.ContentId);
        string? previewUrl = null;
        if (media.IsGif()) {
            previewUrl = url; // currently image proxy fails on large gifs
        } else if(media.IsImage()) {
            previewUrl = UrlMapper.ImagePreviewUrl(url, 80, 54);
        }
        if (url != ModalModel.Url)
            cls += " inactive";
        else
            cls += " active";
        return @<div class="@cls" id="@id">
                   @if (media.IsVideo()) {
                       <video preload="metadata">
                           <source src="@url#t=,5"/>
                       </video>
                   } else {
                       <img draggable="false" class="inline skeleton" src="@previewUrl" alt="image" onload="this.classList.remove('skeleton')"/>
                   }
               </div>;
    }
}

<ModalFrame Class="image-viewer-modal">
    <VisualMediaViewerHeader CloseClick="CloseModal" ChatEntry="@ModalModel.ChatEntry" DownloadUrl="@ModalModel.Url"/>
    <div @ref="@Ref" class="image-viewer-content invisible">
        @if (mediaList != null) {
            foreach (var media in mediaList) {
                var url = UrlMapper.ContentUrl(media.Media.ContentId);
                var id = media.Media.ContentId;
                var mediaCls = url == ModalModel.Url ? "active" : "inactive";
                @if (media.IsVideo()) {
                    <video
                        id="@id"
                        class="video-container @mediaCls"
                        width="@media.Media.Width"
                        height="@media.Media.Height"
                        preload="auto"
                        autoplay controls
                        onclick="this.play()">
                        <source src="@url"/>
                    </video>
                } else {
                    <img class="image-container @mediaCls"
                         id="@id"
                         width="@media.Media.Width"
                         height="@media.Media.Height"
                         src="@url" alt="@(ModalModel.AltText.NullIfEmpty() ?? "Image attachment")"/>
                }
            }
        }
    </div>
    @if (mediaList?.Count > 1) {
        <div class="c-previous invisible">
            <i class="icon-gallery-arrow-left text-3.5xl"></i>
        </div>
        <div class="c-next invisible">
            <i class="icon-gallery-arrow-right text-3.5xl"></i>
        </div>
    }
    <div class="image-viewer-footer">
        <div class="footer-gallery">
            @if (mediaList != null) {
                foreach (var media in mediaList) {
                    @RenderMedia(media) ;
                }
            }

        </div>
    </div>
</ModalFrame>

@code {
    private static readonly string JSCreateMethod = $"{BlazorUICoreModule.ImportName}.VisualMediaViewer.create";

    private DotNetObjectReference<VisualMediaViewerModal> BlazorRef { get; set; } = null!;
    private IJSObjectReference JSRef { get; set; } = null!;
    private ElementReference Ref { get; set; }

    [Inject] private UrlMapper UrlMapper { get; init; } = null!;
    [Inject] private ComponentIdGenerator IdGenerator { get; init; } = null!;
    [Inject] private IJSRuntime JS { get; init; } = null!;
    [Inject] private ILogger<VisualMediaViewerModal> Log { get; init; } = null!;

    [CascadingParameter] public Modal Modal { get; set; } = null!;
    [Parameter] public Model ModalModel { get; set; } = null!;

    public async ValueTask DisposeAsync()
    {
        await JSRef.DisposeSilentlyAsync("dispose");
        JSRef = null!;
        BlazorRef.DisposeSilently();
        BlazorRef = null!;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (firstRender) {
            BlazorRef = DotNetObjectReference.Create(this);
            JSRef = await JS.InvokeAsync<IJSObjectReference>(JSCreateMethod, Ref, BlazorRef);
        }
    }

    private void CloseModal()
        => Modal.Close();

    [JSInvokable]
    public void LogJS(string text)
        => Log.LogInformation(text);

    [JSInvokable]
    public void Close()
        => CloseModal();

    [JSInvokable]
    public void ChangeMedia(string mediaId) {
        var url = UrlMapper.ContentUrl(mediaId);
        ModalModel = new Model(url, "", ModalModel.ChatEntry);
        StateHasChanged();
    }

    public sealed record Model(
        string Url,
        string? AltText,
        ChatEntry? ChatEntry = default);
}
