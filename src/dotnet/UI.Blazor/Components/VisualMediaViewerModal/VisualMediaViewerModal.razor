@using ActualChat.Chat
@using ActualChat.UI.Blazor.Module
@using System.Diagnostics.CodeAnalysis
@implements IAsyncDisposable
@implements IModalView<VisualMediaViewerModal.Model>
@namespace ActualChat.UI.Blazor.Components

@{
    RenderFragment RenderThumbnail(TextEntryAttachment attachment) {
        var id = attachment.MediaId;
        var url = UrlMapper.ContentUrl(attachment.Media.ContentId);
        string? previewUrl = null;
        if (attachment.IsGif() || attachment.IsSvg()) {
            previewUrl = url; // currently image proxy fails on large gifs
        } else if(attachment.IsSupportedImage()) {
            previewUrl = UrlMapper.ImagePreviewUrl(url, 80, 54);
        }
        var activeCls = IsActive(id) ? " active" : " inactive";
        return @<div class="gallery-item @activeCls" id="@id">
                   @if (attachment.IsSupportedVideo()) {
                       <video preload="metadata" playsinline>
                           <source src="@url#t=,5" type="@attachment.Media.ContentType"/>
                       </video>
                   } else {
                       <image-skeleton
                           class="loading"
                           src="@previewUrl"
                       />
                   }
               </div>;
    }

    var selectedAttachment = _attachments?.FirstOrDefault(x => x.MediaId == _activeMediaId);
    var selectedAttachmentDownloadUrl = selectedAttachment != null ? UrlMapper.ContentUrl(selectedAttachment.Media.ContentId) : ModalModel.Url;
}

<ModalFrame Class="image-viewer-modal">
    <VisualMediaViewerHeader CloseClick="CloseModal" ChatEntry="@ModalModel.ChatEntry" DownloadUrl="@selectedAttachmentDownloadUrl" ContentType="@(selectedAttachment?.Media.ContentType ?? "")"/>
    <div @ref="@Ref" class="image-viewer-content invisible">
        @if (_attachments != null) {
            foreach (var attachment in _attachments) {
                var url = UrlMapper.ContentUrl(attachment.Media.ContentId);
                var id = attachment.MediaId;
                var idCached = "cached:" + id;
                var mediaCls = IsActive(id) ? "active" : "inactive";
                var cachedImageUrl = url == ModalModel.Url
                    ? ModalModel.CachedImageUrl
                    : UrlMapper.ImagePreviewUrl(url, Constants.Attachments.MaxResolution);
                @if (attachment.IsSupportedVideo()) {
                    <video
                        id="@id"
                        class="video-container c-full-media @mediaCls"
                        width="@attachment.Media.Width"
                        height="@attachment.Media.Height"
                        preload="auto"
                        controls>
                        <source src="@url" type="@attachment.Media.ContentType"/>
                    </video>
                } else {
                    <img class="image-container c-full-media @mediaCls"
                         id="@id"
                         width="@attachment.Media.Width"
                         height="@attachment.Media.Height"
                         src="@url"
                         alt="@(ModalModel.AltText.NullIfEmpty() ?? "Image attachment")"
                         />
                    <img id="@idCached"
                         class="image-container @mediaCls"
                         width="@attachment.Media.Width"
                         height="@attachment.Media.Height"
                         src="@cachedImageUrl"
                         alt="@(ModalModel.AltText.NullIfEmpty() ?? "Image attachment")"/>

                }
            }
        }
    </div>
    @if (_attachments?.Count > 1) {
        <div class="c-previous invisible">
            <i class="icon-gallery-arrow-left text-3.5xl"></i>
        </div>
        <div class="c-next invisible">
            <i class="icon-gallery-arrow-right text-3.5xl"></i>
        </div>
    }
    <div class="image-viewer-footer">
        <div class="footer-gallery">
            @if (_attachments != null) {
                foreach (var attachment in _attachments) {
                    @RenderThumbnail(attachment)
                }
            }
        </div>
    </div>
</ModalFrame>

@code {
    private static readonly string JSCreateMethod = $"{BlazorUICoreModule.ImportName}.VisualMediaViewer.create";
    private List<TextEntryAttachment>? _attachments;
    private MediaId _activeMediaId;

    private DotNetObjectReference<VisualMediaViewerModal> BlazorRef { get; set; } = null!;
    private IJSObjectReference JSRef { get; set; } = null!;
    private ElementReference Ref { get; set; }

    [Inject] private UrlMapper UrlMapper { get; init; } = null!;
    [Inject] private IJSRuntime JS { get; init; } = null!;
    [Inject] private ILogger<VisualMediaViewerModal> Log { get; init; } = null!;

    [CascadingParameter] public Modal Modal { get; set; } = null!;
    [Parameter] public Model ModalModel { get; set; } = null!;

    [DynamicDependency(DynamicallyAccessedMemberTypes.All, typeof(VisualMediaViewerModal))]
    public VisualMediaViewerModal() { }

    public async ValueTask DisposeAsync()
    {
        await JSRef.DisposeSilentlyAsync("dispose");
        JSRef = null!;
        BlazorRef.DisposeSilently();
        BlazorRef = null!;
    }

    protected override void OnInitialized() {
        _attachments = ModalModel.ChatEntry?.Attachments.ToList();
        var selectedAttachment = _attachments?.FirstOrDefault(x => OrdinalIgnoreCaseEquals(UrlMapper.ContentUrl(x.Media.ContentId), ModalModel.Url));
        _activeMediaId = selectedAttachment?.MediaId ?? MediaId.None;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (firstRender) {
            BlazorRef = DotNetObjectReference.Create(this);
            JSRef = await JS.InvokeAsync<IJSObjectReference>(JSCreateMethod, Ref, BlazorRef);
        }
    }

    private void CloseModal()
        => Modal.Close();

    private bool IsActive(MediaId id)
        => _activeMediaId.IsNone || id == _activeMediaId;

    [JSInvokable]
    public void LogJS(string text)
        => Log.LogInformation(text);

    [JSInvokable]
    public void Close()
        => CloseModal();

    [JSInvokable]
    public void ChangeMedia(string mediaId) {
        _activeMediaId = new MediaId(mediaId);
        StateHasChanged();
    }

    public sealed record Model(
        string Url,
        string? CachedImageUrl,
        string? AltText,
        ChatEntry? ChatEntry = default);
}
