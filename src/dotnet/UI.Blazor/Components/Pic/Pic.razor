@using Microsoft.Toolkit.HighPerformance
@using ActualChat.UI.Blazor.Services
@using ActualChat.Media
@namespace ActualChat.UI.Blazor.Components
@{
    var sizeClass = $"pic-size-{(int)Size}";
    var roundedClass = IsSquare ? "" : "pic-rounded ";
    var cursorClass = Click.HasDelegate ? "pic-show-cursor" : "";
    var blurClass = IsBlurred ? "pic-blurred" : "";
}

<div class="@Class @sizeClass @roundedClass @blurClass">
    @if (!_pictureUrl.IsNullOrEmpty()) {
        <image-skeleton
            class="pic-image @sizeClass @cursorClass"
            src="@_pictureUrl"
            @onclick="@OnPictureClick"
            @onclick:preventDefault="true"/>
    } else if (!_avatarKey.IsNullOrEmpty()) {
        switch (AvatarKind) {
        case AvatarKind.Beam:
            <beam-avatar
                class="pic-generated @sizeClass"
                blurred="@IsBlurred"
                key="@_avatarKey" />
            break;
        case AvatarKind.Marble:
            var title = Title.IsNullOrEmpty() || HideTitle ? "" : char.ToUpperInvariant(Title[0]).ToString();
            <marble-avatar
                class="pic-generated @sizeClass"
                blurred="@IsBlurred"
                key="@_avatarKey"
                title="@title"/>
            break;
        }
    } else if (NoPicture != null) {
        @NoPicture
    }
</div>

@code {
    private string _pictureUrl = "";
    private string _avatarKey = "";

    [Inject] private UrlMapper UrlMapper { get; init; } = null!;
    [Inject] private VisualMediaViewerUI VisualMediaViewerUI { get; init; } = null!;

    [Parameter] public string Class { get; set; } = "";
    [Parameter] public string Title { get; set; } = "";
    [Parameter] public Picture? Picture { get; set; }
    [Parameter] public SquareSize Size { get; set; } = SquareSize.Size10;
    [Parameter] public bool IsSquare { get; set; }
    [Parameter] public bool HideTitle { get; set; }
    [Parameter] public bool IsBlurred { get; set; }
    [Parameter] public AvatarKind AvatarKind { get; set; } = AvatarKind.Beam;
    [Parameter] public string? AvatarKey { get; set; }
    [Parameter] public RenderFragment? NoPicture { get; set; }
    [Parameter] public EventCallback<MouseEventArgs> Click { get; set; }

    protected override void OnParametersSet() {
        _avatarKey = AvatarKey ?? Picture?.AvatarKey ?? "";
        _pictureUrl = UrlMapper.PicturePreview128Url(Picture);
    }

    private async Task OnPictureClick(MouseEventArgs arg) {
        await Click.InvokeAsync(arg).ConfigureAwait(false);
    }
}
