@using Microsoft.Toolkit.HighPerformance
@using ActualChat.UI.Blazor.Services
@using ActualChat.Media
@namespace ActualChat.UI.Blazor.Components
@{
    var picClass = IsBlurred ? "pic-blurred" : $"pic-size-{(int)Size}";
    if (!IsSquare) {
        picClass += " pic-rounded";
    } else {
        picClass += " pic-square";
    }
    if (Click.HasDelegate)
        picClass += " pic-show-cursor";
    var hasPicture = !_pictureUrl.IsNullOrEmpty();
    var isSvg = hasPicture && Path.GetExtension(_pictureUrl).Equals(".svg", StringComparison.OrdinalIgnoreCase);
    if (IsBlurred && isSvg) {
        picClass += " pic-svg";
        _pictureUrl += "#svgView(preserveAspectRatio(none))";
    }
}

<div class="pic @Class @picClass">
    @if (hasPicture) {
        <image-skeleton
            class="pic-image @ImageSkeletonClass"
            src="@_pictureUrl"
            @onclick="@OnPictureClick"
            @onclick:preventDefault="true"/>
    } else if (!_avatarKey.IsNullOrEmpty()) {
        switch (AvatarKind) {
            case AvatarKind.Beam:
                <beam-avatar
                    class="pic-generated"
                    key="@_avatarKey"/>
                break;
            case AvatarKind.Marble:
                var title = Title.IsNullOrEmpty() || HideTitle ? "" : char.ToUpperInvariant(Title[0]).ToString();
                <marble-avatar
                    class="pic-generated"
                    key="@_avatarKey"
                    title="@title"
                    doNotBlur="@IsBlurred"/>
                break;
        }
    } else if (NoPicture != null) {
        @NoPicture
    }
</div>

@code {
    private string _pictureUrl = "";
    private string _avatarKey = "";

    [Inject] private UIHub Hub { get; init; } = null!;
    private UrlMapper UrlMapper => Hub.UrlMapper();
    private VisualMediaViewerUI VisualMediaViewerUI => Hub.VisualMediaViewerUI;

    [Parameter] public string Class { get; set; } = "";
    [Parameter] public string ImageSkeletonClass { get; set; } = "";
    [Parameter] public string Title { get; set; } = "";
    [Parameter] public Picture? Picture { get; set; }
    [Parameter] public SquareSize Size { get; set; } = SquareSize.Size10;
    [Parameter] public bool IsSquare { get; set; }
    [Parameter] public bool HideTitle { get; set; }
    [Parameter] public bool IsBlurred { get; set; }
    [Parameter] public AvatarKind AvatarKind { get; set; } = AvatarKind.Beam;
    [Parameter] public string? AvatarKey { get; set; }
    [Parameter] public RenderFragment? NoPicture { get; set; }
    [Parameter] public EventCallback<MouseEventArgs> Click { get; set; }
    [Parameter] public bool ShowFullSizeImage { get; set; }

    protected override void OnParametersSet() {
        _avatarKey = AvatarKey ?? Picture?.AvatarKey ?? "";
        _pictureUrl = !ShowFullSizeImage ? UrlMapper.PicturePreview128Url(Picture) : UrlMapper.PicturePreviewUrl(Picture);
    }

    private async Task OnPictureClick(MouseEventArgs arg) {
        await Click.InvokeAsync(arg).ConfigureAwait(false);
    }
}
