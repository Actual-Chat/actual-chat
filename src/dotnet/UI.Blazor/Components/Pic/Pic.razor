@using Microsoft.Toolkit.HighPerformance
@using ActualChat.UI.Blazor.Services
@using ActualChat.Media
@namespace ActualChat.UI.Blazor.Components
@{
    var sizeClass = $"pic-size-{(int)Size}";
    var cursorClass = EnableImagePreview || Click.HasDelegate ? "pic-show-cursor" : "";
}

<div class="@Class @sizeClass">
    @if (!_pictureUrl.IsNullOrEmpty()) {
        <image-skeleton
            class="pic-image @sizeClass @cursorClass"
            src="@_pictureUrl"
            @onclick="@OnPictureClick"
            @onclick:preventDefault="true"/>
    } else if (!_avatarKey.IsNullOrEmpty()) {
        <beam-avatar name="@_avatarKey" />
    } else if (NoPicture != null) {
        @NoPicture
    } else {
        <marble-avatar
            name="@((Title.NullIfEmpty() ?? " ").GetDjb2HashCode())"
            title="@((Title.NullIfEmpty() ?? " ")[..1])"
            class="pic-generated @sizeClass">
        </marble-avatar>
    }
</div>

@code {
    private string _pictureUrl = "";
    private string _avatarKey = "";

    [Inject] private UrlMapper UrlMapper { get; init; } = null!;
    [Inject] private VisualMediaViewerUI VisualMediaViewerUI { get; init; } = null!;

    [Parameter] public string Class { get; set; } = "";
    [Parameter] public string Title { get; set; } = "";
    [Parameter] public Picture? Picture { get; set; }
    [Parameter] public SquareSize Size { get; set; } = SquareSize.Size10;
    [Parameter] public bool EnableImagePreview { get; set; }
    [Parameter] public RenderFragment? NoPicture { get; set; }
    [Parameter] public EventCallback<MouseEventArgs> Click { get; set; }

    protected override void OnParametersSet() {
        if (Picture != null) {
            _pictureUrl = UrlMapper.PicturePreview128Url(Picture);
            _avatarKey = _pictureUrl.IsNullOrEmpty() ? Picture.AvatarKey ?? "" : "";
        } else {
            _avatarKey = "";
            _pictureUrl = "";
        }
    }

    private async Task OnPictureClick(MouseEventArgs arg) {
        await Click.InvokeAsync(arg).ConfigureAwait(false);

        if (EnableImagePreview && Picture is { MediaContent: {} mediaContent }) {
            var url = UrlMapper.ContentUrl(mediaContent.ContentId);
            await VisualMediaViewerUI.Show(url);
        }
    }
}
