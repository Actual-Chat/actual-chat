@namespace ActualChat.UI.Blazor.Components
@using ActualChat.UI.Blazor.Module
@using Stl.Extensibility
@implements IFeatureBackend
@implements IAsyncDisposable
@implements IModalView<FeatureRequestModal.Model>
@attribute [MatchFor(typeof(Model), typeof(IModalView))]

<DialogFrame Title="Sorry, this feature is not implemented yet">
    <Body>
        @{
            var title = ModalModel.FeatureTitle;
            var featureTitle = title.IsNullOrEmpty() ? "This" : title;
        }

        <div>
            <p>Help us to prioritize features.</p>
            <p>Please vote how <code class="text-code">@featureTitle</code> feature is important for you.</p>
            <p>1 = not important, 5 = very important!</p>
        </div>

        <div @ref="Ref" class="flex justify-center my-4">
            @for (var i = 1; i <= 5; i++) {
                var cls = _rating >= i ? "fa-star" : "fa-star-o";
                var rating = i;
                var id = "rating-button-" + (rating - 1);
                <button class="rating-button px-1 md:px-2" role="button" @onclick="_ => SetRating(rating)">
                    <i class="fa @cls fa-2x rating-icon" aria-hidden="true" id="@id"></i>
                </button>
            }
        </div>
        <div>
            <label>Comment:</label>
            <textarea class="feedback-textarea border border-bg-03 w-full" rows="5" @bind="_comment" @bind:event="oninput"></textarea>
        </div>
    </Body>
    <Buttons>
        <div class="btn-group">
            <Button Class="btn-secondary" Click="OnCancel" IsAutofocused="true">Cancel</Button>
            <Button Click="OnSubmit">Send Feedback</Button>
        </div>
    </Buttons>
</DialogFrame>

@code {
    private int _rating;
    private string _comment = "";

    [Inject] private IJSRuntime JS { get; init; } = null!;

    private DotNetObjectReference<IFeatureBackend> BlazorRef { get; set; } = null!;
    private IJSObjectReference JSRef { get; set; } = null!;
    private ElementReference Ref { get; set; }

    [CascadingParameter] public BlazoredModalInstance ModalInstance { get; set; } = null!;
    [Parameter] public Model ModalModel { get; set; } = null!;

    public async ValueTask DisposeAsync()
    {
        await JSRef.DisposeSilentlyAsync("dispose");
        JSRef = null!;
        BlazorRef.DisposeSilently();
        BlazorRef = null!;
    }

    [JSInvokable]
    private async Task SetRating(int rating) {
        _rating = rating == _rating ? 0 : rating;
        await JSRef.InvokeVoidAsync("updateRating", _rating - 1);
    }

    private void OnSubmit() {
        ModalModel.Comment = _comment;
        ModalModel.Rating = _rating;
        ModalInstance.CloseAsync(ModalResult.Ok(true));
    }

    private void OnCancel() {
        ModalInstance.CloseAsync(ModalResult.Cancel());
    }

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (firstRender) {
            BlazorRef = DotNetObjectReference.Create<IFeatureBackend>(this);
            JSRef = await JS.InvokeAsync<IJSObjectReference>(
                $"{BlazorUICoreModule.ImportName}.Feedback.create",
                Ref, BlazorRef
                );
        }
    }

    public class Model {
        public string? FeatureTitle { get; init; }
        public int Rating { get; set; }
        public string Comment { get; set; } = "";
    }
}
