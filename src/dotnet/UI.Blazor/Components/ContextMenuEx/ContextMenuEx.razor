@using ActualChat.UI.Blazor.Module
@namespace ActualChat.UI.Blazor.Components
@implements IAsyncDisposable

<div class="ac-menu">
    @if (_menuType != null) {
        <CascadingValue Value="@this" IsFixed="true">
            <DynamicComponent Type="@_menuType" Parameters="@_parameters" />
        </CascadingValue>
    }
</div>

@code {
    private Type? _menuType;
    private Dictionary<string,object>? _parameters;
    private IJSObjectReference _jsRef = null!;
    private DotNetObjectReference<ContextMenuEx> _blazorRef = null!;

    [Inject] private IJSRuntime JS { get; init; } = null!;

    [JSInvokable]
    public Task RenderMenu(string trigger) {
        var (menu, argument) = MenuTrigger.Parse(trigger);
        _menuType = MenuUI.Get(menu);
        _parameters = argument.IsNullOrEmpty()
            ? null
            : new() {
                { "Argument", argument },
            };
        StateHasChanged();
        return Task.CompletedTask;
    }

    [JSInvokable]
    public Task HideMenu() {
        _menuType = null;
        _parameters = null;
        StateHasChanged();
        return Task.CompletedTask;
    }

    public async Task ShowMenu() {
        await _jsRef.InvokeVoidAsync("showMenu");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (firstRender) {
            _blazorRef = DotNetObjectReference.Create(this);
            var identifier = $"{BlazorUICoreModule.ImportName}.ContextMenu.create";
            _jsRef = await JS.InvokeAsync<IJSObjectReference>(
                identifier,
                _blazorRef);
        }
    }

    public async ValueTask DisposeAsync() {
        await _jsRef.DisposeSilentlyAsync("dispose");
        _jsRef = null!;
        _blazorRef.DisposeSilently();
        _blazorRef = null!;
    }
}
