@namespace ActualChat.UI.Blazor.Components
@typeparam TItem
@using ActualChat.UI.Blazor.Components.Internal
@inherits ComputedStateComponent<VirtualListData<TItem>>
@{
    // var plan = LastPlan = Plan;
    // DebugLog?.LogDebug("Rendering: #{RenderIndex}", Plan.RenderIndex);

    var isEndAligned = AlignmentEdge.IsEnd();
    const string flexBase = "flex flex-nowrap items-stretch content-start justify-start";
    var flexDir = isEndAligned ? "flex-col-reverse" : "flex-col";
    var scrollContainerFlexClass = $"{flexBase} {flexDir}";
    const string flexClass = $"{flexBase} flex-col";
    const string invFlexClass = $"{flexBase} flex-col-reverse";

    var renderIndex = RenderIndex++;
    var spacerSize = Data.HasVeryFirstItem ? 0 : SpacerSize;
    var endSpacerSize = Data.HasVeryLastItem ? 0 : SpacerSize;
    var startExpansion = Data.Items
        .TakeWhile(i => KeyComparer.Compare(i.Key, Query.InclusiveRange.Start) < 0)
        .Sum(i => i.CountAs);
    var endExpansion = Data.Items
        .SkipWhile(i => KeyComparer.Compare(i.Key, Query.InclusiveRange.End) <= 0)
        .Sum(i => i.CountAs);
    var renderState = new VirtualListRenderState {
        RenderIndex = renderIndex,
        Query = Query,
        SpacerSize = spacerSize,
        EndSpacerSize = endSpacerSize,
        StartExpansion = startExpansion,
        EndExpansion = endExpansion,
        // ScrollHeight = plan.ClientSideState?.ScrollHeight,
        // ScrollTop = plan.ClientSideState?.ScrollTop,
        // ViewportHeight = plan.ClientSideState?.ViewportHeight,
        HasVeryFirstItem = Data.HasVeryFirstItem,
        HasVeryLastItem = Data.HasVeryLastItem,
        ScrollToKey = Data.ScrollToKey,
        // UseSmoothScroll = UseSmoothScroll,
        // ItemSizes = plan.Items.ToDictionary(i => i.Key.Value, i => i.Range.Size(), StringComparer.Ordinal),
        // HasUnmeasuredItems = plan.HasUnmeasuredItems,
        // StickyEdge = plan.StickyEdge,
        Items = Data.Items.ToDictionary(i => i.Key.Value, i => new VirtualListRenderItem(i)),
    };
    // ClientSideState = plan.ClientSideState ?? ClientSideState;
    // RequestDataUpdate();
    var items = isEndAligned ? Data.Items.Reverse() : Data.Items;
    LastData = Data;
}

<div @ref="Ref"
     class="virtual-list @scrollContainerFlexClass @Class"
     style="@Style">
    <div class="data render-state hidden @flexClass flex-none">
        <div @key="@("<RenderState>:" + renderIndex)"
             class="data render-state-data">
            @SystemJsonSerializer.Default.Write(renderState)
        </div>
    </div>

    @if (!isEndAligned) {
        <div @key="@("<Spacer>")"
             class="spacer spacer-start overflow-y-hidden @invFlexClass flex-none"
             style="height: @(spacerSize)px">
            <SkeletonContainer Class="@flexClass">
                @for (var i = -SkeletonCount; i < 0; i++) {
                    <div @key="@i" class="skeleton">
                        @Skeleton(i)
                    </div>
                }
            </SkeletonContainer>
        </div>
    } else {
        <div @key="@("<EndSpacer>")"
             class="spacer spacer-end overflow-y-hidden @flexClass flex-none"
             style="height: @(endSpacerSize)px">
            <SkeletonContainer Class="@flexClass">
                @for (var i = 0; i < SkeletonCount; ++i) {
                    <div @key="@i" class="skeleton">
                        @Skeleton(i)
                    </div>
                }
            </SkeletonContainer>
        </div>
    }

    @foreach (var item in items) {
        <div @key="item.Key"
             class="item flex-none"
             data-key="@item.Key">
            @Item(item)
        </div>
    }

    @if (isEndAligned) {
        <div @key="@("<Spacer>")"
             class="spacer spacer-start overflow-y-hidden @invFlexClass flex-none"
             style="height: @(spacerSize)px">
            <SkeletonContainer Class="@flexClass">
                @for (var i = -SkeletonCount; i < 0; i++) {
                    <div @key="@i" class="skeleton">
                        @Skeleton(i)
                    </div>
                }
            </SkeletonContainer>
        </div>
    } else {
        <div @key="@("<EndSpacer>")"
             class="spacer spacer-end overflow-y-hidden @flexClass flex-none"
             style="height: @(endSpacerSize)px">
            <SkeletonContainer Class="@flexClass">
                @for (var i = 0; i < SkeletonCount; ++i) {
                    <div @key="@i" class="skeleton">
                        @Skeleton(i)
                    </div>
                }
            </SkeletonContainer>
        </div>
    }

    <div @key="@("<RenderIndex>")"
         data-render-index="@renderIndex"
         class="data render-index hidden flex-none">
    </div>
</div>
