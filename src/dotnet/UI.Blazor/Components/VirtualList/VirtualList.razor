@namespace ActualChat.UI.Blazor.Components
@typeparam TItem
@using ActualChat.UI.Blazor.Components.Internal
@inherits ComputedStateComponent<VirtualListData<TItem>>
@{
    // Console.Out.WriteLine("VirtualList.Render() = "  + Data.KeyRange + " !" + Data.GetHashCode());
    var renderIndex = RenderIndex++;
    // ReSharper disable once ConditionIsAlwaysTrueOrFalseAccordingToNullableAPIContract
    // We are unable to scroll to the right location until JS client part of the Virtual List created
    var hasJsComponentCreated = JSRef != null;
    var data = Data;
    var spacerSize = SpacerSize;
    var endSpacerSize = SpacerSize;
    if (data.HasVeryFirstItem) {
        spacerSize = 0;
    }
    if (data.HasVeryLastItem) {
        endSpacerSize = 0;
    }

    if (!hasJsComponentCreated || data.Tiles.Count == 0)
        spacerSize = 1000;

    var containerClass = !hasJsComponentCreated
        ? "hide"
        : "";

    var startExpansion = Query.IsNone
        ? 0
        : data.Tiles
            .SelectMany(t => t.Items)
            .TakeWhile(i => KeyComparer.Compare(i.Key, Query.KeyRange.Start) < 0)
            .Sum(i => i.CountAs);
    var endExpansion = Query.IsNone
        ? 0
        : data.Tiles
            .SelectMany(t => t.Items)
            .SkipWhile(i => KeyComparer.Compare(i.Key, Query.KeyRange.End) <= 0)
            .Sum(i => i.CountAs);
    var renderState = new VirtualListRenderState {
        RenderIndex = renderIndex,
        Query = Query,
        KeyRange = data.KeyRange,
        SpacerSize = spacerSize,
        EndSpacerSize = endSpacerSize,
        RequestedStartExpansion = data.RequestedStartExpansion,
        RequestedEndExpansion = data.RequestedEndExpansion,
        StartExpansion = startExpansion,
        EndExpansion = endExpansion,
        HasVeryFirstItem = data.HasVeryFirstItem,
        HasVeryLastItem = data.HasVeryLastItem,
        ScrollToKey = data.ScrollToKey,
    };
    var tiles = data.Tiles;
    LastData = data;
    Query = VirtualListDataQuery.None;
}

<div @ref="Ref"
     class="@Class virtual-list"
     style="@Style">

    <div @key="@VirtualListSpecialKeys.RenderIndex"
         data-render-index="@renderIndex"
         class="data render-index">
    </div>

    <div @key="@VirtualListSpecialKeys.RenderState"
         class="data render-state">
        @* RenderAtDepth ensures the JSON here is rendered once every item is rendered *@
        <RenderAtDepth RenderKey="@renderState" Depth="5">
            @SystemJsonSerializer.Default.Write(context)
        </RenderAtDepth>
    </div>

    <div @key="@VirtualListSpecialKeys.Spacer"
         class="c-spacer-start"
         style="height: @(spacerSize)px">
        <VirtualListSkeletonView SkeletonCount="@SkeletonCount" Skeleton="@Skeleton"/>
    </div>

    <ul @key="@VirtualListSpecialKeys.Container"
        class="c-virtual-container @containerClass">
        @foreach (var tile in tiles) {
            var isLastTile = data.HasVeryLastItem && ReferenceEquals(tile, tiles[^1]);
            var isLastTileVisible = isLastTile && LastReportedItemVisibility.IsEndAnchorVisible;
            <VirtualListTileView @key="@tile.Key" Tile="@tile" Item="@Item" IsLastTileVisible="@isLastTileVisible"/>
        }
    </ul>

    <div @key="@VirtualListSpecialKeys.EndSpacer"
         class="c-spacer-end"
         style="height: @(endSpacerSize)px">
        <VirtualListSkeletonView SkeletonCount="@SkeletonCount" Skeleton="@Skeleton"/>
    </div>

    <div @key="@VirtualListSpecialKeys.EndAnchor"
         class="c-end-anchor">
        &nbsp;
    </div>

</div>
