@namespace ActualChat.UI.Blazor.Components
@typeparam TItem
@using ActualChat.UI.Blazor.Components.Internal
@inherits ComputedStateComponent<VirtualListData<TItem>>
@{
    const string flexBase = "flex flex-nowrap items-stretch content-start justify-start";
    const string flexClass = $"{flexBase} flex-col";
    const string invFlexClass = $"{flexBase} flex-col-reverse";

    var renderIndex = RenderIndex++;
    var spacerSize = Data.HasVeryFirstItem ? 0 : SpacerSize;
    var endSpacerSize = Data.HasVeryLastItem ? 0 : SpacerSize;
    var startExpansion = Data.Items
        .TakeWhile(i => KeyComparer.Compare(i.Key, Query.InclusiveRange.Start) < 0)
        .Sum(i => i.CountAs);
    var endExpansion = Data.Items
        .SkipWhile(i => KeyComparer.Compare(i.Key, Query.InclusiveRange.End) <= 0)
        .Sum(i => i.CountAs);
    var renderState = new VirtualListRenderState {
        RenderIndex = renderIndex,
        Query = Query,
        SpacerSize = spacerSize,
        EndSpacerSize = endSpacerSize,
        StartExpansion = startExpansion,
        EndExpansion = endExpansion,
        HasVeryFirstItem = Data.HasVeryFirstItem,
        HasVeryLastItem = Data.HasVeryLastItem,
        ScrollToKey = Data.ScrollToKey,
        Items = Data.Items.ToDictionary(i => i.Key.Value, i => new VirtualListRenderItem(i)),
    };
    var items = Data.Items;
    LastData = Data;
}

<div @ref="Ref"
     class="virtual-list @invFlexClass @Class"
     style="@Style">

    <div @key="@("<RenderIndex>")"
         data-render-index="@renderIndex"
         class="data render-index hidden @flexClass flex-none">
    </div>

    <div @key="@("<RenderState>")"
         class="data render-state hidden @flexClass flex-none">
        @SystemJsonSerializer.Default.Write(renderState)
    </div>


    <div @key="@("<EndSpacer>")"
         class="spacer spacer-end overflow-y-hidden @flexClass flex-none"
         style="height: @(endSpacerSize)px">
        <SkeletonContainer Class="@flexClass">
            @for (var i = 0; i < SkeletonCount; ++i) {
                <div @key="@i" class="skeleton">
                    @Skeleton(i)
                </div>
            }
        </SkeletonContainer>
    </div>


    <ul class="virtual-container @flexClass">
        @foreach (var item in items) {
            <li @key="item.Key"
                class="item flex-none"
                data-key="@item.Key">
                @Item(item)
            </li>
        }
    </ul>

    <div @key="@("<Spacer>")"
         class="spacer spacer-start overflow-y-hidden @invFlexClass flex-none"
         style="height: @(spacerSize)px">
        <SkeletonContainer Class="@flexClass">
            @for (var i = -SkeletonCount; i < 0; i++) {
                <div @key="@i" class="skeleton">
                    @Skeleton(i)
                </div>
            }
        </SkeletonContainer>
    </div>
</div>
