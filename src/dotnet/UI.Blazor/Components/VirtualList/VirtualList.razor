@namespace ActualChat.UI.Blazor.Components
@typeparam TItem
@using ActualChat.UI.Blazor.Components.Internal
@inherits ComputedStateComponent<VirtualListData<TItem>>
@{
    // Console.Out.WriteLine("VirtualList.Render() = "  + Data.KeyRange + " !" + Data.GetHashCode());
    var renderIndex = RenderIndex++;
    // ReSharper disable once ConditionIsAlwaysTrueOrFalseAccordingToNullableAPIContract
    // We are unable to scroll to the right location until JS client part of the Virtual List created
    var hasJsComponentCreated = JSRef != null;
    var data = Data;
    var containerClass = !hasJsComponentCreated
        ? "hide"
        : "";
    
    var renderState = new VirtualListRenderState {
        RenderIndex = renderIndex,
        Query = Query,
        KeyRange = data.KeyRange,
        Count = data.Tiles.Sum(t => t.Items.Sum(i => i.CountAs)),
        BeforeCount = Data.BeforeCount,
        AfterCount = Data.AfterCount,
        HasVeryFirstItem = data.HasVeryFirstItem,
        HasVeryLastItem = data.HasVeryLastItem,
        ScrollToKey = data.ScrollToKey,
    };
    var tiles = data.Tiles;
    LastData = data;
    Query = VirtualListDataQuery.None;
}

<div @ref="Ref"
     class="@Class virtual-list"
     style="@Style">

    <div @key="@VirtualListSpecialKeys.RenderIndex"
         data-render-index="@renderIndex"
         class="data render-index">
    </div>

    <div @key="@VirtualListSpecialKeys.RenderState"
         class="data render-state">
        @* RenderAtDepth ensures the JSON here is rendered once every item is rendered *@
        <RenderAtDepth RenderKey="@renderState" Depth="5">
            @SystemJsonSerializer.Default.Write(context)
        </RenderAtDepth>
    </div>

    <div @key="@VirtualListSpecialKeys.Spacer"
         class="c-spacer-start">
        <VirtualListSkeletonView SkeletonCount="@SkeletonCount" Skeleton="@Skeleton"/>
    </div>

    <ul @key="@VirtualListSpecialKeys.Container"
        class="c-virtual-container @containerClass">
        @foreach (var tile in tiles) {
            var isLastTile = data.HasVeryLastItem && ReferenceEquals(tile, tiles[^1]);
            var isLastTileVisible = isLastTile && LastReportedItemVisibility.IsEndAnchorVisible;
            <VirtualListTileView @key="@tile.Key" Tile="@tile" Item="@Item" IsLastTileVisible="@isLastTileVisible"/>
        }
    </ul>

    <div @key="@VirtualListSpecialKeys.EndSpacer"
         class="c-spacer-end">
        <VirtualListSkeletonView SkeletonCount="@SkeletonCount" Skeleton="@Skeleton"/>
    </div>

    <div @key="@VirtualListSpecialKeys.EndAnchor"
         class="c-end-anchor">
        &nbsp;
    </div>

</div>
