@namespace ActualChat.UI.Blazor.Components
@typeparam TItem
@using ActualChat.UI.Blazor.Components.Internal
@inherits ComputedStateComponent<VirtualListData<TItem>>
@{
    var renderIndex = RenderIndex++;
    var spacerSize = Data.HasVeryFirstItem
        ? 0
        : renderIndex == 0 && Data.Items.Count == 0
            ? 1000 // initial spacer size to cover all list area on first load
            : SpacerSize;
    var endSpacerSize = Data.HasVeryLastItem
        ? 0
        : renderIndex == 0
            ? 0
            : SpacerSize;
    var startExpansion = Data.Items
        .TakeWhile(i => KeyComparer.Compare(i.Key, Query.KeyRange.Start) < 0)
        .Sum(i => i.CountAs);
    var endExpansion = Data.Items
        .SkipWhile(i => KeyComparer.Compare(i.Key, Query.KeyRange.End) <= 0)
        .Sum(i => i.CountAs);
    var renderState = new VirtualListRenderState {
        RenderIndex = renderIndex,
        Query = Query,
        SpacerSize = spacerSize,
        EndSpacerSize = endSpacerSize,
        StartExpansion = startExpansion,
        EndExpansion = endExpansion,
        HasVeryFirstItem = Data.HasVeryFirstItem,
        HasVeryLastItem = Data.HasVeryLastItem,
        ScrollToKey = Data.ScrollToKey,
    };
    var items = Data.Items;
    LastData = Data;
    var itemClassBase = Data.Query.IsNone
        ? "item"
        : "item new";
}

<div @ref="Ref"
     class="@Class virtual-list"
     style="@Style">

    <div @key="@VirtualListSpecialKeys.RenderIndex"
         data-render-index="@renderIndex"
         class="data render-index">
    </div>

    <div @key="@VirtualListSpecialKeys.RenderState"
         class="data render-state">
        @SystemJsonSerializer.Default.Write(renderState)
    </div>

    <div @key="@VirtualListSpecialKeys.EndAnchor"
         class="c-end-anchor">
        &nbsp;
    </div>

    <div @key="@VirtualListSpecialKeys.EndSpacer"
         class="c-spacer-end"
         style="height: @(endSpacerSize)px">
        <VirtualListSkeleton SkeletonCount="@SkeletonCount" Skeleton="@Skeleton"/>
    </div>

    <ul @key="@VirtualListSpecialKeys.Container"
        class="c-virtual-container">
        @foreach (var item in items) {
            var itemClass = item.IsFirstTimeRendered
                ? itemClassBase
                : "item";

            @if (item.CountAs != 1) {
                <li id="@item.Key"
                    @key="@item.Key"
                    class="@itemClass"
                    data-count-as="@item.CountAs">
                    @Item(item)
                </li>
            } else {
                <li id="@item.Key"
                    @key="@item.Key"
                    class="@itemClass">
                    @Item(item)
                </li>
            }
        }
        @if (items.Count == 0 && Data != VirtualListData<TItem>.None) {
            @Empty
        }
    </ul>

    <div @key="@VirtualListSpecialKeys.Spacer"
         class="c-spacer-start"
         style="height: @(spacerSize)px">
        <VirtualListSkeleton SkeletonCount="@SkeletonCount" Skeleton="@Skeleton"/>
    </div>
</div>
