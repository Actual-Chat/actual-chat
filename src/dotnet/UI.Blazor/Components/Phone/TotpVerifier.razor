@using ActualChat.Users
@using ActualChat.UI.Blazor.Services
@namespace ActualChat.UI.Blazor.Components

<UITimer @key="@_timerKey" Period="@TimerPeriod" IsRecurring="false" Tick="@OnTimerTick" />
<div class="totp-verifier @Class" @onclick="@(() => Focus())">
    <span class="c-description">
        Enter the code we've sent to <span class="whitespace-nowrap">@(new Phone(Phone).ToReadable())</span>
    </span>
    <TotpInput @ref="_totpInput" Completed="OnInputCompleted" IsVerifying="@_isVerifying"/>
    @if (_totpExpiresAt is { } totpExpiresAt) {
        @if (Clocks.SystemClock.Now < totpExpiresAt) {
            <div class="c-resend-code">
                <span>You can request a new code in</span>
                <Countdown Class="w-9" EndsAt="totpExpiresAt"/>
            </div>
        } else {
            <Button Class="btn-modal sign-in" Click="@SendTotp">Resend</Button>
        }
    }
</div>

@code {
    private object? _timerKey = new();
    private TotpInput? _totpInput;
    private Moment? _totpExpiresAt;
    private bool _isVerifying;

    [Inject] private UIHub UIHub { get; init; } = null!;
    [Inject] private TotpUI TotpUI { get; init; } = null!;
    private Session Session => UIHub.Session();
    private UICommander UICommander => UIHub.UICommander();
    private MomentClockSet Clocks => UIHub.Clocks();
    private TuneUI TuneUI => UIHub.TuneUI;

    [Parameter] public string Phone { get; set; } = "";
    [Parameter] public string Email { get; set; } = "";
    [Parameter] public string Class { get; set; } = "";
    [Parameter, EditorRequired] public TotpPurpose Purpose { get; set; }
    [Parameter] public EventCallback Verified { get; set; }
    [Parameter] public EventCallback Error { get; set; }
    [Parameter] public EventCallback IncorrectCodeEntered { get; set; }

    private TimeSpan TimerPeriod
        => _totpExpiresAt is { } totpExpiresAt
            ? totpExpiresAt - Clocks.SystemClock.Now + TimeSpan.FromMilliseconds(10)
            : default; // No ticks

    protected override Task OnParametersSetAsync() {
        var now = Clocks.ServerClock.Now;
        var totpExpiresAt = TotpUI.TotpExpiresAt.Value;
        if (totpExpiresAt > now) {
            _totpExpiresAt = totpExpiresAt;
            _timerKey = new(); // To make sure the timer is renewed
        } else {
            _totpExpiresAt = null;
            return SendTotp();
        }
        return Task.CompletedTask;
    }

    public ValueTask Focus()
        => _totpInput?.Focus() ?? ValueTask.CompletedTask;

    private async Task OnInputCompleted(int totp) {
        _isVerifying = true;
        StateHasChanged();
        ICommand<bool> cmd = Purpose switch {
            TotpPurpose.SignIn => new PhoneAuth_ValidateTotp(Session, new Phone(Phone), totp),
            TotpPurpose.VerifyPhone => new PhoneAuth_VerifyPhone(Session, new Phone(Phone), totp),
            TotpPurpose.VerifyEmail => new Emails_VerifyEmail(Session, totp),
            _ => throw new ArgumentOutOfRangeException(nameof(Purpose)),
        };

        var (isValid, error) = await UICommander.Run(cmd);
        _isVerifying = false;
        StateHasChanged();
        if (error != null) {
            if (_totpInput != null) {
                await _totpInput.Clear();
            }
            await Error.InvokeAsync();
            return;
        }

        if (!isValid && _totpInput != null) {
            _ = TuneUI.Play(Tune.ShowInputError);
            await _totpInput.Clear();
            await _totpInput.ShowError();
            await IncorrectCodeEntered.InvokeAsync();
            return;
        }

        await Verified.InvokeAsync();
    }

    private async Task SendTotp() {
        var codeSent = Purpose == TotpPurpose.VerifyEmail
            ? await TotpUI.SendEmailCode(CancellationToken.None)
            : await TotpUI.SendPhoneCode(Purpose, Phone, CancellationToken.None);
        if (!codeSent)
            return;

        _totpExpiresAt = TotpUI.TotpExpiresAt.Value;
        _timerKey = new(); // To make sure the timer is renewed
        StateHasChanged();
    }

    private void OnTimerTick() {
        // Just implicitly triggers StateHasChanged()
    }
}
