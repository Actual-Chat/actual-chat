@namespace ActualChat.UI.Blazor.Components

<div class="stepper">
    <CascadingValue Value="@this" IsFixed="true">
        @if (Header != null) {
            <div class="stepper-header">
                @Header.Invoke(this)
            </div>
        }
        <div class="stepper-body">
            @if (Steps != null) {
                <div class="stepper-content">
                    @Steps.Invoke(this)
                </div>
            }
            @if (Footer != null) {
                <div class="stepper-footer">
                    @Footer.Invoke(this)
                </div>
            }
        </div>
    </CascadingValue>
</div>

@code {
    private readonly List<Step> _steps = new();
    private Step? _currentStep;

    [Parameter] public RenderFragment<Stepper>? Header { get; set; }
    [Parameter] public RenderFragment<Stepper>? Footer { get; set; }
    [Parameter] public RenderFragment<Stepper>? Steps { get; set; }
    [Parameter] public EventCallback<bool> CurrentStepChanged { get; set; }

    public int StepCount => _steps.Count;
    public int LastStepIndex => Math.Max(0, _steps.Count - 1);
    public int CurrentStepIndex => _currentStep is { } currentStep ? _steps.IndexOf(currentStep) : -1;
    public bool IsLastStep => CurrentStepIndex == LastStepIndex;
    public bool CanMoveForward => CurrentStepIndex is var i and >= 0 && i < LastStepIndex;
    public bool CanMoveBack => CurrentStepIndex > 0;
    public bool CanSkip => _currentStep is { CanSkip: true };
    public Step? CurrentStep => _currentStep;

    public void AddStep(Step step) {
        _steps.Add(step);
        if (_steps.Count == 1)
            _currentStep = step;
        StateHasChanged();
    }

    public async ValueTask<bool> TryMoveForward() {
        if (_currentStep is null || !await _currentStep.TryComplete())
            return false;

        return await Move(1);
    }

    public async ValueTask Skip() {
        if (_currentStep is null)
            return;

        await _currentStep.Skip();
        await Move(1);
    }

    public ValueTask<bool> MoveBack()
        => Move(-1);

    private async ValueTask<bool> Move(int offset) {
        if (_currentStep == null)
            return false;

        var newStepIndex = CurrentStepIndex + offset;
        if (newStepIndex < 0)
            return false;

        if (newStepIndex >= StepCount) {
            await CurrentStepChanged.InvokeAsync(true);
            return true;
        }

        var previousStep = _currentStep;
        _currentStep = _steps[newStepIndex];
        previousStep.NotifyStateHasChanged();
        _currentStep.NotifyStateHasChanged();
        StateHasChanged();
        await CurrentStepChanged.InvokeAsync(false);
        return true;
    }
}
