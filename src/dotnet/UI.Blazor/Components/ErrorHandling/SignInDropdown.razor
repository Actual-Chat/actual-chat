@using ActualChat.UI.Blazor.Services
@namespace ActualChat.UI.Blazor.Components
@{
    var usedAuthSchemas = User.OrGuest().Identities.Select(kv => kv.Key.Schema).ToHashSet();
    var unusedAuthSchemas = AuthSchemas.Where(p => !usedAuthSchemas.Contains(p.Name)).ToArray();
    var svgClass = IsOpen ? "rotate-180" : "";
}

@if (User == null) {
    <span class="@Class select-none">
        <span class="relative">
            <div class="@(IsOpen ? "" : "hidden") absolute bottom-6 left-0 w-48">
                <div class="relative rounded-md shadow-lg border bg-white py-1 flex-y">
                    @foreach (var (name, displayName) in unusedAuthSchemas) {
                        <a @onclick="_ => SignIn(name)" href="#" class="flex-auto p-3 text-01 hover:bg-primary hover:text-04">
                            Sign in with @displayName
                        </a>
                    }
                </div>
            </div>
        </span>
        <button class="btn btn-outline flex-x items-center" aria-haspopup="true" aria-expanded="@IsOpen"
                @onclick="_ => IsOpen = !IsOpen">
            <span>Sign in @Why</span>
            <svg class="@svgClass ml-1 -mr-2 w-5 h-5" xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="-12 -12 48 48">
                <path d="M0 16.67l2.829 2.83 9.175-9.339 9.167 9.339 2.829-2.83-11.996-12.17z"/>
            </svg>
        </button>
    </span>
}

@code {
    [Inject] private BlazorModeHelper BlazorModeHelper { get; init; } = null!;
    [Inject] private IClientAuth ClientAuth { get; init; } = null!;

    private User? User { get; set; }
    private (string Name, string DisplayName)[] AuthSchemas { get; set; } = Array.Empty<(string, string)>();
    private bool IsOpen { get; set; } = false;

    [CascadingParameter] public Task<AuthState> AuthStateTask { get; set; } = null!;
    [Parameter] public string Class { get; set; } = "";
    [Parameter] public string Why { get; set; } = "";

    protected override async Task OnParametersSetAsync() {
        User = (await AuthStateTask).User;
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (firstRender) {
            // GetSchemas requires JS interop, so it can be called only at this point
            AuthSchemas = await ClientAuth.GetSchemas();
            StateHasChanged();
        }
    }

    private void SignIn(string name) {
        ClientAuth.SignIn(name);
        IsOpen = false;
    }
}
