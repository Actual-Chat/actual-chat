@using ActualChat.Users
@using ActualChat.Hosting
@namespace ActualChat.UI.Blazor.Components
@implements IDisposable

<RequirementChecker @ref="_requirementChecker">
    <ChildContent>
        @ChildContent
    </ChildContent>
    <ErrorContent>
        @if (context.Errors.Any(e => e is NoAccountException)) {
            <SignInBlock/>
        } else if (context.Errors.Any(e => e is SuspendedAccountException)) {
            <SignOutBlock>
                <b>Your account is suspended.</b><br/>
                Please feel free to conact us &ndash; we'll try to help.
            </SignOutBlock>
        } else if (context.Errors.Any(e => e is InactiveAccountException)) {
            <SignOutBlock>
                You're successfully signed in, but your account is inactive.<br/>
                We activate new accounts when we're ready to onboard more people.<br/>
                If you have an invite code, you can use it now.
            </SignOutBlock>
        } else if (context.Errors.Any(e => e is NonAdminAccountException)) {
            <SignOutBlock>
                Sorry, but only service administrators can perform this action.
            </SignOutBlock>
        } else {
            <LayoutView Layout="typeof(NoChatLayout)">
                <MainHeader>Error!</MainHeader>
                <div class="p-4 pr-5">
                    @foreach (var (requirement, error) in context.Items) {
                        var title = HostInfo.IsDevelopmentInstance
                            ? $"Error ({error.GetType().Name}):"
                            : "Error:";
                        <Error @key="requirement"
                               Title="@title"
                               Dismissed="_ => OnDismiss(requirement)">@error.Message</Error>
                    }
                </div>
            </LayoutView>
        }
    </ErrorContent>
</RequirementChecker>

@code {
    private RequirementChecker _requirementChecker = null!;
    private System.EventHandler<LocationChangedEventArgs> _onLocationChanged = null!;

    [Inject] private HostInfo HostInfo { get; init; } = null!;
    [Inject] private NavigationManager Nav { get; init; } = null!;

    [Parameter] public RenderFragment? ChildContent { get; set; }

    protected override void OnInitialized() {
        _onLocationChanged = OnLocationChanged;
        Nav.LocationChanged += _onLocationChanged;
    }

    public void Dispose()
        => Nav.LocationChanged -= _onLocationChanged;

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
        => _requirementChecker.Reset();

    private void OnDismiss(RequirementComponent requirement)
        => _requirementChecker.Remove(requirement);
}
