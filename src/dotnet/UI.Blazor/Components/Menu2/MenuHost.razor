@namespace ActualChat.UI.Blazor.Components
@using ActualChat.UI.Blazor.Module
@implements IAsyncDisposable

<div class="ac-menu-host">
    <CascadingValue Value="@this" IsFixed="true">
        @foreach (var menu in _menus) {
            <div id="@menu.Id" @key="menu.Id" class="@(menu.IsHoverMenu ? "ac-menu-hover" : "ac-menu")">
                <ul class="ac-menu-list">
                    <DynamicComponent Type="@menu.Type" Parameters="@menu.Parameters"/>
                </ul>
            </div>
        }
    </CascadingValue>
</div>

@code {
    private readonly List<Model> _menus = new();
    private IJSObjectReference _jsRef = null!;
    private DotNetObjectReference<MenuHost> _blazorRef = null!;

    [Inject] private IJSRuntime JS { get; init; } = null!;

    [JSInvokable]
    public Task RenderMenu(string menuRef, string id, bool isHoverMenu) {
        var parsedMenuRef = MenuRef.Parse(menuRef);
        var model = new Model(
            id,
            parsedMenuRef.MenuType,
            new Dictionary<string, object>() {
                { nameof(MenuBase.Id), id },
                { nameof(MenuBase.Arguments), parsedMenuRef.Arguments },
            },
            isHoverMenu);
        _menus.Add(model);
        StateHasChanged();
        return Task.CompletedTask;
    }

    [JSInvokable]
    public Task HideMenu(string id) {
        _menus.RemoveAll(x => x.Id == id);
        StateHasChanged();
        return Task.CompletedTask;
    }

    public async Task ShowMenu(MenuBase menu) {
        await _jsRef.InvokeVoidAsync("showMenu", menu.Id);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (firstRender) {
            _blazorRef = DotNetObjectReference.Create(this);
            var identifier = $"{BlazorUICoreModule.ImportName}.MenuHost.create";
            _jsRef = await JS.InvokeAsync<IJSObjectReference>(identifier, _blazorRef);
        }
    }

    public async ValueTask DisposeAsync() {
        await _jsRef.DisposeSilentlyAsync("dispose");
        _jsRef = null!;
        _blazorRef.DisposeSilently();
        _blazorRef = null!;
    }

    private sealed record Model(
        string Id,
        Type Type,
        Dictionary<string, object> Parameters,
        bool IsHoverMenu);
}
