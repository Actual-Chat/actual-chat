@namespace ActualChat.UI.Blazor.Components
@using Cysharp.Text
@inherits ComputedStateComponent<string>
@{
    var m = State.Value;
    if (m.IsNullOrEmpty())
        return;
}

<span class="@Class">@m</span>

@code {
    private MomentClock? _clock;

    [Inject] private MomentClockSet Clocks { get; init; } = null!;
    private MomentClock Clock => _clock ??= Clocks.CpuClock;

    [Parameter, EditorRequired] public Moment EndsAt { get; set; } // CPU time!
    [Parameter] public string Class { get; set; } = "";
    [Parameter] public string Format { get; set; } = "{0:mm\\:ss}";
    [Parameter] public double UpdatePeriod { get; set; } = 1;

    protected override ComputedState<string>.Options GetStateOptions()
        => ComputedStateComponent.GetStateOptions(GetType(),
            static t => new ComputedState<string>.Options() {
                UpdateDelayer = FixedDelayer.NextTick,
                Category = ComputedStateComponent.GetStateCategory(t),
            });

    protected override Task<string> ComputeState(CancellationToken cancellationToken) {
        var remaining = (EndsAt - Clock.Now).Positive();
        var result = ZString.Format(Format, remaining);
        if (remaining > TimeSpan.Zero)
            Computed.GetCurrent().Invalidate(TimeSpan.FromSeconds(UpdatePeriod), true);

        return Task.FromResult(result);
    }
}
