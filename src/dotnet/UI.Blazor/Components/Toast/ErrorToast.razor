@namespace ActualChat.UI.Blazor.Components

@if (_isDismissed) {
    return;
}

@if (AutoDismissDelay.HasValue) {
    <UITimer
        @key="_timerKey"
        Period="@TimeSpan.FromSeconds(AutoDismissDelay.Value)"
        IsRecurring="false"
        Tick="@Dismiss"/>
}

<div class="@Class error-toast">
    <div class="c-icon">
        <i class="icon-alert-circle text-2xl"></i>
    </div>
    <div class="c-content">
        <div class="c-title">
            @Title
            @if (Count > 1) {
                <span class="c-count">&nbsp;Ã—@(Count)</span>
            }
        </div>
        <div class="c-message">@ChildContent</div>
    </div>
    <TimerCloseButton
        Class="btn-sm"
        CircleClass="btn-sm"
        TimerButtonColor="var(--text-banner-error)"
        Click="@(_ => Dismiss())"
        Delay="@(AutoDismissDelay ?? 0)"/>

</div>

@code {
    private bool _isDismissed;
    private object? _timerKey = new();

    [Parameter] public string Class { get; set; } = "";
    [Parameter] public string Title { get; set; } = "Error";
    [Parameter] public int Count { get; set; } = 1;
    [Parameter] public double? AutoDismissDelay { get; set; }
    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Parameter] public EventCallback Dismissed { get; set; }

    protected override void OnParametersSet() {
        _timerKey = new(); // To make sure the timer is renewed on Count update
    }

    private async Task Dismiss()
    {
        if (_isDismissed)
            return;

        _isDismissed = true;
        await Dismissed.InvokeAsync();
    }
}
