@namespace ActualChat.UI.Blazor.Components
@using ActualChat.UI.Blazor.Services
@implements IDisposable
@{
    var toasts = ToastUI.Items.Items;
}

@if (_failureGroups.Count > 0) {
    <div class="error-container custom-scrollbar">
        <div class="c-content">
            @foreach (var failureGroup in _failureGroups.Values.OrderBy(g => g.Order)) {
                <ErrorToast
                    @key="@failureGroup"
                    Title="Action failed!"
                    Count="@failureGroup.Count"
                    Dismissed="@(() => DismissFailureGroup(failureGroup))">
                    @failureGroup.Title
                </ErrorToast>
            }
        </div>
    </div>
}
@if (toasts.Count > 0) {
    <div class="toast-container custom-scrollbar">
        <div class="c-content">
            @foreach (var toast in toasts) {
                <Toast
                    @key="toast"
                    Icon="@toast.Icon"
                    Text="@toast.Info"
                    ActionClick="@toast.Action"
                    ActionText="@toast.ActionText"
                    AutoDismissDelay="@toast.AutoDismissDelay"
                    Dismissed="@(() => ToastUI.Dismiss(toast))" />
            }
        </div>
    </div>
}

@code {
    private LocalUrl _lastUrl;
    private Dictionary<string, FailureGroup> _failureGroups = new();
    private int _lastFailureOrder;
    private bool _suppressOnFailuresChanged;

    [Inject] private UIActionFailureTracker Failures { get; init; } = null!;
    [Inject] private ToastUI ToastUI { get; init; } = null!;
    [Inject] private History History { get; init; } = null!;

    protected override void OnInitialized() {
        History.LocationChanged += OnLocationChanged;
        Failures.Changed += OnFailuresChanged;
        ToastUI.Items.Changed += OnToastsChanged;
    }

    public void Dispose() {
        ToastUI.Items.Changed -= OnToastsChanged;
        Failures.Changed -= OnFailuresChanged;
        History.LocationChanged -= OnLocationChanged;
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e) {
        var url = History.LocalUrl;
        if (_lastUrl != url) {
            _lastUrl = url;
            Failures.Clear();
        }
        StateHasChanged();
    }

    private void OnToastsChanged()
        => InvokeAsync(StateHasChanged);

    private void OnFailuresChanged()
        => InvokeAsync(() => {
            if (_suppressOnFailuresChanged)
                return;

            var isChanged = false;
            foreach (var failure in Failures) {
                var message = failure.Error?.Message ?? "Unknown error.";
                var group = _failureGroups.GetValueOrDefault(message);
                if (group == null) {
                    group = new FailureGroup(++_lastFailureOrder, message);
                    group.Failures.Add(failure);
                    _failureGroups.Add(message, group);
                    isChanged = true;
                }
                else {
                    isChanged |= group.Failures.Add(failure);
                }
            }
            if (isChanged)
                StateHasChanged();
        });

    private void DismissFailureGroup(FailureGroup failureGroup) {
        var oldSuppressOnFailuresChanged = _suppressOnFailuresChanged;
        _suppressOnFailuresChanged = true;
        try {
            foreach (var failure in failureGroup.Failures)
                Failures.Remove(failure);
        }
        finally {
            _suppressOnFailuresChanged = oldSuppressOnFailuresChanged;
        }
        StateHasChanged();
    }

    // Nested types

    private record FailureGroup(int Order, string Title) {
        public HashSet<IUIActionResult> Failures { get; } = new();
        public int Count => Failures.Count;
    }
}
