@if (!_isDismissed) {
    <div class="@Class error-toast">
        <div class="my-1">
            <i class="icon-alert-circle text-2xl"></i>
        </div>
        <div class="flex-1 flex-y break-words">
            <div class="header-title">@Title</div>
            <div class="toast-content">@ChildContent</div>
        </div>
        <ButtonX
            Class="btn-transparent btn-sm"
            Click="@(_ => Dismiss())">
        </ButtonX>
    </div>
}

@code {
    private bool _isDismissed;

    [Parameter] public string Class { get; set; } = "";
    [Parameter] public string Title { get; set; } = "Error";
    [Parameter] public double? AutoDismissDelay { get; set; }
    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Parameter] public EventCallback Dismissed { get; set; }

    private async Task Dismiss()
    {
        if (_isDismissed)
            return;
        _isDismissed = true;
        await Dismissed.InvokeAsync(null);
    }

    private async Task AutoDismiss(TimeSpan delay) {
        await Task.Delay(delay);
        await Dismiss().ConfigureAwait(false);
    }

    protected override void OnInitialized() {
        if (AutoDismissDelay is { } autoDismissDelay)
            _ = AutoDismiss(TimeSpan.FromSeconds(autoDismissDelay));
    }
}
