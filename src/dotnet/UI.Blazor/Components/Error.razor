@if (!_isDismissed) {
    <div class="@Class error-toast">
        <div class="toast-header">
            <div class="header-icon">
                <svg xmlns="http://www.w3.org/2000/svg" class="fill-current w-5 h-5" viewBox="0 -2 26 26">
                    <path d="M12 0c-6.627 0-12 5.373-12 12s5.373 12 12 12 12-5.373 12-12-5.373-12-12-12zm-1.351 6.493c-.08-.801.55-1.493 1.351-1.493s1.431.692 1.351 1.493l-.801 8.01c-.029.282-.266.497-.55.497s-.521-.215-.55-.498l-.801-8.009zm1.351 12.757c-.69 0-1.25-.56-1.25-1.25s.56-1.25 1.25-1.25 1.25.56 1.25 1.25-.56 1.25-1.25 1.25z"/>
                </svg>
            </div>
            <div class="header-title">@Title</div>
            <Button
                Class="flex float-right mt-1.5 !p-0 !min-w-0 !h-min !border-0"
                Click="@(_ => Dismiss())">
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="-4 -4 32 32" class="w-4 h-4 fill-current"><path d="M23.954 21.03l-9.184-9.095 9.092-9.174-2.832-2.807-9.09 9.179-9.176-9.088-2.81 2.81 9.186 9.105-9.095 9.184 2.81 2.81 9.112-9.192 9.18 9.1z"/></svg>
            </Button>
        </div>
        <div class="toast-content">@ChildContent</div>
    </div>
}

@code {
    private bool _isDismissed;

    [Parameter] public string Class { get; set; } = "";
    [Parameter] public string Title { get; set; } = "Error:";
    [Parameter] public double? AutoDismissDelay { get; set; }
    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Parameter] public EventCallback Dismissed { get; set; }

    private async Task Dismiss()
    {
        if (_isDismissed)
            return;
        _isDismissed = true;
        await Dismissed.InvokeAsync(null);
    }

    private async Task AutoDismiss(TimeSpan delay) {
        await Task.Delay(delay);
        await Dismiss().ConfigureAwait(false);
    }

    protected override void OnInitialized() {
        if (AutoDismissDelay is { } autoDismissDelay)
            _ = AutoDismiss(TimeSpan.FromSeconds(autoDismissDelay));
    }
}
