@namespace ActualChat.UI.Blazor.Controls
@typeparam TItem
@using ActualChat.UI.Blazor.Controls.Internal
@inherits ComputedStateComponent<VirtualListData<TItem>>
@{
    var plan = LastPlan = Plan;
    DebugLog?.LogDebug("Rendering: RenderIndex={RenderIndex}", Plan.RenderIndex);
    var flexBase = "flex flex-nowrap items-stretch";
    var flexDir = Plan.IsEndAligned ? "flex-col-reverse" : "flex-col";
    var scrollContainerFlexClass = $"{flexBase} {flexDir}";
    var flexClass = $"{flexBase} flex-col";
    var invFlexClass = $"{flexBase} flex-col-reverse";
    var renderState = new VirtualListRenderState() {
        RenderIndex = plan.RenderIndex,

        SpacerSize = plan.SpacerSize,
        EndSpacerSize = plan.EndSpacerSize,
        ScrollHeight = plan.FullRange.Size(),
        ItemSizes = plan.DisplayedItems.ToDictionary(i => i.Key.Value, i => i.Range.Size(), StringComparer.Ordinal),

        ScrollTop = plan.ScrollTop,
        ClientHeight = plan.Viewport.Size(),

        MustMeasure = plan.UnmeasuredItems.Count != 0,
        MustScroll = plan.MustScroll,
        NotifyWhenSafeToScroll = plan.NotifyWhenSafeToScroll,
    };
    ClientSideState = plan.ClientSideState ?? ClientSideState;
}

@* We want to drop irrelevant JS state changes, thus we send the render index to JS side *@
<div @ref="Ref" class="virtual-list overflow-y-scroll h-full @scrollContainerFlexClass @Class @(CssClasses.Default[GetType()])"
     style="@Style">
    <div class="content relative @flexBase flex-col">
        <div class="items items-unmeasured @flexClass overflow-y-hidden h-0 invisible">
            @foreach (var planItem in Plan.UnmeasuredItems) {
                <div @key="planItem.Key" class="item" data-key="@planItem.Key">
                    @Item(planItem.Item)
                </div>
            }
        </div>
        <div class="spacer spacer-start overflow-y-hidden @invFlexClass"
              style="height: @(Plan.SpacerSize)px">
            <SkeletonContainer Class="@flexClass">
                @for (var i = -SkeletonCount; i < 0; i++) {
                    <div @key="@i" class="skeleton">
                        @Skeleton(i)
                    </div>
                }
            </SkeletonContainer>
        </div>
        <div class="items items-displayed @flexClass">
            @foreach (var planItem in Plan.DisplayedItems) {
                <div @key="planItem.Key" class="item" data-key="@planItem.Key">
                    @Item(planItem.Item)
                </div>
            }
        </div>
        <div class="spacer spacer-end overflow-y-hidden @flexClass"
             style="height: @(Plan.EndSpacerSize)px">
            <SkeletonContainer Class="@flexClass">
                @for (var i = 0; i < SkeletonCount; ++i) {
                    <div @key="@i" class="skeleton">
                        @Skeleton(i)
                    </div>
                }
            </SkeletonContainer>
        </div>
        <div class="render-state" style="display: none" data-render-state="@SystemJsonSerializer.Default.Write(renderState)"></div>
    </div>
</div>
