@namespace ActualChat.UI.Blazor.Controls
@typeparam TItem
@using ActualChat.UI.Blazor.Controls.Internal
@using Microsoft.AspNetCore.Components.Rendering
@inherits ComputedStateComponent<VirtualListData<TItem>>
@{
    var plan = LastPlan = Plan;
    DebugLog?.LogDebug("Rendering: #{RenderIndex}", Plan.RenderIndex);

    var isEndAligned = plan.AlignmentEdge.IsEnd();
    var flexBase = "flex flex-nowrap items-stretch content-start justify-start";
    var flexDir = isEndAligned ? "flex-col-reverse" : "flex-col";
    var scrollContainerFlexClass = $"{flexBase} {flexDir}";
    var flexClass = $"{flexBase} flex-col";
    var invFlexClass = $"{flexBase} flex-col-reverse";
    var renderState = new VirtualListRenderState() {
        RenderIndex = plan.RenderIndex,

        SpacerSize = plan.SpacerSize,
        EndSpacerSize = plan.EndSpacerSize,
        ScrollHeight = plan.FullRange?.Size(),
        ScrollTop = plan.Viewport?.Start,
        ViewportHeight = plan.Viewport?.Size(),
        HasVeryFirstItem = plan.Data.HasVeryFirstItem,
        HasVeryLastItem = plan.Data.HasVeryLastItem,

        ScrollToKey = plan.ScrollToKey.Value.NullIfEmpty(),
        UseSmoothScroll = plan.UseSmoothScroll,

        ItemSizes = plan.Items.ToDictionary(i => i.Key.Value, i => i.Range.Size(), StringComparer.Ordinal),
        HasUnmeasuredItems = plan.HasUnmeasuredItems,
        StickyEdge = plan.StickyEdge,
    };
    ClientSideState = plan.ClientSideState ?? ClientSideState;
    if (Plan.IsFullyLoaded() == false)
        UpdateData();

    // reset ScrollToKey after sending the value to the browser
    plan.ScrollToKey = Symbol.Empty;
    ScrollToKey = null;
}

<div @ref="Ref"
     class="virtual-list @scrollContainerFlexClass @Class"
     style="@Style">
    <div class="data render-state hidden @flexClass flex-none">
        <div @key="@("<RenderState>:" + renderState.RenderIndex)"
             class="data render-state-data">@SystemJsonSerializer.Default.Write(renderState)
        </div>
    </div>

    @if (!isEndAligned) {
        <div @key="@("<Spacer>")"
              class="spacer spacer-start overflow-y-hidden @invFlexClass flex-none"
              style="height: @(Plan.SpacerSize)px">
            <SkeletonContainer Class="@flexClass">
                @for (var i = -SkeletonCount; i < 0; i++) {
                    <div @key="@i" class="skeleton">
                        @Skeleton(i)
                    </div>
                }
            </SkeletonContainer>
        </div>;
    } else {
        <div @key="@("<EndSpacer>")"
              class="spacer spacer-end overflow-y-hidden @flexClass flex-none"
              style="height: @(Plan.EndSpacerSize)px">
            <SkeletonContainer Class="@flexClass">
                @for (var i = 0; i < SkeletonCount; ++i) {
                    <div @key="@i" class="skeleton">
                        @Skeleton(i)
                    </div>
                }
            </SkeletonContainer>
        </div>;
    }

    @foreach (var item in isEndAligned ? plan.ReversedItems : plan.Items) {
        <div @key="item.Key"
             class="item flex-none"
             data-key="@item.Key">
            @Item(item.Item)
        </div>
    }

    @if (isEndAligned) {
        <div @key="@("<Spacer>")"
              class="spacer spacer-start overflow-y-hidden @invFlexClass flex-none"
              style="height: @(Plan.SpacerSize)px">
            <SkeletonContainer Class="@flexClass">
                @for (var i = -SkeletonCount; i < 0; i++) {
                    <div @key="@i" class="skeleton">
                        @Skeleton(i)
                    </div>
                }
            </SkeletonContainer>
        </div>;
    } else {
        <div @key="@("<EndSpacer>")"
              class="spacer spacer-end overflow-y-hidden @flexClass flex-none"
              style="height: @(Plan.EndSpacerSize)px">
            <SkeletonContainer Class="@flexClass">
                @for (var i = 0; i < SkeletonCount; ++i) {
                    <div @key="@i" class="skeleton">
                        @Skeleton(i)
                    </div>
                }
            </SkeletonContainer>
        </div>;
    }

    <div @key="@("<RenderIndex>")"
         data-render-index="@renderState.RenderIndex"
         class="data render-index hidden @flexClass flex-none">
    </div>
</div>
