@namespace ActualChat.UI.Blazor.Controls
@typeparam TItem
@inherits ComputedStateComponent<VirtualListData<TItem>>
@{
    LastPlan = Plan;
    // Log.LogInformation("Rendering: RenderIndex={RenderIndex}", Plan.RenderIndex);
    // Log.LogInformation("Rendering: {Plan}", JsonFormatter.Format(Plan));
    var flexBase = "flex flex-nowrap items-stretch";
    var flexDir = Plan.IsEndAligned ? "flex-col-reverse" : "flex-col";
    var scrollContainerFlexClass = $"{flexBase} {flexDir}";
    var flexClass = $"{flexBase} flex-col";
    var invFlexClass = $"{flexBase} flex-col-reverse";
}

@* We want to drop irrelevant JS state changes, thus we send the render index to JS side *@
<div @ref="Ref" class="virtual-list overflow-y-scroll h-full @scrollContainerFlexClass @Class @(CssClasses.Default[GetType()])"
     style="@Style"
     data-render-index="@Plan.RenderIndex">
    <div class="content relative @flexBase flex-col">
        <div class="items items-unmeasured @flexClass overflow-y-hidden h-0 invisible">
            @foreach (var planItem in Plan.UnmeasuredItems) {
                <div @key="planItem.Key" class="item" data-key="@planItem.Key">
                    @Item(planItem.Item)
                </div>
            }
        </div>
        <div class="spacer spacer-start overflow-y-hidden @invFlexClass"
              style="height: @(Plan.SpacerSize)px">
            <SkeletonContainer Class="@flexClass">
                @for (var i = -SkeletonCount; i < 0; i++) {
                    <div @key="@i" class="skeleton">
                        @Skeleton(i)
                    </div>
                }
            </SkeletonContainer>
        </div>
        <div class="items items-displayed @flexClass">
            @foreach (var planItem in Plan.DisplayedItems) {
                <div @key="planItem.Key" class="item" data-key="@planItem.Key">
                    @Item(planItem.Item)
                </div>
            }
        </div>
        <div class="spacer spacer-end overflow-y-hidden @flexClass"
             style="height: @(Plan.EndSpacerSize)px">
            <SkeletonContainer Class="@flexClass">
                @for (var i = 0; i < SkeletonCount; ++i) {
                    <div @key="@i" class="skeleton">
                        @Skeleton(i)
                    </div>
                }
            </SkeletonContainer>
        </div>
    </div>
</div>
