@inherits LayoutComponentBase
@implements IDisposable
@{
    var failures = UIActionFailureTracker.Items;
}

<div class="base-layout no-layout">
    <div class="base-layout-body">
        <div class="c-layout-content">
            @if (failures.Count != 0) {
                <div class="error-container custom-scrollbar">
                    <div class="c-content">
                        @foreach (var failure in failures) {
                            <Error @key="failure"
                                   Title="Action failed!"
                                   Dismissed="@(_ => UIActionFailureTracker.Remove(failure))">
                                @failure.Error!.Message
                            </Error>
                        }
                    </div>
                </div>
            }
            <NoComponent @key="BodyKey">
                <ErrorBarrier>@Body</ErrorBarrier>
            </NoComponent>
        </div>
    </div>
</div>

@code {
    private static readonly object BodyKey = new();

    [Inject] private UIActionFailureTracker UIActionFailureTracker { get; init; } = null!;
    [Inject] private NavigationManager Nav { get; init; } = null!;

    protected override void OnInitialized() {
        Nav.LocationChanged += OnLocationChanged;
        UIActionFailureTracker.Changed += OnCommandFailureListChanged;
    }

    public void Dispose() {
        UIActionFailureTracker.Changed -= OnCommandFailureListChanged;
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e) {
        UIActionFailureTracker.Clear();
        StateHasChanged();
    }

    private void OnCommandFailureListChanged()
        => InvokeAsync(StateHasChanged);
}
