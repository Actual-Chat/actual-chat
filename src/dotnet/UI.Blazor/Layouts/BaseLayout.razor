@inherits LayoutComponentBase
@using ActualChat.UI.Blazor.Services
@using ActualChat.UI.Blazor.Module
@using ActualChat.Hosting
@implements IDisposable
@implements IBaseLayoutBackend
@{
    var failures = UIActionFailureTracker.Items;
}

<div class="base-layout bg-02 flex-1 flex-x h-full max-h-full relative">
    <div class="base-layout-body">
        <div class="bg-01 flex-1 overflow-hidden">
            @if (failures.Count != 0) {
                <div class="error-container custom-scrollbar">
                    <div class="relative flex-y gap-y-1 h-full overflow-y-auto custom-scrollbar">
                        @foreach (var failure in failures) {
                            <Error @key="failure"
                                   Title="Action failed!"
                                   Dismissed="@(_ => UIActionFailureTracker.Remove(failure))">
                                @failure.Error!.Message
                            </Error>
                        }
                    </div>
                </div>
            }
            <NoComponent @key="BodyKey">
                @Body
            </NoComponent>
        </div>
    </div>
</div>

<MenuHost />
@if (ScreenSize.IsWide()) {
    <TooltipHost />
}

@code {
    private static readonly object BodyKey = new();
    private DotNetObjectReference<IBaseLayoutBackend> BlazorRef { get; set; } = null!;

    [Inject] private UIActionFailureTracker UIActionFailureTracker { get; init; } = null!;
    [Inject] private NavigationManager Nav { get; init; } = null!;
    [Inject] private NotificationNavigationHandler NotificationHandler { get; init; } = null!;
    [Inject] private IJSRuntime JS { get; init; } = null!;
    [Inject] private HostInfo HostInfo { get; init; } = null!;

    [CascadingParameter] public ScreenSize ScreenSize { get; set; }

    protected override void OnInitialized() {
        BlazorRef = DotNetObjectReference.Create<IBaseLayoutBackend>(this);
        Nav.LocationChanged += OnLocationChanged;
        UIActionFailureTracker.Changed += OnCommandFailureListChanged;
    }

    protected override async Task OnInitializedAsync() {
        if (BlazorModeHelper.IsServerSideBlazor)
            await JS.InvokeVoidAsync($"{BlazorUICoreModule.ImportName}.reloadOnDeviceAwake").ConfigureAwait(false);
        if (HostInfo.AppKind != AppKind.Maui)
            await JS.InvokeVoidAsync($"{BlazorUICoreModule.ImportName}.registerNotificationHandler", BlazorRef).ConfigureAwait(false);
    }

    public void Dispose() {
        Nav.LocationChanged -= OnLocationChanged;
        UIActionFailureTracker.Changed -= OnCommandFailureListChanged;
    }

    [JSInvokable]
    public Task HandleNotificationNavigation(string url)
        => NotificationHandler.Handle(url);

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e) {
        UIActionFailureTracker.Clear();
        StateHasChanged();
    }

    private void OnCommandFailureListChanged()
        => InvokeAsync(StateHasChanged);
}
