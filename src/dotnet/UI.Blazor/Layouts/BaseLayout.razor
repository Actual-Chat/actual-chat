@inherits LayoutComponentBase
@using ActualChat.UI.Blazor.Services
@using ActualChat.UI.Blazor.Module
@using Microsoft.JSInterop.Implementation
@implements IDisposable
@{
    var failures = UICommandFailureList.Items;
    var version = "v" + (GetType().Assembly.GetInformationalVersion() ?? "n/a").Replace('+', ' ');
}

<div class="absolute z-50">
    <NavbarToggle/>
</div>
<div class="bg-primary flex-1 flex-x justify-items-stretch h-full max-h-full relative">
    <input id="navbar-toggle" class="hidden" type="checkbox" @bind="@NavbarUI.IsVisible"/>
    <nav id="navbar" class="navbar text-primary bg-primary z-50 absolute top-0 left-0 flex flex-row md:static justify-between h-full w-full md:w-64 lg:w-80 overflow-y-hidden transform -translate-x-full md:translate-x-0 transition-all duration-200 ease-in-out">
        <div class="flex-1 flex-y overflow-y-hidden">
            <div class="absolute">
                <NavbarToggle/>
            </div>
            <div class="navbar-mobile-title md:hidden
                        flex-1 flex flex-row items-center justify-end px-4 py-3
                        bg-accent font-semibold">
                <NavbarMobileTitle/>
            </div>
            <div class="flex-x h-full overflow-y-hidden">
                <div class="navbar-group-toggles">
                    <NavbarGroupToggles/>
                </div>
                <div class="flex-y w-full h-full overflow-y-hidden">
                    <div class="flex-x justify-center mt-2">
                        <NavbarLogo />
                    </div>
                    <div class="navbar-content flex-auto flex-y overflow-y-auto custom-scrollbar px-2 m-2">
                        <NavbarContent />
                    </div>
                    @* Bottom sticky panel *@
                    <div class="flex-none flex-y">
                            <div class="flex-y text-xxs p-3">
                                <div class="px-0.5"><b class="text-primary font-medium">@version</b></div>
                                <div class="pt-0.5"><BlazorModeToggle/></div>
                            </div>
                        <div class="flex-none flex-y justify-center items-start w-full py-2 px-2.5 border-t-2 border-accent min-h-footer">
                            <AccountDropdown/>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </nav>
    <div class="flex-1 overflow-y-auto flex-y relative float-left">
        <div class="bg-secondary flex-1 overflow-y-auto">
            @if (failures.Count != 0) {
                <div class="flex-y absolute z-50 right-0 mr-2 mt-12 md:mt-2 w-4/5 md:w-1/4 overflow-y-auto">
                    @foreach (var failure in failures) {
                        <WhenCommandError
                            Error="failure.Result?.Error"
                            Dismissed="@(_ => UICommandFailureList.Remove(failure.CommandId))"/>
                    }
                </div>
            }
            @Body
        </div>
    </div>
</div>

@code {
    [Inject] private NavigationManager Nav { get; init; } = null!;
    [Inject] private UICommandFailureList UICommandFailureList { get; init; } = null!;
    [Inject] private NavbarUI NavbarUI { get; init; } = null!;
    [Inject] private IJSRuntime JS { get; init; } = null!;

    protected override void OnInitialized() {
        Nav.LocationChanged += OnLocationChanged;
        UICommandFailureList.Changed += OnCommandFailureListChanged;
    }

    protected override async Task OnInitializedAsync() {
        if (BlazorModeHelper.IsServerSideBlazor) {
            await JS.InvokeVoidAsync($"{BlazorUICoreModule.ImportName}.reloadOnDeviceAwake").ConfigureAwait(false);
        }
    }

    public void Dispose() {
        Nav.LocationChanged -= OnLocationChanged;
        UICommandFailureList.Changed -= OnCommandFailureListChanged;
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e) {
        UICommandFailureList.Clear();
        NavbarUI.IsVisible = false;
        StateHasChanged();
    }

    private void OnCommandFailureListChanged()
        => InvokeAsync(StateHasChanged);
}
