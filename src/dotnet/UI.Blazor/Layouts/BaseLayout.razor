@inherits LayoutComponentBase
@using ActualChat.UI.Blazor.Services
@using ActualChat.UI.Blazor.Module
@using ActualChat.UI.Blazor.Components.SideNav
@using System.Text.RegularExpressions
@implements IDisposable
@implements IBaseLayoutBackend
@{
    var failures = UIActionFailureTracker.Items;
}

<div class="base-layout bg-02 flex-1 flex-x h-full max-h-full relative">
    <input id="navbar-button" class="hidden" type="checkbox" @bind="@NavbarUI.IsVisible"/>
    <SideNav Direction="SideNavDirection.LeftToRight"
             Opened="() => NavbarUI.IsVisible = true"
             Closed="() => NavbarUI.IsVisible = false"
             IsOpen="@NavbarUI.IsVisible">
        <div class="h-full w-full overflow-hidden bg-04">
            <LeftPanel/>
        </div>
    </SideNav>
    <div class="base-layout-body">
        <div class="bg-01 flex-1 overflow-y-auto">
            @if (failures.Count != 0) {
                <div class="error-container custom-scrollbar">
                    <div class="relative flex-y gap-y-1 h-full overflow-y-auto custom-scrollbar">
                        @foreach (var failure in failures) {
                            <Error @key="failure"
                                   Title="Action failed!"
                                   Dismissed="@(_ => UIActionFailureTracker.Remove(failure))">
                                @failure.Error!.Message
                            </Error>
                        }
                    </div>
                </div>
            }
            <NoComponent @key="BodyKey">
                @Body
            </NoComponent>
        </div>
    </div>
</div>

<div class="ac-tooltip">
    <div class="ac-tooltip-text"></div>
    <div class="ac-tooltip-arrow"></div>
</div>

@code {
    private static readonly object BodyKey = new();
    private DotNetObjectReference<IBaseLayoutBackend> BlazorRef { get; set; } = null!;

    [Inject] private UIActionFailureTracker UIActionFailureTracker { get; init; } = null!;
    [Inject] private NavbarUI NavbarUI { get; init; } = null!;
    [Inject] private NavigationManager Nav { get; init; } = null!;
    [Inject] private IJSRuntime JS { get; init; } = null!;

    protected override void OnInitialized() {
        BlazorRef = DotNetObjectReference.Create<IBaseLayoutBackend>(this);
        Nav.LocationChanged += OnLocationChanged;
        UIActionFailureTracker.Changed += OnCommandFailureListChanged;
    }

    protected override async Task OnInitializedAsync() {
        if (BlazorModeHelper.IsServerSideBlazor)
            await JS.InvokeVoidAsync($"{BlazorUICoreModule.ImportName}.reloadOnDeviceAwake").ConfigureAwait(false);
        await JS.InvokeVoidAsync($"{BlazorUICoreModule.ImportName}.registerNotificationHandler", BlazorRef).ConfigureAwait(false);
    }

    public void Dispose() {
        Nav.LocationChanged -= OnLocationChanged;
        UIActionFailureTracker.Changed -= OnCommandFailureListChanged;
    }

    [JSInvokable]
    public Task HandleNotificationNavigation(string url) {
        var origin = Nav.BaseUri.TrimEnd('/');
        if (url.IsNullOrEmpty() || !url.StartsWith(origin))
            return Task.CompletedTask;

        var chatPageRe = new Regex($"^{origin}/chat/(?<chatid>[a-z0-9-]+)(?:#(?<entryid>)\\d+)?");
        var match = chatPageRe.Match(url);
        if (!match.Success)
            return Task.CompletedTask;

        var chatIdGroup = match.Groups["chatid"];
        if (chatIdGroup.Success) {
            Nav.NavigateTo(url, new NavigationOptions{ ForceLoad = false, ReplaceHistoryEntry = false });
        }
        return Task.CompletedTask;
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e) {
        UIActionFailureTracker.Clear();
        NavbarUI.IsVisible = false;
        StateHasChanged();
    }

    private void OnCommandFailureListChanged()
        => InvokeAsync(StateHasChanged);
}
