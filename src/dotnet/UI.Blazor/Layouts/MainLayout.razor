@inherits LayoutComponentBase
@implements IDisposable
@inject NavigationManager _navigator
@inject UICommandFailureList _commandFailureList

@{
    var failures = _commandFailureList.Items;
    var version = "v" + (GetType().Assembly.GetInformationalVersion() ?? "n/a").Replace('+', ' ');
}
<Navbar />
<div class="navbar">
    <input id="navbar-toggle" class="hidden" type="checkbox" />
    <nav id="navbar-links" class="links">
        <div class="flex-1 flex flex-col overflow-y-auto">
            <div class="hidden md:flex flex-row flex-nowrap justify-center">
                <NavbarLogo />
            </div>
            <div class="flex-1 flex flex-col overflow-y-auto">
                <NavbarLinks />
            </div>
        </div>
        @* Bottom sticky panel *@
        <div class="flex flex-col sticky items-stretch">
            <div class="version-info">
                <span class="version"><b>@version</b></span>
                <br/>
            </div>
            <div class="version-info">
                <BlazorModeToggle />
                <br/>
                <MediaRecorderToggle />
                @* TODO: FIX WTF LAYOUT AND CSS! *@
                <br/>
                <AudioPlayerToggle />
            </div>
            <div class="account-dropdown">
                <AccountDropdown />
            </div>
        </div>
    </nav>
    <div class="flex-1 overflow-y-auto flex flex-col relative">
        <div class="failure">
            @foreach (var failure in failures) {
                <WhenCommandError
                    Error="failure.Result?.Error"
                    Dismissed="@(_ => _commandFailureList.Remove(failure.CommandId))" />
            }
            @Body
        </div>
    </div>
</div>

@code {
    protected override void OnInitialized() {
        _navigator.LocationChanged += OnLocationChanged;
        _commandFailureList.Changed += OnCommandFailureListChanged;
    }

    public void Dispose() {
        _navigator.LocationChanged -= OnLocationChanged;
        _commandFailureList.Changed -= OnCommandFailureListChanged;
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
        => _commandFailureList.Clear();

    private void OnCommandFailureListChanged()
        => InvokeAsync(StateHasChanged);
}
