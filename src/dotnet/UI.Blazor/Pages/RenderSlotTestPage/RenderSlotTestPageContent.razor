@inherits ComputedStateComponent<Moment>
@{
    var time = State.Value;
    var second = (long) time.ToDateTime().TimeOfDay.TotalSeconds;
}

<RenderIntoSlot Name="TestHeader">
    Header: <TestTimer UpdatePeriod="3"/> + @time.ToString("F")
</RenderIntoSlot>

@if (second / 3 % 2 == 0) {
    <RenderIntoStack Name="TestFooter" Key="f1" MustPrepend="true">
        Footer 3/2: <TestTimer UpdatePeriod="3"/>
    </RenderIntoStack>
}
@if (second / 5 % 2 == 0) {
    <RenderIntoStack Name="TestFooter" Key="f2" MustPrepend="true">
        Footer 5/2: <TestTimer UpdatePeriod="5"/>
    </RenderIntoStack>
}
<RenderIntoStack Name="TestFooter" Key="f3" Order="1">
    Footer 1: <TestTimer UpdatePeriod="1"/>
</RenderIntoStack>

Content: @DateTime.Now.ToString("F")

@code {
    [Inject] private IFusionTime FusionTime { get; init; } = null!;

    protected override ComputedState<Moment>.Options GetStateOptions()
        => ComputedStateComponent.GetStateOptions(GetType(),
            static t => new ComputedState<Moment>.Options() {
                InitialValue = MomentClockSet.Default.SystemClock.Now,
                Category = ComputedStateComponent.GetStateCategory(t),
            });

    protected override async Task<Moment> ComputeState(CancellationToken cancellationToken)
        => await FusionTime.Now(TimeSpan.FromSeconds(1)).ConfigureAwait(false);
}
