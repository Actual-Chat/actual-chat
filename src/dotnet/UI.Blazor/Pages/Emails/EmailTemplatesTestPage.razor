@page "/test/email-templates"
@using ActualChat.UI.Blazor.Services
@using ActualChat.Users
@namespace ActualChat.UI.Blazor.Pages.Emails

<RequireAccount MustBeAdmin="true"/>
<MainHeader>Email templates</MainHeader>

<Form Model="@_form">
    <FormBlock>
        <FormSection
            For="() => _model.SelectedTemplate"
            InputId="template"
            IsLabelInsideInput="true"
            HideValidationMessage="true"
            Label="Template">
            <InputSelect
                Value="_model.SelectedTemplateName"
                ValueExpression="@(() => _model.SelectedTemplateName)"
                ValueChanged="@((string value) => OnSelectedTemplateChanged(value))">
                @foreach (var template in _model.Templates) {
                    <option value="@template.Name">@template.Name</option>
                }
            </InputSelect>
        </FormSection>
    </FormBlock>
</Form>

@if (_model.SelectedTemplate is null)
    return;

@if (_model.SelectedTemplate.Name == "Digest") {
    <Button Click="SendDigest">Send Digest</Button>
}

<MjmlHtmlPreview ComponentType="@(_model.SelectedTemplate.ComponentType)"/>

@code {
    private Model _model = null!;
    private FormModel _form = null!;

    [Inject] private ComponentIdGenerator ComponentIdGenerator { get; init; } = null!;
    [Inject] private UIHub Hub { get; init; } = null!;

    protected override void OnInitialized() {
        _form = new(ComponentIdGenerator);
        var templates = new List<EmailTemplateModel> {
            new() {
                Name = "Email verification",
                ComponentType = typeof(EmailVerificationPreview),
            },
            new() {
                Name = "Digest",
                ComponentType = typeof(DigestPreview),
            },
        };

        var selectedTemplate = templates.Last();
        _model = new Model {
            SelectedTemplateName = selectedTemplate.Name,
            SelectedTemplate = selectedTemplate,
            Templates = templates,
        };
    }

    private void OnSelectedTemplateChanged(string name) {
        _model.SelectedTemplateName = name;
        _model.SelectedTemplate = _model.Templates.FirstOrDefault(x => string.Equals(x.Name, name, StringComparison.Ordinal));
    }

    private async Task SendDigest() {
        /*
        var session = Hub.Session();
        var account = await Hub.Accounts.GetOwn(session, CancellationToken.None).ConfigureAwait(false);
        var sendDigestCommand = new Emails_SendDigest(account.Id);
        var commander = Hub.UICommander();
        var (_, error) = await commander.Run(sendDigestCommand, CancellationToken.None).ConfigureAwait(false);
        if (error is not null) {
            Hub.ToastUI.Show($"Error: {error.Message}", ToastDismissDelay.Long);
        } else {
            Hub.ToastUI.Show("The digest has been sent", ToastDismissDelay.Short);
        }
        */
        Hub.ToastUI.Show("This feature is waiting for its proper implementation.", ToastDismissDelay.Long);
    }

    public class Model {
        public required string SelectedTemplateName { get; set; }
        public required EmailTemplateModel? SelectedTemplate { get; set; }
        public required IReadOnlyCollection<EmailTemplateModel> Templates { get; init; }
    }

    public record EmailTemplateModel {
        public required string Name { get; init; }
        public required Type ComponentType { get; init; }
    }

    public sealed class FormModel : FormModel<FormModel> {
        public FormModel(ComponentIdGenerator? componentIdGenerator)
            : base("email-templates", componentIdGenerator)
        { }
    }
}
