@page "/test/features"
@using ActualChat.UI.Blazor.Services
@using ActualChat.Hosting
@inherits ComputedStateComponent<FeaturesTestPage.Model>
@{
    var m = State.Value;
}

<RequireAccount MustBeAdmin="true"/>
<MainHeader>Features Test Page</MainHeader>

<p>Client user: @(m.ClientUser?.Name ?? "n/a")</p>
<p>Server time: @(m.ServerTime)</p>
<p>Enable incomplete UI: @(m.EnableIncompleteUI)</p>
<p>Environment: @(m.Environment)</p>

@code {
    [Inject] private Features Features { get; init; } = null!;
    [Inject] private HostInfo HostInfo { get; init; } = null!;

    protected override ComputedState<Model>.Options GetStateOptions()
        => new() {
            InitialValue = Model.None,
            Category = GetStateCategory(),
        };


    protected override async Task<Model> ComputeState(CancellationToken cancellationToken)
        => new() {
            ClientUser = await Features.Get<TestFeatures.ClientUser, User?>(cancellationToken),
            ServerTime = await Features.Get<TestFeatures.ServerTime, Moment>(cancellationToken),
            EnableIncompleteUI = await Features.Get<UIFeatures.EnableIncompleteUI, bool>(cancellationToken),
            Environment = HostInfo.Environment.Value,
        };

    // Nested types

    public sealed record Model
    {
        public static Model None { get; } = new();

        public User? ClientUser { get; init; }
        public Moment ServerTime { get; init; }
        public bool EnableIncompleteUI { get; init; }
        public Symbol Environment { get; init; }
    }
}
