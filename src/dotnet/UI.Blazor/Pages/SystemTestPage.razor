@page "/test/system"
@using ActualChat.Hosting
@using ActualChat.Users

<RequireAccount MustBeAdmin="true"/>
<MainHeader>System Test Page</MainHeader>

<p>AgentId: <b>@(AgentInfo.Id)</b></p>
<p>App kind: <b>@(HostInfo.AppKind)</b></p>
<p>Required service scopes: <b>@(HostInfo.RequiredServiceScopes.ToDelimitedString())</b></p>

<p>Invalidate everything:
    <Button Click="@OnInvalidateEverythingLocallyClick">Locally</Button>
    <Button Click="@(_ => OnInvalidateEverythingClick(false))">On this front-end</Button>
    <Button Click="@(_ => OnInvalidateEverythingClick(true))">Everywhere</Button>
</p>
<p>Garbage collection:
    <Button Click="@OnGCCollectClick">GC.Collect() x 3</Button>
</p>

@code {
    [Inject] private Session Session { get; init; } = null!;
    [Inject] private AgentInfo AgentInfo { get; init; } = null!;
    [Inject] private HostInfo HostInfo { get; init; } = null!;
    [Inject] private UICommander UICommander { get; init; } = null!;

    private Task OnInvalidateEverythingLocallyClick() {
        ComputedRegistry.Instance.InvalidateEverything();
        return Task.CompletedTask;
    }

    private async Task OnInvalidateEverythingClick(bool everywhere) {
        var command = new Accounts_InvalidateEverything(Session, everywhere);
        await UICommander.Run(command);
    }

    private async Task OnGCCollectClick() {
        for (var i = 0; i < 3; i++) {
            if (i != 0)
                await Task.Delay(500);
            GC.Collect();
        }
    }


}
