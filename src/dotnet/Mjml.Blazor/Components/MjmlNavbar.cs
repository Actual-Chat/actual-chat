// <auto-generated />
using ActualChat.Mjml.Blazor.Enums;
using Microsoft.AspNetCore.Components;
using Microsoft.AspNetCore.Components.Rendering;

namespace ActualChat.Mjml.Blazor.Components;

public class MjmlNavbar : ComponentBase
{
    [Parameter] public MjmlNavbarAlign? Align { get; set; }
    [Parameter] public string? BaseUrl { get; set; }
    [Parameter] public string? CssClass { get; set; }
    [Parameter] public string? Hamburger { get; set; }
    [Parameter] public MjmlNavbarIcoAlign? IcoAlign { get; set; }
    [Parameter] public string? IcoClose { get; set; }
    [Parameter] public string? IcoColor { get; set; }
    [Parameter] public string? IcoFontFamily { get; set; }
    [Parameter] public string? IcoFontSize { get; set; }
    [Parameter] public string? IcoLineHeight { get; set; }
    [Parameter] public string? IcoOpen { get; set; }
    [Parameter] public string? IcoPadding { get; set; }
    [Parameter] public string? IcoPaddingBottom { get; set; }
    [Parameter] public string? IcoPaddingLeft { get; set; }
    [Parameter] public string? IcoPaddingRight { get; set; }
    [Parameter] public string? IcoPaddingTop { get; set; }
    [Parameter] public string? IcoTextDecoration { get; set; }
    [Parameter] public string? IcoTextTransform { get; set; }
    [Parameter] public string? MjmlClass { get; set; }
    [Parameter] public string? Padding { get; set; }
    [Parameter] public string? PaddingBottom { get; set; }
    [Parameter] public string? PaddingLeft { get; set; }
    [Parameter] public string? PaddingRight { get; set; }
    [Parameter] public string? PaddingTop { get; set; }
    [Parameter] public RenderFragment? ChildContent { get; set; }

    protected override void BuildRenderTree(RenderTreeBuilder builder)
    {
        builder.OpenElement(0, "mj-navbar");
        if (Align is not null)
            builder.AddAttribute(1, "align", Align.Value.ToMjmlValue());
        if (BaseUrl is not null)
            builder.AddAttribute(2, "base-url", BaseUrl);
        if (CssClass is not null)
            builder.AddAttribute(3, "css-class", CssClass);
        if (Hamburger is not null)
            builder.AddAttribute(4, "hamburger", Hamburger);
        if (IcoAlign is not null)
            builder.AddAttribute(5, "ico-align", IcoAlign.Value.ToMjmlValue());
        if (IcoClose is not null)
            builder.AddAttribute(6, "ico-close", IcoClose);
        if (IcoColor is not null)
            builder.AddAttribute(7, "ico-color", IcoColor);
        if (IcoFontFamily is not null)
            builder.AddAttribute(8, "ico-font-family", IcoFontFamily);
        if (IcoFontSize is not null)
            builder.AddAttribute(9, "ico-font-size", IcoFontSize);
        if (IcoLineHeight is not null)
            builder.AddAttribute(10, "ico-line-height", IcoLineHeight);
        if (IcoOpen is not null)
            builder.AddAttribute(11, "ico-open", IcoOpen);
        if (IcoPadding is not null)
            builder.AddAttribute(12, "ico-padding", IcoPadding);
        if (IcoPaddingBottom is not null)
            builder.AddAttribute(13, "ico-padding-bottom", IcoPaddingBottom);
        if (IcoPaddingLeft is not null)
            builder.AddAttribute(14, "ico-padding-left", IcoPaddingLeft);
        if (IcoPaddingRight is not null)
            builder.AddAttribute(15, "ico-padding-right", IcoPaddingRight);
        if (IcoPaddingTop is not null)
            builder.AddAttribute(16, "ico-padding-top", IcoPaddingTop);
        if (IcoTextDecoration is not null)
            builder.AddAttribute(17, "ico-text-decoration", IcoTextDecoration);
        if (IcoTextTransform is not null)
            builder.AddAttribute(18, "ico-text-transform", IcoTextTransform);
        if (MjmlClass is not null)
            builder.AddAttribute(19, "mj-class", MjmlClass);
        if (Padding is not null)
            builder.AddAttribute(20, "padding", Padding);
        if (PaddingBottom is not null)
            builder.AddAttribute(21, "padding-bottom", PaddingBottom);
        if (PaddingLeft is not null)
            builder.AddAttribute(22, "padding-left", PaddingLeft);
        if (PaddingRight is not null)
            builder.AddAttribute(23, "padding-right", PaddingRight);
        if (PaddingTop is not null)
            builder.AddAttribute(24, "padding-top", PaddingTop);
        if (ChildContent is not null)
            builder.AddContent(25, ChildContent);
        builder.CloseElement();
    }
}
