// <auto-generated />
using Microsoft.AspNetCore.Components;
using Microsoft.AspNetCore.Components.Rendering;

namespace ActualChat.Mjml.Blazor.Components;

public class MjmlSpacer : ComponentBase
{
    [Parameter] public string? Border { get; set; }
    [Parameter] public string? BorderBottom { get; set; }
    [Parameter] public string? BorderLeft { get; set; }
    [Parameter] public string? BorderRight { get; set; }
    [Parameter] public string? BorderTop { get; set; }
    [Parameter] public string? ContainerBackgroundColor { get; set; }
    [Parameter] public string? CssClass { get; set; }
    [Parameter] public string? Height { get; set; }
    [Parameter] public string? MjmlClass { get; set; }
    [Parameter] public string? Padding { get; set; }
    [Parameter] public string? PaddingBottom { get; set; }
    [Parameter] public string? PaddingLeft { get; set; }
    [Parameter] public string? PaddingRight { get; set; }
    [Parameter] public string? PaddingTop { get; set; }

    protected override void BuildRenderTree(RenderTreeBuilder builder)
    {
        builder.OpenElement(0, "mj-spacer");
        if (Border is not null)
            builder.AddAttribute(1, "border", Border);
        if (BorderBottom is not null)
            builder.AddAttribute(2, "border-bottom", BorderBottom);
        if (BorderLeft is not null)
            builder.AddAttribute(3, "border-left", BorderLeft);
        if (BorderRight is not null)
            builder.AddAttribute(4, "border-right", BorderRight);
        if (BorderTop is not null)
            builder.AddAttribute(5, "border-top", BorderTop);
        if (ContainerBackgroundColor is not null)
            builder.AddAttribute(6, "container-background-color", ContainerBackgroundColor);
        if (CssClass is not null)
            builder.AddAttribute(7, "css-class", CssClass);
        if (Height is not null)
            builder.AddAttribute(8, "height", Height);
        if (MjmlClass is not null)
            builder.AddAttribute(9, "mj-class", MjmlClass);
        if (Padding is not null)
            builder.AddAttribute(10, "padding", Padding);
        if (PaddingBottom is not null)
            builder.AddAttribute(11, "padding-bottom", PaddingBottom);
        if (PaddingLeft is not null)
            builder.AddAttribute(12, "padding-left", PaddingLeft);
        if (PaddingRight is not null)
            builder.AddAttribute(13, "padding-right", PaddingRight);
        if (PaddingTop is not null)
            builder.AddAttribute(14, "padding-top", PaddingTop);
        builder.CloseElement();
    }
}
