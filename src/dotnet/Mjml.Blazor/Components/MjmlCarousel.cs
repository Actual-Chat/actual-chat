// <auto-generated />
using ActualChat.Mjml.Blazor.Enums;
using Microsoft.AspNetCore.Components;
using Microsoft.AspNetCore.Components.Rendering;

namespace ActualChat.Mjml.Blazor.Components;

public class MjmlCarousel : ComponentBase
{
    [Parameter] public MjmlCarouselAlign? Align { get; set; }
    [Parameter] public string? BorderRadius { get; set; }
    [Parameter] public string? ContainerBackgroundColor { get; set; }
    [Parameter] public string? CssClass { get; set; }
    [Parameter] public string? IconWidth { get; set; }
    [Parameter] public string? LeftIcon { get; set; }
    [Parameter] public string? MjmlClass { get; set; }
    [Parameter] public string? Padding { get; set; }
    [Parameter] public string? PaddingBottom { get; set; }
    [Parameter] public string? PaddingLeft { get; set; }
    [Parameter] public string? PaddingRight { get; set; }
    [Parameter] public string? PaddingTop { get; set; }
    [Parameter] public string? RightIcon { get; set; }
    [Parameter] public string? TbBorder { get; set; }
    [Parameter] public string? TbBorderRadius { get; set; }
    [Parameter] public string? TbHoverBorderColor { get; set; }
    [Parameter] public string? TbSelectedBorderColor { get; set; }
    [Parameter] public string? TbWidth { get; set; }
    [Parameter] public MjmlCarouselThumbnails? Thumbnails { get; set; }
    [Parameter] public RenderFragment? ChildContent { get; set; }

    protected override void BuildRenderTree(RenderTreeBuilder builder)
    {
        builder.OpenElement(0, "mj-carousel");
        if (Align is not null)
            builder.AddAttribute(1, "align", Align.Value.ToMjmlValue());
        if (BorderRadius is not null)
            builder.AddAttribute(2, "border-radius", BorderRadius);
        if (ContainerBackgroundColor is not null)
            builder.AddAttribute(3, "container-background-color", ContainerBackgroundColor);
        if (CssClass is not null)
            builder.AddAttribute(4, "css-class", CssClass);
        if (IconWidth is not null)
            builder.AddAttribute(5, "icon-width", IconWidth);
        if (LeftIcon is not null)
            builder.AddAttribute(6, "left-icon", LeftIcon);
        if (MjmlClass is not null)
            builder.AddAttribute(7, "mj-class", MjmlClass);
        if (Padding is not null)
            builder.AddAttribute(8, "padding", Padding);
        if (PaddingBottom is not null)
            builder.AddAttribute(9, "padding-bottom", PaddingBottom);
        if (PaddingLeft is not null)
            builder.AddAttribute(10, "padding-left", PaddingLeft);
        if (PaddingRight is not null)
            builder.AddAttribute(11, "padding-right", PaddingRight);
        if (PaddingTop is not null)
            builder.AddAttribute(12, "padding-top", PaddingTop);
        if (RightIcon is not null)
            builder.AddAttribute(13, "right-icon", RightIcon);
        if (TbBorder is not null)
            builder.AddAttribute(14, "tb-border", TbBorder);
        if (TbBorderRadius is not null)
            builder.AddAttribute(15, "tb-border-radius", TbBorderRadius);
        if (TbHoverBorderColor is not null)
            builder.AddAttribute(16, "tb-hover-border-color", TbHoverBorderColor);
        if (TbSelectedBorderColor is not null)
            builder.AddAttribute(17, "tb-selected-border-color", TbSelectedBorderColor);
        if (TbWidth is not null)
            builder.AddAttribute(18, "tb-width", TbWidth);
        if (Thumbnails is not null)
            builder.AddAttribute(19, "thumbnails", Thumbnails.Value.ToMjmlValue());
        if (ChildContent is not null)
            builder.AddContent(20, ChildContent);
        builder.CloseElement();
    }
}
