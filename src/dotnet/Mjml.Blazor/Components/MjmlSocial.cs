// <auto-generated />
using ActualChat.Mjml.Blazor.Enums;
using Microsoft.AspNetCore.Components;
using Microsoft.AspNetCore.Components.Rendering;

namespace ActualChat.Mjml.Blazor.Components;

public class MjmlSocial : ComponentBase
{
    [Parameter] public MjmlSocialAlign? Align { get; set; }
    [Parameter] public string? BorderRadius { get; set; }
    [Parameter] public string? Color { get; set; }
    [Parameter] public string? ContainerBackgroundColor { get; set; }
    [Parameter] public string? CssClass { get; set; }
    [Parameter] public string? FontFamily { get; set; }
    [Parameter] public string? FontSize { get; set; }
    [Parameter] public string? FontStyle { get; set; }
    [Parameter] public string? FontWeight { get; set; }
    [Parameter] public string? IconHeight { get; set; }
    [Parameter] public string? IconPadding { get; set; }
    [Parameter] public string? IconSize { get; set; }
    [Parameter] public string? InnerPadding { get; set; }
    [Parameter] public string? LineHeight { get; set; }
    [Parameter] public string? MjmlClass { get; set; }
    [Parameter] public MjmlSocialMode? Mode { get; set; }
    [Parameter] public string? Padding { get; set; }
    [Parameter] public string? PaddingBottom { get; set; }
    [Parameter] public string? PaddingLeft { get; set; }
    [Parameter] public string? PaddingRight { get; set; }
    [Parameter] public string? PaddingTop { get; set; }
    [Parameter] public MjmlSocialTableLayout? TableLayout { get; set; }
    [Parameter] public string? TextDecoration { get; set; }
    [Parameter] public string? TextPadding { get; set; }
    [Parameter] public MjmlSocialVerticalAlign? VerticalAlign { get; set; }
    [Parameter] public RenderFragment? ChildContent { get; set; }

    protected override void BuildRenderTree(RenderTreeBuilder builder)
    {
        builder.OpenElement(0, "mj-social");
        if (Align is not null)
            builder.AddAttribute(1, "align", Align.Value.ToMjmlValue());
        if (BorderRadius is not null)
            builder.AddAttribute(2, "border-radius", BorderRadius);
        if (Color is not null)
            builder.AddAttribute(3, "color", Color);
        if (ContainerBackgroundColor is not null)
            builder.AddAttribute(4, "container-background-color", ContainerBackgroundColor);
        if (CssClass is not null)
            builder.AddAttribute(5, "css-class", CssClass);
        if (FontFamily is not null)
            builder.AddAttribute(6, "font-family", FontFamily);
        if (FontSize is not null)
            builder.AddAttribute(7, "font-size", FontSize);
        if (FontStyle is not null)
            builder.AddAttribute(8, "font-style", FontStyle);
        if (FontWeight is not null)
            builder.AddAttribute(9, "font-weight", FontWeight);
        if (IconHeight is not null)
            builder.AddAttribute(10, "icon-height", IconHeight);
        if (IconPadding is not null)
            builder.AddAttribute(11, "icon-padding", IconPadding);
        if (IconSize is not null)
            builder.AddAttribute(12, "icon-size", IconSize);
        if (InnerPadding is not null)
            builder.AddAttribute(13, "inner-padding", InnerPadding);
        if (LineHeight is not null)
            builder.AddAttribute(14, "line-height", LineHeight);
        if (MjmlClass is not null)
            builder.AddAttribute(15, "mj-class", MjmlClass);
        if (Mode is not null)
            builder.AddAttribute(16, "mode", Mode.Value.ToMjmlValue());
        if (Padding is not null)
            builder.AddAttribute(17, "padding", Padding);
        if (PaddingBottom is not null)
            builder.AddAttribute(18, "padding-bottom", PaddingBottom);
        if (PaddingLeft is not null)
            builder.AddAttribute(19, "padding-left", PaddingLeft);
        if (PaddingRight is not null)
            builder.AddAttribute(20, "padding-right", PaddingRight);
        if (PaddingTop is not null)
            builder.AddAttribute(21, "padding-top", PaddingTop);
        if (TableLayout is not null)
            builder.AddAttribute(22, "table-layout", TableLayout.Value.ToMjmlValue());
        if (TextDecoration is not null)
            builder.AddAttribute(23, "text-decoration", TextDecoration);
        if (TextPadding is not null)
            builder.AddAttribute(24, "text-padding", TextPadding);
        if (VerticalAlign is not null)
            builder.AddAttribute(25, "vertical-align", VerticalAlign.Value.ToMjmlValue());
        if (ChildContent is not null)
            builder.AddContent(26, ChildContent);
        builder.CloseElement();
    }
}
