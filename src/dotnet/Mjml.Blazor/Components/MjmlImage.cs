// <auto-generated />
using ActualChat.Mjml.Blazor.Enums;
using Microsoft.AspNetCore.Components;
using Microsoft.AspNetCore.Components.Rendering;

namespace ActualChat.Mjml.Blazor.Components;

public class MjmlImage : ComponentBase
{
    [Parameter] public MjmlImageAlign? Align { get; set; }
    [Parameter] public string? Alt { get; set; }
    [Parameter] public string? Border { get; set; }
    [Parameter] public string? BorderBottom { get; set; }
    [Parameter] public string? BorderLeft { get; set; }
    [Parameter] public string? BorderRadius { get; set; }
    [Parameter] public string? BorderRight { get; set; }
    [Parameter] public string? BorderTop { get; set; }
    [Parameter] public string? ContainerBackgroundColor { get; set; }
    [Parameter] public string? CssClass { get; set; }
    [Parameter] public bool? FluidOnMobile { get; set; }
    [Parameter] public string? FontSize { get; set; }
    [Parameter] public string? Height { get; set; }
    [Parameter] public string? Href { get; set; }
    [Parameter] public string? MaxHeight { get; set; }
    [Parameter] public string? MjmlClass { get; set; }
    [Parameter] public string? Name { get; set; }
    [Parameter] public string? Padding { get; set; }
    [Parameter] public string? PaddingBottom { get; set; }
    [Parameter] public string? PaddingLeft { get; set; }
    [Parameter] public string? PaddingRight { get; set; }
    [Parameter] public string? PaddingTop { get; set; }
    [Parameter] public string? Rel { get; set; }
    [Parameter] public string? Sizes { get; set; }
    [Parameter] public string? Src { get; set; }
    [Parameter] public string? Srcset { get; set; }
    [Parameter] public string? Target { get; set; }
    [Parameter] public string? Title { get; set; }
    [Parameter] public string? Usemap { get; set; }
    [Parameter] public string? Width { get; set; }

    protected override void BuildRenderTree(RenderTreeBuilder builder)
    {
        builder.OpenElement(0, "mj-image");
        if (Align is not null)
            builder.AddAttribute(1, "align", Align.Value.ToMjmlValue());
        if (Alt is not null)
            builder.AddAttribute(2, "alt", Alt);
        if (Border is not null)
            builder.AddAttribute(3, "border", Border);
        if (BorderBottom is not null)
            builder.AddAttribute(4, "border-bottom", BorderBottom);
        if (BorderLeft is not null)
            builder.AddAttribute(5, "border-left", BorderLeft);
        if (BorderRadius is not null)
            builder.AddAttribute(6, "border-radius", BorderRadius);
        if (BorderRight is not null)
            builder.AddAttribute(7, "border-right", BorderRight);
        if (BorderTop is not null)
            builder.AddAttribute(8, "border-top", BorderTop);
        if (ContainerBackgroundColor is not null)
            builder.AddAttribute(9, "container-background-color", ContainerBackgroundColor);
        if (CssClass is not null)
            builder.AddAttribute(10, "css-class", CssClass);
        if (FluidOnMobile is not null)
            builder.AddAttribute(11, "fluid-on-mobile", FluidOnMobile);
        if (FontSize is not null)
            builder.AddAttribute(12, "font-size", FontSize);
        if (Height is not null)
            builder.AddAttribute(13, "height", Height);
        if (Href is not null)
            builder.AddAttribute(14, "href", Href);
        if (MaxHeight is not null)
            builder.AddAttribute(15, "max-height", MaxHeight);
        if (MjmlClass is not null)
            builder.AddAttribute(16, "mj-class", MjmlClass);
        if (Name is not null)
            builder.AddAttribute(17, "name", Name);
        if (Padding is not null)
            builder.AddAttribute(18, "padding", Padding);
        if (PaddingBottom is not null)
            builder.AddAttribute(19, "padding-bottom", PaddingBottom);
        if (PaddingLeft is not null)
            builder.AddAttribute(20, "padding-left", PaddingLeft);
        if (PaddingRight is not null)
            builder.AddAttribute(21, "padding-right", PaddingRight);
        if (PaddingTop is not null)
            builder.AddAttribute(22, "padding-top", PaddingTop);
        if (Rel is not null)
            builder.AddAttribute(23, "rel", Rel);
        if (Sizes is not null)
            builder.AddAttribute(24, "sizes", Sizes);
        if (Src is not null)
            builder.AddAttribute(25, "src", Src);
        if (Srcset is not null)
            builder.AddAttribute(26, "srcset", Srcset);
        if (Target is not null)
            builder.AddAttribute(27, "target", Target);
        if (Title is not null)
            builder.AddAttribute(28, "title", Title);
        if (Usemap is not null)
            builder.AddAttribute(29, "usemap", Usemap);
        if (Width is not null)
            builder.AddAttribute(30, "width", Width);
        builder.CloseElement();
    }
}
