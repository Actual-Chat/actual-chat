@using ActualChat.Hosting
@implements IDisposable
@{
    // We can't render anything till the moment a few key components completed the initialization
    if (_whenReadyToRender is not { IsCompletedSuccessfully: true })
        return;

    Tracer.Point("Rendered");
    LoadingUI.MarkAppReadyToRenderContent();
}

<ScreenSizeProvider>
    <AlwaysVisibleComponents/>

    <Router AppAssembly="UIAssembly" AdditionalAssemblies="UIModuleAssemblies">
        <Found Context="routeData">
            <RequirementChecker>
                <Success>
                    <RouteView RouteData="@routeData" DefaultLayout="@typeof(DefaultLayout)"/>
                </Success>
                <Failure Context="failures">
                    <ErrorBlock Failures="@failures"/>
                </Failure>
            </RequirementChecker>
        </Found>
        <NotFound>
            <PageNotFoundBlock/>
        </NotFound>
    </Router>

</ScreenSizeProvider>

@code {
    private static Assembly? UIAssembly { get; set; }
    private static Assembly[]? UIModuleAssemblies { get; set; }

    private readonly CancellationTokenSource _disposeTokenSource;
    private readonly CancellationToken _disposeToken;
    private Task? _whenReadyToRender;
    private Task? _whenAfterFirstRender;

    [Inject] private IServiceProvider Services { get; init; } = null!;
    [Inject] private ILogger<AppBase> Log { get; init; } = null!;

    [Inject] private ModuleHost Host { get; init; } = null!;
    [Inject] private BlazorCircuitContext CircuitContext { get; init; } = null!;
    [Inject] private AppServiceStarter AppServiceStarter { get; init; } = null!;
    [Inject] private LoadingUI LoadingUI { get; init; } = null!;
    private Tracer Tracer { get; set; } = null!; // Set in OnInitializedAsync

    [Parameter] public string SessionId { get; set; } = Symbol.Empty;

    public AppBase() {
        _disposeTokenSource = new CancellationTokenSource();
        _disposeToken = _disposeTokenSource.Token;
    }

    protected override async Task OnInitializedAsync() {
        LoadingUI.MarkAppInitialized();
        Tracer = Services.Tracer(GetType());
        using var _1 = Tracer.Region(nameof(OnInitialized));

        UIAssembly ??= typeof(AppBase).Assembly;
        UIModuleAssemblies ??= Host.Modules
            .OfType<IBlazorUIModule>()
            .Select(p => p.GetType().Assembly)
            .Where(a => a != UIAssembly)
            .ToArray();
        Tracer.Point("IBlazorUIModule assemblies evaluated");

        if (!SessionId.IsNullOrEmpty()) {
            var session = OSInfo.IsWebAssembly ? Session.Default : new Session(SessionId);
            var sessionProvider = Services.GetRequiredService<ISessionProvider>();
            if (sessionProvider.HasSession) {
                if (sessionProvider.Session != session) {
                    // No way to change Session other than page reload
                    var nav = Services.GetRequiredService<NavigationManager>();
                    nav.NavigateTo(nav.Uri, true);
                }
            }
            else {
                sessionProvider.Session = session;
            }
        }
        CircuitContext.RootComponent = this;
        ((AppBlazorCircuitContext)CircuitContext).MarkRootComponentReady();

        _ = AppServiceStarter.PostSessionSetupWarmup(_disposeToken);
        await (_whenReadyToRender = AppServiceStarter.ReadyToRender(_disposeToken));
    }

    public virtual void Dispose() {
        if (_disposeToken.IsCancellationRequested)
            return;

        _disposeTokenSource.CancelAndDisposeSilently();
        CircuitContext.Dispose();
    }

    protected override bool ShouldRender()
        => _whenReadyToRender is { IsCompletedSuccessfully: true };

    protected override void OnAfterRender(bool firstRender) {
        if (_whenReadyToRender is { IsCompletedSuccessfully: true })
            _whenAfterFirstRender ??= AppServiceStarter.AfterFirstRender(_disposeToken);
    }
}
