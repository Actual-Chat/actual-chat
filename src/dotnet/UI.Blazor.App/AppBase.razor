@using ActualChat.Hosting
@using ActualChat.Module
@using ActualChat.Security
@implements IRootComponent
@implements IDisposable
@{
    if (!_readyToRender)
        return;
    if (_simulatedCrashError != null)
        throw _simulatedCrashError;
}

<ScreenSizeProvider>
    <AlwaysVisibleComponents/>

    <Router AppAssembly="@UIAssembly" AdditionalAssemblies="@UIModuleAssemblies">
        <Found Context="routeData">
            <RequirementChecker>
                <Success>
                    <RouteView RouteData="@routeData" DefaultLayout="@typeof(DefaultLayout)"/>
                </Success>
                <Failure Context="failures">
                    <ErrorBlock Failures="@failures"/>
                </Failure>
            </RequirementChecker>
        </Found>
        <NotFound>
            <PageNotFoundBlock/>
        </NotFound>
    </Router>

</ScreenSizeProvider>

@code {
    private static Assembly UIAssembly { get; } = typeof(AppBase).Assembly;
    private static Assembly[] UIModuleAssemblies { get; set; } = null!;

    private readonly CancellationTokenSource _disposeTokenSource;
    private readonly CancellationToken _disposeToken;
    private bool _readyToRender;
    private bool _shouldRender;
    private Exception? _simulatedCrashError;

    [Inject] protected IServiceProvider Services { get; init; } = null!;
    [Inject] protected ILogger<AppBase> Log { get; init; } = null!;

    [Inject] protected HostInfo HostInfo { get; init; } = null!;
    [Inject] protected ModuleHost Host { get; init; } = null!;
    [Inject] protected BlazorCircuitContext CircuitContext { get; init; } = null!;
    [Inject] protected RenderModeSelector RenderModeSelector { get; init; } = null!;
    [Inject] protected AppServiceStarter AppServiceStarter { get; init; } = null!;
    [Inject] protected ISessionResolver SessionResolver { get; init; } = null!;
    [Inject] protected Tracer Tracer { get; init; } = null!;
    protected TrueSessionResolver? TrueSessionResolver { get; set; } // Set in MauiBlazorApp.OnInitializedAsync

    [Parameter] public string SessionHash { get; set; } = "";
    [Parameter] public string SessionToken { get; set; } = "";
    [Parameter] public bool IsNewSession { get; set; }

    public AppBase() {
        LoadingUI.MarkAppCreated();
        _disposeTokenSource = new CancellationTokenSource();
        _disposeToken = _disposeTokenSource.Token;
    }

    protected override void OnInitialized() {
        // Hit StaticImportsInitializer to make sure DefaultLog is set
        Services.GetRequiredService<StaticImportsInitializer>();

        // Configure CircuitContext
        CircuitContext.RootComponent = this;
        ((AppBlazorCircuitContext)CircuitContext).MarkReady();
    }

    protected override async Task OnInitializedAsync() {
        using var _1 = Tracer.Region();

        var appKind = HostInfo.AppKind;
        var sessionHash = SessionHash; // It's passed directly only in WASM app
        if (appKind.IsServer()) {
            var secureTokensBackend = Services.GetRequiredService<ISecureTokensBackend>();
            var session = secureTokensBackend.ParseSessionToken(SessionToken);
            SessionResolver.Session = session; // All clients use DefaultSessionResolver
            sessionHash = session.Hash;
        }
        else if (appKind.IsMauiApp()) {
            sessionHash = TrueSessionResolver!.Session.Hash;
        }

        var prepareFirstRenderTask = AppServiceStarter.PrepareFirstRender(sessionHash);
        if (ReferenceEquals(UIModuleAssemblies, null)) {
            // Evaluate UIModuleAssemblies (just once - it's a static member)
            var uiModuleAssemblies = new HashSet<Assembly>();
            foreach (var module in Host.Modules) {
                if (module is IBlazorUIModule)
                    uiModuleAssemblies.Add(module.GetType().Assembly);
            }
            uiModuleAssemblies.Remove(UIAssembly);
            UIModuleAssemblies = uiModuleAssemblies.ToArray();
        }
        await prepareFirstRenderTask;
        _readyToRender = true;
        _shouldRender = true;
        _ = AppServiceStarter.AfterFirstRender(_disposeToken);
    }

    public void Dispose() {
        if (_disposeToken.IsCancellationRequested)
            return;

        _disposeTokenSource.CancelAndDisposeSilently();
        Dispose(true);
    }

    protected virtual void Dispose(bool disposing)
        => CircuitContext.Dispose();

    public void SimulateCrash(Exception error) {
        _simulatedCrashError = error;
        _shouldRender = true;
        StateHasChanged();
    }

    protected override bool ShouldRender() {
        var shouldRender = _shouldRender;
        _shouldRender = false;
        return shouldRender;
    }
}
