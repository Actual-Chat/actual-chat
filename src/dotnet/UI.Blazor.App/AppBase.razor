@using ActualChat.Hosting
@using ActualChat.Security
@implements IRootComponent
@{
    if (_isPrerendering) {
        <LandingWeb/>
        return;
    }
    if (!_readyToRender)
        return;
    if (_simulatedCrashError != null)
        throw _simulatedCrashError;
}

<ScreenSizeProvider>
    <AlwaysVisibleComponents/>

    <RequirementChecker>
        <Success>
            <Router AppAssembly="@UIAssembly" AdditionalAssemblies="@UIModuleAssemblies">
                <Found Context="routeData">
                    <RouteView RouteData="@routeData" DefaultLayout="@typeof(DefaultLayout)"/>
                </Found>
                <NotFound>
                    <PageNotFoundBlock/>
                </NotFound>
            </Router>
        </Success>
        <Failure Context="failures">
            <ErrorBlock Failures="@failures"/>
        </Failure>
    </RequirementChecker>
</ScreenSizeProvider>

@code {
    private static Assembly UIAssembly { get; } = typeof(AppBase).Assembly;
    private static Assembly[] UIModuleAssemblies { get; set; } = null!;

    private bool _isPrerendering;
    private bool _readyToRender;
    private bool _shouldRender;
    private Exception? _simulatedCrashError;
    private ILogger? _log;

    [Inject] protected IServiceProvider Services { get; init; } = null!;

    [Inject] protected HostInfo HostInfo { get; init; } = null!;
    [Inject] protected ModuleHost Host { get; init; } = null!;
    [Inject] protected AppBlazorCircuitContext CircuitContext { get; init; } = null!;
    [Inject] protected RenderModeSelector RenderModeSelector { get; init; } = null!;
    [Inject] protected AppScopedServiceStarter AppServiceStarter { get; init; } = null!;
    [Inject] protected ISessionResolver SessionResolver { get; init; } = null!;
    [Inject] protected Tracer Tracer { get; init; } = null!;
    protected TrueSessionResolver? TrueSessionResolver { get; set; } // Set in MauiBlazorApp.OnInitializedAsync
    protected ILogger Log => _log ??= Services.LogFor(GetType());

    [Parameter] public string SessionHash { get; set; } = "";
    [Parameter] public string SessionToken { get; set; } = "";

    public AppBase()
        => LoadingUI.MarkAppCreated();

    protected override void OnInitialized() {
        CircuitContext.RootComponent = this;
        _isPrerendering = RenderModeSelector.IsPrerendering;
    }

    protected override async Task OnInitializedAsync() {
        using var _1 = Tracer.Region();

        var hostKind = HostInfo.HostKind;
        var sessionHash = SessionHash; // It's passed directly only in WASM app
        if (hostKind.IsServer()) {
            var secureTokensBackend = Services.GetRequiredService<ISecureTokensBackend>();
            var session = secureTokensBackend.ParseSessionToken(SessionToken);
            SessionResolver.Session = session; // All clients use DefaultSessionResolver
            sessionHash = session.Hash;
        }
        else if (hostKind.IsMauiApp()) {
            sessionHash = TrueSessionResolver!.Session.Hash;
        }
        if (_isPrerendering)
            return;

        var prepareFirstRenderTask = AppServiceStarter.PrepareFirstRender(sessionHash);
        if (ReferenceEquals(UIModuleAssemblies, null)) {
            // Evaluate UIModuleAssemblies (just once - it's a static member)
            var uiModuleAssemblies = new HashSet<Assembly>();
            foreach (var module in Host.Modules) {
                if (module.IsUsed && module is IBlazorUIModule)
                    uiModuleAssemblies.Add(module.GetType().Assembly);
            }
            uiModuleAssemblies.Remove(UIAssembly);
            UIModuleAssemblies = uiModuleAssemblies.ToArray();
        }
        await prepareFirstRenderTask;
        _readyToRender = true;
        _shouldRender = true;
        _ = AppServiceStarter.AfterFirstRender(CircuitContext.StopToken);
    }

    public void SimulateCrash(Exception error) {
        _simulatedCrashError = error;
        _shouldRender = true;
        StateHasChanged();
    }

    protected override bool ShouldRender() {
        var shouldRender = _shouldRender;
        _shouldRender = false;
        return shouldRender;
    }
}
