@using ActualChat.UI.Blazor.Components.SideNav
@implements IDisposable
@{
    var isNarrow = ScreenSize.IsNarrow();
}

<SideNav
    Side="SideNavSide.Left"
    IsOpen="@PanelsUI.Left.IsVisible.Value"
    VisibilityChanged="@(isOpen => PanelsUI.Left.SetIsVisible(isOpen))">
    <div class="docs-left-panel">
        <div class="c-header">
            <div class="c-icon">
                <img draggable="false" src="/dist/images/landing/ac-icon-dark.svg" alt="" class="dark-icon">
            </div>
            <div class="c-title-wrapper">
                <div class="c-title">
                    <img draggable="false" src="/dist/images/landing/ac-title-dark.svg" alt="" class="dark-title">
                </div>
                <div class="c-version">
                    <img draggable="false" src="/dist/images/landing/ac-alpha-dark.svg" alt="" class="dark-alpha">
                </div>
            </div>
        </div>
        <div class="c-content">
            <div class="navbar-item h-9" @onclick="@(_ => History.NavigateTo(Links.Home))">
                <i class="icon-arrow-left mx-2 text-xl"></i>
                <div class="mx-2 text-headline-1">Home</div>
            </div>
            <DocsLeftPanelContent/>
        </div>
    </div>
</SideNav>

@code {
    [Inject] private PanelsUI PanelsUI { get; init; } = null!;
    [Inject] private History History { get; init; } = null!;

    [CascadingParameter] public ScreenSize ScreenSize { get; set; }
    [CascadingParameter] public DocsPage ActivePage { get; set; }

    protected override void OnInitialized()
        => PanelsUI.Left.VisibilityChanged += OnNavbarVisibilityChanged;

    public void Dispose()
        => PanelsUI.Left.VisibilityChanged -= OnNavbarVisibilityChanged;

    private void OnNavbarVisibilityChanged()
        => StateHasChanged();
}
