@namespace ActualChat.UI.Blazor.App
@using ActualChat.Users
@using Microsoft.CodeAnalysis
@inherits ComputedStateComponent<AccountFull>

@{
    var account = State.Value;
    var isGuest = account is not {IsGuest: false };
    var user = account.User.OrGuest();
    var usedAuthSchemas = user.OrGuest().Identities.Select(kv => kv.Key.Schema).ToHashSet();
    var unusedAuthSchemas = AuthSchemas.Where(p => !usedAuthSchemas.Contains(p.Name)).ToArray();
    var googleScheme = unusedAuthSchemas.SingleOrDefault(e => OrdinalEquals(e.Name, IClientAuth.GoogleSchemeName));
}

<div class="c-header">
    @if (isGuest) {
        <button class="signin-button-group" onclick="@(() => SignIn(googleScheme.Name))">
            <span class="px-2">Sign in with</span>
            <img src="/dist/images/landing/google-icon-color.svg" alt="google" class="min-h-8 min-w-8">
        </button>
        // Don't remove this button group
        @* <SigninButtonGroup> *@
        @*     <GoogleIcon> *@
        @*         <img src="/dist/images/landing/google-icon-color.svg" alt="google" class="min-h-8 min-w-8"> *@
        @*     </GoogleIcon> *@
        @*     <FacebookIcon> *@
        @*         <img src="/dist/images/landing/google-icon-color.svg" alt="facebook" class="min-h-8 min-w-8"> *@
        @*     </FacebookIcon> *@
        @*     <AppleIcon> *@
        @*         <img src="/dist/images/landing/google-icon-color.svg" alt="apple" class="min-h-8 min-w-8"> *@
        @*     </AppleIcon> *@
        @* </SigninButtonGroup> *@
    } else {
        <AvatarCircle
            Avatar="@account.Avatar"
            Size="SquareSize.Size9"
            Class="mr-12"></AvatarCircle>
    }
</div>

@code {
    private (string Name, string DisplayName)[] AuthSchemas { get; set; } = Array.Empty<(string, string)>();

    [Inject] private Session Session { get; init; } = null!;
    [Inject] private IAccounts Accounts { get; init; } = null!;
    [Inject] private IClientAuth ClientAuth { get; init; } = null!;

    protected override async Task<AccountFull> ComputeState(CancellationToken cancellationToken)
        => await Accounts.GetOwn(Session, cancellationToken).ConfigureAwait(false);

    private void SignIn(string name)
        => ClientAuth.SignIn(name);
}
