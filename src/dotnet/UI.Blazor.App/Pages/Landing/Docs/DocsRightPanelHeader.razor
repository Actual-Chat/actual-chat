@inherits ComputedStateComponent<AccountFull>

@{
    var account = State.Value;
    var isGuest = account is not {IsGuestOrNone: false };
}

<div class="c-header">
    @if (isGuest) {
        <button class="signin-button-group" @onclick="@SignIn">
            <span class="px-2">Sign in</span>
        </button>
    } else {
        <div
            class="context-menu-btn"
            data-menu="@(MenuRef.New<LandingDocsMenu>().ToString())"
            data-menu-trigger="@MenuTrigger.Primary"
            data-menu-placement="@(FloatingPosition.BottomStart.ToPositionString())">
            <AvatarCircle
                Avatar="@account.Avatar"
                Size="SquareSize.Size10"/>
        </div>
    }
</div>

@code {
    [Inject] private AccountUI AccountUI { get; init; } = null!;
    [Inject] private ModalUI ModalUI { get; init; } = null!;

    protected override ComputedState<AccountFull>.Options GetStateOptions() {
        return new() {
            InitialValue = AccountUI.OwnAccount.Value,
            Category = ComputedStateComponent.GetStateCategory(GetType()),
        };
    }

    protected override async Task<AccountFull> ComputeState(CancellationToken cancellationToken)
        => await AccountUI.OwnAccount.Use(cancellationToken).ConfigureAwait(false);

    private Task SignIn()
        => ModalUI.Show(new SignInModal.Model());
}
