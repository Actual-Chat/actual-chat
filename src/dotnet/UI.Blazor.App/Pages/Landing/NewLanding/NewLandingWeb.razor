@namespace ActualChat.UI.Blazor
@using ActualChat.Users
@using ActualChat.UI.Blazor.App.Module
@using ActualChat.UI.Blazor.App.Pages.Landing
@inherits ComputedStateComponent<NewLandingWeb.Model>
@{
    var m = State.Value;
    var account = m.Account;
    var isGuest = account is not {IsGuestOrNone: false };
}

<div @ref="Ref" class="landing new" xmlns="http://www.w3.org/1999/html">
<LandingLeftMenu @ref="_landingLeftMenu" />

<NewLandingHeader Click="OnMenuHandleClick"/>

@* Page 1 *@
<LandingPage Class="page-1">
    <LandingPage1
        IsGuest="@isGuest"
        SignInClick="@SignIn"
        ShowVideoClick="@OnShowVideoClick"/>
</LandingPage>

@* Page 2 *@
<LandingPage Class="page-2">
    <LandingPage2/>
</LandingPage>

@* Page 3 *@
<LandingPage Class="page-3">
    <LandingPage3/>
</LandingPage>

@* Page 4 *@
<LandingPage Class="page-4">
    <LandingPage4/>
</LandingPage>

@* Page 5 *@
<LandingPage Class="page-5">
    <LandingPage5/>
</LandingPage>

@* Page 6 *@
<LandingPage Class="page-6">
    <LandingPage6 IsGuest="@isGuest"/>
</LandingPage>

<LandingFooter/>
</div>

@code {
    private IJSObjectReference JSRef { get; set; } = null!;
    private ElementReference Ref { get; set; }
    private LandingLeftMenu? _landingLeftMenu;

    [Inject] private AccountUI AccountUI { get; init; } = null!;
    [Inject] private IClientAuth ClientAuth { get; init; } = null!;
    [Inject] private NavigationManager Nav { get; init; } = null!;
    [Inject] private FeedbackUI FeedbackUI { get; init; } = null!;
    [Inject] private Features Features { get; init; } = null!;
    [Inject] private IJSRuntime JS { get; init; } = null!;
    [Inject] private ModalUI ModalUI { get; init; } = null!;

    [CascadingParameter] ScreenSize ScreenSize { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (firstRender) {
            JSRef = await JS.InvokeAsync<IJSObjectReference>(
                $"{BlazorUIAppModule.ImportName}.NewLanding.create", Ref);
        }
    }

    protected override ComputedState<Model>.Options GetStateOptions()
        => new() {
            InitialValue = new Model(AccountUI.OwnAccount.Value, false),
            UpdateDelayer = FixedDelayer.Instant,
            Category = GetStateCategory(),
        };

    protected override async Task<Model> ComputeState(CancellationToken cancellationToken) {
        return new Model(
            await AccountUI.OwnAccount.Use(cancellationToken),
            await Features.Get<Features_EnableIncompleteUI, bool>(cancellationToken));
    }

    public override async ValueTask DisposeAsync() {
        await JSRef.DisposeSilentlyAsync("dispose");
        JSRef = null!;
        await base.DisposeAsync();
    }

    private Task OnShowVideoClick()
        => ModalUI.Show(new LandingVideoModal.Model());

    private Task SignIn()
        => ModalUI.Show(new SignInModal.Model());

    private void OnMenuHandleClick()
        => _landingLeftMenu?.Open();

    public sealed record Model(AccountFull Account, bool EnableIncompleteUI);
}
