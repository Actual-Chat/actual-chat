@namespace ActualChat.UI.Blazor
@using ActualChat.Users
@using ActualChat.Hosting
@using ActualChat.UI.Blazor.App.Pages.Landing
@inherits ComputedStateComponent<AccountFull>

@{
    var account = State.Value;
    var isGuest = account is not { IsGuest: false };
}

<div @ref="Ref" class="landing new theme-light" xmlns="http://www.w3.org/1999/html">
    <LandingLeftMenu @ref="_landingLeftMenu" />

    <NewLandingHeader Click="@OnMenuHandleClick"/>

    <LandingPage Class="page-1">
        <LandingPage1
            IsGuest="@isGuest"
            SignInClick="@SignIn"
            ShowVideoClick="@OnShowVideoClick"/>
    </LandingPage>
</div>

@code {
    private IJSObjectReference JSRef { get; set; } = null!;
    private ElementReference Ref { get; set; }
    private LandingLeftMenu? _landingLeftMenu;

    [Inject] private AccountUI AccountUI { get; init; } = null!;
    [Inject] private HostInfo HostInfo { get; init; } = null!;
    [Inject] private ModalUI ModalUI { get; init; } = null!;

    protected override ComputedState<AccountFull>.Options GetStateOptions()
        => new() {
            InitialValue = AccountUI.OwnAccount.Value,
            Category = GetStateCategory(),
        };

    protected override async Task<AccountFull> ComputeState(CancellationToken cancellationToken)
        => await AccountUI.OwnAccount.Use(cancellationToken);

    public override async ValueTask DisposeAsync() {
        await JSRef.DisposeSilentlyAsync("dispose");
        JSRef = null!;
        await base.DisposeAsync();
    }

    private Task SignIn()
        => ModalUI.Show(new SignInModal.Model());

    private Task OnShowVideoClick()
        => ModalUI.Show(new LandingVideoModal.Model());

    private void OnMenuHandleClick()
        => _landingLeftMenu?.Open();
}
