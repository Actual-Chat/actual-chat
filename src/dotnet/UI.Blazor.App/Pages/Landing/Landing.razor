@namespace ActualChat.UI.Blazor.App
@using ActualChat.UI.Blazor.Services
@using ActualChat.Users
@using System.Security.Cryptography
@using ActualChat.UI.Blazor.App.Module
@using ActualChat.UI.Blazor.Module
@inherits ComputedStateComponent<Landing.Model>
@layout NoLayout
@{
    var m = State.Value;
    var account = m.Account;
    var user = account?.User.OrGuest();
    var usedAuthSchemas = user.OrGuest().Identities.Select(kv => kv.Key.Schema).ToHashSet();
    var unusedAuthSchemas = AuthSchemas.Where(p => !usedAuthSchemas.Contains(p.Name)).ToArray();
    var googleScheme = unusedAuthSchemas.SingleOrDefault(e => OrdinalEquals(e.Name, IClientAuth.GoogleSchemeName));
    var isNarrow = ScreenSize.IsNarrow();
}

<div @ref="Ref" class="landing">
    <LandingLeftMenu IsOpen="@_isMenuOpen" Signin="@(() => SignIn(googleScheme.Name))"/>

    @* Header *@
    <div class="landing-header blur-bg">
        @if (isNarrow) {
            <ButtonRound Class="menu-button" Click="@OnMenuHandleClick">
                <i class="icon-menu text-2xl"></i>
            </ButtonRound>
        }
        <div class="flex-x w-full @(isNarrow ? "justify-center" : "")">
            <div class="min-w-fit">
                <img src="/dist/images/landing/ac-icon-light.svg" alt="icon" class="light-icon">
                <img src="/dist/images/landing/ac-icon-dark.svg" alt="icon" class="dark-icon absolute top-3">
            </div>
            <div class="px-2 self-center @(!isNarrow ? "w-full mb-2" : "max-w-40")">
                <img src="/dist/images/landing/ac-title-light.svg" alt="brand" class="light-title">
                <img src="/dist/images/landing/ac-title-dark.svg" alt="brand" class="dark-title absolute top-4">
            </div>
            <div class="header-text">
                @if (!isNarrow) {
                    @if (m.EnableIncompleteUI) {
                        <div class="px-8">
                            For business
                        </div>
                    }
                    <div class="signin-buttons">
                        <div class="signin-text">
                            Sign in with:
                        </div>
                        <ButtonRound Class="btn-sm" ContentClass="transparent" Click="@(() => SignIn(googleScheme.Name))">
                            <img src="/dist/images/landing/google-icon-color.svg" alt="google" class="min-h-8 min-w-8">
                        </ButtonRound>
                        @if (m.EnableIncompleteUI) {
                            <ButtonRound Class="btn-sm" ContentClass="transparent" Click="@(() => FeedbackUI.AskFeatureRequestFeedback("facebookAuth", "Facebook authentication"))">
                                <img src="/dist/images/landing/google-icon-color.svg" alt="facebook" class="min-h-8 min-w-8">
                            </ButtonRound>
                            <ButtonRound Class="btn-sm" ContentClass="transparent" Click="@(() => FeedbackUI.AskFeatureRequestFeedback("appleAuth", "Apple ID authentication"))">
                                <img src="/dist/images/landing/google-icon-color.svg" alt="apple" class="min-h-8 min-w-8">
                            </ButtonRound>
                        }
                    </div>
                }
            </div>
        </div>
        @if (isNarrow) {
            <div class="flex min-w-12 justify-end">
                <ButtonRound Class="signin-button" Click="@(() => SignIn(googleScheme.Name))">
                    <i class="icon-log-in text-xl"></i>
                </ButtonRound>
            </div>
        }
    </div>

    @* Page 1 *@
    <div class="page page-1">
        <div class="page-1-wrapper overflow-hidden">
            <div class="flex-x h-full overflow-hidden @(isNarrow ? "px-4" : "px-16")">
                <div class="main-text">
                    <div class="text-04 pt-12">
                        <div class="title-text">Text or call?</div>
                        <div class="title-text highlight">Pick both!</div>
                        <div class="py-8 @(isNarrow ? "text-4.5xl font-thin" : "text-xl")">
                            We want to redefine the meaning of "Chat". Actually.
                        </div>
                    </div>
                    <div class="flex @(isNarrow ? "justify-center" : "")">
                        <div class="signin-button-group">
                            <div>
                                Sign in with:
                            </div>
                            <ButtonRound Class="btn-sm" ContentClass="transparent" Click="@(() => SignIn(googleScheme.Name))">
                                <img src="/dist/images/landing/google-icon-blue.svg" alt="google" class="min-h-8 min-w-8">
                            </ButtonRound>
                            @if (m.EnableIncompleteUI) {
                                <ButtonRound Class="btn-sm" ContentClass="transparent" Click="@(() => FeedbackUI.AskFeatureRequestFeedback("facebookAuth", "Facebook authentication"))">
                                    <img src="/dist/images/landing/facebook-icon-blue.svg" alt="facebook" class="min-h-8 min-w-8">
                                </ButtonRound>
                                <ButtonRound Class="btn-sm" ContentClass="transparent" Click="@(() => FeedbackUI.AskFeatureRequestFeedback("appleAuth", "Apple ID authentication"))">
                                    <img src="/dist/images/landing/apple-icon-blue.svg" alt="apple" class="min-h-8 min-w-8">
                                </ButtonRound>
                            }
                        </div>
                    </div>
                </div>
                <div class="flex w-2/5 justify-center @(isNarrow ? "hidden" : "")">
                    <img src="/dist/images/landing/android-phone.svg" alt="phone">
                </div>
            </div>
        </div>
    </div>

    @* Page 2 *@
    <LandingTimeline IsNarrow="@isNarrow"/>

    @* Page 3 *@
    <div class="page">
        <div class="overflow-hidden bg-[#EEEEF6] @(isNarrow ? "h-full flex-y" : "h-screen flex-x")">
            <div class="flex-y gap-y-8 @(isNarrow ? "px-4 py-8" : "w-1/2 justify-center p-16 pb-24 pr-6")">
                <div class="title-text">Voice and text merged into a single medium</div>
                @if (isNarrow) {
                    <div class="flex justify-center p-4">
                        <img src="/dist/images/landing/voice-and-text.svg" alt="voice and text">
                    </div>
                }
                <div class="flex-y gap-y-2">
                    <div>
                        We record, transmit & transcribe your speech &ndash; <strong>all in real-time</strong>.
                    </div>
                    <ul>
                        <li>Instead of “calling” your parties, you just start talking.</li>
                        <li>Once chat participants start responding, you’ll hear & see their responses in real time.</li>
                        <li>You can also can read or listen to the responses at any time later.</li>
                    </ul>
                    <div>
                        So if you talk with people in real-time, it’s very similar to a regular call.
                        Otherwise it’s quite similar to text & voice messaging.
                        The only difference is: <strong>you don't have to switch!</strong>
                    </div>
                </div>
            </div>
            @if (!isNarrow) {
                <div class="flex justify-center w-1/2 p-16 pb-24 pl-6">
                    <img src="/dist/images/landing/voice-and-text.svg" alt="voice and text">
                </div>
            }
        </div>
        <LandingLinks IsMobile="@isNarrow" EnableIncompleteUI="@m.EnableIncompleteUI"/>
    </div>

    @* Page 4 *@
    <div class="page @(isNarrow ? "" : "pt-8")">
        <div class="flex w-full items-center justify-center @(isNarrow ? "py-8 px-16" : "h-40 py-12 px-16")">
            <div class="@(isNarrow ? "flex-y items-center text-title-1" : "flex-x text-5xl font-semibold")">
                <span>We believe&nbsp;</span>
                <span>communication must be...</span>
            </div>
        </div>
        <div class="h-full overflow-hidden bg-[#EEEEF6] @(isNarrow ? "flex-y px-4" : "flex-x")">
            <div class="flex justify-center @(isNarrow ? "p-8" : "w-1/2 p-16 pb-24 pr-6")">
                <img src="/dist/images/landing/stressless.svg" alt="stressless">
            </div>
            <div class="flex-y justify-center @(isNarrow ? "" : "w-1/2 p-16 pb-24 pl-6")">
                <div class="title-text">Stressless</div>
                <ul class="@(isNarrow ? "px-8 py-4" : " m-8")">
                    <li>
                        <strong>61%</strong> of the millennials and
                        <strong>40% of baby boomers</strong> experience anxiety when the phone rings.
                        <a href="https://theconversation.com/phone-call-anxiety-why-so-many-of-us-have-it-and-how-to-get-over-it-155798"
                           target="_blank">
                            That's why they tend to avoid calls.
                        </a>
                    </li>
                    <li>
                        <a href="https://www.forbes.com/sites/briannawiest/2019/11/04/millennials-hate-phone-calls-they-have-a-point/"
                           target="_blank">
                            Millennials and Gen-Z also find calls rude.
                        </a>
                        Most, if not all, even need to work up the courage to press the "Call" button.
                    </li>
                    <li>
                        Believe it or not, but there is no “Call” button in Actual.chat.
                    </li>
                </ul>
            </div>
        </div>
    </div>

    @* Page 5 *@
    <div class="page">
        <div class="h-full overflow-hidden @(isNarrow ? "-flex-y justify-end py-8" : "flex-x")">
            <div class="flex-y justify-center @(isNarrow ? "p-4" : "w-1/2 p-16 pr-6")">
                <div class="title-text">Seamless and frictionless</div>
                <ul>
                    <li>
                        Typing is great, but there are so many cases when it’s inconvenient or impossible to type
                    </li>
                    <li>
                        Driving, jogging, or already in bed, but still looking through your chats?
                        Just hit the microphone button & start talking.
                    </li>
                </ul>
            </div>
            <div class="@(isNarrow ? "p-4" : "w-1/2 p-16 pl-6")">
                <div class="flex-y gap-y-4 justify-center w-full h-full">
                    <div class="flex-x gap-x-8">
                        <div class="flex overflow-hidden justify-center items-center">
                            <img src="/dist/images/landing/person-01.svg" alt="body">
                        </div>
                        <div class="flex overflow-hidden justify-center items-center">
                            <img src="/dist/images/landing/person-02.svg" alt="body">
                        </div>
                    </div>
                    <div class="flex-x gap-x-8">
                        <div class="flex overflow-hidden justify-center items-center">
                            <img src="/dist/images/landing/person-03.svg" alt="body">
                        </div>
                        <div class="flex overflow-hidden justify-center items-center">
                            <img src="/dist/images/landing/person-04.svg" alt="body">
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    @* Page 6 *@
    <div class="page">
        <div class="h-full overflow-hidden bg-[#EEEEF6] @(isNarrow ? "flex-y py-8" : "flex-x")">
            <div class="flex items-center @(isNarrow ? "p-4" : "w-1/2 p-16 pr-6")">
                <div class="flex overflow-hidden justify-center items-center">
                    <img src="/dist/images/landing/synchronous.svg" alt="synchronous">
                </div>
            </div>
            <div class="flex-y justify-center @(isNarrow ? "p-4" : "w-1/2 p-16 pb-24 pl-6")">
                <div class="title-text">Synchronous + asynchronous</div>
                <ul>
                    <li>
                        Start any conversation as asynchronous, which turns synchronous
                        when parties start to respond in real-time
                    </li>
                    <li>
                        And if you missed the real-time conversation,
                        transcription and recording is always there
                        – in fact, you get exactly the same experience
                        as in regular chats in this case.
                    </li>
                </ul>
            </div>
        </div>
    </div>

    @* Page 7 *@
    <div class="page">
        <div class="@(isNarrow ? "-flex-y py-16" : "flex-x min-h-136")">
            <div class="flex-y justify-center @(isNarrow ? "p-4" : "w-1/2 p-16 pr-6")">
                <div class="title-text">Productive</div>
                <div>
                    Beep… Beep… Beep… And 10 seconds of your life are gone - forever!
                </div>
                <ul class="list-[&ndash;]">
                    <li>
                        You know, we discussed this problem with Alice over the phone… Can you somehow find it?
                    </li>
                    <li>
                        Unfortunately, no - could you please tell me again what happened?
                    </li>
                </ul>
                <div>
                    Have you ever dreamed of highlighting the important parts of a voice conversation
                    to have the summary later, or slicing a longer one to a few topics that could be continued later?
                </div>
                <div>
                    Actual.chat shines in these scenarios.
                </div>
            </div>
            <div class="flex @(isNarrow ? "p-4" : "w-1/2 p-16 pl-6")">
                <div class="flex overflow-hidden justify-center items-center">
                    <img src="/dist/images/landing/productive.svg" alt="productive" class="h-full">
                </div>
            </div>
        </div>
    </div>

    @* Page 7.5 *@
    <div class="page">
        <div class="bg-[#EEEEF6] @(isNarrow ? "flex-y py-16" : "flex-x min-h-136")">
            <div class="flex justify-center @(isNarrow ? "p-4" : "w-1/2 p-16 pr-6")">
                <img src="/dist/images/landing/team-friendly.svg" alt="team-friendly" class="max-h-120">
            </div>
            <div class="flex-y justify-center @(isNarrow ? "p-4" : "w-1/2 p-16 pl-6")">
                <div class="title-text">Team-friendy</div>
                <div>
                    Choosing between synchronous and asynchronous style is a well-known problem for team conversations:
                </div>
                <ul>
                    <li>
                        Gathering the whole team = productivity hit;
                        + <a href="https://www.forbes.com/sites/glennllopis/2022/10/05/the-demands-of-millennials--gen-z-a-guide-to-meeting-their-needs/"
                             target="_blank">
                            Millennials and Gen-Z are ok only with specific kinds of meetings.
                        </a>
                    </li>
                    <li>
                        But keeping everyone on the same page is important too.
                    </li>
                </ul>
                <div>
                    Is there a solution addressing both these issues well?
                    We hope you just found it!
                </div>
            </div>
        </div>
    </div>

    @* Page 8 *@
    <div class="page">
        <div class="flex-y items-center justify-center overflow-hidden @(isNarrow ? "h-full px-4 py-8 gap-y-4" : "h-screen px-16 py-24 gap-y-8")">
            <div class="flex font-semibold @(isNarrow ? "self-center text-4.5xl" : "self-start text-7xl")">
                Enjoyable and Fun
            </div>
            <div class="@(isNarrow ? "grid grid-rows-3 gap-y-8" : "grid grid-cols-3 gap-x-8")">

                <div class="flex-y gap-y-2">
                    <div class="flex h-60 items-center justify-center">
                        <img src="/dist/images/landing/enjoyable-01.svg" alt="enjoyable">
                    </div>
                    <div class="px-8 text-center">
                        Many people prefer hearing you rather than reading your texts
                    </div>
                </div>

                <div class="flex-y gap-y-2">
                    <div class="flex h-60 items-center justify-center">
                        <img src="/dist/images/landing/enjoyable-02.svg" alt="enjoyable" class="">
                    </div>
                    <div class="px-8 text-center">
                        Some of us are much better speakers than writers
                    </div>
                </div>

                <div class="flex-y">
                    <div class="flex h-60 items-center justify-center">
                        <img src="/dist/images/landing/enjoyable-03.svg" alt="enjoyable" class="">
                    </div>
                    <div class="px-8 text-center">
                        Jokes are almost always more fun when they’re told
                    </div>
                </div>

            </div>
        </div>
        <LandingLinks IsMobile="@isNarrow" EnableIncompleteUI="@m.EnableIncompleteUI"/>
    </div>

    @* Page 9 *@
    <div class="page">
        <div class="flex-y items-center overflow-hidden @(isNarrow ? "text-4.5xl px-4 pt-8 gap-y-8" : "px-16 pb-8 pt-16 min-h-screen")">
            <div class="flex self-start font-semibold @(isNarrow ? "text-4.5xl " : "text-7xl")">
                Actual.chat Features
            </div>
            <div class="w-full justify-between @(isNarrow ? "flex-y gap-y-8" : "flex-x")">
                <div class="flex-y gap-y-2 @(isNarrow ? "" : "w-64")">
                    <div class="flex w-full p-2 @(isNarrow ? "justify-center" : "h-60 items-end")">
                        <img src="/dist/images/landing/dialog-01.svg" alt="description">
                    </div>
                    <div class="flex-y px-2 @(isNarrow ? "text-2xl" : "")">
                        <span class="font-bold">Voice & text</span>
                        <span>are merged together in</span>
                        <span>chats - channels</span>
                    </div>
                </div>
                <div class="flex-y gap-y-2 @(isNarrow ? "" : "w-64")">
                    <div class="flex w-full p-2 @(isNarrow ? "justify-center" : "h-60 items-end")">
                        <img src="/dist/images/landing/dialog-02.svg" alt="description">
                    </div>
                    <div class="flex-y px-2 @(isNarrow ? "text-2xl" : "")">
                        <span class="font-bold">Markdown-style</span>
                        text message markup: **bold**, *italic*, `preformatted` text and ```code blocks```
                    </div>
                </div>
                <div class="flex-y gap-y-2 @(isNarrow ? "" : "w-64")">
                    <div class="flex w-full p-2 @(isNarrow ? "justify-center" : "h-60 items-end")">
                        <img src="/dist/images/landing/dialog-03.svg" alt="description">
                    </div>
                    <div class="flex-y px-2 @(isNarrow ? "text-2xl" : "")">
                        <span class="font-bold">Replies, @@mentions, and reactions</span>
                    </div>
                </div>
            </div>

            <div class="w-full justify-between @(isNarrow ? "flex-y gap-y-8" : "flex-x")">
                <div class="flex-y gap-y-2 @(isNarrow ? "" : "w-64")">
                    <div class="flex w-full p-2 @(isNarrow ? "justify-center" : "h-60 items-end")">
                        <img src="/dist/images/landing/dialog-04.svg" alt="description">
                    </div>
                    <div class="flex-y px-2 @(isNarrow ? "text-2xl" : "")">
                        <span class="font-bold">Group and peer-to-peer</span>
                        <span class="font-bold">chats</span>
                    </div>
                </div>
                <div class="flex-y gap-y-2 @(isNarrow ? "" : "w-64")">
                    <div class="flex w-full p-2 @(isNarrow ? "justify-center" : "h-60 items-end")">
                        <img src="/dist/images/landing/dialog-05.svg" alt="description">
                    </div>
                    <div class="flex-y px-2 @(isNarrow ? "text-2xl" : "")">
                        <div>
                            <span class="font-bold">Public</span> (anyone can view &
                        </div>
                        <div>
                            listen) <span class="font-bold">and private chats</span>
                        </div>
                    </div>
                </div>
                <div class="flex-y gap-y-2 @(isNarrow ? "" : "w-64")">
                    <div class="flex w-full p-2 @(isNarrow ? "justify-center" : "h-60 items-end")">
                        <img src="/dist/images/landing/dialog-06.svg" alt="description">
                    </div>
                    <div class="flex-y px-2 @(isNarrow ? "text-2xl" : "")">
                        <span class="font-bold">Characters</span>
                        your status and picture you can choose on per-chat basis
                    </div>
                </div>
            </div>

            <div class="w-full justify-between @(isNarrow ? "flex-y gap-y-8" : "flex-x")">
                <div class="flex-y gap-y-2 @(isNarrow ? "" : "w-64")">
                    <div class="flex w-full p-2 @(isNarrow ? "justify-center" : "h-60 items-end")">
                        <img src="/dist/images/landing/dialog-07.svg" alt="description">
                    </div>
                    <div class="flex-y px-2 @(isNarrow ? "text-2xl" : "")">
                        <span class="font-bold">Unlimited Image & file uploads</span>
                    </div>
                </div>
                <div class="flex-y gap-y-2 @(isNarrow ? "" : "w-64")">
                    <div class="flex w-full p-2 @(isNarrow ? "justify-center" : "h-60 items-end")">
                        <img src="/dist/images/landing/dialog-08.svg" alt="description">
                    </div>
                    <div class="flex-y px-2 @(isNarrow ? "text-2xl" : "")">
                        <span class="font-bold">Languages</span>
                    </div>
                </div>
                <div class="flex-y gap-y-2 @(isNarrow ? "" : "w-64")">
                    <div class="flex w-full p-2 @(isNarrow ? "justify-center" : "h-60 items-end")"></div>
                    <div class="flex-y px-2 @(isNarrow ? "text-2xl" : "")"></div>
                </div>
            </div>
        </div>
    </div>

    @* Page 10 *@
    <div class="page justify-center bg-[#EEEEF6])">
        <div class="flex-y justify-center items-start overflow-hidden @(isNarrow ? "px-4 py-8 gap-y-8" : "p-16 gap-y-16")">
            <div class="font-semibold @(isNarrow ? "flex-y text-4.5xl" : "flex-x text-7xl")">
                <span>What`s&nbsp;</span><span>upcoming?</span>
            </div>
            <div class="flex-x w-full justify-between @(isNarrow ? "flex-y gap-y-8" : "flex-x")">
                <div class="flex-y gap-y-8 min-w-1/3">
                    <LandingUpcomingItem Text="Highlights & conversation collapsing (“Show just highlights for voice conversations”)"/>
                    <LandingUpcomingItem Text="Places: a group of chats managed together. A perfect fit for team, company, or community chats."/>
                </div>
                <div class="flex-y gap-y-8 min-w-1/3">
                    <LandingUpcomingItem Text="Chat timelines - think scrollbars, but much more informative"/>
                    <LandingUpcomingItem Text="New voice-related features - quotes, filters, noise cancellation"/>
                    <LandingUpcomingItem Text="Nested chats / threads"/>
                </div>
                <div class="flex-y gap-y-8 min-w-1/3">
                    <LandingUpcomingItem Text="More languages, transcription and punctuation engines"/>
                    <LandingUpcomingItem Text="Phone integration"/>
                    <LandingUpcomingItem Text="Search everywhere"/>
                </div>
            </div>
        </div>
    </div>

    @* Page 11 *@
    <div class="page">
        <div class="flex-y h-full">
            <div class="@(isNarrow ? "flex-y py-8" : "flex-x min-h-120")">
                <div class="@(isNarrow ? "flex-y px-4 py-8" : "flex-x w-1/2 p-16 pr-6")">
                    <div class="w-full font-semibold @(isNarrow ? "flex-x flex-wrap text-4.5xl text-center" : "flex-y justify-center text-7xl")">
                        <span>How much&nbsp;</span>
                        <span>does it&nbsp;</span>
                        <span>cost?</span>
                    </div>
                </div>
                <div class="flex-y gap-y-4 justify-center @(isNarrow ? "p-4" : "w-1/2 p-16 pl-6")">
                    <span>Right now Actual.chat is completely free.</span>
                    <span>Its basic features will be either completely free or require a nominal fee forever.</span>
                    <span>We see corporate subscriptions and advanced features (embedding, online support scenarios, phone integration) as our primary future revenue sources.
                        So if you’re using it for daily or team communications, you shouldn’t expect any significant changes related to pricing.</span>
                </div>
            </div>
            <LandingLinks IsMobile="@isNarrow" EnableIncompleteUI="@m.EnableIncompleteUI"/>
            <div class="flex-x bg-07 @(isNarrow ? "p-4" : "h-60 p-12")">
                <div class="flex-y w-full">
                    <div class="h-full justify-start text-04 @(isNarrow ? "flex-y" : "flex-x gap-x-12")">
                        <button class="footer-info-btn">
                            Privacy
                        </button>
                        <button class="footer-info-btn">
                            Terms
                        </button>
                        <button class="footer-info-btn">
                            Cookie Preferences
                        </button>
                        <button class="footer-info-btn">
                            Contact us
                        </button>
                        <button class="footer-info-btn">
                            Region
                        </button>
                    </div>
                    <div class="flex items-center text-04 @(isNarrow ? "min-h-16" : "min-h-12")">
                        © 2023 Actual.chat Inc. All rights reserved.
                    </div>
                </div>
                <div class="flex-y justify-between min-w-48 text-04 @(isNarrow ? "hidden" : "")">
                    <button class="footer-info-btn">
                        Announcements
                    </button>
                    <button class="footer-info-btn">
                        Github
                    </button>
                    <button class="footer-info-btn">
                        Twitter
                    </button>
                    <button class="footer-info-btn">
                        Medium
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private bool _isMenuOpen;
    private (string Name, string DisplayName)[] AuthSchemas { get; set; } = Array.Empty<(string, string)>();

    private DotNetObjectReference<Landing> BlazorRef { get; set; } = null!;
    private IJSObjectReference JSRef { get; set; } = null!;
    private ElementReference Ref { get; set; }

    [Inject] private Session Session { get; init; } = null!;
    [Inject] private IAccounts Accounts { get; init; } = null!;
    [Inject] private IClientAuth ClientAuth { get; init; } = null!;
    [Inject] private FeedbackUI FeedbackUI { get; init; } = null!;
    [Inject] private Features Features { get; init; } = null!;
    [Inject] private IJSRuntime JS { get; init; } = null!;

    [CascadingParameter] public ScreenSize ScreenSize { get; set; }

    protected override async Task OnInitializedAsync()
        => AuthSchemas = await ClientAuth.GetSchemas();

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (firstRender) {
            BlazorRef = DotNetObjectReference.Create(this);
            JSRef = await JS.InvokeAsync<IJSObjectReference>(
                $"{BlazorUIAppModule.ImportName}.Landing.create",
                Ref, BlazorRef
                );
        }
    }

    protected override ComputedState<Model>.Options GetStateOptions()
        => new() {
            InitialValue = Model.None,
            UpdateDelayer = FixedDelayer.Instant,
        };

    protected override async Task<Model> ComputeState(CancellationToken cancellationToken) {
        return new() {
            Account = await Accounts.GetOwn(Session, cancellationToken).ConfigureAwait(false),
            EnableIncompleteUI = await Features.Get<UIFeatures.EnableIncompleteUI, bool>(cancellationToken).ConfigureAwait(false),
        };
    }

    private void SignIn(string name)
        => ClientAuth.SignIn(name);

    private void OnMenuHandleClick() {
        _isMenuOpen = !_isMenuOpen;
        StateHasChanged();
    }

    // JS API

    [JSInvokable]
    public void CloseMenu() {
        _isMenuOpen = false;
        StateHasChanged();
    }

    // Nested types

    public sealed record Model {
        public static Model None { get; } = new();

        public AccountFull? Account { get; init; }
        public bool EnableIncompleteUI { get; init; }
    }
}
