@page "/start"
@using ActualChat.UI.Blazor.Services
@using ActualChat.Users
@using System.Security.Cryptography
@using ActualChat.UI.Blazor.App.Module
@using ActualChat.UI.Blazor.Module
@inherits ComputedStateComponent<Landing.Model>
@layout NoLayout
@{
    var m = State.LatestNonErrorValue;
    var account = m.Account;
    var user = account?.User.OrGuest();
    var usedAuthSchemas = user.OrGuest().Identities.Select(kv => kv.Key.Schema).ToHashSet();
    var unusedAuthSchemas = AuthSchemas.Where(p => !usedAuthSchemas.Contains(p.Name)).ToArray();
    var googleScheme = unusedAuthSchemas.SingleOrDefault(e => OrdinalEquals(e.Name, IClientAuth.GoogleSchemeName));
}

<div @ref="Ref" class="landing">
    <div class="page page-1 overflow-y-hidden" id="landing-page-1">
        <div class="flex-x w-full py-6 px-16 items-center">
            <div class="min-w-fit">
                <img src="/landing/p1-icon.png" alt="icon" class="min-w-15 min-h-15 max-h-15">
            </div>
            <div class="px-2 mb-2 w-full">
                <img src="/landing/p1-brand.png" alt="brand" class="min-h-8 max-h-8">
            </div>
            <div class="flex-x items-center gap-x-4 min-w-fit px-4">
                <div class="text-04 font-medium px-8">
                    For business
                </div>
                <div class="flex-x gap-x-4 items-center rounded-full text-04 font-semibold border border-bg-01 px-2 py-1">
                    <div>
                        Sign in with
                    </div>
                    <ButtonRound Class="btn-sm" ContentClass="transparent" Click="@(() => SignIn(googleScheme.Name))">
                        <svg class="h-8 w-8 fill-current" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <circle cx="12" cy="12" r="12" fill="#F5F5F5"/>
                            <g clip-path="url(#clip0_1036_33378)">
                                <path d="M7.36047 12.0001C7.36047 11.4273 7.4407 10.8546 7.64128 10.3228L4.67267 7.99097C4.07093 9.21824 3.75 10.5682 3.75 12.0001C3.75 13.4319 4.07093 14.7819 4.67267 15.9682L7.64128 13.6364C7.4407 13.1455 7.36047 12.5728 7.36047 12.0001Z" fill="#FBBC05"/>
                                <path d="M12.5755 6.68182C13.8191 6.68182 14.9424 7.13182 15.8249 7.86818L18.3924 5.25C16.8278 3.85909 14.822 3 12.5755 3C9.0854 3 6.07668 5.04545 4.67261 8.03182L7.64121 10.3636C8.32319 8.19545 10.2488 6.68182 12.5755 6.68182Z" fill="#EA4335"/>
                                <path d="M12.5755 17.3182C10.2488 17.3182 8.32319 15.8045 7.64121 13.6772L4.67261 16.0091C6.07668 18.9545 9.0854 21 12.5755 21C14.7418 21 16.7877 20.2227 18.3121 18.75L15.504 16.5409C14.7017 17.0318 13.6988 17.3182 12.5755 17.3182Z" fill="#34A853"/>
                                <path d="M7.64121 13.6772L4.67261 16.0091L7.64121 13.6772Z" fill="#34A853"/>
                                <path d="M20.7995 10.3635H12.5757V13.8408H17.3094C17.0687 15.0272 16.4268 15.9272 15.5042 16.5408L18.3123 18.7499C19.917 17.1953 21.0001 14.9453 21.0001 11.9999C21.0001 11.4681 20.9199 10.8953 20.7995 10.3635Z" fill="#4285F4"/>
                            </g>
                            <defs>
                                <clipPath id="clip0_1036_33378">
                                    <rect width="17.25" height="18" fill="white" transform="translate(3.75 3)"/>
                                </clipPath>
                            </defs>
                        </svg>
                    </ButtonRound>
                    @* @if (m.EnableIncompleteUI) { *@
                        <ButtonRound Class="btn-sm" ContentClass="transparent" Click="@(() => FeedbackUI.AskFeatureRequestFeedback("facebookAuth", "Facebook authentication"))">
                            <svg class="w-8 h-8 fill-current" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                <path d="M24 12C24 5.36889 18.6311 0 12 0C5.36889 0 0 5.36889 0 12C0 17.9911 4.39111 22.9511 10.1333 23.8578V15.4667H7.07556V12H10.1333V9.35111C10.1333 6.34667 11.9111 4.69333 14.6489 4.69333C15.9644 4.69333 17.3333 4.92444 17.3333 4.92444V7.87556H15.8222C14.3289 7.87556 13.8667 8.8 13.8667 9.74222V12H17.1911L16.6578 15.4667H13.8667V23.8578C19.6089 22.9511 24 17.9911 24 12Z" fill="#1677F0"/>
                                <path d="M16.6754 15.4667L17.2088 12H13.8666V9.74225C13.8666 8.80003 14.3288 7.87558 15.8221 7.87558H17.3332V4.92447C17.3332 4.92447 15.9643 4.69336 14.6488 4.69336C11.911 4.69336 10.1332 6.34669 10.1332 9.35114V12H7.07544V15.4667H10.1332V23.8578C10.7377 23.9467 11.3777 24 11.9999 24C12.6399 24 13.2621 23.9467 13.8666 23.8578V15.4667H16.6754Z" fill="white"/>
                            </svg>
                        </ButtonRound>
                        <ButtonRound Class="btn-sm" ContentClass="transparent" Click="@(() => FeedbackUI.AskFeatureRequestFeedback("appleAuth", "Apple ID authentication"))">
                            <svg class="w-8 h-8 fill-current" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                <circle cx="12" cy="12" r="12" fill="#626262"/>
                                <g clip-path="url(#clip0_1161_43975)">
                                    <path d="M17.6182 9.1135C17.5327 9.181 16.0231 10.0465 16.0231 11.971C16.0231 14.197 17.944 14.9845 18.0015 15.004C17.9926 15.052 17.6963 16.0825 16.9887 17.1325C16.3577 18.0565 15.6988 18.979 14.6963 18.979C13.6939 18.979 13.4359 18.3865 12.2786 18.3865C11.1509 18.3865 10.7499 18.9985 9.83292 18.9985C8.91597 18.9985 8.27617 18.1435 7.54054 17.0935C6.68845 15.8605 6 13.945 6 12.127C6 9.211 7.86339 7.6645 9.6973 7.6645C10.6717 7.6645 11.484 8.3155 12.0958 8.3155C12.6781 8.3155 13.5862 7.6255 14.6948 7.6255C15.115 7.6255 16.6246 7.6645 17.6182 9.1135ZM14.1685 6.391C14.627 5.8375 14.9514 5.0695 14.9514 4.3015C14.9514 4.195 14.9425 4.087 14.9233 4C14.1774 4.0285 13.2899 4.5055 12.7548 5.137C12.3346 5.623 11.9425 6.391 11.9425 7.1695C11.9425 7.2865 11.9617 7.4035 11.9705 7.441C12.0177 7.45 12.0943 7.4605 12.171 7.4605C12.8403 7.4605 13.6821 7.0045 14.1685 6.391Z" fill="white"/>
                                </g>
                                <defs>
                                    <clipPath id="clip0_1161_43975">
                                        <rect width="12" height="15" fill="white" transform="translate(6 4)"/>
                                    </clipPath>
                                </defs>
                            </svg>
                        </ButtonRound>
                    @* } *@
                </div>
            </div>
        </div>
        <div class="flex-x px-16 h-full overflow-hidden">
            <div class="flex-y w-3/5 justify-center">
                <div class="text-04">
                    <div class="text-6xl font-medium">Text of call?</div>
                    <div class="text-6xl font-medium">But do you really have to choose?</div>
                    <div class="py-8 text-xl">We want to redefine the meaning of "Chat". Actually.</div>
                </div>
                <div>
                    <div class="flex-x gap-x-4 w-fit items-center rounded-full text-01 font-semibold border border-primary bg-01 px-2 py-1">
                        <div>
                            Sign in with
                        </div>
                        <ButtonRound Class="btn-sm" ContentClass="transparent" Click="@(() => SignIn(googleScheme.Name))">
                            <svg class="h-8 w-8 fill-current" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                <circle cx="12" cy="12" r="12" fill="#2970FF"/>
                                <g clip-path="url(#clip0_1036_33378)">
                                    <path d="M7.36047 12.0001C7.36047 11.4273 7.4407 10.8546 7.64128 10.3228L4.67267 7.99097C4.07093 9.21824 3.75 10.5682 3.75 12.0001C3.75 13.4319 4.07093 14.7819 4.67267 15.9682L7.64128 13.6364C7.4407 13.1455 7.36047 12.5728 7.36047 12.0001Z" fill="#F5F5F5"/>
                                    <path d="M12.5755 6.68182C13.8191 6.68182 14.9424 7.13182 15.8249 7.86818L18.3924 5.25C16.8278 3.85909 14.822 3 12.5755 3C9.0854 3 6.07668 5.04545 4.67261 8.03182L7.64121 10.3636C8.32319 8.19545 10.2488 6.68182 12.5755 6.68182Z" fill="#F5F5F5"/>
                                    <path d="M12.5755 17.3182C10.2488 17.3182 8.32319 15.8045 7.64121 13.6772L4.67261 16.0091C6.07668 18.9545 9.0854 21 12.5755 21C14.7418 21 16.7877 20.2227 18.3121 18.75L15.504 16.5409C14.7017 17.0318 13.6988 17.3182 12.5755 17.3182Z" fill="#F5F5F5"/>
                                    <path d="M7.64121 13.6772L4.67261 16.0091L7.64121 13.6772Z" fill="#F5F5F5"/>
                                    <path d="M20.7995 10.3635H12.5757V13.8408H17.3094C17.0687 15.0272 16.4268 15.9272 15.5042 16.5408L18.3123 18.7499C19.917 17.1953 21.0001 14.9453 21.0001 11.9999C21.0001 11.4681 20.9199 10.8953 20.7995 10.3635Z" fill="#F5F5F5"/>
                                </g>
                                <defs>
                                    <clipPath id="clip0_1036_33378">
                                        <rect width="17.25" height="18" fill="white" transform="translate(3.75 3)"/>
                                    </clipPath>
                                </defs>
                            </svg>
                        </ButtonRound>
                        @* @if (m.EnableIncompleteUI) { *@
                            <ButtonRound Class="btn-sm" ContentClass="transparent" Click="@(() => FeedbackUI.AskFeatureRequestFeedback("facebookAuth", "Facebook authentication"))">
                                <svg class="w-8 h-8 fill-current" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                    <path d="M24 12C24 5.36889 18.6311 0 12 0C5.36889 0 0 5.36889 0 12C0 17.9911 4.39111 22.9511 10.1333 23.8578V15.4667H7.07556V12H10.1333V9.35111C10.1333 6.34667 11.9111 4.69333 14.6489 4.69333C15.9644 4.69333 17.3333 4.92444 17.3333 4.92444V7.87556H15.8222C14.3289 7.87556 13.8667 8.8 13.8667 9.74222V12H17.1911L16.6578 15.4667H13.8667V23.8578C19.6089 22.9511 24 17.9911 24 12Z" fill="#1677F0"/>
                                    <path d="M16.6754 15.4667L17.2088 12H13.8666V9.74225C13.8666 8.80003 14.3288 7.87558 15.8221 7.87558H17.3332V4.92447C17.3332 4.92447 15.9643 4.69336 14.6488 4.69336C11.911 4.69336 10.1332 6.34669 10.1332 9.35114V12H7.07544V15.4667H10.1332V23.8578C10.7377 23.9467 11.3777 24 11.9999 24C12.6399 24 13.2621 23.9467 13.8666 23.8578V15.4667H16.6754Z" fill="white"/>
                                </svg>
                            </ButtonRound>
                            <ButtonRound Class="btn-sm" ContentClass="transparent" Click="@(() => FeedbackUI.AskFeatureRequestFeedback("appleAuth", "Apple ID authentication"))">
                                <svg class="w-8 h-8 fill-current" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                    <circle cx="12" cy="12" r="12" fill="#2970FF"/>
                                    <g clip-path="url(#clip0_1161_43975)">
                                        <path d="M17.6182 9.1135C17.5327 9.181 16.0231 10.0465 16.0231 11.971C16.0231 14.197 17.944 14.9845 18.0015 15.004C17.9926 15.052 17.6963 16.0825 16.9887 17.1325C16.3577 18.0565 15.6988 18.979 14.6963 18.979C13.6939 18.979 13.4359 18.3865 12.2786 18.3865C11.1509 18.3865 10.7499 18.9985 9.83292 18.9985C8.91597 18.9985 8.27617 18.1435 7.54054 17.0935C6.68845 15.8605 6 13.945 6 12.127C6 9.211 7.86339 7.6645 9.6973 7.6645C10.6717 7.6645 11.484 8.3155 12.0958 8.3155C12.6781 8.3155 13.5862 7.6255 14.6948 7.6255C15.115 7.6255 16.6246 7.6645 17.6182 9.1135ZM14.1685 6.391C14.627 5.8375 14.9514 5.0695 14.9514 4.3015C14.9514 4.195 14.9425 4.087 14.9233 4C14.1774 4.0285 13.2899 4.5055 12.7548 5.137C12.3346 5.623 11.9425 6.391 11.9425 7.1695C11.9425 7.2865 11.9617 7.4035 11.9705 7.441C12.0177 7.45 12.0943 7.4605 12.171 7.4605C12.8403 7.4605 13.6821 7.0045 14.1685 6.391Z" fill="white"/>
                                    </g>
                                    <defs>
                                        <clipPath id="clip0_1161_43975">
                                            <rect width="12" height="15" fill="white" transform="translate(6 4)"/>
                                        </clipPath>
                                    </defs>
                                </svg>
                            </ButtonRound>
                        @* } *@
                    </div>
                </div>
            </div>
            <div class="flex w-2/5 justify-center">
                <img src="/landing/p1-phone.png" alt="phone">
            </div>
        </div>
    </div>

    <div class="page page-2 page-scrolling overflow-y-hidden" id="landing-page-2">
        <div class="flex w-full h-80 py-12 px-16 items-center">
            <img src="/landing/p2-header.png" alt="description">
        </div>
        <div class="flex px-16 overflow-hidden">
            <img src="/landing/p2-timeline.png" alt="timeline">
        </div>
        <div class="flex px-16 overflow-hidden">
            <img src="/landing/p2-footer.png" alt="footer">
        </div>
    </div>

    <div class="page page-3 overflow-y-hidden bg-[#EEEEF6]" id="landing-page-3">
        <div class="flex overflow-hidden justify-center items-center">
            <img src="/landing/p3-body.png" alt="body">
        </div>
    </div>

    <div class="page page-4 overflow-y-hidden" id="landing-page-4">
        <div class="flex w-full h-40 py-12 px-16 items-center">
            <img src="/landing/p4-header.png" alt="header">
        </div>
        <div class="flex px-16 h-full overflow-hidden bg-[#EEEEF6]">
            <img src="/landing/p4-body.png" alt="body">
        </div>
    </div>
</div>

@code {
    private (string Name, string DisplayName)[] AuthSchemas { get; set; } = Array.Empty<(string, string)>();

    private DotNetObjectReference<Landing> BlazorRef { get; set; } = null!;
    private IJSObjectReference JSRef { get; set; } = null!;
    private ElementReference Ref { get; set; }

    [Inject] private Session Session { get; init; } = null!;
    [Inject] private IAccounts Accounts { get; init; } = null!;
    [Inject] private IClientAuth ClientAuth { get; init; } = null!;
    [Inject] private FeedbackUI FeedbackUI { get; init; } = null!;
    [Inject] private Features Features { get; init; } = null!;
    [Inject] private IJSRuntime JS { get; init; } = null!;

    protected override async Task OnInitializedAsync()
        => AuthSchemas = await ClientAuth.GetSchemas();

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (firstRender) {
            BlazorRef = DotNetObjectReference.Create(this);
            JSRef = await JS.InvokeAsync<IJSObjectReference>(
                $"{BlazorUIAppModule.ImportName}.Landing.create",
                Ref, BlazorRef
                );
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    protected override ComputedState<Model>.Options GetStateOptions()
        => new() {
            InitialValue = Model.None,
            UpdateDelayer = FixedDelayer.Instant,
        };

    protected override async Task<Model> ComputeState(CancellationToken cancellationToken)
        => new() {
            Account = await Accounts.GetOwn(Session, cancellationToken).ConfigureAwait(false),
            EnableIncompleteUI = await Features.Get<UIFeatures.EnableIncompleteUI, bool>(cancellationToken).ConfigureAwait(false),
        };

    private void SignIn(string name)
        => ClientAuth.SignIn(name);

    // Nested types

    public sealed record Model {
        public static Model None { get; } = new();

        public AccountFull? Account { get; init; }
        public bool EnableIncompleteUI { get; init; }
    }
}
