@page "/landing"
@namespace ActualChat.UI.Blazor.App
@using ActualChat.UI.Blazor.Services
@using ActualChat.Users
@using System.Security.Cryptography
@using ActualChat.UI.Blazor.App.Module
@using ActualChat.UI.Blazor.Module
@inherits ComputedStateComponent<Landing.Model>
@layout NoLayout
@{
    var m = State.Value;
    var account = m.Account;
    var isGuest = account is not {IsGuestOrNone: false };
    var user = account.User.OrGuest();
    var avatar = account.Avatar;
    var usedAuthSchemas = user.OrGuest().Identities.Select(kv => kv.Key.Schema).ToHashSet();
    var unusedAuthSchemas = AuthSchemas.Where(p => !usedAuthSchemas.Contains(p.Name)).ToArray();
    var googleScheme = unusedAuthSchemas.SingleOrDefault(e => OrdinalEquals(e.Name, IClientAuth.GoogleSchemeName));
    var isNarrow = ScreenSize.IsNarrow();
}

<div @ref="Ref" class="landing" xmlns="http://www.w3.org/1999/html">
    @if (isNarrow) {
        <LandingLeftMenu @ref="_landingLeftMenu" />
    }

    @* Header *@
    <div class="landing-header blur-bg">
        @if (isNarrow) {
            <ButtonRound Class="menu-button flex-none" Click="@OnMenuHandleClick">
                <i class="icon-menu text-2xl"></i>
            </ButtonRound>
        }
        <div class="flex-x flex-1">
            <div class="min-w-fit">
                <img src="/dist/images/landing/ac-icon-light.svg" alt="icon" class="light-icon">
                <img src="/dist/images/landing/ac-icon-dark.svg" alt="icon" class="dark-icon">
            </div>
            <div class="flex-x flex-1">
                <div class="px-2 self-center -mt-1.5 @(!isNarrow ? "min-w-fit" : "max-w-40")">
                    <img src="/dist/images/landing/ac-title-light.svg" alt="brand" class="light-title">
                    <img src="/dist/images/landing/ac-title-dark.svg" alt="brand" class="dark-title">
                </div>
                <div class="max-w-9 -mt-0.5 -ml-1">
                    <img src="/dist/images/landing/ac-alpha-light.svg" alt="alpha" class="light-alpha">
                    <img src="/dist/images/landing/ac-alpha-dark.svg" alt="alpha" class="dark-alpha">
                </div>
            </div>
            <div class="header-text">
                @if (!isNarrow) {
                    <Button
                        Click="@(_ => Nav.NavigateTo(Links.Docs))"
                        Class="header-text text-headline-1 btn-transparent">Docs
                    </Button>
                    @if (isGuest) {
                        <button class="signin-button-group" onclick="@(() => SignIn(googleScheme.Name))">
                            <span class="px-2 font-medium">Sign in with</span>
                            <img src="/dist/images/landing/google-icon-color.svg" alt="google" class="min-h-8 min-w-8">
                        </button>
                        // Don't remove this button group
                        @* <SigninButtonGroup> *@
                        @*     <GoogleIcon> *@
                        @*         <img src="/dist/images/landing/google-icon-color.svg" alt="google" class="min-h-8 min-w-8"> *@
                        @*     </GoogleIcon> *@
                        @*     <FacebookIcon> *@
                        @*         <img src="/dist/images/landing/google-icon-color.svg" alt="facebook" class="min-h-8 min-w-8"> *@
                        @*     </FacebookIcon> *@
                        @*     <AppleIcon> *@
                        @*         <img src="/dist/images/landing/google-icon-color.svg" alt="apple" class="min-h-8 min-w-8"> *@
                        @*     </AppleIcon> *@
                        @* </SigninButtonGroup> *@
                    } else {
                        <div
                            class="context-menu-btn"
                            data-menu="@(MenuRef.New<LandingDocsMenu>().ToString())"
                            data-menu-trigger="@MenuTrigger.Primary"
                            data-menu-placement="@(FloatingPosition.BottomStart.ToPositionString())">
                            <AvatarCircle
                                Avatar="@avatar"
                                Size="SquareSize.Size10"/>
                        </div>
                    }
                }
            </div>
        </div>
        @if (isNarrow) {
            <div class="flex-none justify-end">
                @if (isGuest) {
                    <ButtonRound Class="signin-button" Click="@(() => SignIn(googleScheme.Name))">
                        <i class="icon-log-in text-xl"></i>
                    </ButtonRound>
                } else {
                    <button
                        class="context-menu-btn md:mx-4"
                        data-menu="@(MenuRef.New<LandingDocsMenu>().ToString())"
                        data-menu-trigger="@MenuTrigger.Primary"
                        data-menu-placement="@(FloatingPosition.BottomStart.ToPositionString())">
                        <AvatarCircle
                            Avatar="@avatar"
                            Size="SquareSize.Size9"/>
                    </button>
                }
            </div>
        }
    </div>

    @* Page 1 *@
    <div class="page page-1 h-screen">
        <div class="page-1-wrapper overflow-hidden">
            <div class="flex-x h-full overflow-hidden @(isNarrow ? "px-8" : "px-16")">
                <div class="main-text">
                    <div class="md:text-4xl font-normal text-04 pt-12">
                        <div class="title-text main">To call, to text, or<br/>to voice message?</div>
                        <p class="!pt-8">
                            But... Could these options be purely artificial?<br/>
                            Is it possible to create a medium, which naturally
                            combines all of them together?
                        </p>
                        <p class="!pt-8">
                            <strong>We are here to redefine the meaning of "Chat".</strong>
                        </p>
                    </div>
                    <div class="flex gap-x-8 @(isNarrow ? "flex-col items-center" : "") pt-8">
                        @if (isGuest) {
                            <button class="signin-button-group bg-01" onclick="@(() => SignIn(googleScheme.Name))">
                                <span class="px-2 text-xl font-semibold">Sign in with</span>
                                <img src="/dist/images/landing/google-icon-color.svg" alt="google" class="min-h-8 min-w-8">
                            </button>
                            // Don't remove this button group
                            @* <SigninButtonGroup> *@
                            @*     <GoogleIcon> *@
                            @*         <img src="/dist/images/landing/google-icon-color.svg" alt="google" class="min-h-8 min-w-8"> *@
                            @*     </GoogleIcon> *@
                            @*     <FacebookIcon> *@
                            @*         <img src="/dist/images/landing/facebook-icon-blue.svg" alt="facebook" class="min-h-8 min-w-8"> *@
                            @*     </FacebookIcon> *@
                            @*     <AppleIcon> *@
                            @*         <img src="/dist/images/landing/apple-icon-blue.svg" alt="apple" class="min-h-8 min-w-8"> *@
                            @*     </AppleIcon> *@
                            @* </SigninButtonGroup> *@
                        }
                        <DownloadButton/>
                    </div>
                </div>
                <div class="flex w-2/5 justify-center @(isNarrow ? "hidden" : "")">
                    <img src="/dist/images/landing/android-phone.svg" alt="phone">
                </div>
            </div>
        </div>
    </div>

    @* Page 2 *@
<LandingItem
    ImagePositionMobile="ImagePosition.Top"
    ImagePositionDesktop="ImagePosition.Left"
    Class="h-screen">
    <ChildContent>
        <LandingItemImage>
            <img src="/dist/images/landing/evolution.svg" alt="evolution">
        </LandingItemImage>
        <LandingItemDescription Title="We used to speak, laugh, and cry">
            <p>
                But now we text, "like", and send emojis.
            </p>
            <p>
                It's slower, inconvenient, and less expressive.
            </p>
            <p>
                With all the progress in technology and AI,<br/>
                how it happened that <strong>we can't just talk</strong> in chats?
            </p>
        </LandingItemDescription>
    </ChildContent>
</LandingItem>

    @* Page 3 *@
    <LandingItem
        ImagePositionMobile="ImagePosition.Top"
        ImagePositionDesktop="ImagePosition.Right"
        Class="h-screen bg-[#EEEEF6]">
        <ChildContent>
            <LandingItemTitle Class="flex md:hidden">
                We reimagine calls, texts and voice messages
            </LandingItemTitle>
            <LandingItemImage>
                <img src="/dist/images/landing/voice-and-text.svg" alt="voice and text">
            </LandingItemImage>
            <LandingItemDescription Title="We reimagine calls, texts and voice messages" TitleClass="hidden md:flex">
                <p class="font-semibold">
                    By blending voice and text into a single medium.
                </p>
                <p>
                    Watch your words come to life as you talk -
                    anything you say is transcribed and instantly available, word-by-word.
                </p>
                <p>
                    And it's not just a transcript - <strong>it's voice + text, streamed in real time</strong>.
                    Listen to chats like a call, without the need for a call.
                </p>
                <p>
                    Effortlessly catch up on missed moments - every conversation
                    is captured in text and audio for later playback or reading.
                </p>
            </LandingItemDescription>
        </ChildContent>
    </LandingItem>

    @* Page 4 *@
    <LandingItem
        ImagePositionMobile="ImagePosition.Top"
        ImagePositionDesktop="ImagePosition.Left"
        Class="h-screen bg-[#EEEEF6]"
        HeaderClass="bg-01">
        <HeaderContent>
            <span>We believe&nbsp;</span>
            <span>communication must be...</span>
        </HeaderContent>
        <ChildContent>
            <LandingItemImage>
                <img src="/dist/images/landing/stressless.svg" alt="stressless">
            </LandingItemImage>
            <LandingItemDescription Title="Stressless">
                <ul>
                    <li>
                        <strong>61%</strong> of the millennials and
                        <strong>40% of baby boomers</strong> experience anxiety when the phone rings.
                        <a href="https://theconversation.com/phone-call-anxiety-why-so-many-of-us-have-it-and-how-to-get-over-it-155798"
                           target="_blank">That's why they avoid calls.</a>
                    </li>
                    <li>
                        <a href="https://www.forbes.com/sites/briannawiest/2019/11/04/millennials-hate-phone-calls-they-have-a-point/"
                           target="_blank">Millennials and Gen-Z also find calls rude.</a>
                        Most even need to work up the courage to press the "Call" button.
                    </li>
                </ul>
                <p>
                    Believe it or not, but there is no “Call” button in Actual Chat.
                </p>
            </LandingItemDescription>
        </ChildContent>
    </LandingItem>

    @* Page 5 *@
    <LandingItem
        ImagePositionMobile="ImagePosition.Top"
        ImagePositionDesktop="ImagePosition.Right"
        Class="h-screen">
        <ChildContent>
            <LandingItemImage>
                <div class="flex-y gap-y-4 justify-center w-full h-full">
                    <div class="flex-x gap-x-8">
                        <div class="flex overflow-hidden justify-center items-center">
                            <img src="/dist/images/landing/person-01.svg" alt="body">
                        </div>
                        <div class="flex overflow-hidden justify-center items-center">
                            <img src="/dist/images/landing/person-02.svg" alt="body">
                        </div>
                    </div>
                    <div class="flex-x gap-x-8">
                        <div class="flex overflow-hidden justify-center items-center">
                            <img src="/dist/images/landing/person-03.svg" alt="body">
                        </div>
                        <div class="flex overflow-hidden justify-center items-center">
                            <img src="/dist/images/landing/person-04.svg" alt="body">
                        </div>
                    </div>
                </div>
            </LandingItemImage>
            <LandingItemDescription Title="Seamless &amp; Frictionless">
                <ul>
                    <li>
                        Typing is great, but sometimes it's not practical or feasible
                    </li>
                    <li>
                        Driving, jogging, or about to sleep, but need to respond?
                        Just hit the microphone button & start talking &ndash;
                        we'll do the rest!
                    </li>
                </ul>
            </LandingItemDescription>
        </ChildContent>
    </LandingItem>

    @* Page 6 *@
    <LandingItem
        ImagePositionMobile="ImagePosition.Top"
        ImagePositionDesktop="ImagePosition.Left"
        Class="h-screen bg-[#EEEEF6]">
        <ChildContent>
            <LandingItemImage>
                <img src="/dist/images/landing/synchronous.svg" alt="synchronous">
            </LandingItemImage>
            <LandingItemDescription Title="Real-time + asynchronous">
                <ul>
                    <li>
                        Start any conversation as asynchronous,
                        which turns into real-time one
                        when parties start to respond
                    </li>
                    <li>
                        And if you missed the real-time part,
                        transcript and recording is always there
                        – in fact, you get exactly the same experience
                        as in regular chats in this case.
                    </li>
                </ul>
            </LandingItemDescription>
        </ChildContent>
    </LandingItem>

    @* Page 7 *@
    <LandingItem
        ImagePositionMobile="ImagePosition.Top"
        ImagePositionDesktop="ImagePosition.Left"
        Class="h-screen">
        <ChildContent>
            <LandingItemImage>
                <img src="/dist/images/landing/team-friendly.svg" alt="team-friendly">
            </LandingItemImage>
            <LandingItemDescription Title="Team-friendly">
                <p>
                    The dilemma of real-time vs asynchronous communication style
                    is a common issue in almost any team:
                </p>
                <ul>
                    <li>
                        Keeping everyone on the same page is super important,
                        but bringing the whole team together is always a productivity hit
                    </li>
                    <li>
                        Individual communication preferences vary based on daily schedules,
                        job duties, and other factors.
                    </li>
                    <li>
                        <a href="https://www.forbes.com/sites/glennllopis/2022/10/05/the-demands-of-millennials--gen-z-a-guide-to-meeting-their-needs/"
                           target="_blank">Millennials and Gen-Z are ok only with specific kinds of meetings</a>
                    </li>
                </ul>
                <p>
                    Is there a solution helping to address some of these issues?
                    We hope you just found it!
                </p>
            </LandingItemDescription>
        </ChildContent>
    </LandingItem>

    @* Page 7.5 *@
    <LandingItem
        ImagePositionMobile="ImagePosition.Top"
        ImagePositionDesktop="ImagePosition.Right"
        Class="h-screen bg-[#EEEEF6]">
        <ChildContent>
            <LandingItemImage>
                <img src="/dist/images/landing/productive.svg" alt="productive">
            </LandingItemImage>
            <LandingItemDescription Title="Productive">
                <ul>
                    <li>
                        Beep… Beep… Beep… And 10 seconds of your life are gone - forever!
                    </li>
                    <li>
                        "I explained the problem to your colleague in December. Do you have any notes on this?"
                        &ndash; "Sorry, but no... Could you explain it again?"
                    </li>
                    <li>
                        Have you ever dreamed of highlighting the important parts of a voice conversation
                        to have the summary later?
                    </li>
                </ul>
                <p>
                    Actual Chat shines in these scenarios.
                </p>
            </LandingItemDescription>
        </ChildContent>
    </LandingItem>

    @* Page 8 *@
    <LandingItem
        ImagePositionMobile="ImagePosition.Top"
        ImagePositionDesktop="ImagePosition.Bottom"
        Class="@(isNarrow ? "no-auto-scroll" : "h-screen")">
        <ChildContent>
            <LandingItemTitle>
                Enjoyable and Fun
            </LandingItemTitle>
            <LandingItemImage Class="flex-col gap-y-12 md:flex-row">
                <div class="flex-y gap-y-2">
                    <div class="flex h-60 items-center justify-center">
                        <img src="/dist/images/landing/enjoyable-01.svg" alt="enjoyable">
                    </div>
                    <div class="px-8 text-center">
                        Many people prefer hearing your voice rather than reading your texts
                    </div>
                </div>

                <div class="flex-y gap-y-2">
                    <div class="flex h-60 items-center justify-center">
                        <img src="/dist/images/landing/enjoyable-02.svg" alt="enjoyable" class="">
                    </div>
                    <div class="px-8 text-center">
                        For some, speaking is a stronger communication tool than writing
                    </div>
                </div>

                <div class="flex-y gap-y-2">
                    <div class="flex h-60 items-center justify-center">
                        <img src="/dist/images/landing/enjoyable-03.svg" alt="enjoyable" class="">
                    </div>
                    <div class="px-8 text-center">
                        Jokes are almost always more fun when delivered verbally
                    </div>
                </div>
            </LandingItemImage>
        </ChildContent>
        <FooterContent>
            <LandingLinks IsNarrow="@isNarrow" EnableIncompleteUI="@m.EnableIncompleteUI"/>
        </FooterContent>
    </LandingItem>

    @* Page 9 *@
    <LandingItem
        ImagePositionMobile="ImagePosition.Top"
        ImagePositionDesktop="ImagePosition.Bottom"
        Class="@(isNarrow ? "no-auto-scroll" : "h-screen")">
        <ChildContent>
            <LandingItemTitle>
                Actual Chat Features
            </LandingItemTitle>
            <LandingItemImage Class="features-grid">
                <LandingFeatures/>
            </LandingItemImage>
        </ChildContent>
    </LandingItem>

    @* Page 10 *@
    <LandingItem
        ImagePositionMobile="ImagePosition.Top"
        ImagePositionDesktop="ImagePosition.Bottom"
        Class="@(isNarrow ? "no-auto-scroll bg-[#EEEEF6]" : "h-screen bg-[#EEEEF6]")">
        <ChildContent>
            <LandingItemTitle>
                <span>What`s&nbsp;</span><span>upcoming?</span>
            </LandingItemTitle>
            <LandingItemImage Class="justify-between flex-col gap-y-8 md:flex-row md:mt-16">
                <div class="flex-y gap-y-8 min-w-1/3">
                    <LandingUpcomingItem Text="Highlights & conversations"/>
                    <LandingUpcomingItem Text="Action items"/>
                    <LandingUpcomingItem Text="Places: a group of chats managed together"/>
                </div>
                <div class="flex-y gap-y-8 min-w-1/3">
                    <LandingUpcomingItem Text="Chat timelines"/>
                    <LandingUpcomingItem Text="Voice quotes"/>
                    <LandingUpcomingItem Text="Nested chats / threads"/>
                </div>
                <div class="flex-y gap-y-8 min-w-1/3">
                    <LandingUpcomingItem Text="More languages, transcription and punctuation engines"/>
                    <LandingUpcomingItem Text="Phone integration"/>
                    <LandingUpcomingItem Text="Search everywhere"/>
                </div>
            </LandingItemImage>
        </ChildContent>
    </LandingItem>

    @* Page 11 *@
    <LandingItem
        ImagePositionMobile="ImagePosition.Top"
        ImagePositionDesktop="ImagePosition.Left"
        Class="h-screen">
        <ChildContent>
            <LandingItemImage Class="flex-col gap-y-12 md:flex-row">
                <div class="flex-x flex-wrap title-text @(isNarrow ? "text-center" : "items-center")">
                    <span>Are there any fees?</span>
                </div>
            </LandingItemImage>
            <LandingItemDescription>
                <span>Right now Actual Chat is <strong>completely free</strong>.</span>
                <span>We see corporate subscriptions and advanced features
                    as our primary revenue sources.</span>
                <span>So if you use Actual Chat for daily communications,
                    you shouldn’t expect any significant changes related to pricing.</span>
            </LandingItemDescription>
        </ChildContent>
        <FooterContent>
            <LandingLinks IsNarrow="@isNarrow" EnableIncompleteUI="@m.EnableIncompleteUI"/>
            <LandingFooter/>
        </FooterContent>
    </LandingItem>
</div>

@code {
    private (string Name, string DisplayName)[] AuthSchemas { get; set; } = Array.Empty<(string, string)>();

    private IJSObjectReference JSRef { get; set; } = null!;
    private ElementReference Ref { get; set; }
    private LandingLeftMenu? _landingLeftMenu;

    [Inject] private AccountUI AccountUI { get; init; } = null!;
    [Inject] private IClientAuth ClientAuth { get; init; } = null!;
    [Inject] private NavigationManager Nav { get; init; } = null!;
    [Inject] private FeedbackUI FeedbackUI { get; init; } = null!;
    [Inject] private Features Features { get; init; } = null!;
    [Inject] private IJSRuntime JS { get; init; } = null!;

    [CascadingParameter] public ScreenSize ScreenSize { get; set; }

    protected override async Task OnInitializedAsync()
        => AuthSchemas = await ClientAuth.GetSchemas();

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (firstRender) {
            JSRef = await JS.InvokeAsync<IJSObjectReference>(
                $"{BlazorUIAppModule.ImportName}.Landing.create", Ref);
        }
    }

    protected override ComputedState<Model>.Options GetStateOptions()
        => new() {
            InitialValue = new Model(AccountUI.OwnAccount.Value, false),
            UpdateDelayer = FixedDelayer.Instant,
            Category = GetStateCategory(),
        };

    protected override async Task<Model> ComputeState(CancellationToken cancellationToken) {
        return new Model(
            await AccountUI.OwnAccount.Use(cancellationToken),
            await Features.Get<UIFeatures.EnableIncompleteUI, bool>(cancellationToken));
    }

    public override async ValueTask DisposeAsync() {
        await JSRef.DisposeSilentlyAsync("dispose");
        JSRef = null!;
        await base.DisposeAsync();
    }

    private Task SignIn(string name) =>
        ClientAuth.SignIn(name).AsTask();

    private void OnMenuHandleClick()
        => _landingLeftMenu?.Open();

    // Nested types

    public sealed record Model(AccountFull Account, bool EnableIncompleteUI);
}
