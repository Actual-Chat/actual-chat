@using ActualChat.Users
@using ActualChat.Hosting
@inherits ComputedStateComponent<AccountFull>

@{
    var account = State.Value;
    var isGuest = account is not { IsGuest: false };
    var avatar = account.Avatar;
}

<div @ref="Ref" class="landing" xmlns="http://www.w3.org/1999/html">
    <LandingLeftMenu @ref="_landingLeftMenu" />

    @* Header *@
    <div class="landing-header blur-bg">
        <ButtonRound Class="menu-button flex-none" Click="@OnMenuHandleClick">
            <i class="icon-menu text-2xl"></i>
        </ButtonRound>
        <div class="flex-x flex-1">
            <div class="min-w-fit">
                <img src="/dist/images/landing/ac-icon-light.svg" alt="icon" class="light-icon">
                <img src="/dist/images/landing/ac-icon-dark.svg" alt="icon" class="dark-icon">
            </div>
            <div class="flex-x flex-1">
                <div class="px-2 self-center -mt-1.5 max-w-40">
                    <img src="/dist/images/landing/ac-title-light.svg" alt="brand" class="light-title">
                    <img src="/dist/images/landing/ac-title-dark.svg" alt="brand" class="dark-title">
                </div>
                <div class="max-w-9 -mt-0.5 -ml-1">
                    <img src="/dist/images/landing/ac-alpha-light.svg" alt="alpha" class="light-alpha">
                    <img src="/dist/images/landing/ac-alpha-dark.svg" alt="alpha" class="dark-alpha">
                </div>
            </div>
            <div class="header-text"></div>
        </div>
        <div class="flex-none justify-end">
            @if (isGuest) {
                <ButtonRound Class="signin-button" Click="@(() => SignIn())">
                    <i class="icon-log-in text-xl"></i>
                </ButtonRound>
            } else {
                <button
                    class="context-menu-btn md:mx-4"
                    data-menu="@(MenuRef.New<LandingDocsMenu>().ToString())"
                    data-menu-trigger="@MenuTrigger.Primary"
                    data-menu-placement="@(FloatingPosition.BottomStart.ToPositionString())">
                    <AvatarCircle
                        Avatar="@avatar"
                        Size="SquareSize.Size9"/>
                </button>
            }
        </div>
    </div>

    @* Page 1 *@
    <div class="page page-1 h-screen">
        <div class="page-1-wrapper overflow-hidden">
            <div class="flex-x h-full overflow-hidden px-8">
                <div class="main-text">
                    <div class="md:text-4xl font-normal text-04 pt-12">
                        <div class="title-text main">To call, to text, or<br/>to voice message?</div>
                        <p class="!pt-8">
                            But... Could these options be purely artificial?<br/>
                            Is it possible to create a medium, which naturally
                            combines all of them together?
                        </p>
                        <p class="!pt-8">
                            <strong>We are here to redefine the meaning of "Chat".</strong>
                        </p>
                    </div>
                    <div class="flex gap-x-8 flex-col items-center">
                        @if (isGuest) {
                            <button class="signin-button-group bg-01" onclick="@SignIn">
                                <span class="px-2 text-xl font-semibold">Sign in</span>
                            </button>
                        }
                        @if (HostInfo.AppKind != AppKind.MauiApp) {
                            <DownloadButton/>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private IJSObjectReference JSRef { get; set; } = null!;
    private ElementReference Ref { get; set; }
    private LandingLeftMenu? _landingLeftMenu;

    [Inject] private AccountUI AccountUI { get; init; } = null!;
    [Inject] private HostInfo HostInfo { get; init; } = null!;
    [Inject] private ModalUI ModalUI { get; init; } = null!;

    protected override ComputedState<AccountFull>.Options GetStateOptions()
        => new() {
            InitialValue = AccountUI.OwnAccount.Value,
            Category = GetStateCategory(),
        };

    protected override async Task<AccountFull> ComputeState(CancellationToken cancellationToken)
        => await AccountUI.OwnAccount.Use(cancellationToken);

    public override async ValueTask DisposeAsync() {
        await JSRef.DisposeSilentlyAsync("dispose");
        JSRef = null!;
        await base.DisposeAsync();
    }

    private Task SignIn()
        => ModalUI.Show(new SignInModal.Model());

    private void OnMenuHandleClick()
        => _landingLeftMenu?.Open();
}
