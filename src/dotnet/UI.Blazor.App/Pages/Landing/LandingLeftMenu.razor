@using ActualChat.Users
@using ActualChat.UI.Blazor.App.Module
@using ActualChat.Hosting
@implements IAsyncDisposable
@{
    var cls = _isMenuOpen ? "open" : "closed";
}

<div @ref="Ref" class="landing-menu @cls">
    <div class="c-container">
        <LandingLeftMenuContent Owner="@this" ShowHome="@ShowHome"/>
    </div>
</div>

@code {
    private bool _isMenuOpen;

    private ElementReference Ref { get; set; }
    private DotNetObjectReference<LandingLeftMenu> BlazorRef { get; set; } = null!;
    private IJSObjectReference JSRef { get; set; } = null!;

    [Inject] private IJSRuntime JS { get; init; } = null!;
    [Inject] private HostInfo HostInfo { get; init; } = null!;

    [Parameter] public bool ShowHome { get; set; }

    public async Task Open() {
        // Component root div class list is updated with 'open' class
        // and on-click handler in js that is executed synchronously will see it immediately.
        // Handler will consider that menu is already opened (while it's not true)
        // and will close menu because click happened outside of the menu (menu is not visible yet).
        // To prevent this make small delay in wasm.
        if (HostInfo.AppKind == AppKind.WasmApp)
            await Task.Delay(1);
        Toggle(true);
    }

    [JSInvokable]
    public void Close()
        => Toggle(false);

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (firstRender) {
            BlazorRef = DotNetObjectReference.Create(this);
            JSRef = await JS.InvokeAsync<IJSObjectReference>(
                $"{BlazorUIAppModule.ImportName}.LandingLeftMenu.create",
                Ref, BlazorRef
                );
        }
    }

    private void Toggle(bool isOpen) {
        _isMenuOpen = isOpen;
        StateHasChanged();
    }

    public async ValueTask DisposeAsync() {
        await JSRef.DisposeSilentlyAsync("dispose");
        JSRef = null!;
        BlazorRef.DisposeSilently();
        BlazorRef = null!;
    }
}
