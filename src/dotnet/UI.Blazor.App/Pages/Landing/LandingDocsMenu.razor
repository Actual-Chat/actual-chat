@namespace ActualChat.UI.Blazor.App
@using ActualChat.Users
@using ActualChat.UI.Blazor.Events
@inherits ComputedMenuBase<AccountFull>
@{
    var m = State.Value;
    var avatar = m.Avatar;
    var name = avatar.Name;
}

<MenuEntry
    Click="@OnAccountClick">
    <IconContent>
        <AvatarCircle
            Avatar="@avatar"
            Size="SquareSize.Size8"/>
    </IconContent>
    <TextContent>
        <div class="flex-x items-center">
            <div class="flex-1 flex-y">
                <div class="text-sm">
                    @name
                </div>
                <div class="text-sm text-badge">
                    Manage your Account
                </div>
            </div>
            <div class="flex-none w-8 -mt-1 rotate-180">
                <i class="icon-chevron-left"></i>
            </div>
        </div>
    </TextContent>
</MenuEntry>
<MenuEntry
    Click="@(_ => Nav.NavigateTo(Links.Chats))">
    <IconContent>
        <i class="icon-message-ellipse"></i>
    </IconContent>
    <TextContent>
        Go to Chats
    </TextContent>
</MenuEntry>
<MenuEntry
    Click="@(_ => Nav.NavigateTo("mailto:support@actual.chat"))">
    <IconContent>
        <i class="icon-question-mark-circle"></i>
    </IconContent>
    <TextContent>
        Support
    </TextContent>
</MenuEntry>
<MenuEntry
    Click="@(_ => AccountUI.SignOut())">
    <IconContent>
        <i class="icon-log-out"></i>
    </IconContent>
    <TextContent>
        Sign out
    </TextContent>
</MenuEntry>

@code {
    [Inject] private AccountUI AccountUI { get; init; } = null!;
    [Inject] private NavigationManager Nav { get; init; } = null!;
    [Inject] private UIEventHub UIEventHub { get; init; } = null!;

    protected override ComputedState<AccountFull>.Options GetStateOptions()
        => new() {
            InitialValue = AccountUI.OwnAccount.Value,
            UpdateDelayer = FixedDelayer.Instant,
            Category = GetStateCategory(),
        };

    protected override async Task<AccountFull> ComputeState(CancellationToken cancellationToken)
        => await AccountUI.OwnAccount.Use(cancellationToken);

    private void OnAccountClick()
        => _ = UIEventHub.Publish(new ShowSettingsEvent());
}
