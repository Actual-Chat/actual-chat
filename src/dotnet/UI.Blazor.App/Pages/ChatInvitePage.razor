@page "/join/{InviteId}"
@using ActualChat.Invite

<MainHeader>Joining via invite link</MainHeader>

@if (_signInFromHomeRequested) {
    return;
}

@if (_useResult is { } useResult) {
    if (useResult.Error is { } error) {
        <p>Failed to join chat: @error.Message</p>
    } else {
        <p>Processing invite, please wait..</p>
    }
}

@code {
    private bool _signInFromHomeRequested;
    private Result<Invite>? _useResult;
    private AccountFull? _account;
    private ILogger? _log;

    [Inject] private ChatUIHub Hub { get; init; } = null!;

    private Session Session => Hub.Session();
    private MomentClockSet Clocks => Hub.Clocks();
    private UICommander UICommander => Hub.UICommander();
    private History History => Hub.History;
    private AccountUI AccountUI => Hub.AccountUI;
    private IPlaces Places => Hub.Places;
    private ILogger Log => _log ??= Hub.LogFor(GetType());

    [Parameter] public string InviteId { get; set; } = "";

    protected override async Task OnParametersSetAsync() {
        _account = await AccountUI.OwnAccount.Use();
        if (_account.IsGuestOrNone || !_account.IsActive()) {
            _signInFromHomeRequested = true;
            _ = AccountUI.RequestSignInFromHomePage("to use this chat invite", History.LocalUrl);
            return;
        }

        var useCommand = new Invites_Use(Session, InviteId);
        _useResult = await UICommander.Run(useCommand);
        if (_useResult is not { } useResult || useResult.HasError)
            return;

        var invite = useResult.Value;
        var placeInvite = invite.Details.Place;
        if (placeInvite != null) {
            var placeId = placeInvite.PlaceId;
            Place? place = null;
            try {
                var cPlace = await Computed.Capture(() => Places.Get(Session, placeId, default));
                cPlace = await ActualChat.ClockExt.Timeout(Clocks, 3)
                    .ApplyTo(ct => cPlace.When(p => p != null, ct));
                place = cPlace.Value;
            }
            catch (TimeoutException) {
                Log.LogWarning("PlaceInvite: Places.Get couldn't complete in 3 seconds");
            }
            if (place != null) {
                var welcomeChatId = await Places.GetWelcomeChatId(Session, place.Id, default);
                if (welcomeChatId.IsNone) {
                    _ = History.NavigateTo(Links.Chats, true);
                    return;
                }

                _ = History.NavigateTo(Links.Chat(welcomeChatId), true);
            }
            return;
        }

        var chatInvite = invite.Details.Chat.Require();
        var chatId = chatInvite.ChatId;
        _ = History.NavigateTo(Links.Chat(chatId), true);
    }
}
