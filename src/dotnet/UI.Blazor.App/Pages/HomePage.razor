@page "/"
@using ActualChat.Chat
@using ActualChat.Chat.UI.Blazor.Services
@using ActualChat.UI.Blazor.Services
@using ActualChat.Users
@inherits ComputedStateComponent<Account?>
@layout NoLayout
@{
    var account = State.LatestNonErrorValue;
    if (account == null)
        return; // Not yet computed
    if (account.IsGuest()) {
        <Welcome/>
    }
    else {
        Nav.NavigateTo(Links.ChatPage(_defaultChatId));
        return;
    }
}

@code {
    private string _defaultChatId = "";

    [Inject] private Session Session { get; init; } = null!;
    [Inject] private IAccounts Accounts { get; init; } = null!;
    [Inject] private IChats Chats { get; init; } = null!;
    [Inject] private ChatUI ChatUI { get; init; } = null!;
    [Inject] private NavigationManager Nav { get; init; } = null!;

    protected override async Task OnInitializedAsync() {
        var activeChatIdState = ChatUI.ActiveChatId;
        await activeChatIdState.WhenRead.ConfigureAwait(true);
        _defaultChatId = ChatUI.ActiveChatId.ValueOrDefault;
        if (_defaultChatId.IsNullOrEmpty()) {
            var chats = await Chats.GetChats(Session, CancellationToken.None);
            var defaultChat = chats.FirstOrDefault(x => x.Id == Constants.Chat.DefaultChatId) ?? chats.FirstOrDefault();
            _defaultChatId = defaultChat?.Id ?? "";
        }
    }

    protected override async Task<Account?> ComputeState(CancellationToken cancellationToken)
        => await Accounts.Get(Session, CancellationToken.None).ConfigureAwait(false) ?? Account.Guest;
}
