@page "/"
@using ActualChat.Chat.UI.Blazor.Services
@using ActualChat.UI.Blazor.Services
@using ActualChat.Users
@inherits ComputedStateComponent<HomePage.Model>
@layout NoLayout
@{
    var m = State.LatestNonErrorValue;
    var account = m.Account;
    if (!AccountFull.MustExist.IsSatisfied(account)) {
        if (ReferenceEquals(account, AccountFull.None)) {
            // Loaded, but user doesn't have an account
            <Welcome/>
        }
        return; // Not yet loaded
    }
    if (!m.Link.IsNullOrEmpty() && !_navigated) {
        _navigated = true; // prevents multiple calls
        // Do automatic redirect on first load.
        Nav.NavigateTo(m.Link, false, true);
    }
}

@code {
    private bool _navigated;

    [Inject] private Session Session { get; init; } = null!;
    [Inject] private LoadingUI LoadingUI { get; init; } = null!;
    [Inject] private BrowserInfo BrowserInfo { get; init; } = null!;
    [Inject] private IAccounts Accounts { get; init; } = null!;
    [Inject] private RecentChatsUI RecentChatsUI { get; init; } = null!;
    [Inject] private ChatUI ChatUI { get; init; } = null!;
    [Inject] private NavigationManager Nav { get; init; } = null!;
    [Inject] private HistoryUI HistoryUI { get; init; } = null!;

    protected override Task OnInitializedAsync() => ChatUI.SelectedChatId.WhenRead;

    protected override ComputedState<Model>.Options GetStateOptions() {
        return new() { InitialValue = Model.Loading };
    }

    protected override async Task<Model> ComputeState(CancellationToken cancellationToken) {
        var account = await Accounts.GetOwn(Session, CancellationToken.None).ConfigureAwait(false) ?? AccountFull.None;
        var link = "";
        if (HistoryUI.IsInitialLocation) {
            if (BrowserInfo.ScreenSize.Value.IsNarrow())
                link = Links.ChatPage("");
            else {
                var chat = await RecentChatsUI.GetSelectedOrDefaultChat(cancellationToken).ConfigureAwait(false);
                if (chat != null)
                    link = Links.ChatPage(chat.Id);
            }
        }
        return new(account, link);
    }

    protected override void OnAfterRender(bool firstRender) {
        var m = State.LatestNonErrorValue;
        var account = m.Account;
        if (!ReferenceEquals(account, AccountFull.Loading))
            LoadingUI.MarkLoaded();
    }

    public record Model(AccountFull Account, string Link) {
        public static Model None { get; } = new(AccountFull.None, "");
        public static Model Loading { get; } = new(AccountFull.Loading, ""); // Should differ by ref. from None
    }
}
