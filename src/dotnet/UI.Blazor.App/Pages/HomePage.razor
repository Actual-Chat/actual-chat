@page "/"
@using ActualChat.Chat.UI.Blazor.Services
@using ActualChat.UI.Blazor.Services
@using ActualChat.Users
@inherits ComputedStateComponent<HomePage.Model>
@layout NoLayout
@{
    var m = State.LatestNonErrorValue;
    var account = m.Account;
    if (account == null)
        return; // Not yet computed
    if (ReferenceEquals(account, Account.Guest)) { // Computed, account is null substituted to Account.Guest
        <Welcome/>
    }
    else if (!string.IsNullOrEmpty(m.Link) && !_navigated) {
        _navigated = true; // prevents multiple calls
        // Do automatic redirect on first load.
        Nav.NavigateTo(m.Link, false, true);
    }
}

@code {
    private bool _navigated;

    [Inject] private Session Session { get; init; } = null!;
    [Inject] private AppIsReadyMarker AppIsReadyMarker { get; init; } = null!;
    [Inject] private BrowserInfo BrowserInfo { get; init; } = null!;
    [Inject] private IAccounts Accounts { get; init; } = null!;
    [Inject] private RecentChatsUI RecentChatsUI { get; init; } = null!;
    [Inject] private ChatUI ChatUI { get; init; } = null!;
    [Inject] private NavigationManager Nav { get; init; } = null!;
    [Inject] private HistoryUI HistoryUI { get; init; } = null!;

    protected override Task OnInitializedAsync() => ChatUI.SelectedChatId.WhenRead;

    protected override ComputedState<Model>.Options GetStateOptions() {
        return new() { InitialValue = new Model(null, Symbol.Empty) };
    }

    protected override async Task<Model> ComputeState(CancellationToken cancellationToken) {
        var account = await Accounts.Get(Session, CancellationToken.None).ConfigureAwait(false) ?? Account.Guest;
        string link = "";
        if (HistoryUI.IsInitialLocation) {
            if (BrowserInfo.ScreenSize.Value.IsNarrow())
                link = Links.ChatPage("");
            else {
                var chat = await RecentChatsUI.GetSelectedOrDefaultChat(cancellationToken).ConfigureAwait(false);
                if (chat != null)
                    link = Links.ChatPage(chat.Id);
            }
        }
        return new(account, link);
    }

    protected override void OnAfterRender(bool firstRender) {
        var m = State.LatestNonErrorValue;
        var account = m.Account;
        if (ReferenceEquals(account, Account.Guest))
            // mark as ready to display Welcome screen
            AppIsReadyMarker.Set();
    }

    public record Model(Account? Account, string Link);
}
