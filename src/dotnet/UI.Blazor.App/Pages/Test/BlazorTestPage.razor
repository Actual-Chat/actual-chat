@page "/test/blazor"

<RequireAccount MustBeAdmin="true"/>

<h2>Blazor Test Page</h2>

<p>Counter: @_counter</p>
<p>
    <Button Click="@(() => _counter++)">Counter++</Button>
    <Button Click="@NoStateHasChanged.EventCallback(() => _counter++)">Counter++ w/o StateHasChanged</Button>
    <Button Click="@StateHasChanged">StateHasChanged</Button>
</p>

<p class="pt-4">Output:</p>
<pre>
    @_output.ToDelimitedString("\r\n")
</pre>

<p>
    @{
        var renderKey = new object();
    }
    <RenderAtDepth RenderKey="@renderKey" Depth="10">
        <BlazorTestNode @key="@context" Name="--" ChildProbability="0"/>
    </RenderAtDepth>
    <BlazorTestNode @key="@renderKey" Name="Root" ChildProbability="2"/>
</p>

@code {
    private int _counter;
    private ImmutableList<string> _output = ImmutableList<string>.Empty;

    [Inject] private ILogger<BlazorTestPage> Log { get; init; } = null!;

    protected override Task OnInitializedAsync() {
        BackgroundTask.Run(() => {
            for (var i = 0; i < 10; i++) {
                var iCopy = i;
                InvokeAsync(async () => {
                    _output = _output.Add($"{iCopy} started.");
                    StateHasChanged();
                    await Task.Delay(500);
                    _output = _output.Add($"{iCopy} completed.");
                    StateHasChanged();
                });
            }
            return Task.CompletedTask;
        });
        return Task.CompletedTask;
    }
}
