@using Stl.Plugins
@using ActualChat.Kvas
@using ActualChat.Hosting
@implements IDisposable
@{
    // We can't render anything till the moment a few key components completed the initialization
    if (!_whenReadyToRender.IsCompletedSuccessfully)
        return;
    _trace.Track("App.Rendered");
}

<ScreenSizeProvider>
    <AlwaysVisibleComponents/>

    <Router AppAssembly="UIAssembly" AdditionalAssemblies="UIModuleAssemblies">
        <Found Context="routeData">
            <RequirementChecker>
                <Success>
                    <RouteView RouteData="@routeData" DefaultLayout="@typeof(DefaultLayout)"/>
                </Success>
                <Failure Context="failures">
                    <ErrorBlock Failures="@failures"/>
                </Failure>
            </RequirementChecker>
        </Found>
        <NotFound>
            <PageNotFoundBlock/>
        </NotFound>
    </Router>

</ScreenSizeProvider>

@code {
    private static Assembly? UIAssembly { get; set; }
    private static Assembly[]? UIModuleAssemblies { get; set; }

    private readonly CancellationTokenSource _disposeTokenSource;
    private readonly CancellationToken _disposeToken;
    private Task _whenReadyToRender = null!;
    private ITraceSession _trace = null!;

    [Inject] private IPluginHost Plugins { get; init; } = null!;
    [Inject] private IServiceProvider Services { get; init; } = null!;
    [Inject] private BlazorCircuitContext CircuitContext { get; init; } = null!;
    [Inject] private ISessionProvider SessionProvider { get; init; } = null!;
    [Inject] private TimeZoneConverter TimeZoneConverter { get; init; } = null!;
    [Inject] private BrowserInfo BrowserInfo { get; init; } = null!;
    [Inject] private HistoryUI HistoryUI { get; init; } = null!;
    [Inject] private UILifetimeEvents UILifetimeEvents { get; init; } = null!;
    [Inject] private NavigationManager Nav { get; init; } = null!;
    [Inject] private ILogger<App> Log { get; init; } = null!;

    [Parameter] public string SessionId { get; set; } = Symbol.Empty;

    public App() {
        _disposeTokenSource = new CancellationTokenSource();
        _disposeToken = _disposeTokenSource.Token;
    }

    protected override void OnInitialized() {
        var circuitTraceAccessor = Services.GetService<CircuitTraceAccessor>();
        circuitTraceAccessor?.Init();
        _trace = Services.GetRequiredService<ITraceSession>();
        _trace.Track("App.OnInitialized");
        UIAssembly ??= typeof(App).Assembly;
        UIModuleAssemblies ??= Plugins.GetPlugins<IBlazorUIModule>()
            .Select(p => p.GetType().Assembly)
            .Where(a => a != UIAssembly)
            .ToArray();
        _trace.Track("App.UIModuleAssemblies evaluated");

        if (!SessionId.IsNullOrEmpty()) {
            var session = OSInfo.IsWebAssembly ? Session.Default : new Session(SessionId);
            if (SessionProvider.HasSession) {
                if (SessionProvider.Session != session)
                    // No way to change Session other than page reload
                    Nav.NavigateTo(Nav.Uri, true);
            }
            else
                SessionProvider.Session = session;
        }

        CircuitContext.RootComponent = this;
        _whenReadyToRender = PrepareForTheFirstRender();
        _whenReadyToRender.ContinueWith(_ => InvokeAsync(() => {
            _trace.Track("App.ReadyToRender");
            StateHasChanged();
            UILifetimeEvents.RaiseOnAppInitialized(Services);
        }), TaskScheduler.Current);

        // Starting less important UI services
        Services.GetRequiredService<AppPresenceReporter>().Start();

        _ = Loaded();
    }

    public virtual void Dispose() {
        if (_disposeToken.IsCancellationRequested)
            return;

        _disposeTokenSource.CancelAndDisposeSilently();
        CircuitContext.Dispose();
    }

    private async Task PrepareForTheFirstRender() {
        var cancellationToken = _disposeToken;

        // Starting BrowserInfo
        var step = _trace.TrackStep("BrowserInfo.Init");
        _ = BrowserInfo.Init();

        // Starting ThemeUI
        var step2 = _trace.TrackStep("ThemeUI.Start");
        var themeUI = Services.GetRequiredService<ThemeUI>();
        themeUI.Start();

        await BrowserInfo.WhenReady.WaitAsync(cancellationToken);
        step.Complete();

        // Checking StateFactory.GetOrigin(), which becomes available once BrowserInfo is ready
        // ReSharper disable once MethodHasAsyncOverloadWithCancellation
        if (Services.StateFactory().GetOrigin().Length < 4)
            throw StandardError.Internal("BrowserInfo exposes invalid Origin.");

        if (TimeZoneConverter is ServerSideTimeZoneConverter serverSideTimeZoneConverter)
            serverSideTimeZoneConverter.Initialize(BrowserInfo.UtcOffset);

        // Finishing w/ theme
        await themeUI.WhenReady.WaitAsync(cancellationToken);
        step2.Complete();
    }

    private async Task Loaded()
    {
        await _whenReadyToRender;

        var loadingUI = Services.GetRequiredService<LoadingUI>();
        var hostInfo = Services.GetRequiredService<HostInfo>();
        if (hostInfo.AppKind.IsMauiApp()) {
            var url = Nav.GetLocalUrl();
            // Only ChatPage (actually, ChatListNavbarWidget) & HomePage sets WhenLoaded marker.
            if (url.IsHome() || url.IsChatOrChatRoot()) {
                // Wait to let some initial content to load before the first render.
                // Tests with my phone indicate that it takes more that 5 seconds
                // for chat page to load and display chat list.
                //
                // So far we definitely exceed the limit considered by Android Vitals,
                // which should be less than 5 seconds for cold start:
                // https://developer.android.com/topic/performance/vitals/launch-time#av
                var cts = new CancellationTokenSource();
                try {
                    var delayTask = Task.Delay(TimeSpan.FromSeconds(10), cts.Token);
                    await Task.WhenAny(delayTask, loadingUI.WhenLoaded);
                }
                finally {
                    cts.CancelAndDisposeSilently();
                }
                // After timeout set marker in case it did not happen yet.
            }
        }
        loadingUI.MarkLoaded();
    }
}
