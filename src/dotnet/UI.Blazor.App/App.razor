@using Stl.Plugins
@using Blazored.Modal
@using ActualChat.UI.Blazor.Services
@using ActualChat.Hosting
@implements IDisposable
@{
    var moduleAssemblies = Plugins.GetPlugins<IBlazorUIModule>()
        .Select(p => p.GetType().Assembly)
        .ToArray();
}

<CascadingAuthState SessionId="@SessionId">
    <Welcome>
        <CascadingBlazoredModal>
            <Router AppAssembly="@typeof(App).Assembly" AdditionalAssemblies="moduleAssemblies">
                <Found>
                    <CascadingValue Value="@context">
                        <AuthorizeRouteView RouteData="@context" DefaultLayout="@typeof(MainLayout)"/>
                    </CascadingValue>
                </Found>
                <NotFound>
                    <LayoutView Layout="@typeof(MainLayout)">
                        <p>Sorry, there's nothing here.</p>
                    </LayoutView>
                </NotFound>
            </Router>
        </CascadingBlazoredModal>
    </Welcome>
</CascadingAuthState>

@code {
    [Parameter] public string SessionId { get; set; } = Symbol.Empty;

    [Inject] private IPluginHost Plugins { get; init; } = null!;
    [Inject] private BlazorCircuitContext CircuitContext { get; init; } = null!;
    [Inject] private ISessionProvider SessionProvider { get; init; } = null!;
    [Inject] private StateRestore StateRestore { get; init; } = null!;
    [Inject] private NavigationManager Nav { get; init; } = null!;
    [Inject] private TimeZoneConverter TimeZoneConverter { get; init; } = null!;
    [Inject] private IJSRuntime JS { get; init; } = null!;
    [Inject] private ILogger<App> Log { get; init; } = null!;
    [Inject] private HostInfo HostInfo { get; init; } = null!;

    protected override Task OnInitializedAsync()
    {
        if (!SessionId.IsNullOrEmpty()) {
            var session = new Session(SessionId);
            if (SessionProvider.HasSession) {
                if (SessionProvider.Session != session)
                    // No way to change Session other than page reload
                    Nav.NavigateTo(Nav.Uri, true);
            }
            else
                SessionProvider.Session = session;
        }
        if (!CircuitContext.IsPrerendering) {
            CircuitContext.RootComponent = this;
            _ = InitializeTimeZoneConverter();
            // This method should be called only when ISessionProvider.Session is set!
            _ = StateRestore.Restore(CancellationToken.None);
        }
        return Task.CompletedTask;
    }

    private async Task InitializeTimeZoneConverter() {
        if (TimeZoneConverter is not ServerSideTimeZoneConverter serverSideTimeZoneConverter)
            return;

        // Useful JS functions:
        // Intl.DateTimeFormat().resolvedOptions().timeZone
        // new Date().getTimezoneOffset()
        try {
            var utcOffset = await JS.InvokeAsync<int>("eval", "new Date().getTimezoneOffset()").ConfigureAwait(false);
            serverSideTimeZoneConverter.Initialize(TimeSpan.FromMinutes(utcOffset));
        }
        catch (Exception ex) {
            Log.LogError(ex, "Failed to initialize ServerSideTimeZoneConverter");
        }
    }

    public void Dispose()
        => CircuitContext.Dispose();
}
