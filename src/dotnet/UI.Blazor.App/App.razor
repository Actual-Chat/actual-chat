@using ActualChat.UI.Blazor.Services
@using Blazored.Modal
@using Stl.OS
@using Stl.Plugins
@using System.Reflection
@implements IDisposable

<BrowserInfoProvider>
<BlazoredModal ActivateFocusTrap="true" />

    @if (!_whenReadyToRender.IsCompletedSuccessfully) {
        @*
        <div class="flex justify-center items-center h-screen">
            Initializing...
        </div>
        *@
        return;
    }

    <Router AppAssembly="UIAssembly" AdditionalAssemblies="UIModuleAssemblies">
        <Found>
            <ErrorWrapper>
                <RouteView RouteData="@context" DefaultLayout="@typeof(NoChatLayout)"/>
            </ErrorWrapper>
        </Found>
        <NotFound>
            <LayoutView Layout="@typeof(NoChatLayout)">
                <p>Sorry, there's nothing here.</p>
            </LayoutView>
        </NotFound>
    </Router>

</BrowserInfoProvider>

@code {
    private static Assembly? UIAssembly { get; set; }
    private static Assembly[]? UIModuleAssemblies { get; set; }

    private Task _whenReadyToRender = null!;

    [Inject] private IPluginHost Plugins { get; init; } = null!;
    [Inject] private IServiceProvider Services { get; init; } = null!;
    [Inject] private BlazorCircuitContext CircuitContext { get; init; } = null!;
    [Inject] private ISessionProvider SessionProvider { get; init; } = null!;
    [Inject] private AppPresenceReporter AppPresenceReporter { get; init; } = null!;
    [Inject] private TimeZoneConverter TimeZoneConverter { get; init; } = null!;
    [Inject] private BrowserInfo BrowserInfo { get; init; } = null!;
    [Inject] private HistoryUI HistoryUI { get; init; } = null!;
    [Inject] private UILifetimeEvents UILifetimeEvents { get; init; } = null!;
    [Inject] private IJSRuntime JS { get; init; } = null!;
    [Inject] private NavigationManager Nav { get; init; } = null!;
    [Inject] private ILogger<App> Log { get; init; } = null!;

    [Parameter] public string SessionId { get; set; } = Symbol.Empty;

    protected override void OnInitialized() {
        UIAssembly ??= typeof(App).Assembly;
        UIModuleAssemblies ??= Plugins.GetPlugins<IBlazorUIModule>()
            .Select(p => p.GetType().Assembly)
            .Where(a => a != UIAssembly)
            .ToArray();

        if (!SessionId.IsNullOrEmpty()) {
            var session = OSInfo.IsWebAssembly ? Session.Default : new Session(SessionId);
            if (SessionProvider.HasSession) {
                if (SessionProvider.Session != session)
                    // No way to change Session other than page reload
                    Nav.NavigateTo(Nav.Uri, true);
            }
            else
                SessionProvider.Session = session;
        }

        CircuitContext.RootComponent = this;
        _whenReadyToRender = PrepareForTheFirstRender();
        _whenReadyToRender.ContinueWith(_ => InvokeAsync(() => {
            StateHasChanged();
            UILifetimeEvents.RaiseOnAppInitialized(Services);
        }), TaskScheduler.Current);

        // Starting less important UI services
        AppPresenceReporter.Start();

        _ = Loaded();
    }

    public void Dispose()
        => CircuitContext.Dispose();

    private async Task PrepareForTheFirstRender() {
        // Starting to acquire browser info
        _ = BrowserInfo.Init();

        // Starting to read theme
        var themeUI = Services.GetRequiredService<ThemeUI>();
        themeUI.Start();
        await themeUI.Theme.WhenFirstTimeRead;

        // Starting to apply theme
        var applyThemeTask = themeUI.ApplyTheme(themeUI.Theme.Value);

        // Finishing w/ browser info
        await BrowserInfo.WhenReady;

        if (TimeZoneConverter is ServerSideTimeZoneConverter serverSideTimeZoneConverter)
            try {
                serverSideTimeZoneConverter.Initialize(BrowserInfo.UtcOffset);
            }
            catch (Exception ex) {
                Log.LogError(ex, "Failed to initialize ServerSideTimeZoneConverter");
                serverSideTimeZoneConverter.Initialize(TimeSpan.FromMinutes(0));
            }

        // Finishing w/ theme
        await applyThemeTask;

        // Finishing w/ history ui
        await HistoryUI.WhenInitialized;
    }

    private async Task Loaded()
    {
        await _whenReadyToRender;

        var loadingUI = Services.GetRequiredService<LoadingUI>();
        var browserInfo = Services.GetRequiredService<BrowserInfo>();
        if (browserInfo.ScreenSize.Value.IsNarrow()) {
            var relativeUri = Nav.GetRelativePath();
            var isHomePage = Links.Equals(relativeUri, "/");
            var isChatPage = relativeUri.OrdinalStartsWith(Links.ChatPage(""));
            // Home page in narrow view redirects to Chat page.
            // Chat page will set marker.
            if (isHomePage || isChatPage) {
                // Wait to let Chat page to
                // So far timeout is too big. I would like to put in less than 5 seconds.
                // But tests with my phone indicate that it takes more that 5 seconds to be ready to
                // load and display chat list.
                // So far we definitely exceed limit considered by Android Vitals
                // which should be less than 5 seconds for cold start.
                // https://developer.android.com/topic/performance/vitals/launch-time#av
                var cts = new CancellationTokenSource();
                try {
                    var delayTask = Task.Delay(TimeSpan.FromSeconds(10), cts.Token);
                    await Task.WhenAny(delayTask, loadingUI.WhenLoaded);
                }
                finally {
                    cts.CancelAndDisposeSilently();
                }
                // After timeout set marker in case it did not happen yet.
            }
        }
        loadingUI.MarkLoaded();
    }
}
