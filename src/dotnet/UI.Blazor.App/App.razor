@using ActualChat.UI.Blazor.Services
@using Blazored.Modal
@using Stl.OS
@using Stl.Plugins
@using System.Reflection
@using ActualChat.UI.Blazor.App.Services
@implements IDisposable

<LayoutTypeProvider>
    <CascadingBlazoredModal>
        <CascadingAuthState>
            <Router AppAssembly="UIAssembly" AdditionalAssemblies="UIModuleAssemblies">
                <Found>
                    @if (_isInitialized) {
                        <ErrorWrapper>
                            <RouteView RouteData="@context" DefaultLayout="@typeof(NoChatLayout)"/>
                        </ErrorWrapper>
                    } else {
                        <LayoutView Layout="@typeof(NoChatLayout)">
                            <p>Loading...</p>
                        </LayoutView>
                    }
                </Found>
                <NotFound>
                    <LayoutView Layout="@typeof(NoChatLayout)">
                        <p>Sorry, there's nothing here.</p>
                    </LayoutView>
                </NotFound>
            </Router>
        </CascadingAuthState>
    </CascadingBlazoredModal>
    <ContextMenuContainer />
</LayoutTypeProvider>

@code {
    private static Assembly? UIAssembly { get; set; }
    private static Assembly[]? UIModuleAssemblies { get; set; }

    private bool _isInitialized;

    [Inject] private IPluginHost Plugins { get; init; } = null!;
    [Inject] private IServiceProvider Services { get; init; } = null!;
    [Inject] private BlazorCircuitContext CircuitContext { get; init; } = null!;
    [Inject] private ISessionProvider SessionProvider { get; init; } = null!;
    [Inject] private TimeZoneConverter TimeZoneConverter { get; init; } = null!;
    [Inject] private IJSRuntime JS { get; init; } = null!;
    [Inject] private NavigationManager Nav { get; init; } = null!;
    [Inject] private ILogger<App> Log { get; init; } = null!;

    [Parameter] public string SessionId { get; set; } = Symbol.Empty;

    protected override void OnInitialized() {
        UIAssembly ??= typeof(App).Assembly;
        UIModuleAssemblies ??= Plugins.GetPlugins<IBlazorUIModule>()
            .Select(p => p.GetType().Assembly)
            .Where(a => a != UIAssembly)
            .ToArray();

        if (!SessionId.IsNullOrEmpty()) {
            var session = OSInfo.IsWebAssembly ? Session.Default : new Session(SessionId);
            if (SessionProvider.HasSession) {
                if (SessionProvider.Session != session)
                    // No way to change Session other than page reload
                    Nav.NavigateTo(Nav.Uri, true);
            }
            else
                SessionProvider.Session = session;
        }

        CircuitContext.RootComponent = this;
        InitializeTimeZoneConverter();
        Services.GetService<SignOutReloader>()?.Start();
    }

    public void Dispose()
        => CircuitContext.Dispose();

    private void InitializeTimeZoneConverter() {
        if (TimeZoneConverter is not ServerSideTimeZoneConverter serverSideTimeZoneConverter) {
            _isInitialized = true;
            return;
        }

        _ = Initialize();

        async Task Initialize() {
            // Useful JS functions:
            // Intl.DateTimeFormat().resolvedOptions().timeZone
            // new Date().getTimezoneOffset()
            try {
                var utcOffset = await JS.InvokeAsync<int>("eval", "new Date().getTimezoneOffset()");
                serverSideTimeZoneConverter.Initialize(TimeSpan.FromMinutes(utcOffset));
                _isInitialized = true;
                StateHasChanged();
            }
            catch (Exception ex) {
                Log.LogError(ex, "Failed to initialize ServerSideTimeZoneConverter");
            }
        }
    }
}
