@namespace ActualChat.UI.Blazor.App.Components
@inherits ComputedStateComponent<ChatDescription.Model>
@{
    var m = State.Value;
}

<span class="c-chat-description">
    @m.Description
</span>

@code {
    private Chat Chat => ChatContext.Chat;
    private Session Session => ChatContext.Hub.Session();
    private IAuthors Authors => ChatContext.Hub.Authors;

    [Parameter, EditorRequired] public ChatContext ChatContext { get; set; } = null!;

    protected override ComputedState<Model>.Options GetStateOptions()
        => ComputedStateComponent.GetStateOptions(GetType(),
            static t => new ComputedState<Model>.Options() {
                InitialValue = Model.Loading,
                Category = ComputedStateComponent.GetStateCategory(t),
            });

    protected override async Task<Model> ComputeState(CancellationToken cancellationToken) {
        if (!Chat.Id.IsPeerChat(out var peerChatId)) {
            return new() {
                Description = Chat.Description,
            };
        }

        var ownAccount = ChatContext.OwnAccount;
        var peerAccountId = peerChatId.UserIds.OtherThanOrDefault(ownAccount.Id);
        if (peerAccountId.IsNone)
            return Model.Loading;

        var ownUserId = ownAccount.User.Id;
        var anotherAuthorId = new AuthorId(peerChatId, peerChatId.UserId1 == ownUserId ? 2 : 1, AssumeValid.Option);
        var anotherAuthor = await Authors.Get(Session, peerChatId, anotherAuthorId, cancellationToken).ConfigureAwait(false);

        if (anotherAuthor == null)
            return Model.Loading;

        var bio = anotherAuthor.Avatar.Bio;
        return new() {
            Description = bio,
        };
    }

    // Nested types

    public sealed record Model {
        public static readonly Model Loading = new();

        public string Description { get; init; } = "";
    }
}
