@implements IModalView<NewChatModal.Model>
@inherits FusionComponentBase
@namespace ActualChat.UI.Blazor.App.Components
@{
    var title = _chat != null ? _chat.Title : "New chat";
}

<DialogFrame
    Class="new-chat-modal"
    Title="@title"
    HasCloseButton="true"
    NarrowViewSettings="@_narrowViewSettings">
    <Body>
        @if (_page == Page.Props) {
            <NewChatModalProps
                PlaceId="@ModalModel.PlaceId"
                ButtonsSlotName="@_buttonsSlotName"
                ChatCreated="OnChatCreated"
                Cancelled="Close" />
        }
        else if (_page == Page.Members){
            <NewChatModalMembers
                ButtonsSlotName="@_buttonsSlotName"
                ChatId="@_chat!.Id"
                Skipped="Close"
                Completed="Close" />
        }
    </Body>
    <Buttons>
        <RenderSlot Name="@_buttonsSlotName" />
    </Buttons>
</DialogFrame>

@code {
    private readonly DialogFrameNarrowViewSettings _narrowViewSettings = DialogFrameNarrowViewSettings.Stretch with {
        UseInteractiveHeader = true,
        ShouldHideButtons = false,
    };
    private readonly string _buttonsSlotName = Guid.NewGuid().ToString();

    private Chat? _chat;
    private Page _page = Page.Props;

    [Inject] private ChatUIHub Hub { get; init; } = null!;

    [CascadingParameter] public Modal Modal { get; set; } = null!;
    [Parameter] public Model ModalModel { get; set; } = null!;

    protected override void OnInitialized()
        => _ = NavigateToChatWhenClosed();

    private async void OnChatCreated(Chat chat) {
        _chat = chat;
        var canAddMembers = await Hub.EditMembersUI.HaveMembersToAdd(chat);
        if (!canAddMembers) {
            // If there is no people to add, close the dialog.
            Close();
            return;
        }

        _page = Page.Members;
        // Re-render component to show Add members page.
        StateHasChanged();
    }

    private async Task NavigateToChatWhenClosed() {
        await Modal.Ref.WhenClosed;
        if (_chat == null)
            return;

        _ = Hub.History.NavigateTo(Links.Chat(_chat.Id));
    }

    private void Close()
        => Modal.Close();

    // Nested types

    public sealed record Model(PlaceId PlaceId);
    private enum Page { Props, Members }
}
