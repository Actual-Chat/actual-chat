@namespace ActualChat.UI.Blazor.App.Components
@using ActualChat.Search
@using SearchUI = ActualChat.UI.Blazor.App.Services.SearchUI
@using ActualChat.Contacts
@inherits ComputedRenderStateComponent<FoundMessageListItem.Model>
@{
    var m = State.Value;
    if (m == Model.None)
        return;

    if (ReferenceEquals(FoundItem, null))
        return;

    var chatState = m.ChatState;
    var chat = chatState.Chat;
    if (ReferenceEquals(chat, null) || ReferenceEquals(m.Entry, null))
        return;
}

@if (m == Model.Loading) {
    <ChatListItemSkeleton />
} else {
    <div class="found-result message">
        <div class="c-content" data-href="@m.Link">
            <div class="c-container">
                <ChatIcon Chat="@chatState.Chat"/>
                <div class="c-description">
                    <div class="c-first-line">
                        <span class="c-title">
                            @chat.Title
                        </span>
                        <LastEntryTime LastEntry="@m.Entry"/>
                    </div>
                    @if (chat.Kind == ChatKind.Peer) {
                        // Peer chat message
                        <div class="c-second-line">
                            @if (ReferenceEquals(m.Author, m.OwnAuthor)) {
                                <span class="c-name">
                                    <AuthorName
                                        AuthorSid="@m.Entry.AuthorId"
                                        ShowDetailsOnClick="false"
                                        ShowAsYou="true"/>
                                </span>
                                <span class="c-colon">:</span>
                            }
                            <div class="c-entry">
                                <SearchMatchHighlighter Match="@m.MessageMatch"/>
                            </div>
                        </div>
                    } else if (chat.Kind == ChatKind.Group) {
                        // Group chat message
                        <div class="c-second-line">
                            <span class="c-name">
                                <AuthorName
                                    AuthorSid="@m.Entry.AuthorId"
                                    ShowDetailsOnClick="false"
                                    ShowAsYou="true"/>
                            </span>
                        </div>
                        <div class="c-third-line public-chat">
                            <SearchMatchHighlighter Match="@m.MessageMatch"/>
                        </div>
                    } else {
                        // Place chat message
                        <div class="c-second-line message">
                            In <span class="c-place-title">@m.Place?.Title</span>
                        </div>
                        <div class="c-third-line place-chat">
                            <span class="c-name">
                                <AuthorName
                                    AuthorSid="@m.Entry.AuthorId"
                                    ShowDetailsOnClick="false"
                                    ShowAsYou="true"/>
                            </span>
                            <span class="c-colon">:</span>
                            <div class="c-entry">
                                <SearchMatchHighlighter Match="@m.MessageMatch"/>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Inject] private ChatUIHub Hub { get; init; } = null!;
    private ChatUI ChatUI => Hub.ChatUI;
    private IAuthors Authors => Hub.Authors;
    private AccountUI AccountUI => Hub.AccountUI;
    private Session Session => Hub.Session();
    private IPlaces Places => Hub.Places;

    [Parameter] public FoundItem? FoundItem { get; set; }

    protected override ComputedState<Model>.Options GetStateOptions()
        => ComputedStateComponent.GetStateOptions(GetType(),
            static t => new ComputedState<Model>.Options() {
                InitialValue = Model.Loading,
                Category = ComputedStateComponent.GetStateCategory(t),
            });

    protected override async Task<Model> ComputeState(CancellationToken cancellationToken)
    {
        // We intentionally use .ConfigureAwait(false) here: this is one of the most frequently called methods.
        // Properties are copied to local vars because of this.
        AuthorFull? entryAuthorFull = null;
        Place? place = null;
        var foundItem = FoundItem;
        if (foundItem == null)
            return Model.None;

        var chatId = foundItem.ChatId;
        var messageMatch = foundItem.MessageSearchMatch;
        var entryId = foundItem.EntryId;

        var chatState = await ChatUI.GetState(chatId, false, cancellationToken).ConfigureAwait(false);
        if (chatState == null)
            return Model.None;

        var placeId = chatId.PlaceChatId.PlaceId;
        if (!placeId.IsNone)
            place = await Places.Get(Session, placeId, cancellationToken).ConfigureAwait(false);

        var entry = entryId.IsNone ? chatState.Info.LastTextEntry : await ChatUI.GetEntry(entryId, cancellationToken);
        if (entry != null) {
            var authorId = entry.AuthorId;
            entryAuthorFull = await Authors.GetFull(Session, chatId, authorId, cancellationToken).ConfigureAwait(false);
        }
        var ownAuthorFull = await Authors.GetOwn(Session, chatId, cancellationToken).ConfigureAwait(false);

        return new() {
            ChatState = chatState,
            MessageMatch = messageMatch.IsEmpty ? SearchMatch.New(chatState.Info.LastTextEntryText) : messageMatch,
            Entry = entry,
            Author = entryAuthorFull,
            OwnAuthor = ownAuthorFull,
            Place = place,
            Link = Links.Chat(chatId),
        };
    }

    // Nested types

    public sealed record Model {
        public static readonly Model Loading = new() { ChatState = ChatState.Loading };
        public static readonly Model None = new() { ChatState = ChatState.None };

        public ChatState ChatState { get; init; } = ChatState.None;
        public SearchMatch MessageMatch { get; init; } = SearchMatch.Empty;
        public ChatEntry? Entry { get; init; }
        public AuthorFull? Author { get; init; }
        public AuthorFull? OwnAuthor { get; init; }
        public Place? Place {get; init;}
        public LocalUrl Link { get; init; }
    }
}
