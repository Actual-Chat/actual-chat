@namespace ActualChat.UI.Blazor.App.Components
@using ActualChat.Search
@using SearchUI = ActualChat.UI.Blazor.App.Services.SearchUI
@inherits ComputedRenderStateComponent<FoundPlaceListItem.Model>
@{
    var m = State.Value;
    if (m == Model.None)
        return;
    if (ReferenceEquals(FoundItem, null))
        return;

    var chatState = m.ChatState;
    var chat = chatState.Chat;
    var place = m.Place;
}

@if (m == Model.Loading) {
    <ChatListItemSkeleton />
} else {
    <div class="navbar-item found-chat">
        <div class="navbar-item-content" data-href="@m.Link">
            <div class="c-container">
                <ChatIcon Chat="chatState.Chat"/>
                <div class="c-description">
                    <span class="c-chat-title">
                        <SearchMatchHighlighter Match="@m.TitleMatch"/>
                    </span>
                    @if (m.Place != null) {
                        <div class="c-place-info text-caption-3">
                            @m.Place.Title
                        </div>
                    }
                    @if (lastTextEntry != null) {
                        <div class="c-last-message">
                            @if (chat.Kind != ChatKind.Peer && !lastTextEntry.IsSystemEntry) {
                                <span class="c-name">
                                    <AuthorName
                                        AuthorSid="@lastTextEntry.AuthorId"
                                        ShowDetailsOnClick="false"
                                        ShowAsYou="true"/>
                                </span>
                                <span class="c-colon">:</span>
                            }
                            <span class="c-text @textCls">
                                @text
                            </span>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Inject] private ChatUIHub Hub { get; init; } = null!;
    private ChatUI ChatUI => Hub.ChatUI;
    private ChatListUI ChatListUI => Hub.ChatListUI;
    private SearchUI SearchUI => Hub.SearchUI;
    private ScreenSize ScreenSize => Hub.BrowserInfo.ScreenSize.Value;
    private IAuthors Authors => Hub.Authors;
    private IChats Chats => Hub.Chats;
    private IPlaces Places => Hub.Places;
    private Session Session => Hub.Session();

    [Parameter] public FoundItem? FoundItem { get; set; }

    protected override ComputedState<Model>.Options GetStateOptions()
        => ComputedStateComponent.GetStateOptions(GetType(),
            static t => new ComputedState<Model>.Options() {
                InitialValue = Model.Loading,
                Category = ComputedStateComponent.GetStateCategory(t),
            });

    protected override async Task<Model> ComputeState(CancellationToken cancellationToken)
    {
        // We intentionally use .ConfigureAwait(false) here: this is one of the most frequently called methods.
        // Properties are copied to local vars because of this.
        var foundItem = FoundItem;
        if (foundItem == null)
            return Model.None;

        var chatId = foundItem.ChatId;
        var titleMatch = foundItem.ContactSearchMatch;

        var chatState = await ChatUI.GetState(chatId, false, cancellationToken).ConfigureAwait(false);
        if (chatState == null)
            return Model.None;

        var placeId = chatId.PlaceChatId.PlaceId;
        if (placeId.IsNone)
            return Model.None;

        var ownAuthor = await Authors.GetOwn(Session, chatId, cancellationToken).ConfigureAwait(false);
        if (ownAuthor == null || ownAuthor.Id.IsNone)
            return Model.None;

        var place = await Places.Get(Session, placeId, ownAuthor.Id, cancellationToken).ConfigureAwait(false);

        var welcomeChatId = await Places.GetWelcomeChatId(Session, chatId.PlaceChatId.PlaceId, cancellationToken).ConfigureAwait(false);

        return new() {
            ChatState = chatState,
            TitleMatch = titleMatch.IsEmpty ? SearchMatch.New(chatState.Chat.Title) : titleMatch,
            Link = Links.Chat(welcomeChatId),
        };
    }

    // Nested types

    public sealed record Model {
        public static readonly Model Loading = new() { ChatState = ChatState.Loading };
        public static readonly Model None = new() { ChatState = ChatState.None };

        public ChatState ChatState { get; init; } = ChatState.None;
        public SearchMatch TitleMatch { get; init; } = SearchMatch.Empty;
        public Place? Place { get; init; }
        public LocalUrl Link { get; init; }
    }
}
