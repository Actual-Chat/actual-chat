@namespace ActualChat.UI.Blazor.App.Components
@using ActualChat.Media
@using ActualChat.Search
@inherits ComputedRenderStateComponent<FoundPlaceListItem.Model>
@{
    var m = State.Value;
    var place = m.Place;
    if (m == Model.None)
        return;
}

@if (m == Model.Loading) {
    <ChatListItemSkeleton />
    return;
}

<div class="found-result place">
    <div class="c-content" data-href="@m.Link">
        <div class="c-container">
            <Pic
                Title="@place.Title"
                Picture="@place.Picture.ToPicture()"
                Size="@SquareSize.Size10"
                IsSquare="@false"
                AvatarKind="@AvatarKind.Marble"
                AvatarKey="@place.Id.Value"/>
            <div class="c-description">
                <div class="c-first-line">
                    <span class="c-title">
                        <SearchMatchHighlighter Match="@m.TitleMatch"/>
                    </span>
                    <span class="c-members">@m.MemberCount @("member".Pluralize(m.MemberCount))</span>
                </div>
                <div class="c-second-line two-line">
                    <p class="line-clamp-2">
                        @place.Description
                    </p>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [Inject] private ChatUIHub Hub { get; init; } = null!;
    private Session Session => Hub.Session();
    private IPlaces Places => Hub.Places;
    private IAuthors Authors => Hub.Authors;

    [Parameter] public FoundItem FoundItem { get; set; } = null!;

    protected override ComputedState<Model>.Options GetStateOptions()
        => ComputedStateComponent.GetStateOptions(GetType(),
            static t => new ComputedState<Model>.Options() {
                InitialValue = Model.Loading,
                Category = ComputedStateComponent.GetStateCategory(t),
            });

    protected override async Task<Model> ComputeState(CancellationToken cancellationToken)
    {
        // We intentionally use .ConfigureAwait(false) here: this is one of the most frequently called methods.
        // Properties are copied to local vars because of this.
        var foundItem = FoundItem;
        var placeId = foundItem.ChatId.PlaceChatId.PlaceId;
        if (placeId.IsNone)
            return Model.None;

        var place = await Places.Get(Session, placeId, cancellationToken).ConfigureAwait(false);
        if (place == null)
            return Model.None;

        var allAuthorIds = await Places.ListAuthorIds(Session, place.Id, cancellationToken).ConfigureAwait(false);
        var titleMatch = foundItem.ContactSearchMatch;
        return new(place) {
            TitleMatch = titleMatch.IsEmpty ? SearchMatch.New(place.Title) : titleMatch,
            MemberCount = allAuthorIds.Count,
            Link = Links.PlaceInfo(placeId),
        };
    }

    // Nested types

    public sealed record Model(Place Place) {
        public static readonly Model Loading = new(SpecialPlace.Loading);
        public static readonly Model None = new(SpecialPlace.Unavailable);

        public SearchMatch TitleMatch { get; init; } = SearchMatch.Empty;
        public int MemberCount { get; init; }
        public LocalUrl Link { get; init; }
    }
}
