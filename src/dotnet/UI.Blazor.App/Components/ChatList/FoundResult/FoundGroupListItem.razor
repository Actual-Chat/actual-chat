@namespace ActualChat.UI.Blazor.App.Components
@using ActualChat.Search
@using SearchUI = ActualChat.UI.Blazor.App.Services.SearchUI
@inherits ComputedRenderStateComponent<FoundGroupListItem.Model>
@{
    var m = State.Value;
    if (ReferenceEquals(m, Model.None))
        return;

    var chat = m.ChatState.Chat;
}

@if (m == Model.Loading) {
    <ChatListItemSkeleton />
} else {
    <div class="found-result chat">
        <div class="c-content" data-href="@m.Link" @onclick="@(() => SearchUI.Select(m.Item))">
            <div class="c-container">
                <ChatIcon Chat="@chat"/>
                <div class="c-description">
                    <div class="c-first-line">
                        <span class="c-title">
                            <SearchMatchHighlighter Match="@m.TitleMatch"/>
                        </span>
                        <span class="c-members">@m.MemberCount @("member".Pluralize(m.MemberCount))</span>
                    </div>
                    @if (m.Place is not null) {
                        <div class="c-second-line">
                            In <span class="c-place-title">@m.Place.Title</span>
                        </div>
                    }
                    @if (!chat.Description.IsNullOrEmpty()) {
                        <div class="c-third-line">
                            @chat.Description
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Inject] private ChatUIHub Hub { get; init; } = null!;
    private ChatUI ChatUI => Hub.ChatUI;
    private SearchUI SearchUI => Hub.SearchUI;
    private IAuthors Authors => Hub.Authors;
    private IPlaces Places => Hub.Places;
    private Session Session => Hub.Session();

    [Parameter] public FoundItem FoundItem { get; set; } = null!;

    protected override ComputedState<Model>.Options GetStateOptions()
        => ComputedStateComponent.GetStateOptions(GetType(),
            static t => new ComputedState<Model>.Options() {
                InitialValue = Model.Loading,
                Category = ComputedStateComponent.GetStateCategory(t),
            });

    protected override async Task<Model> ComputeState(CancellationToken cancellationToken)
    {
        // We intentionally use .ConfigureAwait(false) here: this is one of the most frequently called methods.
        // Properties are copied to local vars because of this.
        Place? place = null;
        var foundItem = FoundItem;
        var chatId = foundItem.ChatId;
        var titleMatch = foundItem.ContactSearchMatch;

        var chatState = await ChatUI.GetState(chatId, false, cancellationToken).ConfigureAwait(false);
        if (chatState == null)
            return Model.None;

        var allAuthorIds = await Authors.ListAuthorIds(Session, chatId, cancellationToken);
        var placeId = chatId.PlaceChatId.PlaceId;
        if (!placeId.IsNone)
            place = await Places.Get(Session, placeId, cancellationToken).ConfigureAwait(false);

        return new() {
            ChatState = chatState,
            TitleMatch = titleMatch.IsEmpty ? SearchMatch.New(chatState.Chat.Title) : titleMatch,
            Place = place,
            MemberCount = allAuthorIds.Count,
            Link = Links.Chat(chatId),
            Item = foundItem,
        };
    }

    // Nested types

    public sealed record Model {
        public static readonly Model Loading = new() { ChatState = ChatState.Loading };
        public static readonly Model None = new() { ChatState = ChatState.None };

        public ChatState ChatState { get; init; } = ChatState.None;
        public SearchMatch TitleMatch { get; init; } = SearchMatch.Empty;
        public Place? Place { get; init; }
        public int MemberCount { get; init; }
        public LocalUrl Link { get; init; }
        public FoundItem Item { get; init; } = null!;
    }
}
