@namespace ActualChat.UI.Blazor.App.Components
@using ActualChat.Search
@using SearchUI = ActualChat.UI.Blazor.App.Services.SearchUI
@inherits ComputedRenderStateComponent<FoundUserListItem.Model>
@{
    var m = State.Value;
    if (m == Model.None)
        return;

    var chatState = m.ChatState;
}

@if (m == Model.Loading) {
    <ChatListItemSkeleton />
} else {
    <NavbarItem Class="found-result contact" IsSelected="@m.IsSelected">
        <div class="c-content" Url="@m.Link" @onclick="@(() => SearchUI.Select(m.Item))">
            <div class="c-container">
                <ChatIcon Chat="@chatState.Chat"/>
                <div class="c-description">
                    <div class="c-first-line">
                        <span class="c-title">
                            <SearchMatchHighlighter Match="@m.TitleMatch"/>
                        </span>
                    </div>
                    @if (m.Entry != null) {
                        <div class="c-second-line">
                            <div class="c-last-message">
                                <AuthorName
                                    AuthorSid="@m.Entry.AuthorId"
                                    ShowDetailsOnClick="false"
                                    ShowAsYou="true"/>
                                <span class="c-colon">:</span>
                                @if (m.Entry.IsStreaming) {
                                    <chat-activity-svg size="4" isActive="true"/>
                                } else {
                                    <span class="c-text">
                                        @m.ChatState.Info.LastTextEntryText
                                    </span>
                                }
                            </div>
                        </div>
                    } else {
                        <div class="c-second-line bio">
                            @m.Author?.Avatar.Bio
                        </div>
                    }
                </div>
            </div>
        </div>
    </NavbarItem>
}

@code {
    [Inject] private ChatUIHub Hub { get; init; } = null!;
    private ChatUI ChatUI => Hub.ChatUI;
    private SearchUI SearchUI => Hub.SearchUI;
    private IAuthors Authors => Hub.Authors;
    private AccountUI AccountUI => Hub.AccountUI;
    private Session Session => Hub.Session();

    [Parameter] public FoundItem FoundItem { get; set; } = null!;

    protected override ComputedState<Model>.Options GetStateOptions()
        => ComputedStateComponent.GetStateOptions(GetType(),
            static t => new ComputedState<Model>.Options() {
                InitialValue = Model.Loading,
                Category = ComputedStateComponent.GetStateCategory(t),
            });

    protected override async Task<Model> ComputeState(CancellationToken cancellationToken)
    {
        // We intentionally use .ConfigureAwait(false) here: this is one of the most frequently called methods.
        // Properties are copied to local vars because of this.
        ChatEntry? lastTextEntry = null;
        var foundItem = FoundItem;
        var chatId = foundItem.ChatId;
        var titleMatch = foundItem.ContactSearchMatch;

        var chatState = await ChatUI.GetState(chatId, false, cancellationToken).ConfigureAwait(false);
        if (chatState == null)
            return Model.None;

        if (!chatId.IsPeerChat(out var peerChatId))
            return Model.None;

        var ownAuthor = await Authors.GetOwn(Session, peerChatId, cancellationToken).ConfigureAwait(false);
        var anotherAuthorId = new AuthorId(peerChatId, ownAuthor != null && peerChatId.UserId1 == ownAuthor.UserId ? 2 : 1, AssumeValid.Option);
        var anotherAuthor = await Authors.Get(Session, peerChatId, anotherAuthorId, cancellationToken).ConfigureAwait(false);

        if (anotherAuthor == null)
            return Model.None;

        var entry = chatState.Info.LastTextEntry;
        if (entry is { Id.IsNone: false, IsSystemEntry: false })
            lastTextEntry = entry;
        var selectedFoundItem = await SearchUI.SelectedItem.Use(cancellationToken).ConfigureAwait(false);

        return new() {
            ChatState = chatState,
            TitleMatch = titleMatch.IsEmpty ? SearchMatch.New(chatState.Chat.Title) : titleMatch,
            Entry = lastTextEntry,
            Link = Links.Chat(chatId),
            Author = anotherAuthor,
            Item = foundItem,
            IsSelected = selectedFoundItem == foundItem,
        };
    }

    // Nested types

    public sealed record Model {
        public static readonly Model Loading = new() { ChatState = ChatState.Loading };
        public static readonly Model None = new() { ChatState = ChatState.None };

        public ChatState ChatState { get; init; } = ChatState.None;
        public SearchMatch TitleMatch { get; init; } = SearchMatch.Empty;
        public ChatEntry? Entry { get; init; }
        public LocalUrl Link { get; init; }
        public Author? Author { get; init; }
        public FoundItem Item { get; init; } = null!;
        public bool IsSelected { get; init; }
    }
}
