@namespace ActualChat.UI.Blazor.App.Components
@inherits FusionComponentBase
@{
    RenderFragment RenderTab(ChatListFilter filter, double order) {
        var id = filter.Id.Value;
        var title = filter.Title;
        var contentVersion = (id, title);
        return @<Tab
            @key="@id"
            Id="@id"
            Title="@title"
            ContentVersion="@contentVersion"
            Order="@order"
            Class="chats-tab">
            <TitleContent>
                <span>@title</span>
                <ChatListTabUnreadCount PlaceChatListSettings="@_placeChatListSettings" ChatListFilter="@filter" />
            </TitleContent>
        </Tab>;
    }
}

<div class="c-container">
    <div class="c-all-chats">
        <TabPanel
            @ref="@_tabPanel"
            BottomHill="true"
            TabsClass="left-panel-tabs"
            AutoSelectInitialTab="false"
            SelectedTabIdChanged="@OnSelectedTabIdChanged">
            <AdditionalButton>
                <ChatListSortButton PlaceChatListSettings="@_placeChatListSettings" />
            </AdditionalButton>
            <ChildContent>
                @for (var i = 0; i < ChatListFilter.All.Count; i++) {
                    var filter = ChatListFilter.All[i];
                    @RenderTab(filter, i)
                }
            </ChildContent>
            <TabContent>
                <SearchableChatList PlaceId="@PlaceId" />
            </TabContent>
        </TabPanel>
    </div>
    <div class="c-active-chats">
        <ActiveChats />
    </div>
</div>

@code {
    private TabPanel _tabPanel = null!;
    private PlaceChatListSettings? _placeChatListSettings;
    private string? _tabPanelSelectedTabId;

    [Inject] private ChatListUI ChatListUI { get; init; } = null!;

    [Parameter, EditorRequired] public PlaceId PlaceId { get; set; }

    protected override async Task OnParametersSetAsync() {
        if (PlaceId == _placeChatListSettings?.PlaceId)
            return;

        var placeId = PlaceId;
        var placeChatListSettings = ChatListUI.GetPlaceChatListSettings(placeId);
        _placeChatListSettings ??= placeChatListSettings; // Ensure field is initialized before first render.
        var chatListSettings = await placeChatListSettings.Get();
        if (placeId != PlaceId)
            return; // PlaceId was changed while we were reading settings

        _placeChatListSettings = placeChatListSettings;
        _tabPanelSelectedTabId = chatListSettings.FilterId;
    }

    protected override void OnAfterRender(bool firstRender) {
        if (_tabPanelSelectedTabId == null)
            return;

        _tabPanel.SelectedTabId = _tabPanelSelectedTabId;
        _tabPanelSelectedTabId = null;
    }

    private void OnSelectedTabIdChanged(string? tabId) {
        var filterId = tabId ?? "";
        _placeChatListSettings?.SetFilter(filterId);
    }
}
