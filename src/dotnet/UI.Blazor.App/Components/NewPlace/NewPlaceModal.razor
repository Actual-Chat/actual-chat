@implements IModalView<NewPlaceModal.Model>
@inherits FusionComponentBase
@namespace ActualChat.UI.Blazor.App.Components
@{
    var title = _place?.Title ?? "New place";
}

<DialogFrame
    Class="new-place-modal"
    Title="@title"
    HasCloseButton="true"
    NarrowViewSettings="@_narrowViewSettings">
    <Body>
        @if (_page == Page.Props) {
            <NewPlaceModalProps
                ButtonsSlotName="@_buttonsSlotName"
                PlaceCreated="OnPlaceCreated"
                Cancelled="Close" />
        }
        else if (_page == Page.Members) {
            <NewPlaceModalMembers
                ButtonsSlotName="@_buttonsSlotName"
                PlaceId="@_place!.Id"
                Skipped="Close"
                Completed="Close" />
        }
    </Body>
    <Buttons>
        <RenderSlot Name="@_buttonsSlotName" />
    </Buttons>
</DialogFrame>

@code {
    private readonly DialogFrameNarrowViewSettings _narrowViewSettings = DialogFrameNarrowViewSettings.Stretch with {
        UseInteractiveHeader = true,
        ShouldHideButtons = false,
    };
    private readonly string _buttonsSlotName = Guid.NewGuid().ToString();

    private Place? _place;
    private Chat? _defaultChat;
    private Page _page = Page.Props;

    [Inject] private ChatUIHub Hub { get; init; } = null!;

    [CascadingParameter] public Modal Modal { get; set; } = null!;
    [Parameter] public Model ModalModel { get; set; } = null!;

    protected override void OnInitialized()
        => _ = NavigateToPlaceWhenClosed();

    private async void OnPlaceCreated(Place place, Chat? defaultChat) {
        _place = place;
        _defaultChat = defaultChat;
        if (defaultChat != null) {
            var peopleContacts = await Hub.ChatListUI.ListPeopleOnly();
            if (peopleContacts.Count > 0) {
                _page = Page.Members;
                // Re-render component to show Add members page.
                StateHasChanged();
                return;
            }
        }
        // Close modal because there is no default chat or no people to add.
        Close();
    }

    private async Task NavigateToPlaceWhenClosed() {
        await Modal.Ref.WhenClosed;
        if (_place == null)
            return;

        if (_defaultChat != null)
            await Hub.History.NavigateTo(Links.Chat(_defaultChat.Id));
        else
            Hub.NavbarUI.SelectGroup(_place.Id.GetNavbarGroupId(), true);
    }

    private void Close()
        => Modal.Close();

    // Nested types

    public sealed record Model;
    private enum Page { Props, Members }
}
