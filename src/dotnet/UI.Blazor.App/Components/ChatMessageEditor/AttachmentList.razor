@using ActualChat.UI.Blazor.App.Module
@using ActualChat.Media
@using System.Diagnostics.CodeAnalysis
@implements IAttachmentListBackend
@implements IAsyncDisposable
@namespace ActualChat.UI.Blazor.App.Components
@{
    var successUploads = _attachments.FindAll(x => x.Uploaded).Count;
    var isSendButtonDisabled = _attachments.Count != successUploads;
}

<input @ref="FilePickerRef" type="file" hidden multiple/>

@if (_attachments.Count > 0) {
    <div class="attachment-list-wrapper">
        <div class="c-btn-group">
            <Button Class="attachment-list-btn btn-danger btn-transparent unhovered c-remove" Click="_ => Clear()">
                Remove all
            </Button>
            <Button Class="attachment-list-btn btn-primary btn-transparent unhovered c-send" Click="OnSendClick" IsDisabled="@isSendButtonDisabled">
                Send @_attachments.Count @("file".Pluralize(_attachments.Count))
            </Button>
        </div>
        <ButtonRound Class="remove-all-btn btn-sm" Click="_ => Clear()">
            <i class="icon-trash03 text-2xl text-danger"></i>
        </ButtonRound>
        <ul class="attachment-list custom-scrollbar-x">
            @foreach (var attachment in _attachments) {
                var progress = attachment.Progress;
                var uploadProgressClass = "attachment-upload-progress";
                if (attachment.Failed) {
                    progress = Math.Max(progress, 30);
                    uploadProgressClass += " attachment-upload-failed";
                }
                else if (attachment.Uploaded) {
                    uploadProgressClass += " attachment-upload-completed";
                }
                var uploadStyle = $"width: {progress}%;";
                <li class="attachment-wrapper">
                    <div class="c-content">
                        <div class="attachment-item">
                            <ButtonSquare Click="@(() => OnRemoveClick(attachment))" Class="remove-attachment-btn btn-danger btn-sm">
                                <i class="icon-trash03 text-2xl font-thin"></i>
                            </ButtonSquare>
                            @if (attachment.IsImage) {
                                <img src="@attachment.Url" alt="Image attachment"/>
                            } else if (attachment.IsVideo) {
                                <video preload="metadata">
                                    <source src="@attachment.Url#t=0.5" />
                                </video>
                            } else {
                                <div class="c-file">
                                    <img draggable="false" src="/dist/images/attachment.svg" alt="File attachment" class="h-12">
                                </div>
                            }
                        </div>
                        <div class="attachment-filename" title="@attachment.FileName">
                            @if (attachment.FileName.Length > 0) {
                                <span>@attachment.FileName</span>
                            } else {
                                <span>&nbsp;</span>
                            }
                        </div>
                        <div class="@uploadProgressClass" style="@uploadStyle"></div>
                    </div>
                </li>
            }
            <SendOrAddAttachmentButton
                Count="@_attachments.Count"
                AddClick="@OnAddClick"/>
        </ul>
        <ButtonRound Class="close-keyboard-btn btn-sm">
            <i class="icon-chevron-up text-2xl text-03"></i>
        </ButtonRound>
    </div>
}

@code {
    private static readonly string JSCreateMethod = $"{BlazorUIAppModule.ImportName}.AttachmentList.create";

    private readonly object _lock = new();
    private readonly TaskCompletionSource _whenReadySource = TaskCompletionSourceExt.New();
    private ImmutableList<Attachment> _attachments = ImmutableList<Attachment>.Empty;
    private DotNetObjectReference<IAttachmentListBackend> BlazorRef { get; set; } = null!;
    private ElementReference FilePickerRef { get; set; }

    [Inject] private ChatUIHub Hub { get; set; } = null!;
    private UICommander UICommander => Hub.UICommander();
    private IJSRuntime JS => Hub.JSRuntime();

    [Parameter] public EventCallback OnSendClick { get; set; }

    public IJSObjectReference JSRef { get; private set; } = null!;
    public Task WhenReady => _whenReadySource.Task;
    public bool IsUploading => _attachments.Any(x => !x.Uploaded);

    [DynamicDependency(DynamicallyAccessedMemberTypes.All, typeof(AttachmentList))]
    public AttachmentList() { }

    public async ValueTask DisposeAsync() {
        _whenReadySource.TrySetCanceled();
        await JSRef.DisposeSilentlyAsync("dispose");
        JSRef = null!;
        BlazorRef.DisposeSilently();
        BlazorRef = null!;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (firstRender) {
            BlazorRef = DotNetObjectReference.Create<IAttachmentListBackend>(this);
            JSRef = await JS.InvokeAsync<IJSObjectReference>(JSCreateMethod, BlazorRef, FilePickerRef);
            _whenReadySource.TrySetResult();
        }
    }

    public async Task Clear() {
        lock (_lock)
            _attachments = ImmutableList<Attachment>.Empty;

        await InvokeClear();
        StateHasChanged();
    }

    public async Task SetSentAttachments(string[] urls) {
        var downloader = Hub.GetRequiredService<IIncomingShareFileDownloader>();
        var fileNames = urls
            .Select(c => {
                downloader.TryExtractFileName(c, out var fileName);
                return fileName;
            })
            .ToArray();
        _ = await JSRef.InvokeAsync<int>("addBlobs", new object[] { urls, fileNames });
    }

    public ResetIntent PopSnapshot() {
        var attachments = PopAttachments();
        StateHasChanged();

        var entryAttachments = attachments.Where(x => x.Uploaded).Select(x => new TextEntryAttachment {
            MediaId = x.MediaId,
            ThumbnailMediaId = x.ThumbnailMediaId,
        }).ToApiArray();
        return new (entryAttachments, () => Rollback(attachments), InvokeClear);

        ImmutableList<Attachment> PopAttachments()
        {
            lock (_lock) {
                var backup = _attachments;
                _attachments = ImmutableList<Attachment>.Empty;
                return backup;
            }
        }
    }

    private void Rollback(ImmutableList<Attachment> attachments)
    {
        lock (_lock)
            _attachments = attachments;
        StateHasChanged();
    }

    [JSInvokable]
    public bool OnAttachmentAdded(int id, string url, string? fileName, string? fileType, int length) {
        var error = TryAdd();
        if (error != null) {
            UICommander.ShowError(error);
            return false;
        }

        StateHasChanged();
        return true;

        Exception? TryAdd() {
            if (length > Constants.Attachments.FileSizeLimit)
                return FileTooBigError();

            if (_attachments.Count >= Constants.Attachments.FileCountLimit)
                return StandardError.Constraint("Too many files. Max allowed number is 10.");

            _attachments = _attachments.Add(new(id, url, fileName ?? "", fileType ?? "", length));
            return null;
        }
    }

    public static Exception FileTooBigError()
        => StandardError.Constraint($"File is too big. Max file size: {Constants.Attachments.FileSizeLimit / 1024 / 1024}Mb.");

    [JSInvokable]
    public void OnUploadProgress(int id, int progress) {
        UpdateAttachment(id, x => x with { Progress = progress });
        StateHasChanged();
    }

    [JSInvokable]
    public void OnUploadSucceed(int id, MediaId mediaId, MediaId thumbnailMediaId) {
        UpdateAttachment(id, x => x with { MediaId = mediaId, ThumbnailMediaId = thumbnailMediaId });
        StateHasChanged();
    }

    [JSInvokable]
    public void OnUploadFailed(int id) {
        UpdateAttachment(id, x => x with { Failed = true });
        StateHasChanged();
    }

    private Task OnAddClick()
        => JSRef.InvokeVoidAsync("showFilePicker").AsTask();

    private Task OnCloseKeyboard()
        => JSRef.InvokeVoidAsync("closeKeyboard").AsTask();

    private Task OnRemoveClick(Attachment attachment) {
        lock (_lock)
            _attachments = _attachments.Remove(attachment);

        return JSRef.InvokeVoidAsync("remove", attachment.Id).AsTask();
    }

    private void UpdateAttachment(int id, Func<Attachment, Attachment> updater) {
        lock (_lock) {
            var i = _attachments.FindIndex(x => x.Id == id);
            if (i < 0)
                return;

            _attachments = _attachments.SetItem(i, updater(_attachments[i]));
        }
    }

    private ValueTask InvokeClear()
        => JSRef?.InvokeVoidAsync("clear") ?? ValueTask.CompletedTask;

    public sealed class ResetIntent : IAsyncDisposable {
        private readonly Func<ValueTask> _confirm;
        private readonly Action _rollback;
        private bool _isRolledBack;
        public ApiArray<TextEntryAttachment> Attachments { get; }

        public ValueTask DisposeAsync()
            => !_isRolledBack ? _confirm.Invoke() : default;

        internal ResetIntent(ApiArray<TextEntryAttachment> attachments, Action rollback, Func<ValueTask> confirm) {
            Attachments = attachments;
            _rollback = rollback;
            _confirm = confirm;
        }

        public void Rollback() {
            _rollback();
            _isRolledBack = true;
        }
    }

    private record Attachment(int Id, string Url, string FileName, string FileType, int Length, int Progress = 0, MediaId MediaId = default, MediaId ThumbnailMediaId = default)
    {
        public bool IsImage => MediaTypeExt.IsSupportedImage(FileType);
        public bool IsVideo => MediaTypeExt.IsSupportedVideo(FileType);
        public bool Failed { get; init; }
        public bool Uploaded => Progress == 100 && !MediaId.IsNone;
    }
}
