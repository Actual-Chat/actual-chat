@namespace ActualChat.UI.Blazor.App.Components
@page "/test/markup-editor"

<RequireAccount MustBeAdmin="true"/>
<MainHeader>Markup Editor Test Page</MainHeader>

<EditForm Model="@this" class="flex-y gap-y-4">
    <div>
        <Button Click="OnGetMarkupClick">Get markup</Button>
        <Button Click="OnSetMarkupClick">Set markup</Button>
    </div>

    <InputTextArea @bind-Value="_markup" class="my-2 border-2 border-bg-03 rounded min-h-[8rem]">
    </InputTextArea>

    <p class="my-2">Parsed: <code>@_parsedMarkup</code></p>

    <div class="relative">
        <MentionListManager Limit="5" SearchProvider="@TestMentionSearchProvider.Instance">
            <MarkupEditor
                @ref="_editorRef"
                MentionNamer="@_chatMarkupHub.MentionNamer"
                HtmlConverter="@_chatMarkupHub.EditorHtmlConverter"
                Id="message-input"
                Class="my-2 border-2 border-bg-03 rounded min-h-[8rem]"
                Placeholder="Enter some text..."
                Post="OnPost"
                Cancel="OnCancel"
                OpenPrevious="OnOpenPrevious"/>
        </MentionListManager>
    </div>
</EditForm>

@code{
    private MarkupEditor _editorRef = null!;
    private string _markup = "@`Mention`the-actual-one:361 normal *italic* **bold** `code`\n\n```cs\nCode\n```";
    private Markup _parsedMarkup = null!;
    private IChatMarkupHub _chatMarkupHub = null!;

    [Inject] private KeyedFactory<IChatMarkupHub, ChatId> ChatMarkupHubFactory { get; init; } = null!;

    protected override void OnInitialized()
        => _chatMarkupHub = ChatMarkupHubFactory[Constants.Chat.DefaultChatId];

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (firstRender) {
            await OnSetMarkupClick();
        }
    }

    private async Task OnGetMarkupClick() {
        _markup = await _editorRef.GetText();
        _parsedMarkup = await _chatMarkupHub.Parse(_markup, true, default);
        StateHasChanged();
    }

    private async Task OnSetMarkupClick()
        => await _editorRef.SetText(_markup, true);

    private async Task OnPost(string text) {
        _markup = text;
        _parsedMarkup = await _chatMarkupHub.Parse(_markup, true, default);
        await _editorRef.Clear();
        StateHasChanged();
    }

    private async Task OnCancel()
        => await OnSetMarkupClick();

    private async Task OnOpenPrevious()
        => await _editorRef.SetHtml("This is previous message.");
}
