@inherits ComputedStateComponent<ChatHeader.Model>
@{
    var m = State.Value;
    var chat = ChatContext.Chat;
    var searchCls = m.IsSearchMode ? "blackout on" : "blackout";
}

@if (m.HasSelection) {
    <div class="c-content">
        <SelectionHeader />
    </div>
    return;
}

<div class="c-content">
    @if (IsLeftNavigateButtonVisible) {
        <HeaderButton Click="@OnOpenLeftPanelClick" Class="chat-header-back">
            <i class="icon-arrow-left"></i>
        </HeaderButton>
    }
    <div class="chat-header-center" @onclick="@OnToggleRightPanelClick">
        @if (!ReferenceEquals(chat, SpecialChat.NoChatSelected)) {
            @if (!ReferenceEquals(chat, SpecialChat.Unavailable)) {
                <ChatIcon Chat="@chat"/>
            }
            <div class="chat-header-title">
                <div class="c-title-wrapper">
                    <div class="c-title">
                        @chat.Title
                    </div>
                    @if (ScreenSize.IsNarrow() && !chat.Id.IsPeerChat(out _)) {
                        <StatusBadge ChatContext="@ChatContext" ShowOnlyIcon="true"/>
                    }
                </div>
                <div class="c-info">
                    @if (chat.Rules.CanJoin()) {
                        @if (!chat.Id.IsPeerChat(out _)) {
                            <ChatMemberCounter ChatContext="@ChatContext"/>
                        }
                    }
                    @if (chat.Id.IsPeerChat(out _)) {
                        <StatusBadge ChatContext="@ChatContext" IsColorful="@false"/>
                    }
                </div>
            </div>
            @if (!ScreenSize.IsNarrow()) {
                <ChatActivityPanel ChatContext="@ChatContext"/>
            }
        }
    </div>
    @if (!chat.Id.IsNone) {
        <div class="chat-header-control-panel">
        @if (m.EnableIncompleteUI) {
            <HeaderButton Click="@OnSearchClick" Class="@searchCls">
                <i class="icon-ai-search"></i>
            </HeaderButton>
        }
        @if (IsRightNavigateButtonVisible) {
            <ChatHeaderRightPanelToggle Click="@OnToggleRightPanelClick"/>
        }
    </div>
    }
</div>

@code {
    [Inject] private ChatUIHub Hub { get; init; } = null!;

    [CascadingParameter] public ScreenSize ScreenSize { get; set; }

    [Parameter, EditorRequired] public ChatContext ChatContext { get; set; } = null!;
    [Parameter] public bool IsLeftNavigateButtonVisible { get; set; } = true;
    [Parameter] public bool IsRightNavigateButtonVisible { get; set; } = true;

    protected override ComputedState<Model>.Options GetStateOptions()
        => ComputedStateComponent.GetStateOptions(GetType(),
            static t => new ComputedState<Model>.Options() {
                InitialValue = Model.None,
                UpdateDelayer = FixedDelayer.NextTick,
                Category = ComputedStateComponent.GetStateCategory(t),
            });

    protected override async Task<Model> ComputeState(CancellationToken cancellationToken) {
        var hasSelection = await ChatContext.Hub.SelectionUI.HasSelection.Use(cancellationToken).ConfigureAwait(false);
        var isSearchMode = await ChatContext.Hub.PanelsUI.Right.IsSearchMode.Use(cancellationToken).ConfigureAwait(false);
        var enableIncompleteUI = await Hub.Features().EnableIncompleteUI(cancellationToken).ConfigureAwait(false);
        return new() {
            HasSelection = hasSelection,
            IsSearchMode = isSearchMode,
            EnableIncompleteUI = enableIncompleteUI,
        };
    }

    private void OnToggleRightPanelClick()
        => ChatContext.Hub.PanelsUI.Right.Toggle();

    private void OnOpenLeftPanelClick()
        => ChatContext.Hub.PanelsUI.Left.SetIsVisible(true);

    private void OnSearchClick()
        => ChatContext.Hub.PanelsUI.Right.SearchToggle();

    // Nested types

    public sealed record Model {
        public static readonly Model None = new ();

        public bool HasSelection { get; init; }
        public bool IsSearchMode { get; init; }
        public bool EnableIncompleteUI { get; init; }
    }
}
