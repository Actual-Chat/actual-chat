@using Stl.Fusion.Client.Internal
@using RestEase;
@using ActualChat.Users
@using ActualChat.Users.Client

<h3>Connect to Fusion host test:</h3>

@if(_isLoading) {
    <h4>Loading ***</h4>
    return;
}
@if (_restEaseAccount != null) {
    <h4>RestEase Account.Id: @_restEaseAccount.Id</h4>
}
@if (_fusionAccount != null) {
    <h4>Fusion Account.Id: @_fusionAccount.Id</h4>
}
@if (_error != null) {
    <h4>Error: @_error</h4>
}

@code {
    private bool _isLoading = true;
    private Exception? _error;
    private Account? _restEaseAccount;
    private Account? _fusionAccount;

    [Inject] private Session Session { get; init; } = null!;
    [Inject] private IAccounts Accounts { get; init; } = null!;
    [Inject] private IServiceProvider Services { get; init; } = null!;

    protected override async Task OnInitializedAsync()
    {
        using var cts = new CancellationTokenSource(5000);
        try {
            // Gets user using RestEase client
            var clientName = typeof(IAccountsClientDef).FullName;
            var httpClientFactory = Services.GetRequiredService<IHttpClientFactory>();
            var httpClient = httpClientFactory.CreateClient(clientName!);
            var client = new RestClient(httpClient) {
                RequestBodySerializer = Services.GetRequiredService<RequestBodySerializer>(),
                ResponseDeserializer = Services.GetRequiredService<ResponseDeserializer>()
            }.For<IAccountsClientDef>();
            _restEaseAccount = await client.Get(Session, cts.Token);

            // Gets user using Fusion service
            _fusionAccount = await Accounts.Get(Session, cts.Token);
        }
        catch(Exception e) {
            _error = e;
        }
        _isLoading = false;
    }
}
