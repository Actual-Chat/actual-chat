@namespace ActualChat.UI.Blazor.App.Components
@inherits FusionComponentBase
@implements IDisposable

<FormBlock Class="with-contact-list">
    <MemberSelector
        @ref="_memberSelector"
        ListSource="@_backend"
        Changed="OnSelectionChanged" />
</FormBlock>
@if (_shareRequest is not null) {
    @* TODO: need invite links for private places (for Alexey K) *@
    <FormBlock Class="share-block">
        <CopyTrigger Tooltip="Copy Place Invite link" CopyText="@_placeLink">
            <Button Class="btn-modal">
                <Icon>
                    <i class="hide-on-copied-hint icon-copy text-xl" aria-hidden="true"></i>
                    <i class="copied-hint icon-checkmark-simple text-xl" aria-hidden="true"></i>
                </Icon>
                <Title>Copy Place Invite link</Title>
            </Button>
        </CopyTrigger>
        <ShareExternallyButton Request="@_shareRequest.Value"/>
    </FormBlock>
}

@code {
    private DialogButtonInfo _submitButtonInfo = null!;
    private IMemberSelector _backend = null!;
    private MemberSelector? _memberSelector;
    private string _placeLink = "";
    private ShareRequest? _shareRequest;

    private CancellationTokenSource DisposeTokenSource { get; set; } = null!;
    private CancellationToken DisposeToken { get; set; }
    private bool CanInvite {
        set => _submitButtonInfo.CanExecute = value;
    }
    private IReadOnlySet<UserId> SelectedUserIds
        => _memberSelector?.SelectedUserIds.Value ?? ImmutableHashSet<UserId>.Empty;

    [Inject] private ChatUIHub Hub { get; init; } = null!;
    private UrlMapper UrlMapper => Hub.UrlMapper();

    [CascadingParameter] public DiveInModalPageContext Context { get; set; } = null!;

    protected override void OnInitialized() {
        DisposeTokenSource = new();
        DisposeToken = DisposeTokenSource.Token;

        _submitButtonInfo = DialogButtonInfo.CreateSubmitButton("Add", OnAdd);
        _submitButtonInfo.CanExecute = false;
        if (Context.Model is ChatId chatId)
            _backend = new NewChatMemberSelector(Hub, chatId);
        else if (Context.Model is PlaceId placeId) {
            _backend = new NewPlaceMemberSelector(Hub, placeId);
            _shareRequest = new ShareRequest(Links.PlaceInfo(placeId));
            _placeLink = _shareRequest.Value.GetShareLink(UrlMapper);
        } else
            throw StandardError.NotSupported("Not supported model type");
        Context.Title = "Add members";
        Context.Class = "add-member-modal-content";
        Context.Buttons = [DialogButtonInfo.CancelButton, _submitButtonInfo];
    }

    public void Dispose()
        => DisposeTokenSource.CancelAndDisposeSilently();

    private async Task OnAdd() {
        CanInvite = false;

        var userIds = SelectedUserIds.ToArray();
        var error = await _backend.Invite(userIds, DisposeToken);
        if (error != null)
            return;

        OnCancel();
    }

    private void OnCancel()
        => Context.Close();

    private void OnSelectionChanged()
        => CanInvite = SelectedUserIds.Count > 0;
}
