@namespace ActualChat.UI.Blazor.App.Components
@using ActualChat.Contacts
@inherits ComputedStateComponent<List<Contact?>>
@{
    var m = State.Value;
}

<div class="c-chat-list">
    @foreach (var contact in m) {
        @if (contact != null) {
            <div class="c-chat"
                 @onclick="@(() => OnChatClick.InvokeAsync(contact.Chat.Id))">
                <div class="c-chat-avatar">
                    <ChatIcon Chat="@contact.Chat"/>
                </div>
                <div class="c-chat-title">
                    @contact.Chat.Title
                </div>
            </div>
        }
    }
</div>

@code {
    [Inject] private ChatUIHub Hub { get; init; } = null!;
    private IContacts Contacts => Hub.Contacts;
    private Session Session => Hub.Session();

    [CascadingParameter] public Modal Modal { get; set; } = null!;
    [Parameter] public EventCallback<ChatId> OnChatClick { get; set; }

    protected override ComputedState<List<Contact?>>.Options GetStateOptions()
        => ComputedStateComponent.GetStateOptions(GetType(),
            static t => new ComputedState<List<Contact?>>.Options() {
                InitialValue = [],
                Category = ComputedStateComponent.GetStateCategory(t),
            });

    protected override async Task<List<Contact?>> ComputeState(CancellationToken cancellationToken) {
        var contactIds = await Contacts.ListIds(Session, PlaceId.None, cancellationToken).ConfigureAwait(false);
        var maybeContacts = await contactIds
            .Select(x => Contacts.Get(Session, x, cancellationToken))
            .Collect(ApiConstants.Concurrency.High, cancellationToken)
            .ConfigureAwait(false);
        var allowedContacts = maybeContacts
            .SkipNullItems()
            .Where(c => c.Kind == ContactKind.Chat
                        && c.PlaceId == PlaceId.None
                        && (c.Chat.Rules.Permissions & ChatPermissions.Write) != 0
                        && (c.Chat.Rules.Permissions & ChatPermissions.Owner) != 0)
            .ToList<Contact?>();
        return allowedContacts;
    }
}
