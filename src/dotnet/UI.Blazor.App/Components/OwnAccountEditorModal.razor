@using System.ComponentModel.DataAnnotations
@implements IModalView<OwnAccountEditorModal.Model>
@{
    if (ReferenceEquals(_account, AccountFull.Loading) || _form == null!)
        return;
    // TODO(FC): show verify by sms on phone change
    var phone = _form.ParsedPhone;
    var isPhoneVerified = _account.HasVerifiedPhone();
    var isEmailVerified = _account.HasVerifiedEmail();
    var isEmailEmpty = _form.Email.IsNullOrEmpty();
}

<Form @ref="@_formRef" Class="h-full" Model="@_form" OnSubmit="@OnSave">
    <DialogFrame
        Class="own-account-editor-modal"
        Title="Edit account"
        HasCloseButton="true"
        NarrowViewSettings="@DialogFrameNarrowViewSettings.FormSubmitButton()"
        ButtonsClass="full-width">
        <Body>
        <FormBlock>
            <AsyncDataAnnotationsValidator @ref="_validator"/>

            <FormSection
                For="() => _form.Name"
                IsRequired="true"
                InputId="@_form.NameFieldId"
                Label="First name"
                IsLabelInsideInput="true">
                <TextBox
                    @bind-Value="@_form.Name"
                    Id="@_form.NameFieldId"
                    Autofocus="true"
                    ClearButton="true"/>
            </FormSection>

            <FormSection
                For="() => _form.LastName"
                InputId="@_form.LastNameFieldId"
                Label="Last name"
                IsLabelInsideInput="true">
                <TextBox
                    @bind-Value="@_form.LastName"
                    Id="@_form.LastNameFieldId"
                    Autofocus="true"
                    ClearButton="true"/>
            </FormSection>

            <FormSection
                For="() => _form.Phone"
                InputId="@_form.PhoneFieldId"
                Label="Phone"
                Class="grow"
                IsLabelInsideInput="true">
                <ChildContent>
                    <InputText
                        id="@_form.PhoneFieldId"
                        Value="@(!_form.Phone.IsNullOrEmpty() ? _form.Phone : _defaultPhoneValue)"
                        ValueExpression="@(() => _form.Phone)"
                        ValueChanged="@OnPhoneChanged"
                        autocomplete="tel"
                        type="tel"
                        inputmode="tel"
                        disabled="@isPhoneVerified"/>
                </ChildContent>
                <Right>
                    @if (phone.IsValid) {
                        <VerificationStatus IsVerified="isPhoneVerified"/>
                    }
                </Right>
            </FormSection>

            @if (phone.IsValid && !isPhoneVerified) {
                <PhoneVerifier
                    Phone="@phone.Value"
                    Class="my-3"
                    Verified="OnPhoneVerified"/>
            }

            <FormSection
                For="() => _form.Email"
                InputId="@_form.EmailFieldId"
                Label="Email"
                IsLabelInsideInput="true">
                <ChildContent>
                    <TextBox
                        @bind-Value="@_form.Email"
                        Id="@_form.EmailFieldId"
                        Autofocus="true"
                        disabled="@isEmailVerified"/>
                </ChildContent>
                <Right>
                    <VerificationStatus IsVerified="isEmailVerified"/>
                </Right>
            </FormSection>

            @if (_formRef.IsValid && !isEmailVerified && !isEmailEmpty) {
                <EmailVerifier
                    Email="@_form.Email"
                    Class="my-3"
                    Verified="@OnEmailVerified"/>
            }
        </FormBlock>
        <FormBlock>
            <button type="button" class="avatar-btn delete-avatar-btn" @onclick="@OnDeleteAccountClick">
                <div>
                    <i class="icon-trash03 text-xl text-danger"></i>
                </div>
                <div class="c-content">
                    <div class="c-text">
                        Delete account
                    </div>
                </div>
            </button>
        </FormBlock>
        </Body>
        <Buttons>
            <FormButtons>
                <Button
                    Type="@ButtonType.Button"
                    Class="btn-modal"
                    Click="OnCancel">
                    Cancel
                </Button>
                <Button
                    Type="@ButtonType.Submit"
                    Class="btn-modal btn-primary"
                    IsDisabled="@(!_formRef.IsValid)">
                    Save
                </Button>
            </FormButtons>
        </Buttons>
    </DialogFrame>
</Form>

@code {
    private Form _formRef = null!;
    private FormModel _form = null!;
    private AccountFull _account = AccountFull.Loading;
    private AsyncDataAnnotationsValidator _validator = null!;
    private readonly string _defaultPhoneValue = PhoneCodes.Default.DisplayCode;

    [Inject] private Session Session { get; init; } = null!;
    [Inject] private ComponentIdGenerator ComponentIdGenerator { get; init; } = null!;
    [Inject] private IPhones Phones { get; init; } = null!;
    [Inject] private UIHub UIHub { get; init; } = null!;

    [CascadingParameter] public Modal Modal { get; set; } = null!;
    [Parameter] public Model ModalModel { get; set; } = null!;

    protected override async Task OnInitializedAsync() {
        _form = new FormModel(ComponentIdGenerator).CopyToBase(); // Must be fully initialized in sync part
        _account = await UIHub.Accounts.GetOwn(Session, default);
        _form.Name = _account.Name;
        _form.LastName = _account.LastName;
        _form.Email = _account.Email.NullIfEmpty();
        _form.Phone = !_account.Phone.IsNone ? _account.Phone.ToReadable() : "";
        _form.ParsedPhone = _account.Phone;

        _form.CopyToBase();
    }

    private async void OnSave() {
        if (!await _validator.Validate())
            return;

        var account = await UIHub.Accounts.GetOwn(Session, default);
        var phone = _form.ParsedPhone = await Phones.Parse(_form.Phone, default);
        if (phone != account.Phone) {
            if (!phone.IsValid)
                return;
        }

        var updateAccountCommand = new Accounts_Update(
            Session,
            account with {
                Name = _form.Name,
                LastName = _form.LastName,
                Phone = phone,
            },
            account.Version);
        var (_, error) = await UIHub.UICommander().Run(updateAccountCommand);
        if (error != null)
            return;

        _form.CopyToBase();
        Modal.Close();
    }

    private void OnCancel()
        => Modal.Close();

    private void OnPhoneChanged(string? value) {
        var newValue = value ?? "";
        if (newValue == _defaultPhoneValue)
            newValue = "";
        _form.Phone = newValue;
    }

    private async Task OnPhoneVerified()
        => _account = await UIHub.Accounts.GetOwn(Session, default);

    private async Task OnEmailVerified()
        => _account = await UIHub.Accounts.GetOwn(Session, default);

    private Task OnDeleteAccountClick()
        => UIHub.ModalUI.Show(new DeleteAccountModal.Model());

    // Nested types

    public sealed class FormModel(ComponentIdGenerator? componentIdGenerator)
        : FormModel<FormModel>("own-account-editor", componentIdGenerator) {
        [Required]
        public string Name { get; set; } = "";
        public string NameFieldId { get; set; } = "";
        public string LastName { get; set; } = "";
        public string LastNameFieldId { get; set; } = "";
        [EmailAddress] public string? Email { get; set; }
        public string EmailFieldId { get; set; } = "";
        [PhoneNumber(IsOptional = true)] public string Phone { get; set; } = "";
        public Phone ParsedPhone { get; set; }
        public string PhoneFieldId { get; set; } = "";
    }

    public sealed record Model {
        public static readonly Model Default = new();
    }
}
