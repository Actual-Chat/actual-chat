@using ActualChat.UI.Blazor.Services
@using ActualChat.Users
@inherits ComputedStateComponent<Welcome.Model?>
@{
    var m = State.LatestNonErrorValue;
    var error = State.Error;
}

@if (error != null) {
    <WhenError Error="error"/>
    return;
}
@if (m == null) {
    return;
}
@if (m.ByPass) {
    @ChildContent
    return;
}

@if (m.IsAuthenticated) {
    if (m.RenderChildContent) {
        @ChildContent
    } else {
        <WelcomeLayout>
            <h1 class="text-02">Welcome to Actual Chat!</h1>
            <p class="text-02 mt-5">
                Hello, <span class="font-semibold">@(m.UserName)!</span>
            </p>
            <p class="text-02">
                @if (m.UserStatus == UserStatus.Suspended) {
                    <span>Your account is suspended. Please feel free to contact Actual.chat team to clarify what happened.</span>
                } else {
                    <span>Please wait for your approval or use invite code.</span>
                }
            </p>
            <div class="mt-5">
                <Button Class="btn-cancel-outline" Click="OnSignOutClick">Sign out</Button>
            </div>
        </WelcomeLayout>
    }
} else {
    <WelcomeLayout>
        <h1 class="text-02">Welcome to Actual Chat!</h1>
        <div class="relative mt-5">
            <SignInMenu ButtonClass="px-4 py-2" ContentPositionClass="bottom-8"/>
        </div>
    </WelcomeLayout>
}

@code {
    private WelcomeOptions? _welcomeOptions;

    [Inject] private IUserProfiles UserProfiles { get; init; } = null!;
    [Inject] private IAuth Auth { get; init; } = null!;
    [Inject] private Session Session { get; init; } = null!;
    [Inject] private IClientAuth ClientAuth { get; init; } = null!;
    [Inject] private NavigationManager Nav { get; init; } = null!;
    [Inject] private IServiceProvider ServiceProvider { get; init; } = null!;

    [Parameter] public RenderFragment? ChildContent { get; set; }

    protected override void OnInitialized()
    {
        _welcomeOptions = ServiceProvider.GetService<WelcomeOptions>();
        base.OnInitialized();
    }

    protected override async Task<Model?> ComputeState(CancellationToken cancellationToken) {
        if (_welcomeOptions != null && _welcomeOptions.ByPass)
            return new Model(false) { ByPass = true };

        var user = await Auth.GetUser(Session, cancellationToken).ConfigureAwait(false);
        if (user == null)
            return new Model(false);

        var userProfile = await UserProfiles.Get(Session, cancellationToken).ConfigureAwait(false);
        var userStatus = userProfile?.Status ?? UserStatus.Inactive;
        bool activate = false;
        if (userStatus == UserStatus.Inactive) {
            var relativePath = Nav.ToBaseRelativePath(Nav.Uri);
            const string activationPath = "user/activate/";
            if (relativePath.StartsWith(activationPath, StringComparison.OrdinalIgnoreCase)
                && relativePath.Length > activationPath.Length) {
                activate = true;
            }
        }
        return new Model(true) { UserName = user.Name, UserStatus = userStatus, ActivationWithInvite = activate };
    }

    private async Task OnSignOutClick() {
        await ClientAuth.SignOut();
    }

    public record Model(bool IsAuthenticated) {
        public string UserName { get; init; } = "";
        public UserStatus UserStatus { get; init; } = UserStatus.Inactive;
        public bool ActivationWithInvite { get; init; }
        public bool RenderChildContent => UserStatus == UserStatus.Active || ActivationWithInvite;
        public bool ByPass { get; init; }
    }
}
