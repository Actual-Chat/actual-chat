@namespace ActualChat.UI.Blazor.App.Components
@implements IDisposable
@{
    var isSelected = NavbarUI.SelectedGroupId == Id;
    var selectedClass = isSelected ? "selected" : "";
    var buttonClass = $"{(isSelected ? "on" : "")}";
}

<NavbarButton
    Class="@selectedClass"
    ButtonClass="@buttonClass"
    TooltipPosition="@TooltipPosition"
    Tooltip="@Tooltip"
    Click="OnClick"
    ChildContent="@ChildContent"
    CanMove="@CanMove"
    AdditionalAttributes="@AdditionalAttributes">
    <Ending>
        <LeftLine/>
        <div class="right-line"></div>
        @BadgeContent
    </Ending>
</NavbarButton>

@code {
    [Inject] private NavbarUI NavbarUI { get; init; } = null!;
    [Inject] private TuneUI TuneUI { get; init; } = null!;

    [Parameter, EditorRequired] public string Id { get; set; } = "";
    [Parameter, EditorRequired] public string Title { get; set; } = "";
    [Parameter] public string Tooltip { get; set; } = "";
    [Parameter] public bool CanMove { get; set; }
    [Parameter] public FloatingPosition TooltipPosition { get; set; } = FloatingPosition.Right;
    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Parameter] public RenderFragment? BadgeContent { get; set; }
    [Parameter(CaptureUnmatchedValues = true)]
    public IReadOnlyDictionary<string, object>? AdditionalAttributes { get; set; }

    protected override void OnInitialized() =>
        NavbarUI.SelectedGroupChanged += OnNavbarSelectedGroupChanged;

    protected override void OnParametersSet() =>
        NavbarUI.RegisterGroup(Id, Title);

    public void Dispose() {
        NavbarUI.SelectedGroupChanged -= OnNavbarSelectedGroupChanged;
        NavbarUI.UnregisterGroup(Id);
    }

    private void OnClick() {
        NavbarUI.SelectGroup(Id, true);
        _ = TuneUI.Play(Tune.SelectNavbarItem).SilentAwait();
    }

    private void OnNavbarSelectedGroupChanged(object? s, EventArgs e)
        => StateHasChanged();
}
