@namespace ActualChat.UI.Blazor.App.Components
@inherits ComputedStateComponent<IReadOnlyList<ChatInfo>>
@using ActualChat.Search
@using ActualChat.Contacts

<CascadingValue IsFixed="true" Value="@this">
    @ChildContent
</CascadingValue>

@code {
    private MutableState<IReadOnlyDictionary<ChatId, ChatInfo>> _allChats = null!;
    private MutableState<ImmutableHashSet<ChatId>> _selectedChatIds = null!;
    private PlaceId _placeId = PlaceId.None;

    [Inject] private IContacts Contacts { get; init; } = null!;
    [Inject] private ChatListUI ChatListUI { get; init; } = null!;

    [Parameter] public ChatListOrder Order { get; set; } = ChatListOrder.ByOwnUpdateTime;
    [Parameter] public ChatListPreOrder ChatListPreOrder { get; set; } = ChatListPreOrder.ChatList;
    [Parameter] public ChatListFilter Filter { get; set; } = ChatListFilter.None;
    [Parameter] public bool UseCanWriteFilter { get; set; } = true;
    [Parameter] public IReadOnlySet<ChatId>? ExcludeChatIds { get; set; } = null;
    [Parameter] public SearchPhrase SearchPhrase { get; set; } = SearchPhrase.None;
    [Parameter] public EventCallback Changed { get; set; }
    [Parameter] public RenderFragment ChildContent { get; set; } = null!;

    public IState<IReadOnlyDictionary<ChatId, ChatInfo>> AllChats => _allChats;
    public ComputedState<IReadOnlyList<ChatInfo>> Chats => State;
    public IState<ImmutableHashSet<ChatId>> SelectedChatIds => _selectedChatIds;

    public void Toggle(ChatId chatId)
        => _selectedChatIds.Set(
            chatId,
            static (chatId1, x) => x.Value.Contains(chatId1)
                ? x.Value.Remove(chatId1)
                : x.Value.Add(chatId1));

    public void Add(ChatId chatId)
        => _selectedChatIds.Set(chatId, static (chatId1, x) => x.Value.Add(chatId1));

    public void Remove(ChatId chatId)
        => _selectedChatIds.Set(chatId, static (chatId1, x) => x.Value.Remove(chatId1));

    public void Clear()
        => _selectedChatIds.Set(static x => x.Value.Clear());

    public void SelectPlace(PlaceId placeId) {
        _placeId = placeId;
        _ = State.Recompute();
    }

    // Protected methods

    protected override void OnInitialized() {
        var type = GetType();
        _allChats = StateFactory.NewMutable(
            (IReadOnlyDictionary<ChatId, ChatInfo>)ImmutableDictionary<ChatId, ChatInfo>.Empty,
            StateCategories.Get(type, nameof(AllChats)));
        _selectedChatIds = StateFactory.NewMutable(
            ImmutableHashSet<ChatId>.Empty,
            StateCategories.Get(type, nameof(SelectedChatIds)));
        _selectedChatIds.Updated += OnSelectedChatIdsUpdated;
    }

    protected override ComputedState<IReadOnlyList<ChatInfo>>.Options GetStateOptions()
        => ComputedStateComponent.GetStateOptions(GetType(),
            static t => new ComputedState<IReadOnlyList<ChatInfo>>.Options() {
                InitialValue = ImmutableList<ChatInfo>.Empty,
                UpdateDelayer = FixedDelayer.Get(0.25),
                Category = ComputedStateComponent.GetStateCategory(t),
            });

    protected override async Task<IReadOnlyList<ChatInfo>> ComputeState(CancellationToken cancellationToken) {
        var chatListOrder = Order;
        var chatListPreOrder = ChatListPreOrder;
        var searchPhrase = SearchPhrase;
        var excludedChats = ExcludeChatIds;

        var allChats = await ChatListUI.ListAllUnordered(_placeId, Filter, cancellationToken).ConfigureAwait(false);
        _allChats.Value = allChats;
        var chats = allChats.Values;
        if (excludedChats != null && excludedChats.Count != 0)
            chats = chats.Where(x => !excludedChats.Contains(x.Id));
        if (UseCanWriteFilter)
            chats = chats.Where(c => c.Chat.Rules.CanWrite());

        chats = chats.OrderBy(chatListOrder, chatListPreOrder);
        if (!searchPhrase.IsEmpty)
            chats = chats.FilterAndOrderBySearchPhrase(searchPhrase);
        return chats.ToList();
    }

    private void OnSelectedChatIdsUpdated(IState<ImmutableHashSet<ChatId>> state, StateEventKind eventKind)
        => _ = InvokeAsync(() => !State.DisposeToken.IsCancellationRequested
            ? Changed.InvokeAsync()
            : Task.CompletedTask);
}
