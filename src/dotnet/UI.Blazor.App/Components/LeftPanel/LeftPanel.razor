@namespace ActualChat.UI.Blazor.App.Components
@using ActualChat.UI.Blazor.Components.SideNav
@implements IDisposable

<SideNav
    Side="SideNavSide.Left"
    IsOpen="@_isOpen"
    VisibilityChanged="@(NoStateHasChanged.EventCallback<bool>(isOpen => PanelsUI.Left.SetIsVisible(isOpen)))">
    <div class="left-panel">
        <ErrorBarrier Name="LeftPanelContent" Kind="@ErrorBarrierKind.Full">
            <LeftPanelButtons/>
            @if (IsSkeletonWidePanel) {
                <SkeletonWideLeftPanel>
                    @WidePanelBottomContent
                </SkeletonWideLeftPanel>
            } else {
                <div class="left-panel-content">
                    <LeftPanelContentHeader/>
                    @if (ScreenSize.IsNarrow()) {
                        <ReconnectBanner/>
                    }
                    <DownloadAppBanner CanBeClosed="true"/>
                    <NavbarContent/>
                </div>
            }
        </ErrorBarrier>
    </div>
</SideNav>

@code {
    private Action? _leftPanelVisibilityChanged;
    private bool _isOpen;

    [Inject] private PanelsUI PanelsUI { get; init; } = null!;

    [CascadingParameter] public ScreenSize ScreenSize { get; set; }
    [Parameter] public bool IsSkeletonWidePanel { get; set; }
    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Parameter] public RenderFragment? WidePanelBottomContent { get; set; }

    protected override void OnInitialized() {
        _isOpen = PanelsUI.Left.IsVisible.Value;
        _leftPanelVisibilityChanged = OnLeftPanelVisibilityChanged;
        PanelsUI.Left.VisibilityChanged += _leftPanelVisibilityChanged;
    }

    private void OnLeftPanelVisibilityChanged() {
        var isOpen = PanelsUI.Left.IsVisible.Value;
        if (_isOpen == isOpen)
            return;

        _isOpen = isOpen;
        StateHasChanged();
    }

    public void Dispose()
        => PanelsUI.Left.VisibilityChanged -= _leftPanelVisibilityChanged;
}
