@namespace ActualChat.UI.Blazor.App.Components
@using ActualChat.Contacts
@inherits ComputedStateComponent<PlaceMenuButton.Model>
@{
    var m = State.Value;
    if (m.Place == null)
        return;
}

<div class="c-left">
    <div class="c-top" onclick="@(() => OnPlaceSettingsClick(PlaceId))">
        <span class="c-title">@m.Place.Title</span>
        <i class="icon-chevron-right flex-none"></i>
    </div>
    <div class="c-bottom">
        <span>@m.MemberCount @("Member".Pluralize(m.MemberCount))</span>
        <DotSeparator/>
        <span>@(m.Place.IsPublic ? "Public" : "Private")</span>
    </div>
</div>
@if (m.IsMember) {
    <div class="c-right">
        <ButtonRound Class="place-plus-btn btn-sm btn-transparent unhovered"
                     data-menu="@(MenuRef.New<LeftPanelPlaceMenu>(m.Place.Id).ToString())"
                     data-menu-trigger="@MenuTrigger.Primary"
                     data-menu-placement="@(FloatingPosition.RightStart.ToPositionString())">
            <i class="icon-more-vertical text-2xl"></i>
        </ButtonRound>
    </div>
} else if (m.CanJoin) {
    <div class="c-right">
        <ButtonRound Class="btn-sm join-btn" ContentClass="gap-x-2" Click="OnJoinPlace">
            <i class="icon-person-add text-xl"></i>
            <span>Join</span>
        </ButtonRound>
    </div>
}

@code {
    [Inject] private ChatUIHub Hub { get; set; } = null!;
    private Session Session => Hub.Session();
    private ChatUI ChatUI => Hub.ChatUI;
    private IContacts Contacts => Hub.Contacts;
    private IPlaces Places => Hub.Places;
    private ModalUI ModalUI => Hub.ModalUI;

    [Parameter, EditorRequired] public PlaceId PlaceId { get; set; }

    protected override ComputedState<Model>.Options GetStateOptions()
        => ComputedStateComponent.GetStateOptions(GetType(),
            static t => new ComputedState<Model>.Options() {
                InitialValue = Model.Loading,
                Category = ComputedStateComponent.GetStateCategory(t),
            });

    protected override async Task<Model> ComputeState(CancellationToken cancellationToken) {
        var placeId = PlaceId;
        var place = await Hub.Places.Get(Hub.Session(), placeId, default).Require().ConfigureAwait(false);
        var allAuthorIds = await Places.ListAuthorIds(Session, place.Id, cancellationToken).ConfigureAwait(false);
        var places = await Contacts.ListPlaceIds(Session, default).ConfigureAwait(false);
        var isMember = places.Contains(placeId);
        var canJoin = place.Rules.CanJoin() && !isMember;

        return new() {
            Place = place,
            MemberCount = allAuthorIds.Count,
            IsMember = isMember,
            CanJoin = canJoin,
        };
    }

    private void OnJoinPlace()
        => _ = ChatUI.JoinPlace(PlaceId);

    private void OnPlaceSettingsClick(PlaceId placeId)
        => _ = ModalUI.Show(new PlaceSettingsModal.Model(placeId));

    // Nested types

    public sealed record Model {
        public static readonly Model Loading = new();

        public Place? Place { get; init; }
        public int MemberCount { get; init; }
        public bool IsMember { get; init; }
        public bool CanJoin { get; init; }
    }
}
