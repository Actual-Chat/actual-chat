@namespace ActualChat.UI.Blazor.App.Components
@using ActualChat.Contacts
@inherits ComputedStateComponent<PlaceMenuButton.Model>
@{
    var m = State.Value;
    var canEditProperties = m.CanEditSettings;
    var editPropertiesHandler = canEditProperties ? _editSettingsHandler : EventCallback.Empty;
    var clickableCls = canEditProperties ? "cursor-pointer" : "";
}

<div class="c-left">
    <div class="c-top @clickableCls" onclick="@editPropertiesHandler">
        <span class="c-title">@m.Place.Title</span>
        @if (canEditProperties) {
            <i class="icon-chevron-right flex-none"></i>
        }
    </div>
    <div class="c-bottom">
        @if (m.MemberCount.HasValue) {
            <span>@m.MemberCount @("Member".Pluralize(m.MemberCount.Value))</span>
            <DotSeparator/>
        }
        <span>@(m.Place.IsPublic ? "Public" : "Private")</span>
    </div>
</div>
@if (m.ShowPlaceMenu) {
    <div class="c-right">
        <ButtonRound Class="place-plus-btn btn-sm btn-transparent unhovered"
                     data-menu="@(MenuRef.New<LeftPanelPlaceMenu>(m.Place.Id).ToString())"
                     data-menu-trigger="@MenuTrigger.Primary"
                     data-menu-placement="@(FloatingPosition.RightStart.ToPositionString())">
            <i class="icon-more-vertical text-2xl"></i>
        </ButtonRound>
    </div>
} else if (m.ShowJoinButton) {
    <div class="c-right">
        <ButtonRound Class="btn-sm join-btn" ContentClass="gap-x-2" Click="OnJoinPlace">
            <i class="icon-person-add text-xl"></i>
            <span>Join</span>
        </ButtonRound>
    </div>
}

@code {
    private EventCallback _editSettingsHandler;

    [Inject] private ChatUIHub Hub { get; set; } = null!;
    private Session Session => Hub.Session();
    private ChatUI ChatUI => Hub.ChatUI;
    private IContacts Contacts => Hub.Contacts;
    private IPlaces Places => Hub.Places;
    private ModalUI ModalUI => Hub.ModalUI;

    [Parameter, EditorRequired] public Place Place { get; set; } = null!;

    protected override void OnInitialized() {
        _editSettingsHandler = EventCallback.Factory.Create(this, OnPlaceSettingsClick);
        base.OnInitialized();
    }

    protected override ComputedState<Model>.Options GetStateOptions()
        => ComputedStateComponent.GetStateOptions(GetType(),
            t => new ComputedState<Model>.Options() {
                InitialValue = new Model(Place, Place.Rules.CanSeeMembers() ? 0 : null),
                Category = ComputedStateComponent.GetStateCategory(t),
            });

    protected override async Task<Model> ComputeState(CancellationToken cancellationToken) {
        var place = Place;
        int? memberCount = null;
        if (place.Rules.CanSeeMembers()) {
            var allAuthorIds = await Places.ListAuthorIds(Session, place.Id, cancellationToken).ConfigureAwait(false);
            memberCount = allAuthorIds.Count;
        }
        return new(place, memberCount);
    }

    private void OnJoinPlace()
        => _ = ChatUI.JoinPlace(Place.Id);

    private void OnPlaceSettingsClick()
        => _ = ModalUI.Show(new PlaceSettingsModal.Model(Place.Id));

    // Nested types

    public sealed record Model(Place Place, int? MemberCount) {
        public bool ShowPlaceMenu => IsMember;
        public bool ShowJoinButton => !IsMember && Place.Rules.CanJoin();
        public bool CanEditSettings => Place.Rules.IsOwner();
        private bool IsMember => Place.IsMember();
    }
}
