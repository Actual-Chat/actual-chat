@namespace ActualChat.UI.Blazor.App.Components
@inherits ComputedStateComponent<List<FoundItem>>
@{
    var contacts = State.Value;
    if (contacts.Count == 0) {
        return;
    }

    var shortList = contacts.Count > 3 && !_isExpanded ? contacts.Take(3) : contacts;
    var btnText = _isExpanded ? "Show less" : "Show more";
    var headerCls = _isExpanded ? "expanded" : "";
}

<div class="found-chat-list chat-list">
    <div class="c-list-header @headerCls">
        <div class="c-title">@Title</div>
        @if (contacts.Count > 3) {
            <Button Class="expand-btn btn-transparent unhovered btn-sm" Click="@OnClick">
                <i class="icon-chevron-up c-arrow"></i>
                <span class="c-text">@btnText</span>
            </Button>
        }
    </div>
    <div class="c-content">
        @foreach (var item in shortList) {
            <FoundChat @key="@item.SearchResult.Id"
                       ChatId="item.ChatId"
                       TitleSearchMatch="item.SearchResult.SearchMatch"/>
        }
    </div>
</div>

@code {
    private bool _isExpanded;

    [Inject] private ChatUIHub Hub { get; init; } = null!;
    private SearchUI SearchUI => Hub.SearchUI;
    private ChatUI ChatUI => Hub.ChatUI;

    [Parameter] public string Title { get; set; } = "";

    protected override ComputedState<List<FoundItem>>.Options GetStateOptions()
        => ComputedStateComponent.GetStateOptions(GetType(),
            static t => new ComputedState<List<FoundItem>>.Options() {
                InitialValue = [],
                UpdateDelayer = FixedDelayer.NextTick,
                Category = ComputedStateComponent.GetStateCategory(t),
            });

    protected override async Task<List<FoundItem>> ComputeState(CancellationToken cancellationToken) {
        var isOn = await SearchUI.IsSearchModeOn(cancellationToken);
        if (!isOn)
            return [];

        var foundItems = await SearchUI.GetSearchResults();
        var realContacts = new List<FoundItem>();
        foreach (var item in foundItems) {
            var chatState = await ChatUI.GetState(item.ChatId, false, cancellationToken).ConfigureAwait(false);
            if (chatState != null)
                realContacts.Add(item);
        }
        return realContacts;
    }

    private void OnClick() {
        _isExpanded = !_isExpanded;
        StateHasChanged();
    }
}
