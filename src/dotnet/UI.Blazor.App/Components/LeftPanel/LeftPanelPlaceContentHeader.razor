@using ActualChat.Contacts
@using ActualChat.Media
@using ActualChat.UI.Blazor.App.Events
@namespace ActualChat.UI.Blazor.App.Components
@inherits ComputedStateComponent<LeftPanelPlaceContentHeader.Model>
@{
    var m = State.Value;
    var hasBackground = m.Place.Background != null;
    var picture = m.Place.Background?.ToPicture() ?? m.Place.Picture.ToPicture();
}

<OnUIEvent TEvent="SearchClearedEvent" Handler="OnSearchCleared" />

<div class="left-panel-content-header place">
    <div class="c-content">
        <ChatSearchBox
            @ref="_searchBoxRef"
            InitialText="@m.InitialText"
            IsCollapsed="@m.InitialText.IsNullOrEmpty()"
            ShowClose="true"
            Placeholder="Search"
            ShowSpinner="true"
            MaxLength="@Constants.Chat.MaxSearchFilterLength"
            TextChanged="@OnSearchBoxTextChanged"
            Cancelled="@OnSearchBoxCancelled"/>
        <div class="c-icon">
            <Pic
                Picture="picture"
                IsBlurred="!hasBackground"
                Title="@m.Place.Title"
                Size="SquareSize.SizeFull"
                IsSquare="@true"
                AvatarKind="AvatarKind.Marble"
                AvatarKey="@m.Place.Id.Value"
                ShowFullSizeImage="true"/>
        </div>
    </div>

    @if (m.IsLoading) {
        <div class="c-info">
            <place-menu-button-skeleton/>
        </div>
    } else if (m.Place.IsPublic || m.IsMember) {
        <div class="c-info">
            <PlaceMenuButton PlaceId="@m.Place.Id"/>
        </div>
    }
    @if (m.MemberCount < 2) {
        <div class="add-members-btn" @onclick="@OnInviteMembersClick">
            <i class="icon-person-add text-2xl"></i>
            <span class="c-text">Add new members</span>
        </div>
    }
</div>

@code {
    private ChatSearchBox? _searchBoxRef = null;

    [Inject] private ChatUIHub Hub { get; init; } = null!;
    [Inject] private PanelsUI PanelsUI { get; init; } = null!;

    private NavbarUI NavbarUI => Hub.NavbarUI;
    private SearchUI SearchUI => Hub.SearchUI;
    private IContacts Contacts => Hub.Contacts;
    private IPlaces Places => Hub.Places;
    private Session Session => Hub.Session();
    private ModalUI ModalUI => Hub.ModalUI;

    [Parameter, EditorRequired] public Place Place { get; set; } = null!;

    protected override ComputedState<Model>.Options GetStateOptions()
        => new() {
            InitialValue = new(Place, 0, false, true, SearchUI.Text.ValueOrDefault ?? ""),
            Category = ComputedStateComponent.GetStateCategory(GetType()),
        };

    protected override async Task<Model> ComputeState(CancellationToken cancellationToken) {
        var place = Place;
        var placeId = Place.Id;
        var places = await Contacts.ListPlaceIds(Session, default).ConfigureAwait(false);
        var isMember = places.Contains(placeId);
        var allAuthorIds = await Places.ListAuthorIds(Session, place.Id, cancellationToken).ConfigureAwait(false);
        var initialText = SearchUI.Text.ValueOrDefault ?? ""; // intentionally avoid recompute
        return new(place, allAuthorIds.Count, isMember, InitialText: initialText);
    }

    private void OnSearchBoxTextChanged(string text) {
        SearchUI.PlaceId.Value = Place.Id;
        SearchUI.Text.Value = text;
    }

    private void OnSearchBoxCancelled()
        => SearchUI.Clear();

    private async Task OnSearchCleared(SearchClearedEvent e, CancellationToken cancellationToken) {
        if (_searchBoxRef != null) {
            await _searchBoxRef.Cancel();
            StateHasChanged();
        }
    }

    private void OnInviteMembersClick()
        => _ = ModalUI.Show(new AddMemberModal.Model(Place.Id));

    // Nested types

    public sealed record Model(Place Place, int MemberCount, bool IsMember = false, bool IsLoading = false, string InitialText = "");
}
