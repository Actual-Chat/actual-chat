@namespace ActualChat.UI.Blazor.App.Components
@using ActualChat.UI.Blazor.App.Events
@inherits ComputedStateComponent<LeftChatSearchInput.Model>
<OnUIEvent TEvent="SearchClearedEvent" Handler="OnSearchCleared" />

@{
    var m = State.Value;
    var cls = m.IsOpen ? "open" : "closed";
}

<div class="left-chat-search-input @cls">
    <div class="c-search">
        <div class="search-input">
            <label>
                <TextInput
                    @ref="_inputRef"
                    Text="@m.InitialText"
                    Class="w-full dialog-unstyled"
                    Placeholder="@Placeholder"
                    MaxLength="@MaxLength"
                    OnFocus="@(_ => OnClick(true))"
                    TextChanged="OnSearchInputTextChanged">
                </TextInput>

                @if (m.EnableIncompleteUI) {
                    <ButtonRound Click="@OnAISearchClicked" Class="c-ai-btn">
                        <i class="icon-ai-search text-xl"></i>
                    </ButtonRound>
                } else {
                    <ButtonRound Click="@OnSearchButtonClick" Class="c-ai-btn search-btn">
                        <i class="icon-search text-xl"></i>
                    </ButtonRound>
                }
                <HeaderButton Click="@(_ => OnClick(false))" Class="c-close-btn">
                    <i class="icon-close text-2xl"></i>
                </HeaderButton>
            </label>
        </div>
    </div>
</div>

@code {
    TextInput? _inputRef = null;

    [Inject] private ChatUIHub Hub { get; set; } = null!;
    private SearchUI SearchUI => Hub.SearchUI;
    private Features Features => Hub.Features();

    [Parameter] public string Placeholder { get; set; } = "Search";
    [Parameter] public int? MaxLength { get; set; }

    public override ValueTask DisposeAsync() {
        SearchUI.ShowRecent(false);
        return base.DisposeAsync();
    }

    protected override ComputedState<Model>.Options GetStateOptions()
        => ComputedStateComponent.GetStateOptions(GetType(),
            t => new ComputedState<Model>.Options() {
                InitialValue = new Model(SearchUI.IsSearchModeOn.ValueOrDefault, false, SearchUI.Text.ValueOrDefault ?? ""),
                UpdateDelayer = FixedDelayer.NextTick,
                Category = ComputedStateComponent.GetStateCategory(t),
            });

    protected override async Task<Model> ComputeState(CancellationToken cancellationToken) {
        var isOpen = await SearchUI.IsSearchModeOn.Use(cancellationToken).ConfigureAwait(false)
                     || await SearchUI.IsShowRecentOn.Use(cancellationToken).ConfigureAwait(false);
        var enableIncompleteUI =  await Features.Get<Features_EnableIncompleteUI, bool>(cancellationToken).ConfigureAwait(false);
        var initialText = SearchUI.Text.ValueOrDefault ?? ""; // intentionally avoid recompute
        return new Model(isOpen, enableIncompleteUI, initialText);
    }

    private void OnClick(bool openPanel) {
        if (!openPanel)
            Cancel();
        SearchUI.ShowRecent(openPanel);
        SearchUI.PlaceId.Value = PlaceId.None;
        StateHasChanged();
    }

    private void OnSearchButtonClick()
        => _inputRef?.Focus();

    private void OnSearchInputTextChanged(string text) {
        SearchUI.PlaceId.Value = PlaceId.None;
        SearchUI.Text.Value = text;
    }

    private ValueTask Cancel()
        => _inputRef?.Clear() ?? default;

    private Task OnAISearchClicked()
        => SearchUI.LaunchAISearch();

    private Task OnSearchCleared(SearchClearedEvent e, CancellationToken cancellationToken)
        => _inputRef?.Clear().AsTask() ?? Task.CompletedTask;

    // Nested types

    public sealed record Model(bool IsOpen, bool EnableIncompleteUI, string InitialText = "");
}
