@namespace ActualChat.UI.Blazor.App.Components
@inherits ComputedStateComponent<IReadOnlyList<FoundItem>>
@{
    var foundItems = State.ValueOrDefault;
    if (foundItems == null)
        // TODO: loading view
        return;
}

<div class="chat-list own-chat-list">
    @foreach (var foundItem in foundItems) {
        @if (foundItem.IsFirstInGroup) {
            <SearchResultGroupHeader
                CanExpandOrCollapse="foundItem.CanScopeBeExpanded"
                Scope="foundItem.Scope" />
        }

        <FoundResult @key=@foundItem.SearchResult.Id FoundItem="@foundItem"/>

        @if (foundItem.IsLastInGroup) {
            <Divider Class="mx-1 my-1.5" />
        }
    }
</div>

@code {
    [Inject] private ChatUIHub Hub { get; init; } = null!;
    private SearchUI SearchUI => Hub.SearchUI;

    protected override async Task<IReadOnlyList<FoundItem>> ComputeState(CancellationToken cancellationToken) {
        var isOn = await SearchUI.IsSearchModeOn.Use(cancellationToken).ConfigureAwait(false);
        return isOn
            ? await SearchUI.GetSearchResults().ConfigureAwait(false)
            : [];
    }
}
