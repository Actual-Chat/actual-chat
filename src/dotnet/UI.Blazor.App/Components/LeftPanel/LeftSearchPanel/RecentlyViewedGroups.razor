@namespace ActualChat.UI.Blazor.App.Components
@inherits ComputedStateComponent<IReadOnlyList<ChatInfo>>

@{
    var chats = State.ValueOrDefault ?? [];
    if (chats.Count == 0)
        return;
}

<div class="recently-viewed-groups">
    <div class="c-header">
        <div class="c-title">@Title</div>
    </div>
    <div class="chat-list">
        @foreach (var chatInfo in chats) {
            // TODO: replace with chat item for search results
            <ChatListItem Chat="chatInfo.Chat" ListKind="ChatListKind.All" />
        }
    </div>
</div>

@code {
    [Inject] private ChatUIHub Hub { get; set; } = null!;
    private IChatUsages ChatUsages => Hub.ChatUsages;
    private IChats Chats => Hub.Chats;
    private ChatUI ChatUI => Hub.ChatUI;
    private History History => Hub.History;

    [Parameter] public string Title { get; set; } = "Recently viewed";
    [Parameter] public ChatUsageListKind ListKind { get; set; } = ChatUsageListKind.ViewedGroupChats;

    protected override ComputedState<IReadOnlyList<ChatInfo>>.Options GetStateOptions()
        => ComputedStateComponent.GetStateOptions(GetType(),
            static t => new ComputedState<IReadOnlyList<ChatInfo>>.Options() {
                InitialValue = [],
                Category = ComputedStateComponent.GetStateCategory(t),
            });

    protected override async Task<IReadOnlyList<ChatInfo>> ComputeState(CancellationToken cancellationToken) {
        var session = Hub.Session();
        var recentChatIds = await ChatUsages.GetRecencyList(session, ListKind, cancellationToken).ConfigureAwait(false);
        var chats = await recentChatIds
            .Select(id => ChatUI.Get(id, cancellationToken))
            .Collect(ApiConstants.Concurrency.High, cancellationToken)
            .ConfigureAwait(false);
        return chats.SkipNullItems().ToList();
    }
}
