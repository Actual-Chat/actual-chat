@using ActualChat.Kvas
@using ActualChat.Hosting
@inherits ComputedStateComponent<AppSettings.Model>
@{
    var m = State.Value;
    var dataCollectionStatus = m.IsDataCollectionEnabled
        ? "Telemetry data collection is allowed."
        : "Disallowed";
    var experimentalFeatureStatus = m.AreExperimentalFeaturesEnabled
        ? "Early access features are enabled."
        : "Disabled";
    var incompleteUIStatus = m.IsIncompleteUIEnabled
        ? "Early access UI is enabled."
        : "Disabled";
}

@if (NativeAppSettings != null) {
    <NativeAppSettingsView NativeAppSettings="@NativeAppSettings"></NativeAppSettingsView>
}
@if (HostInfo.HostKind != HostKind.MauiApp) {
    <SettingsBlazorModeToggle/>
}
<TileTopic Topic="Telemetry Data Collection"/>
<Tile Class="data-collection-consent">
    <TileItem Click="@OnEnableTelemetryClick">
        <Icon><i class="icon-info text-2xl"></i></Icon>
        <Content>Allow Telemetry Data Collection</Content>
        <Caption>@dataCollectionStatus</Caption>
        <Right>
            <Toggle IsChecked="@m.IsDataCollectionEnabled"/>
        </Right>
    </TileItem>
    <p class="c-description">
        Help us to identify user experience issues faster by allowing
        Actual Chat to collect and process data on certain in-app events,
        such as critical user actions, errors, and crashes.
    </p>
</Tile>

@if (m.IsAdmin) {
    <TileTopic Topic="Early Access Features"/>
    <Tile Class="early-access-features">
        <TileItem Click="@OnExperimentalFeatureEnabledClick">
            <Icon><i class="icon-info text-2xl"></i></Icon>
            <Content>Enable early access features</Content>
            <Caption>@experimentalFeatureStatus</Caption>
            <Right>
                <Toggle IsChecked="@m.AreExperimentalFeaturesEnabled"/>
            </Right>
        </TileItem>
        <TileItem Click="@OnIncompleteUIEnabledClick">
            <Icon><i class="icon-info text-2xl"></i></Icon>
            <Content>Enable early access UI features</Content>
            <Caption>@incompleteUIStatus</Caption>
            <Right>
                <Toggle IsChecked="@m.IsIncompleteUIEnabled"/>
            </Right>
        </TileItem>
    </Tile>
}

<TileTopic Topic="Walk-through"/>
<Button
    Class="add-avatar-btn"
    Click="@(OnRestartWalkThrough)">
    <Icon><i class="icon-refresh text-xl"></i></Icon>
    <Title>Restart walk-through</Title>
</Button>

@if (m.IsAdmin) {
    <TileTopic Topic="Onboarding"/>
    <Button
        Class="add-avatar-btn"
        Click="@(OnRestartOnboarding)">
        <Icon><i class="icon-refresh text-xl"></i></Icon>
        <Title>Restart onboarding</Title>
    </Button>
}

@code {
    private INativeAppSettings? NativeAppSettings { get; set; }

    [Inject] private ChatUIHub Hub { get; init; } = null!;
    [Inject] private AccountSettings AccountSettings { get; init; } = null!;
    [Inject] private IDataCollectionSettingsUI DataCollectionSettingsUI { get; init; } = null!;
    [Inject] private OnboardingUI OnboardingUI { get; init; } = null!;
    private HostInfo HostInfo => Hub.HostInfo();
    private BubbleUI BubbleUI => Hub.BubbleUI;
    private ToastUI ToastUI => Hub.ToastUI;

    protected override void OnInitialized()
        => NativeAppSettings = Hub.GetService<INativeAppSettings>();

    protected override ComputedState<Model>.Options GetStateOptions()
        => new() { InitialValue = Model.None };

    protected override async Task<Model> ComputeState(CancellationToken cancellationToken) {
        var settings = await AccountSettings.GetUserAppSettings(cancellationToken).ConfigureAwait(false);
        var account = Hub.AccountUI.OwnAccount.Value;
        return new(
            settings.IsDataCollectionEnabled ?? false,
            settings.AreExperimentalFeaturesEnabled ?? false,
            settings.IsIncompleteUIEnabled ?? false,
            account.IsAdmin);
    }

    private async Task OnRestartWalkThrough() {
        await BubbleUI.ResetSettings().ConfigureAwait(true);
        ToastUI.Show("Walk-through tips are back!", "icon-checkmark-circle", ToastDismissDelay.Short);
    }

    private void OnRestartOnboarding() {
        OnboardingUI.ResetSettings();
        ToastUI.Show("Onboarding steps are back!", "icon-checkmark-circle", ToastDismissDelay.Short);
    }

    private async Task OnEnableTelemetryClick() {
        await UpdateSettings(x => x with {
            IsDataCollectionEnabled = !State.Value.IsDataCollectionEnabled,
        });
        await DataCollectionSettingsUI.UpdateState(!State.Value.IsDataCollectionEnabled, CancellationToken.None);
    }

    private Task OnExperimentalFeatureEnabledClick()
        => UpdateSettings(x => x with {
            AreExperimentalFeaturesEnabled = !State.Value.AreExperimentalFeaturesEnabled,
        });

    private Task OnIncompleteUIEnabledClick()
        => UpdateSettings(x => x with {
            IsIncompleteUIEnabled = !State.Value.IsIncompleteUIEnabled,
        });

    private async Task UpdateSettings(Func<UserAppSettings, UserAppSettings> update, CancellationToken cancellationToken = default) {
        var settings = await AccountSettings.GetUserAppSettings(cancellationToken);
        await AccountSettings.SetUserAppSettings(update(settings), cancellationToken);
    }

    // Nested types

    public record Model(
        bool IsDataCollectionEnabled,
        bool AreExperimentalFeaturesEnabled,
        bool IsIncompleteUIEnabled,
        bool IsAdmin)
    {
        public static readonly Model None = new(false, false, false, false);
    }
}
