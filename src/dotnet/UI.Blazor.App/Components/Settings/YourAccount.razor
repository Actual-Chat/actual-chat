@using ActualChat.Users.UI.Blazor
@inherits ComputedStateComponent<AccountFull>
@{
    var account = State.Value;
    if (ReferenceEquals(account, AccountFull.Loading))
        return;
}

<Tile>
    <TileItem IsHoverable="false" Class="first-tile-item">
        <Icon>
            <AvatarBadge
                Avatar="@account.Avatar"
                Size="@SquareSize.Size9"
                NameClass="hidden" />
        </Icon>
        <Right>
            <TileButtons EditClick="@OnEditClick"/>
        </Right>
        <Content>
            @account.FullName
        </Content>
        <Caption>
            Name
        </Caption>
    </TileItem>

    <TileItem>
        <Icon>
            <i class="icon-at text-xl"></i>
        </Icon>
        <Content>
            @account.Email
        </Content>
        <Caption>
            Email
        </Caption>
        <Right>
            <CopyToClipboard ButtonClass="btn-xs transparent tile-hidden-btn" Text="@account.Email"/>
            <VerificationStatus IsVerified="account.HasVerifiedEmail()" Class="w-8 h-8" Verify="@OnEditClick"/>
        </Right>
    </TileItem>

    <TileItem>
        <Icon>
            <i class="icon-phone text-xl"></i>
        </Icon>
        <Right>
            <CopyToClipboard ButtonClass="btn-xs transparent tile-hidden-btn" Text="@account.Phone.ToReadable()"/>
            <VerificationStatus IsVerified="account.HasVerifiedPhone()" Class="w-8 h-8" Verify="@OnEditClick"/>
        </Right>
        <Content>
            @account.Phone.ToReadable()
        </Content>
        <Caption>
            Phone
        </Caption>
    </TileItem>

    <div @onclick="@OnShareClick">
        <TileItem Class="tile-item-share">
            <Icon>
                <i class="icon-share text-xl"></i>
            </Icon>
            <Content>
                Share
            </Content>
        </TileItem>
    </div>
</Tile>

<TileTopic Topic="My avatars"/>

<OwnAvatarList Account="@account"/>

@code {
    [Inject] private UIHub Hub { get; init; } = null!;
    private Session Session => Hub.Session();
    private AccountUI AccountUI => Hub.AccountUI;
    private IAvatars Avatars => Hub.Avatars;
    private ShareUI ShareUI => Hub.ShareUI;
    private ModalUI ModalUI => Hub.ModalUI;

    protected override ComputedState<AccountFull>.Options GetStateOptions()
        => new() {
            InitialValue = AccountUI.OwnAccount.Value,
            Category = ComputedStateComponent.GetStateCategory(GetType()),
        };

    protected override Task<AccountFull> ComputeState(CancellationToken cancellationToken)
        => AccountUI.OwnAccount.Use(cancellationToken).AsTask();

    private void OnEditClick()
        => ModalUI.Show(OwnAccountEditorModal.Model.Default);

    private void OnShareClick()
        => _ = ShareUI.ShareOwnAccount();
}
