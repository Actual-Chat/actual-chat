@namespace ActualChat.UI.Blazor.App.Components
@using ActualChat.Search
@inherits FusionComponentBase
@implements IDisposable

<SearchBox
    Class="icon-alight-right"
    Placeholder="@SearchBoxPlaceholder"
    MaxLength="@Constants.Chat.MaxSearchFilterLength"
    TextChanged="@OnFilter"/>
<div class="c-contact-list">
    @foreach (var item in FilteredItems) {
        <div class="c-item"
             @key="@item.Account.Id.Value"
             @onclick="@(_ => OnItemClick(item))">
            <AccountCircle UserSid="@item.Account.Id" ShowPresence="true"/>
            <div class="avatar-name">
                <SearchMatchHighlighter Match="@GetMatch(item.Account.Avatar.Name)"/>
            </div>
            @if (item.IsMember) {
                <Checkbox
                    IsChecked="true"
                    IsDisabled="true"
                    Class="!flex-none"/>
            } else {
                <Checkbox
                    IsChecked="@item.IsChecked"
                    Class="!flex-none"
                    Change="@(_ => OnItemClick(item))"/>
            }
        </div>
    }
    @if (AllItems.Length == 0 && ListSource.CandidateListKind == CandidateListKind.Contacts) {
        <div class="c-no-contacts">
            <div class="c-text">
                You don't have any contacts yet.
                Share your own account with your friends to see them here.
            </div>
            <div class="c-share">
                <ShareOwnAccountTileItem/>
            </div>
        </div>
    }
</div>

<div class="contact-selector-badges">
    @foreach (var userId in _selectedUserIds.Value) {
        var contact = AllItems.FirstOrDefault(c => c.Account.Id.Equals(userId));
        if (contact == null)
            continue;

        var account = contact.Account;
        <div class="c-contact" @onclick="() => Remove(contact)">
            <div class="c-remove">
                <i class="icon-close c-close"></i>
                <span class="c-text">Remove</span>
            </div>
            <AccountCircle UserSid="@userId" Size="@SquareSize.Size5"/>
            <div class="c-name">
                @account.Avatar.Name
            </div>
        </div>
    }
</div>

@code {
    private MutableState<ImmutableHashSet<UserId>> _selectedUserIds = null!;

    private string Filter { get; set; } = "";
    private Item[] FilteredItems { get; set; } = [];
    private Item[] AllItems { get; set; } = [];
    private CancellationTokenSource DisposeTokenSource { get; set; } = null!;
    private CancellationToken DisposeToken { get; set; }

    [Inject] private ChatUIHub Hub { get; init; } = null!;
    private Session Session => Hub.Session();
    private StateFactory StateFactory => Hub.StateFactory();
    private IAccounts Accounts => Hub.Accounts;

    [Parameter] public string SearchBoxPlaceholder { get; set; } = "Whom would you like to add?";
    [Parameter, EditorRequired] public IMemberListSource ListSource { get; set; } = null!;
    [Parameter] public EventCallback Changed { get; set; }

    public IState<ImmutableHashSet<UserId>> SelectedUserIds => _selectedUserIds;

    protected override async Task OnInitializedAsync() {
        if (ListSource is null)
            throw StandardError.NotSupported("DataProvider should be specified.");

        DisposeTokenSource = new();
        DisposeToken = DisposeTokenSource.Token;

        _selectedUserIds = StateFactory.NewMutable(
            ImmutableHashSet<UserId>.Empty,
            StateCategories.Get(GetType(), nameof(SelectedUserIds)));
        _selectedUserIds.Updated += OnSelectedUserIdsUpdated;

        var userIds = await ListSource.ListCandidateUserIds(DisposeToken);

        var accounts = await userIds
            .Select(c => Accounts.Get(Session, c, DisposeToken))
            .Collect()
            .ConfigureAwait(false);

        var memberUserIds = new HashSet<UserId>(await ListSource.ListMemberUserIds(DisposeToken));

        var items = accounts
            .SkipNullItems()
            .Select(c => new Item {
                Account = c,
                IsMember = memberUserIds.Contains(c.Id),
            })
            .ToArray();

        AllItems = items
            .OrderBy(x => x.Account.Avatar.Name)
            .ToArray();
        FilteredItems = AllItems;
    }

    private void OnSelectedUserIdsUpdated(IState<ImmutableHashSet<UserId>> state, StateEventKind eventKind)
        => _ = InvokeAsync(() => !DisposeToken.IsCancellationRequested
            ? Changed.InvokeAsync()
            : Task.CompletedTask);

    public void Dispose()
        => DisposeTokenSource.CancelAndDisposeSilently();

    private void OnFilter(string filter) {
        Filter = filter;
        FilteredItems = string.IsNullOrWhiteSpace(filter)
            ? AllItems.ToArray()
            : AllItems
                .Where(x => x.Account.Avatar.Name.OrdinalIgnoreCaseContains(filter))
                .ToArray();
    }

    private SearchMatch GetMatch(string text) {
        var searchPhrase = Filter.ToSearchPhrase(true, false);
        return searchPhrase.GetMatch(text);
    }

    private void OnItemClick(Item item) {
        if (item.IsMember)
            return;

        item.IsChecked = !item.IsChecked;
        var userId = item.Account.Id;
        if (item.IsChecked)
            _selectedUserIds.Set(userId, static (userId1, x) => x.Value.Add(userId1));
        else
            _selectedUserIds.Set(userId, static (userId1, x) => x.Value.Remove(userId1));
        StateHasChanged();
    }

    private void Remove(Item item) {
        if (item.IsMember)
            return;

        item.IsChecked = false;
        _selectedUserIds.Set(item.Account.Id, static (userId1, x) => x.Value.Remove(userId1));
    }

    // Nested types

    private sealed class Item {
        public Account Account { get; init; } = null!;
        public bool IsMember { get; init; }
        public bool IsChecked { get; set; }
    }
}
