@namespace ActualChat.UI.Blazor.App.Components
@using System.ComponentModel.DataAnnotations
@using TimeZone = ActualChat.Users.TimeZone
@inherits Step;

@if (CurrentStep != this) {
    return;
}

<div>
    @if (Stepper.CurrentStepIndex == 0) {
        <p class="text-title-1 text-center">Welcome to Actual Chat!</p>
    }
    <p class="text-headline-1 mt-6">
        What is your time zone?
    </p>
    <p class="text-headline-1 mt-2">
    </p>
    <Form
        @ref="_formRef"
        Class="mt-6"
        Model="@_model">
        <DataAnnotationsValidator/>
        <FormBlock>
            <FormSection
                For="() => _model.SelectedTimeZoneName"
                InputId="timeZone"
                Label="Time zone"
                Class="grow"
                IsRequired="true"
                IsLabelInsideInput="true">
                <InputSelect
                    Value="_model.SelectedTimeZoneName"
                    ValueExpression="@(() => _model.SelectedTimeZoneName)"
                    ValueChanged="@((string timeZoneName) => OnTimeZoneSelected(timeZoneName))">
                    @if (_model.SelectedTimeZoneName == "") {
                        <option value="">Please select...</option>
                    }
                    @foreach (var timeZone in _timeZones) {
                        <option value="@timeZone.IanaName">@timeZone.IanaName</option>
                    }
                </InputSelect>
            </FormSection>
        </FormBlock>
    </Form>
</div>

@code {
    private readonly Model _model = new();
    private Form? _formRef;
    private IReadOnlyCollection<TimeZone> _timeZones = [];

    [Inject] private UIHub Hub { get; init; } = null!;
    [Inject] private ITimeZones TimeZones { get; init; } = null!;
    [Inject] private Session Session { get; init; } = null!;
    [Inject] private OnboardingUI OnboardingUI { get; init; } = null!;

    [Parameter, EditorRequired] public AccountFull Account { get; set; } = null!;

    public override bool CanSkip => true;

    public override bool IsCompleted {
        get {
            if (OnboardingUI.UserSettings.Value.IsTimeZoneStepCompleted)
                return true;

            if (Account.TimeZone.IsNullOrEmpty())
                return false;

            return OrdinalEquals(Account.TimeZone, Hub.BrowserInfo.TimeZone);
        }
    }

    protected override void MarkCompleted()
        => OnboardingUI.UpdateUserSettings(OnboardingUI.UserSettings.Value with { IsTimeZoneStepCompleted = true });

    protected override async Task OnInitializedAsync() {
        _timeZones = await TimeZones.List("en-US", CancellationToken.None);
        _model.BrowserTimeZoneId = Hub.BrowserInfo.TimeZone;
        _model.BrowserTimeZoneName = await TimeZones.FindDisplayName("en-US", _model.BrowserTimeZoneId, default);
        var timeZone = _timeZones.FirstOrDefault(x => OrdinalEquals(x.IanaName, _model.BrowserTimeZoneName));
        if (timeZone is not null) {
            _model.SelectedTimeZoneId = _model.BrowserTimeZoneId;
            _model.SelectedTimeZoneName = _model.BrowserTimeZoneName;
        }
    }

    protected override Task<bool> Validate() {
        var isValid = _formRef?.EditContext?.Validate() ?? false;
        return Task.FromResult(isValid);
    }

    protected override async Task<bool> Save() {
        var account = await Hub.Accounts.GetOwn(Session, default);
        var command = new Accounts_Update(
            Session,
            account with {
                TimeZone = _model.SelectedTimeZoneId,
            },
            account.Version);
        var (_, error) = await Hub.UICommander().Run(command);
        return error is null;
    }

    private void OnTimeZoneSelected(string timeZoneName) {
        var timeZone = _timeZones.First(x => OrdinalEquals(x.IanaName, timeZoneName));
        _model.SelectedTimeZoneId = timeZone.Id;
        _model.SelectedTimeZoneName = timeZone.IanaName;
        OnboardingUI.UpdateUserSettings(OnboardingUI.UserSettings.Value with { IsTimeZoneStepCompleted = false });
    }

    public class Model {
        [Required]
        public string SelectedTimeZoneId { get; set; } = "";
        public string SelectedTimeZoneName { get; set; } = "";
        public string BrowserTimeZoneId { get; set; } = "";
        public string BrowserTimeZoneName { get; set; } = "";
    }
}
