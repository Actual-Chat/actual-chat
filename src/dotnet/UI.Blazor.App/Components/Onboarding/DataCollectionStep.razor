@namespace ActualChat.UI.Blazor.App.Components
@using ActualChat.Kvas
@inherits Step;

@if (CurrentStep != this) {
    return;
}

<div>
    @if (Stepper.CurrentStepIndex == 0) {
        <p class="text-title-1 text-center">Welcome to Actual Chat!</p>
    }
    <div class="analytics-step">
        <p class="c-subtitle">
            Telemetry Consent Request
        </p>
        <div class="c-content">
            Actual Chat collects certain telemetry data,
            such as critical user actions preceding errors and crashes,
            to help us fix user experience issues faster.
            The data is currently processed by
            <a href="https://firebase.google.com/docs/analytics" target="_blank">
                Firebase Analytics
            </a> and
            <a href="https://sentry.io/" target="_blank">
                Sentry
            </a>, though we may use other services in the future.
            Please help us improve Actual Chat by consenting to the collection and
            processing of your telemetry data.
        </div>
    </div>

</div>

@code {

    [Inject] private UIHub Hub { get; init; } = null!;
    [Inject] private Session Session { get; init; } = null!;
    [Inject] private OnboardingUI OnboardingUI { get; init; } = null!;
    [Inject] private IDataCollectionSettingsUI DataCollectionSettingsUI { get; init; } = null!;
    private AccountSettings AccountSettings => Hub.AccountSettings();

    [Parameter, EditorRequired] public bool IsConfigured { get; set; }

    public override bool CanSkip => true;

    public override string SkipTitle => "Decline";
    public override string NextTitle => "Enable Telemetry";

    public override bool IsCompleted
        => OnboardingUI.UserSettings.Value.IsDataCollectionStepCompleted || IsConfigured;

    protected override void MarkCompleted() {
        var settings = OnboardingUI.UserSettings.Value with { IsDataCollectionStepCompleted = true };
        OnboardingUI.UpdateUserSettings(settings);
    }

    protected override Task<bool> Validate()
        => Task.FromResult(true);

    protected override async Task<bool> Save() {
        await UpdateState(true);
        return true;
    }

    protected override async ValueTask OnSkip() {
        await UpdateState(false);
    }

    private async Task UpdateState(bool isEnabled) {
        var settings = await AccountSettings.GetUserAppSettings(CancellationToken.None);
        settings = settings with { IsDataCollectionEnabled = isEnabled };
        await AccountSettings.SetUserAppSettings(settings, CancellationToken.None);
        await DataCollectionSettingsUI.UpdateState(isEnabled, CancellationToken.None);
    }
}
