@namespace ActualChat.UI.Blazor.App.Components
@{
    var boxCls = _isCollapsed == true ? "" : "show-box";
    var btnCls = "search-box-btn btn-sm";
    if (_isCollapsed == true)
        btnCls += " hide-box";
}

<div class="box-wrapper">
    <ButtonRound
        Class="@btnCls"
        Click="OnExpandClick"
        Tooltip="@Placeholder"
        TooltipPosition="FloatingPosition.Bottom">
        <i class="icon-search text-xl"></i>
    </ButtonRound>

    <div class="@Class chat-search-box @boxCls">
        <label>
            <HeaderButton
                Class="btn-lg search-button blackout inactive"
                Click="OnSearchButtonClick"
                IsDisabled="!CanBeTriggered"
                Tooltip="@Placeholder"
                TooltipPosition="FloatingPosition.Bottom">
                <i class="icon-search"></i>
            </HeaderButton>
            <TextInput
                @ref="_inputRef"
                Text="@InitialText"
                Class="w-full"
                Placeholder="@Placeholder"
                MaxLength="@MaxLength"
                TabIndex="@TabIndex"
                TextChanged="OnInput"
                KeyUp="OnKeyUp">
            </TextInput>
            @if (ShowSpinner && _isBusy) {
                <div style="border-top-color:transparent"
                     class="search-box-spinner">
                </div>
            } else {
                @if (ShowClose) {
                    <HeaderButton
                        Class="cancel-button"
                        Click="@Cancel"
                        Tooltip="Close"
                        TooltipPosition="FloatingPosition.Bottom">
                        <i class="icon-close"></i>
                    </HeaderButton>
                }
            }
        </label>
    </div>
</div>

@code {
    private string _text = "";
    private bool? _isCollapsed;
    private bool _needsFocus;
    private TextInput _inputRef = null!;
    private bool _isBusy;

    [Parameter] public string Class { get; set; } = "";
    [Parameter] public bool IsCollapsed { get; set; }
    [Parameter] public bool ShowSpinner { get; set; }
    [Parameter] public bool ShowClose{ get; set; }
    [Parameter] public int? MaxLength { get; set; }
    [Parameter] public string Placeholder { get; set; } = "Search...";
    [Parameter] public string TabIndex { get; set; } = "";
    [Parameter] public string InitialText { get; set; } = "";
    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Parameter] public EventCallback<string> TextChanged { get; set; }
    [Parameter] public EventCallback<string> Triggered { get; set; }
    [Parameter] public EventCallback Cancelled { get; set; }

    private bool CanBeTriggered => !_isBusy && !_text.IsNullOrEmpty();

    protected override void OnParametersSet()
        => _isCollapsed ??= IsCollapsed;

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (_needsFocus) {
            await _inputRef.Focus();
            _needsFocus = false;
        }
    }

    public ValueTask Focus()
        => _inputRef.Focus();

    public async Task Cancel()
    {
        if (!OrdinalEquals(_text, "")) {
            _text = "";
            await _inputRef.Clear();
            await TextChanged.InvokeAsync(_text).ConfigureAwait(false);
        }
        if (IsCollapsed)
            _isCollapsed = true;
        await Cancelled.InvokeAsync();
    }

    private async Task OnInput(string text) {
        _text = text;
        await TextChanged.InvokeAsync(_text).ConfigureAwait(false);
    }

    private async Task OnKeyUp(KeyboardEventArgs e) {
        switch (e.Key)
        {
            case "Enter" when !CanBeTriggered:
                return;
            case "Enter":
                try {
                    _isBusy = true;
                    await Triggered.InvokeAsync(_text);
                }
                finally {
                    _isBusy = false;
                }
                break;
            case "Escape" when e.HasNoModifier():
                await Cancel();
                break;
        }
    }

    private Task OnSearchButtonClick()
        => Triggered.InvokeAsync(_text);

    private void OnExpandClick() {
        _isCollapsed = false;
        _needsFocus = true;
    }
}
