@namespace ActualChat.UI.Blazor.App.Components
@inherits ComputedStateComponent<AuthorPresenceText.Model>
@{
    var m = State.Value;
}

@PresenceFragments.PresenceText((m.Presence, m.LastCheckIn))

@code {
    [Inject] protected Session Session { get; init; } = null!;
    [Inject] protected IAuthors Authors { get; init; } = null!;
    [Inject] protected ChatActivity ChatActivity { get; init; } = null!;

    protected AuthorId AuthorId { get; private set; }
    protected ChatId ChatId => AuthorId.ChatId;
    protected IChatStreamingActivity? ChatRecordingActivity { get; set; }

    [Parameter, EditorRequired] public string AuthorSid { get; set; } = "";
    [Parameter] public bool ShowRecording { get; set; }

    public override async ValueTask DisposeAsync() {
        await base.DisposeAsync();
        ChatRecordingActivity?.Dispose();
        ChatRecordingActivity = null;
    }

    protected override void OnInitialized()
        // Set AuthorId here in order to have actual AuthorId value in GetStateOptions.
        => AuthorId = new AuthorId(AuthorSid);

    protected override void OnParametersSet()
    {
        AuthorId = new AuthorId(AuthorSid);
        ChatRecordingActivity?.Dispose();
        ChatRecordingActivity = null;
    }

    protected override async Task OnParametersSetAsync() {
        if (ShowRecording && !ChatId.IsNone)
            ChatRecordingActivity = await ChatActivity.GetStreamingActivity(ChatId, CancellationToken.None);
        await base.OnParametersSetAsync();
    }

    protected override ComputedState<Model>.Options GetStateOptions()
        => ComputedStateComponent.GetStateOptions(GetType(),
            static t => new ComputedState<Model>.Options() {
                InitialValue = Model.None,
                Category = ComputedStateComponent.GetStateCategory(t),
            });

    protected override async Task<Model> ComputeState(CancellationToken cancellationToken) {
        var authorId = AuthorId;
        var chatId = authorId.ChatId;

        if (authorId.IsNone)
            return Model.None;

        var streamingActivity = ShowRecording && ChatRecordingActivity != null
            ? ChatRecordingActivity
            : null;

        // Code below doesn't use any component prop, so we can use .ConfigureAwait(false)
        var presence = await Authors.GetPresence(Session, chatId, authorId, cancellationToken).ConfigureAwait(false);
        if (streamingActivity != null) {
            var isStreaming = await streamingActivity.IsAuthorStreaming(authorId, cancellationToken).ConfigureAwait(false);
            if (isStreaming)
                presence = Presence.Recording;
        }

        var lastCheckIn = await Authors.GetLastCheckIn(Session, chatId, authorId, cancellationToken).ConfigureAwait(false);
        return new() {
            Presence = presence,
            LastCheckIn = lastCheckIn,
        };
    }

    // Nested types

    public sealed record Model {
        public static readonly Model None = new() {
            Presence = Presence.Unknown,
            LastCheckIn = null,
        };

        public required Presence Presence { get; init; }
        public required Moment? LastCheckIn { get; init; }
    }
}
