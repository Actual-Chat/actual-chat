@using ActualChat.UI.Blazor.App.Module
@namespace ActualChat.UI.Blazor.App.Components
@{
    var cls = IsSmooth ? "smooth open" : "instant open";
}

<div @ref="ElementRef" class="search-panel @cls @Class">
    <div class="c-search">
        <HeaderButton Click="@SmoothCloseSearchPanel" Class="md:hidden">
            <i class="icon-arrow-left"></i>
        </HeaderButton>
        <div class="search-input">
            <label>
                <TextInput
                    @ref="_inputRef"
                    Class="w-full dialog-unstyled"
                    Placeholder="@Placeholder"
                    MaxLength="@MaxLength"
                    TextChanged="OnSearchInputTextChanged">
                </TextInput>
                <i class="icon-search text-2xl search-icon"></i>
                @if (ShowCloseButton) {
                    <HeaderButton Click="SmoothCloseSearchPanel" Class="c-close-btn">
                        <i class="icon-close text-2xl"></i>
                    </HeaderButton>
                }
            </label>
        </div>
    </div>
    @ChildContent
</div>

@code {
    private static readonly string JSCreateMethod = $"{BlazorUIAppModule.ImportName}.SearchPanel.create";

    TextInput? _inputRef;

    [Inject] private SearchUI SearchUI { get; init; } = null!;
    [Inject] private IJSRuntime JS { get; init; } = null!;

    [Parameter] public SearchPanelSide Side { get; set; } = SearchPanelSide.Right;
    [Parameter] public string Class { get; set; } = "";
    [Parameter] public string Placeholder { get; set; } = "Search";
    [Parameter] public int? MaxLength { get; set; }
    [Parameter] public bool ShowCloseButton { get; set; }
    [Parameter] public bool ShouldFocus { get; set; }
    [Parameter] public bool IsSmooth { get; set; }
    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Parameter] public EventCallback OnCloseClick { get; set; }

    private ElementReference ElementRef { get; set; }
    private IJSObjectReference JSRef { get; set; } = null!;
    private DotNetObjectReference<SearchPanel> BlazorRef { get; set; } = null!;

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (firstRender) {
            BlazorRef = DotNetObjectReference.Create(this);
            JSRef = await JS.InvokeAsync<IJSObjectReference>(JSCreateMethod, ElementRef, BlazorRef, Side);
        }
    }

    private async Task SmoothCloseSearchPanel()
        => await JSRef.InvokeVoidAsync("smoothClosePanel");

    private void OnSearchInputTextChanged(string text)
        => SearchUI.Text.Value = text;

    public ValueTask Focus()
        => _inputRef?.Focus() ?? default;

    public ValueTask Cancel()
        => _inputRef?.Clear() ?? default;

    [JSInvokable]
    public void ClosePanel()
        => OnCloseClick.InvokeAsync();
}
