@namespace ActualChat.UI.Blazor.App.Components
@using ActualChat.UI.Blazor.App.Module
@using System.Diagnostics.CodeAnalysis
@implements IAsyncDisposable

@code {
    private static readonly string JSCreateMethod = $"{BlazorUIAppModule.ImportName}.SelectionHost.create";

    private IJSObjectReference _jsRef = null!;
    private DotNetObjectReference<SelectionHost> _blazorRef = null!;

    [Inject] private ChatUIHub Hub { get; set; } = null!;
    private IJSRuntime JS => Hub.JSRuntime();
    private SelectionUI SelectionUI => Hub.SelectionUI;

    [Parameter, EditorRequired] public string Selected { get; set; } = ChatEntryId.None;

    [DynamicDependency(DynamicallyAccessedMemberTypes.All, typeof(SelectionHost))]
    public SelectionHost() { }

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (firstRender) {
            _blazorRef = DotNetObjectReference.Create(this);
            _jsRef = await JS.InvokeAsync<IJSObjectReference>(JSCreateMethod, _blazorRef, Selected);
        }
    }

    [JSInvokable]
    public void OnSelect(ChatEntryId chatEntryId)
        => SelectionUI.Select(chatEntryId);

    [JSInvokable]
    public void OnUnselect(ChatEntryId chatEntryId)
        => SelectionUI.Unselect(chatEntryId);

    public async ValueTask DisposeAsync() {
        await _jsRef.DisposeSilentlyAsync("dispose");
        _jsRef = null!;
        _blazorRef.DisposeSilently();
        _blazorRef = null!;
    }
}
