@inherits ComputedStateComponent<SelectionHeader.Model>
@namespace ActualChat.UI.Blazor.App.Components
@{
    var m = State.Value;
    if (m.Selection.Count == 0) {
        _ = StopHandleEscape();
        return;
    }

    StartHandleEscape();
}

<SelectionHost Selected="@m.Selection.First()" />

@if (ScreenSize.IsNarrow()) {
    <div class="selection-header">
        <div>
            <HeaderButton
                Click="OnCancel">
                <i class="icon-close-fill text-2xl"></i>
            </HeaderButton>
        </div>
        <div class="selection-header-title">
            @(m.Selection.Count) @("message".Pluralize(m.Selection.Count))
        </div>
        <div class="selection-header-buttons">
            @if (m.CanDelete) {
                <ButtonRound
                    Class="btn-xs btn-danger btn-transparent"
                    Click="@(() => SelectionUI.Delete())">
                    <i class="icon-trash03 text-danger text-xl"></i>
                </ButtonRound>
            }
            <ButtonRound
                Class="btn-xs btn-primary btn-transparent"
                Click="@(() => SelectionUI.CopyToClipboard())">
                <i class="icon-copy text-xl"></i>
            </ButtonRound>
            <Button
                Class="btn-submit btn-transparent"
                Click="@(() => SelectionUI.Forward())">
                Forward
            </Button>
        </div>
    </div>
    return;
}

<div class="selection-header">
    <div>
        <HeaderButton
            Class="c-close-btn blackout"
            Click="OnCancel">
            <i class="icon-close-fill text-2xl"></i>
        </HeaderButton>
    </div>

    <div class="selection-header-title">
        @(m.Selection.Count) @("message".Pluralize(m.Selection.Count))
    </div>

    <div class="selection-header-buttons">
        @if (m.CanDelete) {
            <ButtonRound
                Class="btn-xs btn-danger btn-transparent"
                Click="@(() => SelectionUI.Delete())"
                Tooltip="Delete selected"
                TooltipPosition="FloatingPosition.Bottom">
                <i class="icon-trash03 text-xl text-danger"></i>
            </ButtonRound>
        }
        <ButtonRound
            Class="btn-xs btn-primary btn-transparent"
            Click="@(() => SelectionUI.CopyToClipboard())"
            Tooltip="Copy selected as text"
            TooltipPosition="FloatingPosition.Bottom">
            <i class="icon-copy text-xl"></i>
        </ButtonRound>
        <Button
            Class="btn-primary btn-sm"
            Click="@(() => SelectionUI.Forward())">
            Forward
        </Button>
    </div>
</div>

@code {
    private Task<IAsyncDisposable>? _escapistSubscriptionTask;

    [Inject] private ChatUIHub Hub { get; set; } = null!;
    private Session Session => Hub.Session();
    private IChats Chats => Hub.Chats;
    private IAuthors Authors => Hub.Authors;
    private SelectionUI SelectionUI => Hub.SelectionUI;
    private Escapist Escapist => Hub.Escapist;

    [CascadingParameter] public ScreenSize ScreenSize { get; set; }

    public override async ValueTask DisposeAsync() {
        await base.DisposeAsync();
        await StopHandleEscape();
    }

    protected override ComputedState<Model>.Options GetStateOptions()
        => ComputedStateComponent.GetStateOptions(GetType(),
            static t => new ComputedState<Model>.Options() {
                InitialValue = Model.None,
                UpdateDelayer = FixedDelayer.NextTick,
                Category = ComputedStateComponent.GetStateCategory(t),
            });

    protected override async Task<Model> ComputeState(CancellationToken cancellationToken) {
        var selection = await SelectionUI.Selection.Use(cancellationToken).ConfigureAwait(false);
        if (selection.IsEmpty)
            return Model.None;

        var chatId = selection.First().ChatId;
        var chat = await Chats.Get(Session, chatId, cancellationToken).ConfigureAwait(false);
        var ownAuthor = await Authors.GetOwn(Session, chatId, cancellationToken).ConfigureAwait(false);

        var canDelete = true;
        foreach (var chatEntryId in selection) {
            if (chat == null) {
                canDelete = false;
                break;
            }

            if (chat.Rules.IsOwner())
                break;

            if (ownAuthor == null) {
                canDelete = false;
                break;
            }

            var chatEntry = await Chats.GetEntry(Session, chatEntryId, cancellationToken).ConfigureAwait(false);
            if (chatEntry == null) {
                canDelete = false;
                break;
            }

            var isOwnEntry = ownAuthor.Id == chatEntry.AuthorId;
            if (!isOwnEntry) {
                canDelete = false;
                break;
            }
        }

        return new() {
            Selection = selection,
            CanDelete = canDelete,
        };
    }

    private void OnCancel()
        => SelectionUI.Clear();

    private void StartHandleEscape()
        => _escapistSubscriptionTask ??= Escapist.SubscribeOnce(OnEscape, State.DisposeToken).AsTask();

    private async ValueTask StopHandleEscape() {
        var escapistSubscriptionTask = _escapistSubscriptionTask;
        if (escapistSubscriptionTask == null)
            return;

        _escapistSubscriptionTask = null;
        var escapistSubscription = (await escapistSubscriptionTask.ResultAwait()).ValueOrDefault;
        await escapistSubscription.DisposeSilentlyAsync();
    }

    private void OnEscape()
        => SelectionUI.Clear();

    // Nested types

    public sealed record Model {
        public static Model None { get; } = new() {
            Selection = ImmutableHashSet<ChatEntryId>.Empty,
        };

        public ImmutableHashSet<ChatEntryId> Selection { get; init; } = null!;
        public bool CanDelete { get; init; }
    }
}
