@namespace ActualChat.UI.Blazor.App.Components
@using ActualChat.Kvas
@inherits ComputedStateComponent<VoiceSettingsListeningModalPage.ComputedModel>
@{
    var m = State.Value;
    var mode = m.ListeningMode;
}

<FormBlock Class="first last">
    @foreach (var info in ListeningModeInfo.All) {
        RenderFragment content;
        if (info.Duration < TimeSpan.MaxValue) {
            content = @<span>After <u>@info.Text</u> of inactivity</span>;
        } else {
            content = @<span><u>Keep listening</u> while the app is active</span>;
        }
        <TileItem Click="@(() => SetListeningMode(info.Mode))">
            <Content>@content</Content>
            <Right>
                @if (mode == info.Mode) {
                    <i class="icon-checkmark-simple text-primary text-2xl"></i>
                }
            </Right>
        </TileItem>
    }
</FormBlock>

@code {
    [Inject] public ChatUIHub Hub { get; set; } = null!;

    [CascadingParameter] public DiveInModalPageContext Context { get; set; } = null!;

    private ChatId ChatId { get; set; }

    private AccountSettings AccountSettings => Hub.AccountSettings();

    protected override void OnInitialized() {
        ChatId = Context.GetTypedModel<ChatId>();
        Context.SetTitle("Turn off listening in this chat:");
    }

    protected override ComputedState<ComputedModel>.Options GetStateOptions()
        => ComputedStateComponent.GetStateOptions(GetType(),
            static t => new ComputedState<ComputedModel>.Options() {
                InitialValue = new(ListeningMode.Default),
                UpdateDelayer = FixedDelayer.NextTick,
                Category = ComputedStateComponent.GetStateCategory(t),
            });

    protected override async Task<ComputedModel> ComputeState(CancellationToken cancellationToken) {
        var chatId = ChatId;

        var userChatSettings = await AccountSettings
            .GetUserChatSettings(chatId, cancellationToken)
            .ConfigureAwait(false);

        return new (userChatSettings.ListeningMode);
    }

    private async Task SetListeningMode(ListeningMode listeningMode) {
        var chatId = ChatId;

        var userChatSettings = await AccountSettings.GetUserChatSettings(chatId, default);
        userChatSettings = userChatSettings with { ListeningMode = listeningMode };

        // Save new settings
        await AccountSettings.SetUserChatSettings(chatId, userChatSettings, default);
        if (listeningMode == ListeningMode.Forever) {
            await Hub.ChatAudioUI.SetListeningState(chatId, true);
            await AccountSettings.AddAlwaysListenedChat(chatId, default);
        } else {
            await AccountSettings.RemoveAlwaysListenedChat(chatId, default);
        }
        Context.Close();
    }

    // Nested types

    public sealed record ComputedModel(ListeningMode ListeningMode);
}
