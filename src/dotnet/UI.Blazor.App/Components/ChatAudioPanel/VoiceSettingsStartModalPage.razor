@namespace ActualChat.UI.Blazor.App.Components
@inherits ComputedStateComponent<VoiceSettingsStartModalPage.ComputedModel>
@{
    var m = State.Value;
    var voiceStatus = !m.CanChangeMustStreamVoice
        ? "Disabled for anonymous users"
        : m.MustStreamVoice
            ? "On"
            : "Off";

    var listeningModeInfo = m.ListeningMode.GetInfo();
}

<FormBlock Class="first last">
    <LanguageButtonGroup ChatId="@ChatId" Click="@(() => Context.Close())"/>

    <TileItem Click="@OnVoiceStreamingClick">
        <Icon><i class="icon-radio-button-on-fill text-2xl"></i></Icon>
        <Content>Voice streaming</Content>
        <Caption>@voiceStatus</Caption>
        <Right>
            <Toggle
                IsDisabled="@(!m.CanChangeMustStreamVoice)"
                IsChecked="@m.MustStreamVoice" />
        </Right>
    </TileItem>

    <TileItem Click="@OnListeningModeClick">
        <Icon><i class="icon-listen text-2xl"></i></Icon>
        <Content>Extended listening</Content>
        <Caption>@(listeningModeInfo.IsDefault ? "Off" : "On")</Caption>
        <Right>
            <span class="text-primary text-sm">@listeningModeInfo.Text</span>
        </Right>
    </TileItem>

</FormBlock>

@code {
    private ChatVoiceSettings? _chatVoiceSettings;

    [Inject] private ChatUIHub Hub { get; init; } = null!;
    private Session Session => Hub.Session();
    private ChatUI ChatUI => Hub.ChatUI;
    private ChatVoiceSettings ChatVoiceSettings => _chatVoiceSettings ??= new(Hub.Services, Hub.AccountSettings());

    [CascadingParameter] public DiveInModalPageContext Context { get; set; } = null!;

    private ChatId ChatId { get; set; }

    protected override void OnInitialized() {
        ChatId = Context.GetModel<ChatId>();
        Context.Title = "Voice settings";
    }

    protected override ComputedState<ComputedModel>.Options GetStateOptions()
        => ComputedStateComponent.GetStateOptions(GetType(),
            static t => new ComputedState<ComputedModel>.Options() {
                InitialValue = new(false, false, ListeningMode.Default),
                UpdateDelayer = FixedDelayer.NextTick,
                Category = ComputedStateComponent.GetStateCategory(t),
            });

    protected override async Task<ComputedModel> ComputeState(CancellationToken cancellationToken) {
        var chatId = ChatId;

        var settings = await ChatVoiceSettings.Get(Session, chatId, cancellationToken).ConfigureAwait(false);
        var chatInfo = await ChatUI.Get(chatId, cancellationToken).ConfigureAwait(false);

        var listeningMode = chatInfo?.UserSettings.ListeningMode ?? ListeningMode.Default;
        var mustStreamVoice = settings.VoiceMode.HasVoice();
        return new (mustStreamVoice, settings.CanChange, listeningMode);
    }

    private async Task OnMustStreamVoiceChanged(bool mustStreamVoice) {
        var voiceMode = mustStreamVoice
            ? VoiceMode.TextAndVoice
            : VoiceMode.JustText;
        await ChatVoiceSettings.Set(Session, ChatId, voiceMode);
    }

    private Task OnVoiceStreamingClick()
        => OnMustStreamVoiceChanged(!State.Value.MustStreamVoice);

    private void OnListeningModeClick()
        => Context.StepIn(DiveInDialogPage.New<VoiceSettingsListeningModalPage>(ChatId));

    // Nested types

    public sealed record ComputedModel(
        bool MustStreamVoice,
        bool CanChangeMustStreamVoice,
        ListeningMode ListeningMode);
}
