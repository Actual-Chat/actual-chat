@inherits ComputedStateComponent<string>
@{
    var errors = State.Value;
}

<h3>Connection state:</h3>
@if (!errors.IsNullOrEmpty()) {
    <h4>@errors</h4>
}
else {
    <h4>No errors</h4>
}

@code {
    private ReconnectUI? _reconnectUI;

    [Inject] private Session Session { get; init; } = null!;

    protected override void OnInitialized()
        => _reconnectUI = Services.GetService<ReconnectUI>();

    protected override ComputedState<string>.Options GetStateOptions()
        => ComputedStateComponent.GetStateOptions(GetType(),
            static t => new ComputedState<string>.Options() {
                InitialValue = "",
                Category = ComputedStateComponent.GetStateCategory(t),
            });

    protected override async Task<string> ComputeState(CancellationToken cancellationToken) {
        if (_reconnectUI == null)
            return "";

        try {
            var state = await _reconnectUI.State.Use(cancellationToken).ConfigureAwait(false);
            return state.GetDescription();
        }
        catch (Exception e) {
            return e.Message;
        }
    }
}
