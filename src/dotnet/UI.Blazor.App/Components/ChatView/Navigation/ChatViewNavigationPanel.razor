@namespace ActualChat.UI.Blazor.App.Components
@inherits ComputedStateComponent<ChatViewNavigationPanel.Model>
@{
    var m = State.Value;
}

@if (m.ShowSearchResultsNavigator) {
    <ChatViewSearchResultsNavigator />
} else {
    <NavigateToUnreadOrEnd
        ChatContext="@ChatContext"
        ChatView="ChatView" />
}

@code {
    private ChatUIHub Hub => ChatContext.Hub;
    private SearchUI SearchUI => Hub.SearchUI;
    private BrowserInfo BrowserInfo => Hub.BrowserInfo;

    [Parameter, EditorRequired] public ChatContext ChatContext { get; set; } = null!;
    [Parameter, EditorRequired] public ChatView ChatView { get; set; } = null!;

    protected override ComputedState<Model>.Options GetStateOptions()
        => ComputedStateComponent.GetStateOptions(GetType(),
            static t => new ComputedState<Model>.Options() {
                InitialValue = new Model(false),
                UpdateDelayer = FixedDelayer.NextTick,
                Category = ComputedStateComponent.GetStateCategory(t),
            });

    protected override async Task<Model> ComputeState(CancellationToken cancellationToken) {
        var screenSize = await BrowserInfo.ScreenSize.Use(cancellationToken).ConfigureAwait(false);
        if (!screenSize.IsNarrow())
            return new Model(false);

        var hasSearchResults = await SearchUI.IsResultsNavigationOn.Use(cancellationToken).ConfigureAwait(false);
        return new Model(hasSearchResults);
    }

    // Nested types

    public sealed record Model(bool ShowSearchResultsNavigator);
}
