@namespace ActualChat.UI.Blazor.App.Components
@inherits ComputedStateComponent<ChatWelcomeBlock.Model?>
@{
    var m = State.ValueOrDefault;
    if (m == null)
        return;
}

<EmptyChatContent ChatContext="@ChatContext"/>
<div class="message-wrapper">
    <div class="chat-welcome-block">
        <div class="c-header">
            <div class="c-chat-icon">
                <ChatIcon Chat="@Chat"/>
            </div>
            <div class="c-chat-title">@Chat.Title</div>
        </div>
        @switch (m.MessageType) {
            case MessageType.Notes:
                <div class="c-content">
                    Welcome! You can store your notes in this chat, including recorded ones.
                </div>
                break;
            case MessageType.Contact:
                <div class="c-content">
                    <span class="c-incut">To share</span>
                    <span class="c-contact">@m.ShareModel?.TargetTitle</span>
                    <span class="c-incut">'s contact, use:</span>
                </div>
                break;
            default:
                var welcomeText = m.ShareModel is not null
                    ? "Welcome! Share the link to this chat to invite more people here:"
                    : "Welcome!";
                <div class="c-content">@welcomeText</div>
                break;
        }

        @if (m.ShareModel is { } shareModel) {
            var link = shareModel.Request.Link.GetValueOrDefault();
            var linkKind = link.IsPrivateChatInvite()
                ? "Private join link"
                : "Public link";
            var copyText = shareModel.Request.GetShareLink(UrlMapper);
            <div class="chat-link">
                <div class="c-link-url">
                    <div class="c-round">
                        <i class="icon-link-2 text-xl"></i>
                    </div>
                    <div class="c-link-wrapper">
                        <div class="link-url">@link.DisplayText</div>
                        <div class="link-hint">@linkKind</div>
                    </div>
                </div>
                <div class="c-link-buttons">
                    <CopyTrigger Tooltip="@copyText" CopyText="@copyText">
                        <ButtonRound Class="md:btn-sm">
                            <i class="hide-on-copied-hint icon-copy" aria-hidden="true"></i>
                            <i class="copied-hint icon-checkmark-simple" aria-hidden="true"></i>
                        </ButtonRound>
                    </CopyTrigger>
                    <ButtonRound
                        Class="md:btn-sm"
                        Tooltip="Share"
                        Click="@(() => OnShareClick(shareModel))">
                        <i class="icon-share"></i>
                    </ButtonRound>
                </div>
            </div>
        }
    </div>
</div>

@code {
    public enum MessageType {
        Default,
        Notes,
        Contact,
    }

    // Shortcuts
    private Session Session => ChatContext.Hub.Session();
    private Chat Chat => ChatContext.Chat;
    private ShareUI ShareUI => ChatContext.Hub.ShareUI;
    private UrlMapper UrlMapper => ChatContext.Hub.UrlMapper();

    [Parameter, EditorRequired] public ChatContext ChatContext { get; set; } = null!;

    protected override async Task<Model?> ComputeState(CancellationToken cancellationToken) {
        var chatId = Chat.Id;

        var messageType = MessageType.Default;
        if (Chat.HasSingleAuthor && Chat.SystemTag == Constants.Chat.SystemTags.Notes)
            messageType = MessageType.Notes;
        var shareModel = await ShareUI.GetModel(chatId, cancellationToken).ConfigureAwait(false);
        if (shareModel is { Kind: ShareKind.Contact })
            messageType = MessageType.Contact;

        return new(messageType, shareModel);
    }

    private void OnShareClick(ShareModalModel shareModel)
        => ShareUI.Share(shareModel);

    // Nested types

    public sealed record Model(
        MessageType MessageType,
        ShareModalModel? ShareModel = null);
}
