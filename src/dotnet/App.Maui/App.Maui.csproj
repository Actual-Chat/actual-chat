<Project Sdk="Microsoft.NET.Sdk.Razor">

  <PropertyGroup>
    <TargetFrameworks>net9.0-android;net9.0-ios;net9.0-maccatalyst</TargetFrameworks>
    <TargetFrameworks Condition="$([MSBuild]::IsOSPlatform('windows'))">$(TargetFrameworks);net9.0-windows10.0.22000.0</TargetFrameworks>
    <OutputType>Exe</OutputType>
    <AssemblyName>$(BaseName)</AssemblyName>
    <RootNamespace>$(BaseName).$(MSBuildProjectName)</RootNamespace>
    <Configurations>Release;Debug</Configurations>

    <!-- MAUI properties -->
    <UseMaui>true</UseMaui>
    <MauiVersion>8.0.70</MauiVersion>
    <SingleProject>true</SingleProject>
    <IsPublishable>true</IsPublishable>
    <UseMauiNuGets>false</UseMauiNuGets>
    <SkipValidateMauiImplicitPackageReferences>true</SkipValidateMauiImplicitPackageReferences>

    <!-- Other build properties -->
    <EnableDefaultCssItems>false</EnableDefaultCssItems>
    <InvariantGlobalization>true</InvariantGlobalization>
    <!--
    <EnablePreviewMsixTooling>true</EnablePreviewMsixTooling>
    -->

    <!-- Display name -->
    <ApplicationTitle>Actual Chat</ApplicationTitle>
    <appname>actual.chat</appname>

    <!-- App Identifier -->
    <ApplicationId>chat.actual.app</ApplicationId>
    <ApplicationIdGuid>7AC72B49-8FEA-45AB-B7B8-C32719677E9D</ApplicationIdGuid>

    <!-- Original defaults for MAUI project: -->
    <!--
    <SupportedOSPlatformVersion Condition="$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'ios'">14.2</SupportedOSPlatformVersion>
    <SupportedOSPlatformVersion Condition="$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'maccatalyst'">14.0</SupportedOSPlatformVersion>
    <SupportedOSPlatformVersion Condition="$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'android'">24.0</SupportedOSPlatformVersion>
    <SupportedOSPlatformVersion Condition="$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'windows'">10.0.17763.0</SupportedOSPlatformVersion>
    <TargetPlatformMinVersion Condition="$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'windows'">10.0.17763.0</TargetPlatformMinVersion>
    <SupportedOSPlatformVersion Condition="$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'tizen'">6.5</SupportedOSPlatformVersion>
    -->

    <SupportedOSPlatformVersion Condition="$(TargetFramework.Contains('-android'))">28.0</SupportedOSPlatformVersion>
    <SupportedOSPlatformVersion Condition="$(TargetFramework.Contains('-ios'))">16.4</SupportedOSPlatformVersion>
    <SupportedOSPlatformVersion Condition="$(TargetFramework.Contains('-maccatalyst'))">14.0</SupportedOSPlatformVersion>
    <SupportedOSPlatformVersion Condition="$(TargetFramework.Contains('-windows'))">10.0.17763.0</SupportedOSPlatformVersion>
    <TargetPlatformMinVersion Condition="$(TargetFramework.Contains('-windows'))">10.0.17763.0</TargetPlatformMinVersion>
  </PropertyGroup>

  <!-- Profiling & tracing -->
  <PropertyGroup Condition="'$(IsProfilingEnabled)' == ''">
    <IsProfilingEnabled>false</IsProfilingEnabled>
  </PropertyGroup>
  <PropertyGroup Condition="'$(IsTracingEnabled)' == ''">
    <IsTracingEnabled>false</IsTracingEnabled>
  </PropertyGroup>

  <!-- IsDevMaui controls whether the app talks to prod or dev instance -->
  <PropertyGroup Condition="'$(IsDevMaui)' == ''">
    <IsDevMaui>true</IsDevMaui>
  </PropertyGroup>
  <PropertyGroup Condition="'$(IsDevMaui)' == 'true'">
    <DefineConstants>$(DefineConstants);IS_DEV_MAUI</DefineConstants>
    <!-- Display name -->
    <ApplicationTitle>Actual Chat (Dev)</ApplicationTitle>
    <!-- App Identifier -->
    <ApplicationId>chat.actual.dev.app</ApplicationId>
  </PropertyGroup>

  <!-- Environment -->
  <PropertyGroup>
    <FixedEnvironment Condition="'$(FixedEnvironment)' == ''" />
    <!-- Produces tons of misleading warnings if true! -->
    <EnforceCodeStyleInBuild>false</EnforceCodeStyleInBuild>
  </PropertyGroup>
  <PropertyGroup Condition="'$(FixedEnvironment)' == 'Production'">
    <DefineConstants>$(DefineConstants);IS_PRODUCTION_ENV</DefineConstants>
  </PropertyGroup>

  <!-- Project references -->
  <!-- UseAppPack == false -->
  <ItemGroup Condition="!$(UseAppPack)">
    <ProjectReference Include="..\UI.Blazor.AppPack\UI.Blazor.AppPack.csproj" />
  </ItemGroup>
  <!-- UseAppPack == true -->
  <ItemGroup Condition="$(UseAppPack)">
    <ProjectReference Include="..\UI.Blazor.AppPack\UI.Blazor.AppPack.csproj" ReferenceOutputAssembly="false" />
    <Reference Include="ActualChat.UI.Blazor.AppPack">
      <HintPath>$(AppPackDir)ActualChat.UI.Blazor.AppPack.dll</HintPath>
    </Reference>
    <!-- A few more packages should be referenced transitively in this case -->
    <PackageReference Include="Microsoft.AspNetCore.Components.Authorization" />
    <PackageReference Include="Microsoft.AspNetCore.SignalR.Client" />
    <PackageReference Include="Microsoft.AspNetCore.SignalR.Protocols.MessagePack" />
    <PackageReference Include="Microsoft.Extensions.Hosting.Abstractions" />
    <PackageReference Include="Microsoft.Extensions.Logging" />
    <PackageReference Include="Microsoft.Extensions.Options.DataAnnotations" />
    <PackageReference Include="Microsoft.JSInterop.WebAssembly" />
    <PackageReference Include="Microsoft.Toolkit.HighPerformance" />
    <PackageReference Include="OpenTelemetry" />
    <PackageReference Include="OpenTelemetry.Instrumentation.Http" />
    <PackageReference Include="RestEase" />
    <PackageReference Include="SauceControl.Blake2Fast" />
    <PackageReference Include="Sentry.OpenTelemetry" />
    <PackageReference Include="System.Linq.Async" />
    <PackageReference Include="System.Reactive" />
    <PackageReference Include="Ulid" />
    <PackageReference Include="ZString" />
  </ItemGroup>

  <!-- Package references -->
  <ItemGroup>
    <PackageReference Remove="Microsoft.SourceLink.GitHub" />
    <PackageReference Include="banditoth.MAUI.DeviceId" />
    <PackageReference Include="CommunityToolkit.Maui.Core" />
    <PackageReference Include="libphonenumber-csharp" />
    <!-- Extra packages for .NET 8: -->
    <PackageReference Include="Microsoft.Maui.Controls" />
    <PackageReference Include="Microsoft.Maui.Controls.Compatibility" />
    <PackageReference Include="Microsoft.AspNetCore.Components.WebView.Maui" />
    <!-- This seems weird, but w/o this line MSBuild concludes the version is 1.0.0! -->
    <PackageReference Include="Microsoft.Extensions.Logging.Abstractions" VersionOverride="$(MicrosoftExtensionsVersion)" />
    <PackageReference Include="Microsoft.IO.RecyclableMemoryStream" />
    <PackageReference Include="Sentry.Serilog" />
    <PackageReference Include="Sentry.Extensions.Logging" />
    <PackageReference Include="Serilog" />
    <PackageReference Include="Serilog.Extensions.Logging" />
    <PackageReference Include="sqlite-net-pcl" />
    <!--
      An extra package to use SQLite on MAUI:
      https://learn.microsoft.com/en-us/dotnet/maui/data-cloud/database-sqlite?view=net-maui-7.0#install-sqlitepclrawbundle_green -->
    <PackageReference Include="SQLitePCLRaw.bundle_green" />
  </ItemGroup>

  <!-- Platform-specific package references -->
  <ItemGroup Condition="$(TargetFramework.Contains('-android'))">
    <PackageReference Include="Xamarin.AndroidX.Core" />
    <PackageReference Include="Xamarin.AndroidX.Collection" />
    <PackageReference Include="Xamarin.AndroidX.Collection.Ktx" />
    <PackageReference Include="Xamarin.AndroidX.Fragment.Ktx" />
    <PackageReference Include="Plugin.Firebase.Analytics" />
    <PackageReference Include="Xamarin.Firebase.Analytics" />
    <PackageReference Include="Xamarin.Firebase.Crashlytics" />
    <PackageReference Include="Xamarin.Firebase.Messaging" />
    <PackageReference Include="Xamarin.GooglePlayServices.Auth" />
    <PackageReference Include="Xamarin.GooglePlayServices.CroNet" />
    <PackageReference Include="Xamarin.Google.Dagger" />
    <PackageReference Include="Xamarin.Twilio.AudioSwitch" />
    <PackageReference Include="Serilog.Sinks.Xamarin" />
    <PackageReference Include="System.Net.WebSockets" />
  </ItemGroup>
  <ItemGroup Condition="$(TargetFramework.Contains('-ios'))">
    <PackageReference Include="Plugin.Firebase.Analytics" />
    <PackageReference Include="Plugin.Firebase.CloudMessaging" />
    <PackageReference Include="Plugin.Firebase.Crashlytics" />
    <PackageReference Include="Serilog.Sinks.Xamarin" />
    <PackageReference Include="Xamarin.Build.Download" />
    <PackageReference Include="AdamE.Firebase.iOS.Analytics" />
    <PackageReference Include="AdamE.Firebase.iOS.Crashlytics" />
    <PackageReference Include="AdamE.Firebase.iOS.CloudMessaging" />
  </ItemGroup>
  <ItemGroup Condition="$(TargetFramework.Contains('-windows'))">
    <PackageReference Include="Serilog.Sinks.Debug" />
    <PackageReference Include="Serilog.Sinks.File" />
  </ItemGroup>

  <!--
  <PropertyGroup Condition="$(TargetFramework.Contains('-windows')) and '$(Configuration)' == 'Release'">
  -->
  <!--
  <PropertyGroup Condition="$(TargetFramework.Contains('-windows'))">
    <GenerateAppxPackageOnBuild>true</GenerateAppxPackageOnBuild>
    <AppxPackageSigningEnabled>true</AppxPackageSigningEnabled>
    <PackageCertificateThumbprint>0BFF799D82CC03E61A65584D31D800924149453A</PackageCertificateThumbprint>
  </PropertyGroup>
  -->

  <!-- Common Windows, iOS and Android build properties -->
  <PropertyGroup>
    <UseInterpreter Condition="'$(Configuration)' == 'Debug'">true</UseInterpreter>
    <UseInterpreter Condition="'$(Configuration)' == 'Release'">false</UseInterpreter>
  </PropertyGroup>
  <!-- Trimming -->
  <ItemGroup>
    <TrimmerRootAssembly Include="ActualChat" RootMode="All" /> <!-- EntryPoint seems to be a weaker option here -->
    <TrimmerRootAssembly Include="ActualChat.UI.Blazor.AppPack" RootMode="All" />
  </ItemGroup>

  <!-- Common iOS and Android build properties -->
  <PropertyGroup Condition="$(TargetFramework.Contains('-android')) or $(TargetFramework.Contains('-ios'))">
    <!-- Trimmer settings -->
    <EnableUnsafeBinaryFormatterSerialization>false</EnableUnsafeBinaryFormatterSerialization>
    <EnableUnsafeUTF7Encoding>false</EnableUnsafeUTF7Encoding>
    <HttpActivityPropagationSupport>false</HttpActivityPropagationSupport>
    <MetadataUpdaterSupport>false</MetadataUpdaterSupport>
    <EventSourceSupport>false</EventSourceSupport>
  </PropertyGroup>

  <!-- Android build properties -->

  <!-- Android: Signing & framework trimming -->
  <PropertyGroup Condition="$(TargetFramework.Contains('-android'))">
    <AndroidKeyStore>True</AndroidKeyStore>
    <AndroidSigningKeyStore>myapp.keystore</AndroidSigningKeyStore>
    <AndroidSigningKeyAlias>key</AndroidSigningKeyAlias>
    <AndroidSigningKeyPass>password</AndroidSigningKeyPass>
    <AndroidSigningStorePass>password</AndroidSigningStorePass>
    <AndroidUseNegotiateAuthentication>false</AndroidUseNegotiateAuthentication>
  </PropertyGroup>
  <ItemGroup>
    <ProguardConfiguration Include="proguard.cfg" />
  </ItemGroup>

  <!-- Android: Both Debug & Release configurations -->
  <PropertyGroup Condition="$(TargetFramework.Contains('-android'))">
    <AndroidUseInterpreter>$(UseInterpreter)</AndroidUseInterpreter>
    <!-- This instructs trimmer to remove managed HTTP handler - don't use it with HttpClientHandler -->
    <UseNativeHttpHandler>true</UseNativeHttpHandler>
    <!-- <AndroidHttpClientHandlerType>Xamarin.Android.Net.AndroidClientHandler</AndroidHttpClientHandlerType>-->
    <!-- Default one in .NET, supports HTTP/2: -->
    <!-- <AndroidHttpClientHandlerType>System.Net.Http.SocketsHttpHandler, System.Net.Http</AndroidHttpClientHandlerType> -->
    <!-- Used when unspecified: -->
    <!-- <AndroidHttpClientHandlerType>System.Net.Http.HttpClientHandler, System.Net.Http</AndroidHttpClientHandlerType>-->
    <!-- This also ensures debug symbols are there -->
    <DebuggerSupport>true</DebuggerSupport>
  </PropertyGroup>
  <ItemGroup Condition="$(TargetFramework.Contains('-android'))">
    <AndroidEnvironment Include="android-env.txt" />
  </ItemGroup>

  <!-- Android: Debug configuration -->
  <PropertyGroup Condition="$(TargetFramework.Contains('-android')) and '$(Configuration)' == 'Debug'">
    <EmbedAssembliesIntoApk Condition="'$(EmbedAssembliesIntoApk)' == ''">False</EmbedAssembliesIntoApk>
  </PropertyGroup>

  <!-- Android: Release configuration -->
  <PropertyGroup Condition="$(TargetFramework.Contains('-android')) and '$(Configuration)' == 'Release'">
    <!-- Trimming & AOT -->
    <AndroidDexTool>d8</AndroidDexTool>
    <AndroidLinkTool>r8</AndroidLinkTool>
    <PublishTrimmed>true</PublishTrimmed>
    <TrimMode Condition="!$(UseAppPack)">partial</TrimMode>
    <TrimMode Condition="$(UseAppPack)">partial</TrimMode> <!-- Will be "full" w/ .NET 9 -->
    <RunAOTCompilation>true</RunAOTCompilation>
    <!-- Disabled for now, see https://github.com/dotnet/runtime/issues/101135 -->
    <AndroidEnableProfiledAot>false</AndroidEnableProfiledAot>
    <AndroidStripILAfterAOT>true</AndroidStripILAfterAOT>
    <EnableLLVM>false</EnableLLVM> <!-- Almost works, but no WebSocket connection: https://github.com/dotnet/runtime/issues/104599 -->

    <!-- Runtime -->
    <!-- Unnecessary:
    <RuntimeIdentifier>android-arm64</RuntimeIdentifier>
    -->
    <!-- Has no effect, because android-env.txt contains MONO_GC_PARAMS
    <AndroidEnableSGenConcurrent>false</AndroidEnableSGenConcurrent>
    -->
    <!-- Has no effect:
    <AndroidGenerateJniMarshalMethods>true</AndroidGenerateJniMarshalMethods>
    -->
    <!-- Fails with No implementation found for void crc6444c698770736d3d5.MainApplication.n_OnAppForegrounded()
    <AndroidEnableMarshalMethods>true</AndroidEnableMarshalMethods >
    -->
    <!-- On preloading:
    1. There are 250 assemblies (bundled), so preloading assemblies hurts the startup.
       The delay isn't shown in our internal stats, coz it happens before any code runs,
       but it's percievable - maybe 300ms or so. Thus preloading all assemblies isn't
       a good option.
    3. Preloading AOT-d assemblies adds a delay as well, but since the amount of
       PGO AOT code is much smaller, this delay isn't quite percievable.
       When AOT code is preloaded, the startup delay is measurably smaller, but
       not by a lot - maybe 50ms or so.
    3. We know for sure that not everything we use on startup gets into AOT profiles.
       E.g. .mibc profiles are recorded with tracing, which definitely skips a
       decent part of calls. Funny enough, it's the same with .aprof profiles,
       which are supposed to be perfect.
    4. Overall, the best settings are:
       - AndroidEnablePreloadAssemblies = False // don't preload MSIL code
       - AndroidAotEnableLazyLoad = False // preload AOT code, though True might make sense here w/ larger AOT
       The default settings for release builds are also:
       - AndroidEnablePreloadAssemblies = False
       - AndroidAotEnableLazyLoad = True
    5. We stick to (True, False) for now to address possible ANR case casued by mono_loader_lock
       - this adds maybe 100-150ms or so to startup time.
    -->
    <AndroidEnablePreloadAssemblies>True</AndroidEnablePreloadAssemblies>
    <AndroidAotEnableLazyLoad>False</AndroidAotEnableLazyLoad>
  </PropertyGroup>

  <!--
  AndroidEnablePreloadAssemblies=True doesn't work without the workaround below,
  See https://github.com/dotnet/android/issues/8141
  -->
  <PropertyGroup Condition="$(TargetFramework.Contains('-android')) and '$(Configuration)' == 'Release'">
    <_AfterAddStaticResources>
      $(_AfterAddStaticResources);
      ForcePreloadAssemblies;
    </_AfterAddStaticResources>
  </PropertyGroup>
  <Target Name="ForcePreloadAssemblies">
    <PropertyGroup>
      <_AndroidEnablePreloadAssembliesDefault>True</_AndroidEnablePreloadAssembliesDefault>
    </PropertyGroup>
  </Target>

  <!-- Android: Profile-guided AOT profiles -->
  <PropertyGroup Condition="$(TargetFramework.Contains('-android'))">
    <!--
    These two profiles are different, we can include none, any of them, or both.
    Using both seems to be the most efficient option in .NET 7.
    -->
    <MauiUseDefaultAotProfile>false</MauiUseDefaultAotProfile>
    <AndroidUseDefaultAotProfile>false</AndroidUseDefaultAotProfile>
  </PropertyGroup>
  <ItemGroup Condition="$(TargetFramework.Contains('-android')) and '$(Configuration)' == 'Release' and !$(IsProfilingEnabled)">
    <!--
    // .aprof profile (recorded with IsProfilingEnabled) - doesn't work well:
    <AndroidAotProfile Include="$(MSBuildThisFileDirectory)/_Profiling/android.aprof" />
    // And this causes crash on startup:
    <AndroidAotProfile Include="$(MSBuildThisFileDirectory)/_Profiling/maui-blazor.aotprofile" />
    // And .mibc profiles (recorded with IsTracingEnabled & converted to .mibc) don't work anyway:
    <AndroidMibcProfile Include="$(MSBuildThisFileDirectory)/_Profiling/android.mibc" />
    -->
  </ItemGroup>

  <!-- Android: AOT profiling mode -->
  <PropertyGroup Condition="$(IsProfilingEnabled) and $(TargetFramework.Contains('-android'))">
    <AndroidEnableProfiler>true</AndroidEnableProfiler>
    <AndroidEmbedProfilers>aot</AndroidEmbedProfilers>
    <AndroidAotProfilerPort>9999</AndroidAotProfilerPort>
    <AndroidAotCustomProfilePath>$(MSBuildThisFileDirectory)/_Profiling/android.aprof</AndroidAotCustomProfilePath>
    <!-- Turn off AOT & JIT compilation -->
    <PublishTrimmed>false</PublishTrimmed>
    <UseInterpreter>false</UseInterpreter>
    <AndroidUseInterpreter>false</AndroidUseInterpreter>
    <RunAOTCompilation>false</RunAOTCompilation>
    <AndroidEnableProfiledAot>false</AndroidEnableProfiledAot>
    <AndroidStripILAfterAOT>false</AndroidStripILAfterAOT>
    <EnableLLVM>false</EnableLLVM>
    <AndroidEnablePreloadAssemblies>false</AndroidEnablePreloadAssemblies>
  </PropertyGroup>
  <ItemGroup Condition="$(IsProfilingEnabled) and $(TargetFramework.Contains('-android'))">
    <PackageReference Include="Mono.AotProfiler.Android" />
  </ItemGroup>
  <!-- Android: Tracing mode -->
  <PropertyGroup Condition="$(IsTracingEnabled) and $(TargetFramework.Contains('-android')) and '$(Configuration)' == 'Debug'">
    <CopyLocalLockFileAssemblies>true</CopyLocalLockFileAssemblies> <!-- Required to produce .mibc -->
    <AndroidEnableProfiler>true</AndroidEnableProfiler>
    <AndroidEnableProfiledAot>false</AndroidEnableProfiledAot>
    <AndroidUseDefaultAotProfile>false</AndroidUseDefaultAotProfile>
    <MauiUseDefaultAotProfile>false</MauiUseDefaultAotProfile>
  </PropertyGroup>
  <ItemGroup Condition="$(IsTracingEnabled) and $(TargetFramework.Contains('-android')) and '$(Configuration)' == 'Debug'">
    <AndroidEnvironment Include="android-tracing-env.txt" />
  </ItemGroup>
  <ItemGroup Condition="$(IsTracingEnabled) and $(TargetFramework.Contains('-android')) and '$(Configuration)' == 'Debug'">
    <PackageReference Include="Mono.Profiler.Android" />
  </ItemGroup>

  <!-- iOS build properties -->

  <!-- iOS: Both Debug & Release configurations -->
  <PropertyGroup Condition="$(TargetFramework.Contains('-ios'))">
    <IntermediateOutputPath>..\..\..\artifacts\out</IntermediateOutputPath>
    <UseShortFileNames>True</UseShortFileNames>
    <CodesignEntitlements>Platforms\iOS\Entitlements.plist</CodesignEntitlements>
    <!-- Performance-related -->
    <EnableSGenConc>False</EnableSGenConc>
    <UseNativeHttpHandler>true</UseNativeHttpHandler>

    <!-- Required by https://github.com/AdamEssenmacher/GoogleApisForiOSComponents?tab=readme-ov-file#firebase-crashlytics -->
    <_ExportSymbolsExplicitly>false</_ExportSymbolsExplicitly>

    <!--  TODO: can be removed after migrating to 9.0  -->
    <DynamicCodeSupport>true</DynamicCodeSupport>
  </PropertyGroup>

  <!-- iOS: Debug configuration -->
  <PropertyGroup Condition="'$(Configuration)|$(TargetFramework)|$(Platform)'=='Debug|net9.0-ios|AnyCPU'">
    <CreatePackage>false</CreatePackage>
    <CodesignProvision>VS: chat.actual.dev.app Development</CodesignProvision>
    <CodesignKey>iPhone Developer</CodesignKey>
    <ProvisioningType>automatic</ProvisioningType>
    <MtouchLink>SdkOnly</MtouchLink>
  </PropertyGroup>

  <!-- iOS: Release configuration -->
  <PropertyGroup Condition="'$(Configuration)|$(TargetFramework)|$(Platform)'=='Release|net9.0-ios|AnyCPU'">
    <RuntimeIdentifier>ios-arm64</RuntimeIdentifier>
    <CodesignProvision Condition="'$(IsDevMaui)' == 'true'">App Store Dev</CodesignProvision>
    <CodesignProvision Condition="'$(IsDevMaui)' != 'true'">App Store 2</CodesignProvision>
    <CodesignKey>Apple Distribution: Actual Chat Inc. (M287G8G83F)</CodesignKey>
    <ArchiveOnBuild>true</ArchiveOnBuild>
    <MtouchLink>SdkOnly</MtouchLink>
    <UseInterpreter>true</UseInterpreter>
    <!--<MTouchInterpreter>-ActualChat,ActualChat.Chat.Contracts,ActualChat.Users.Contracts,ActualChat.Contacts.Contracts,ActualLab.Interception</MTouchInterpreter>-->
    <CreatePackage>false</CreatePackage>
  </PropertyGroup>

  <!-- Resources -->

  <ItemGroup>
    <!-- App Icon -->
    <MauiIcon Include="Resources\AppIcon\appicon.svg" />

    <!-- Splash Screen -->
    <MauiSplashScreen Include="Resources\Splash\splashscreen.svg" Color="#0036A3" BaseSize="200,200" />

    <!-- Images: none -->
    <MauiImage Remove="Resources\Images\**" />
    <MauiImage Include="Resources\Splash\splashscreen.svg" />
    <MauiXaml Remove="Resources\Images\**" />
    <EmbeddedResource Remove="Resources\Images\**" />

    <!-- Custom Fonts -->
    <MauiFont Include="Resources\Fonts\*" />
  </ItemGroup>

  <!-- Platform-specific files to compile -->

  <!-- NOT Andoid -->
  <ItemGroup Condition="$(TargetFramework.Contains('-android')) != true">
    <Compile Remove="**\**\*.Android.cs" />
    <None Include="**\**\*.Android.cs" Exclude="$(DefaultItemExcludes);$(DefaultExcludesInProjectFolder)" />
    <Compile Remove="**\Android\**\*.cs" />
    <None Include="**\Android\**\*.cs" Exclude="$(DefaultItemExcludes);$(DefaultExcludesInProjectFolder)" />
    <None Remove="GoogleService-Info.plist" />
    <Compile Remove="Resources\Images\**" />
    <None Remove="Resources\Images\**" />
    <None Remove="android.nettrace" />
    <None Remove="android.etlx" />
    <None Remove="android.etlx" />
  </ItemGroup>
  <!-- Android -->
  <ItemGroup Condition="'$(IsDevMaui)' == 'true' AND $(TargetFramework.Contains('-android'))">
    <GoogleServicesJson Include="Platforms\Android\Resources\google-services.json.dev" Link="Platforms\Android\Resources\google-services.json" />
  </ItemGroup>
  <ItemGroup Condition="'$(IsDevMaui)' != 'true' AND $(TargetFramework.Contains('-android'))">
    <GoogleServicesJson Include="Platforms\Android\Resources\google-services.json.prod" Link="Platforms\Android\Resources\google-services.json" />
  </ItemGroup>

  <!-- NOT iOS and NOT Mac Catalyst -->
  <ItemGroup Condition="$(TargetFramework.StartsWith('net9.0-ios')) != true AND $(TargetFramework.StartsWith('net9.0-maccatalyst')) != true">
    <Compile Remove="**\**\*.MaciOS.cs" />
    <None Include="**\**\*.MaciOS.cs" Exclude="$(DefaultItemExcludes);$(DefaultExcludesInProjectFolder)" />
    <Compile Remove="**\MaciOS\**\*.cs" />
    <None Include="**\MaciOS\**\*.cs" Exclude="$(DefaultItemExcludes);$(DefaultExcludesInProjectFolder)" />
  </ItemGroup>

  <!-- NOT iOS -->
  <ItemGroup Condition="$(TargetFramework.Contains('-ios')) != true">
    <Compile Remove="**\**\*.iOS.cs" />
    <None Include="**\**\*.iOS.cs" Exclude="$(DefaultItemExcludes);$(DefaultExcludesInProjectFolder)" />
    <Compile Remove="**\iOS\**\*.cs" />
    <None Include="**\iOS\**\*.cs" Exclude="$(DefaultItemExcludes);$(DefaultExcludesInProjectFolder)" />
  </ItemGroup>
  <!-- iOS -->
  <ItemGroup Condition="'$(IsDevMaui)' == 'true' AND $(TargetFramework.Contains('-ios'))">
    <BundleResource Include="Platforms\iOS\GoogleService-Info.plist.dev" Link="GoogleService-Info.plist" />
  </ItemGroup>
  <ItemGroup Condition="'$(IsDevMaui)' != 'true' AND $(TargetFramework.Contains('-ios'))">
    <BundleResource Include="Platforms\iOS\GoogleService-Info.plist.prod" Link="GoogleService-Info.plist" />
  </ItemGroup>

  <!-- NOT MacCatalyst -->
  <ItemGroup Condition="$(TargetFramework.Contains('-maccatalyst')) != true">
    <Compile Remove="**\**\*.MacCatalyst.cs" />
    <None Include="**\**\*.MacCatalyst.cs" Exclude="$(DefaultItemExcludes);$(DefaultExcludesInProjectFolder)" />
    <Compile Remove="**\MacCatalyst\**\*.cs" />
    <None Include="**\MacCatalyst\**\*.cs" Exclude="$(DefaultItemExcludes);$(DefaultExcludesInProjectFolder)" />
  </ItemGroup>

  <!-- NOT Windows -->
  <ItemGroup Condition="$(TargetFramework.Contains('-windows')) != true">
    <Compile Remove="**\*.Windows.cs" />
    <None Include="**\*.Windows.cs" Exclude="$(DefaultItemExcludes);$(DefaultExcludesInProjectFolder)" />
    <Compile Remove="**\Windows\**\*.cs" />
    <None Include="**\Windows\**\*.cs" Exclude="$(DefaultItemExcludes);$(DefaultExcludesInProjectFolder)" />
  </ItemGroup>
  <!-- Windows -->
  <ItemGroup Condition="$(TargetFramework.Contains('-windows')) != true">
    <Content Include="Platforms\Windows\Assets\**\*.*" />
  </ItemGroup>

  <ItemGroup>
    <!--
      MAUI msbuild tasks doesn't work with
      <Content Include="..\UI.Blazor.Host\wwwroot\**\*.*" Link="wwwroot\%(RecursiveDir)%(Filename)%(Extension)" />
      so we copy dist files from webpack build
      issue: [Web Workers API doesn't work](https://github.com/MicrosoftEdge/WebView2Feedback/issues/2296)
     -->
    <Watch Include="wwwroot\dist\**" />
  </ItemGroup>

  <ItemGroup>
    <Content Remove="appsettings.Development.json" />
    <Content Remove="appsettings.json" />
    <Content Remove="Platforms\Android\Resources\google-services.json.dev" />
    <Content Remove="Platforms\Android\Resources\google-services.json.prod" />
    <Content Remove="Resources\Images\**" />
    <Content Remove="wwwroot\dist\images\webonly\**" />
    <None Remove="wwwroot\dist\images\webonly\**" />
  </ItemGroup>

  <Target Name="UpdateBundleHash" AfterTargets="Build">
    <PropertyGroup>
      <InputFile>$(MSBuildThisFileDirectory)\wwwroot\index.htm</InputFile>
      <OutputFile>$(MSBuildThisFileDirectory)\wwwroot\index.html</OutputFile>
      <ArtifactVersion>$(Version)-$([System.DateTime]::UtcNow.Ticks.ToString("X").Substring(7))</ArtifactVersion>
    </PropertyGroup>
    <WriteLinesToFile File="$(OutputFile)" Lines="$([System.IO.File]::ReadAllText($(InputFile)).Replace('.js&quot; a','.js?v=$(ArtifactVersion)&quot; a').Replace('.css&quot; r','.css?v=$(ArtifactVersion)&quot; r').Replace('.wasm&quot; a','.wasm?v=$(ArtifactVersion)&quot; a'))" Overwrite="true" />

    <Message Importance="High" Text="$(ArtifactVersion)" />
  </Target>

  <Target Name="CopyServiseWorkerToTheRoot" AfterTargets="Build">
    <PropertyGroup>
      <InputFile>$(MSBuildThisFileDirectory)\wwwroot\dist\sw.js</InputFile>
      <OutputFile>$(MSBuildThisFileDirectory)\wwwroot\sw.js</OutputFile>
    </PropertyGroup>
    <WriteLinesToFile File="$(OutputFile)" Lines="$([System.IO.File]::ReadAllText($(InputFile)))" Overwrite="true" />

    <Message Importance="High" Text="Service Worker has been copied." />
  </Target>

  <!-- Target needed until LinkWithSwiftSystemLibraries makes it into the SDK: https://github.com/xamarin/xamarin-macios/pull/20463 -->
  <Target Name="LinkWithSwift" DependsOnTargets="_ParseBundlerArguments;_DetectSdkLocations" BeforeTargets="_LinkNativeExecutable">
    <PropertyGroup>
      <_SwiftPlatform Condition="$(RuntimeIdentifier.StartsWith('iossimulator-'))">iphonesimulator</_SwiftPlatform>
      <_SwiftPlatform Condition="$(RuntimeIdentifier.StartsWith('ios-'))">iphoneos</_SwiftPlatform>
    </PropertyGroup>
    <ItemGroup>
      <_CustomLinkFlags Include="-L" />
      <_CustomLinkFlags Include="/usr/lib/swift" />
      <_CustomLinkFlags Include="-L" />
      <_CustomLinkFlags Include="$(_SdkDevPath)/Toolchains/XcodeDefault.xctoolchain/usr/lib/swift/$(_SwiftPlatform)" />
      <_CustomLinkFlags Include="-Wl,-rpath" />
      <_CustomLinkFlags Include="-Wl,/usr/lib/swift" />
    </ItemGroup>
  </Target>

</Project>
