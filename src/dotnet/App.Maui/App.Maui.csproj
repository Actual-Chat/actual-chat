<Project Sdk="Microsoft.NET.Sdk.Razor">

  <PropertyGroup>
    <TargetFrameworks>net8.0-android;net8.0-ios;net8.0-maccatalyst</TargetFrameworks>
    <TargetFrameworks Condition="$([MSBuild]::IsOSPlatform('windows'))">$(TargetFrameworks);net8.0-windows10.0.22000.0</TargetFrameworks>
    <OutputType>Exe</OutputType>
    <OutputPath>$(RepoRoot)artifacts\app\</OutputPath>
    <AssemblyName>$(BaseName)</AssemblyName>
    <RootNamespace>$(BaseName).$(MSBuildProjectName)</RootNamespace>
    <UseMaui>true</UseMaui>
    <SingleProject>true</SingleProject>
    <!--
    <ImplicitUsings>enable</ImplicitUsings>
    -->
    <EnableDefaultCssItems>false</EnableDefaultCssItems>
    <InvariantGlobalization>true</InvariantGlobalization>
    <!--
    <EnablePreviewMsixTooling>true</EnablePreviewMsixTooling>
    -->

    <!-- Display name -->
    <ApplicationTitle>Actual Chat</ApplicationTitle>
    <appname>actual.chat</appname>

    <!-- App Identifier -->
    <ApplicationId>chat.actual.app</ApplicationId>
    <ApplicationIdGuid>7AC72B49-8FEA-45AB-B7B8-C32719677E9D</ApplicationIdGuid>

    <!-- Required for C# Hot Reload -->
    <UseInterpreter Condition="'$(Configuration)' == 'Debug'">True</UseInterpreter>

    <TargetPlatformVersion Condition="$(TargetFramework.Contains('-ios'))">16.4</TargetPlatformVersion>
    <SupportedOSPlatformVersion Condition="$(TargetFramework.Contains('-ios'))">16.4</SupportedOSPlatformVersion>
    <SupportedOSPlatformVersion Condition="$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'maccatalyst'">14.0</SupportedOSPlatformVersion>
    <SupportedOSPlatformVersion Condition="$(TargetFramework.Contains('-android'))">33.0</SupportedOSPlatformVersion>
    <SupportedOSPlatformVersion Condition="$(TargetFramework.Contains('-windows'))">10.0.17763.0</SupportedOSPlatformVersion>
    <TargetPlatformMinVersion Condition="$(TargetFramework.Contains('-windows'))">10.0.17763.0</TargetPlatformMinVersion>

    <AppendTargetFrameworkToOutputPath>true</AppendTargetFrameworkToOutputPath>
    <AppendRuntimeIdentifierToOutputPath>true</AppendRuntimeIdentifierToOutputPath>
    <IsPublishable>true</IsPublishable>
    <Configurations>Release;Debug</Configurations>
    <UseMauiNuGets>false</UseMauiNuGets>
    <SkipValidateMauiImplicitPackageReferences>true</SkipValidateMauiImplicitPackageReferences>
  </PropertyGroup>

  <!-- Here we can alter either app is build to connect to dev or prod environment -->
  <!-- Comment property group below to build an app connecting to prod -->
  <PropertyGroup Condition="'$(IsDevMaui)' == ''">
    <IsDevMaui>true</IsDevMaui>
  </PropertyGroup>
  <PropertyGroup Condition="'$(IsDevMaui)' == 'true'">
    <DefineConstants>$(DefineConstants);IS_DEV_MAUI</DefineConstants>
    <!-- Display name -->
    <ApplicationTitle>Actual Chat (Dev)</ApplicationTitle>
    <!-- App Identifier -->
    <ApplicationId>chat.actual.dev.app</ApplicationId>
  </PropertyGroup>
  <PropertyGroup Condition="'$(IsDevMaui)' != 'true'">
  </PropertyGroup>

  <PropertyGroup>
    <FixedEnvironment Condition="'$(FixedEnvironment)' == ''" />
    <EnforceCodeStyleInBuild>True</EnforceCodeStyleInBuild>
    <AnalysisLevel>preview</AnalysisLevel>
  </PropertyGroup>
  <PropertyGroup Condition="'$(FixedEnvironment)' == 'Production'">
    <DefineConstants>$(DefineConstants);IS_FIXED_ENVIRONMENT_PRODUCTION</DefineConstants>
  </PropertyGroup>

  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>

  <!-- Project references -->

  <ItemGroup>
    <ProjectReference Include="..\UI.Blazor.App\UI.Blazor.App.csproj" />
  </ItemGroup>

  <!-- Package references -->

  <ItemGroup>
    <PackageReference Include="Microsoft.Maui.Controls" />
    <PackageReference Include="Microsoft.Maui.Controls.Compatibility" />
    <PackageReference Remove="Microsoft.SourceLink.GitHub" />
    <!-- This seems weird, but w/o this line MSBuild concludes the version is 1.0.0! -->
    <PackageReference Include="banditoth.MAUI.DeviceId" />
    <PackageReference Include="Microsoft.Extensions.Logging.Abstractions" VersionOverride="$(MicrosoftExtensionsVersion)" />
    <PackageReference Include="Sentry.Serilog" />
    <PackageReference Include="Sentry.Extensions.Logging" />
    <PackageReference Include="Serilog" />
    <PackageReference Include="Serilog.Extensions.Logging" />
    <PackageReference Include="sqlite-net-pcl" />
    <!--
      An extra package to use SQLite on MAUI:
      https://learn.microsoft.com/en-us/dotnet/maui/data-cloud/database-sqlite?view=net-maui-7.0#install-sqlitepclrawbundle_green -->
    <PackageReference Include="SQLitePCLRaw.bundle_green" />
  </ItemGroup>

  <!-- Platform-specific package references -->

  <ItemGroup Condition="$(TargetFramework.Contains('-android'))">
    <PackageReference Include="Xamarin.Firebase.Messaging" />
    <PackageReference Include="Xamarin.GooglePlayServices.Auth" />
    <PackageReference Include="Xamarin.GooglePlayServices.CroNet" />
    <PackageReference Include="Xamarin.Google.Dagger" />
    <PackageReference Include="Xamarin.Twilio.AudioSwitch" />
    <PackageReference Include="Serilog.Sinks.Xamarin" />
    <PackageReference Condition="'$(Configuration)' == 'Debug'" Include="Mono.AotProfiler.Android" />
  </ItemGroup>
  <ItemGroup Condition="$(TargetFramework.Contains('-ios'))">
    <PackageReference Include="Plugin.Firebase.CloudMessaging" />
    <PackageReference Include="Serilog.Sinks.Xamarin" />
    <PackageReference Include="Xamarin.Build.Download" />
  </ItemGroup>
  <ItemGroup Condition="$(TargetFramework.Contains('-windows'))">
    <PackageReference Include="Serilog.Sinks.Debug" />
    <PackageReference Include="Serilog.Sinks.File" />
  </ItemGroup>

  <!--
  <PropertyGroup Condition="$(TargetFramework.Contains('-windows')) and '$(Configuration)' == 'Release'">
  -->
  <!--
  <PropertyGroup Condition="$(TargetFramework.Contains('-windows'))">
    <GenerateAppxPackageOnBuild>true</GenerateAppxPackageOnBuild>
    <AppxPackageSigningEnabled>true</AppxPackageSigningEnabled>
    <PackageCertificateThumbprint>0BFF799D82CC03E61A65584D31D800924149453A</PackageCertificateThumbprint>
  </PropertyGroup>
  -->

  <!-- Common iOS and Android build properties -->

  <PropertyGroup Condition="$(TargetFramework.Contains('-android')) or $(TargetFramework.Contains('-ios'))">
    <!-- Trimmer settings -->
    <EnableUnsafeBinaryFormatterSerialization>false</EnableUnsafeBinaryFormatterSerialization>
    <EnableUnsafeUTF7Encoding>false</EnableUnsafeUTF7Encoding>
    <HttpActivityPropagationSupport>false</HttpActivityPropagationSupport>
    <MetadataUpdaterSupport>false</MetadataUpdaterSupport>
    <EventSourceSupport>false</EventSourceSupport>
    <!-- This instructs trimmer to remove managed HTTP handler -->
    <UseNativeHttpHandler>true</UseNativeHttpHandler>
  </PropertyGroup>

  <!-- Android build properties -->

  <PropertyGroup Condition="$(TargetFramework.Contains('-android'))">
    <AndroidKeyStore>True</AndroidKeyStore>
    <AndroidSigningKeyStore>myapp.keystore</AndroidSigningKeyStore>
    <AndroidSigningKeyAlias>key</AndroidSigningKeyAlias>
    <AndroidSigningKeyPass>password</AndroidSigningKeyPass>
    <AndroidSigningStorePass>password</AndroidSigningStorePass>
    <AndroidUseNegotiateAuthentication>false</AndroidUseNegotiateAuthentication>
    <!-- Performance-related -->
    <!-- Doesn't seem to impact the startup time w/ AOT -->
    <AndroidUseInterpreter>false</AndroidUseInterpreter>
    <!-- true: -50-100ms + makes the the startup time more stable -->
    <AndroidEnableSGenConcurrent>true</AndroidEnableSGenConcurrent>
    <!-- true: -150ms -->
    <AndroidEnablePreloadAssemblies>true</AndroidEnablePreloadAssemblies>
    <AndroidEnableSGenConcurrent>false</AndroidEnableSGenConcurrent>
  </PropertyGroup>

  <PropertyGroup Condition="$(TargetFramework.Contains('-android')) and '$(Configuration)' == 'Debug'">
    <EmbedAssembliesIntoApk>False</EmbedAssembliesIntoApk>
  </PropertyGroup>

  <PropertyGroup Condition="$(TargetFramework.Contains('-android')) and '$(Configuration)' == 'Release'">
    <EnableLLVM>false</EnableLLVM>
    <AndroidDexTool>d8</AndroidDexTool>
    <AndroidLinkTool>r8</AndroidLinkTool>
    <!-- Trimming -->
    <PublishTrimmed>true</PublishTrimmed>
    <TrimMode>partial</TrimMode>
    <!-- <DebuggerSupport>false</DebuggerSupport> -->
  </PropertyGroup>
  <ItemGroup>
    <TrimmerRootAssembly Include="ActualChat" />
  </ItemGroup>

  <!--
  Android AOT settings & AOT profile
  -->
  <PropertyGroup Condition="$(TargetFramework.Contains('-android')) and '$(Configuration)' == 'Release'">
    <RunAOTCompilation>true</RunAOTCompilation>
    <AndroidEnableProfiledAot>true</AndroidEnableProfiledAot>
    <!-- false: -100ms or so to startup time -->
    <AndroidAotEnableLazyLoad>false</AndroidAotEnableLazyLoad>
  </PropertyGroup>

  <PropertyGroup Condition="$(TargetFramework.Contains('-android')) and '$(Configuration)' == 'Release'">
    <!--
    These two profiles are different, we can include none, any of them, or both.
    Using both seems to be the most efficient option.
    -->
    <MauiUseDefaultAotProfile>true</MauiUseDefaultAotProfile>
    <AndroidUseDefaultAotProfile>true</AndroidUseDefaultAotProfile>
  </PropertyGroup>

  <ItemGroup Condition="$(TargetFramework.Contains('-android')) and '$(Configuration)' == 'Release'">
    <!-- Somehow this just makes things worse
    <AndroidAotProfile Include="$(MSBuildThisFileDirectory)app-exc.aotprofile" />
    <AndroidAotProfile Include="$(MSBuildThisFileDirectory)app-inc.aotprofile" />
    -->
  </ItemGroup>

  <!-- Uncomment to profile Android app -->

  <!--
  <PropertyGroup Condition="$(TargetFramework.Contains('-android')) and '$(Configuration)' == 'Debug'">
    <AndroidEnableProfiler>true</AndroidEnableProfiler>
  </PropertyGroup>
  <ItemGroup Condition="$(TargetFramework.Contains('-android')) and '$(Configuration)' == 'Debug'">
    <AndroidEnvironment Include="diagnostics-env.txt" />
  </ItemGroup>
  -->

  <!-- iOS build properties -->

  <PropertyGroup Condition="$(TargetFramework.Contains('-ios'))">
    <IntermediateOutputPath>..\..\..\artifacts\out</IntermediateOutputPath>
    <UseShortFileNames>True</UseShortFileNames>
    <CodesignEntitlements>Platforms\iOS\Entitlements.plist</CodesignEntitlements>
    <!-- Performance-related -->
    <EnableSGenConc>False</EnableSGenConc>
  </PropertyGroup>

  <PropertyGroup Condition="'$(Configuration)|$(TargetFramework)|$(Platform)'=='Debug|net8.0-ios|AnyCPU'">
    <CreatePackage>false</CreatePackage>
    <CodesignProvision>VS: chat.actual.dev.app Development</CodesignProvision>
    <CodesignKey>iPhone Developer</CodesignKey>
    <ProvisioningType>automatic</ProvisioningType>
    <MtouchLink>SdkOnly</MtouchLink>
  </PropertyGroup>

  <PropertyGroup Condition="'$(Configuration)|$(TargetFramework)|$(Platform)'=='Release|net8.0-ios|AnyCPU'">
    <RuntimeIdentifier>ios-arm64</RuntimeIdentifier>
    <CodesignProvision Condition="'$(IsDevMaui)' == 'true'">App Store Dev</CodesignProvision>
    <CodesignProvision Condition="'$(IsDevMaui)' != 'true'">App Store 2</CodesignProvision>
    <CodesignKey>Apple Distribution: Actual Chat Inc. (M287G8G83F)</CodesignKey>
    <ArchiveOnBuild>true</ArchiveOnBuild>
    <MtouchLink>SdkOnly</MtouchLink>
    <UseInterpreter>true</UseInterpreter>
    <!--<MTouchInterpreter>-ActualChat,ActualChat.Chat.Contracts,ActualChat.Users.Contracts,ActualChat.Contacts.Contracts,Stl.Interception</MTouchInterpreter>-->
    <CreatePackage>false</CreatePackage>
  </PropertyGroup>

  <!-- Resources -->

  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <!-- App Icon -->
    <MauiIcon Include="Resources\AppIcon\appicon.svg" />

    <!-- Splash Screen -->
    <MauiSplashScreen Include="Resources\Splash\splashscreen.svg" Color="#0036A3" />

    <!-- Images -->
    <MauiImage Include="Resources\Images\*" />

    <!-- Custom Fonts -->
    <MauiFont Include="Resources\Fonts\*" />
    <MauiImage Remove="Resources\Images\**" />
  </ItemGroup>

  <!-- Platform-specific files to compile -->

  <!-- Android -->
  <ItemGroup Condition="$(TargetFramework.Contains('-android')) != true">
    <Compile Remove="**\**\*.Android.cs" />
    <None Include="**\**\*.Android.cs" Exclude="$(DefaultItemExcludes);$(DefaultExcludesInProjectFolder)" />
    <Compile Remove="**\Android\**\*.cs" />
    <None Include="**\Android\**\*.cs" Exclude="$(DefaultItemExcludes);$(DefaultExcludesInProjectFolder)" />
    <None Remove="GoogleService-Info.plist" />
    <Compile Remove="Resources\Images\**" />
    <None Remove="Resources\Images\**" />
  </ItemGroup>

  <!-- Both iOS and Mac Catalyst -->
  <ItemGroup Condition="$(TargetFramework.Contains('-ios')) != true AND $(TargetFramework.Contains('-maccatalyst')) != true">
    <Compile Remove="**\**\*.MaciOS.cs" />
    <None Include="**\**\*.MaciOS.cs" Exclude="$(DefaultItemExcludes);$(DefaultExcludesInProjectFolder)" />
    <Compile Remove="**\MaciOS\**\*.cs" />
    <None Include="**\MaciOS\**\*.cs" Exclude="$(DefaultItemExcludes);$(DefaultExcludesInProjectFolder)" />
  </ItemGroup>

  <!-- iOS -->
  <ItemGroup Condition="$(TargetFramework.Contains('-ios')) != true">
    <Compile Remove="**\**\*.iOS.cs" />
    <None Include="**\**\*.iOS.cs" Exclude="$(DefaultItemExcludes);$(DefaultExcludesInProjectFolder)" />
    <Compile Remove="**\iOS\**\*.cs" />
    <None Include="**\iOS\**\*.cs" Exclude="$(DefaultItemExcludes);$(DefaultExcludesInProjectFolder)" />
  </ItemGroup>

  <!-- Mac Catalyst -->
  <ItemGroup Condition="$(TargetFramework.Contains('-maccatalyst')) != true">
    <Compile Remove="**\**\*.MacCatalyst.cs" />
    <None Include="**\**\*.MacCatalyst.cs" Exclude="$(DefaultItemExcludes);$(DefaultExcludesInProjectFolder)" />
    <Compile Remove="**\MacCatalyst\**\*.cs" />
    <None Include="**\MacCatalyst\**\*.cs" Exclude="$(DefaultItemExcludes);$(DefaultExcludesInProjectFolder)" />
  </ItemGroup>

  <!-- Windows -->
  <ItemGroup Condition="$(TargetFramework.Contains('-windows')) != true">
    <Compile Remove="**\*.Windows.cs" />
    <None Include="**\*.Windows.cs" Exclude="$(DefaultItemExcludes);$(DefaultExcludesInProjectFolder)" />
    <Compile Remove="**\Windows\**\*.cs" />
    <None Include="**\Windows\**\*.cs" Exclude="$(DefaultItemExcludes);$(DefaultExcludesInProjectFolder)" />
  </ItemGroup>

  <ItemGroup>
    <!--
      MAUI msbuild tasks doesn't work with
      <Content Include="..\UI.Blazor.Host\wwwroot\**\*.*" Link="wwwroot\%(RecursiveDir)%(Filename)%(Extension)" />
      so we copy dist files from webpack build
      issue: [Web Workers API doesn't work](https://github.com/MicrosoftEdge/WebView2Feedback/issues/2296)
     -->
    <Watch Include="wwwroot\dist\**" />
  </ItemGroup>

  <ItemGroup>
    <Content Remove="appsettings.Development.json" />
    <Content Remove="appsettings.json" />
    <Content Remove="Platforms\Android\Resources\google-services.json.dev" />
    <Content Remove="Platforms\Android\Resources\google-services.json.prod" />
    <Content Remove="Resources\Images\**" />
    <Content Remove="wwwroot\dist\images\webonly\**" />
    <None Remove="wwwroot\dist\images\webonly\**" />
  </ItemGroup>

  <ItemGroup Condition="'$(IsDevMaui)' == 'true' AND $(TargetFramework.Contains('-android'))">
    <GoogleServicesJson Include="Platforms\Android\Resources\google-services.json.dev" Link="Platforms\Android\Resources\google-services.json" />
  </ItemGroup>
  <ItemGroup Condition="'$(IsDevMaui)' != 'true' AND $(TargetFramework.Contains('-android'))">
    <GoogleServicesJson Include="Platforms\Android\Resources\google-services.json.prod" Link="Platforms\Android\Resources\google-services.json" />
  </ItemGroup>

  <ItemGroup Condition="'$(IsDevMaui)' == 'true' AND $(TargetFramework.Contains('-ios'))">
    <BundleResource Include="Platforms\iOS\GoogleService-Info.plist.dev" Link="GoogleService-Info.plist" />
  </ItemGroup>
  <ItemGroup Condition="'$(IsDevMaui)' != 'true' AND $(TargetFramework.Contains('-ios'))">
    <BundleResource Include="Platforms\iOS\GoogleService-Info.plist.prod" Link="GoogleService-Info.plist" />
  </ItemGroup>

  <ItemGroup>
    <ProguardConfiguration Include="proguard.cfg" />
  </ItemGroup>

  <ItemGroup>
    <EmbeddedResource Remove="Resources\Images\**" />
  </ItemGroup>

  <ItemGroup>
    <MauiXaml Remove="Resources\Images\**" />
  </ItemGroup>

  <ItemGroup>
    <Content Include="Platforms\Windows\Assets\**\*.*" />
  </ItemGroup>

  <Target Name="UpdateBundleHash" AfterTargets="Build">
    <PropertyGroup>
      <InputFile>$(MSBuildThisFileDirectory)\wwwroot\index.htm</InputFile>
      <OutputFile>$(MSBuildThisFileDirectory)\wwwroot\index.html</OutputFile>
      <ArtifactVersion>$(Version)-$([System.DateTime]::UtcNow.Ticks.ToString("X").Substring(7))</ArtifactVersion>
    </PropertyGroup>
    <WriteLinesToFile File="$(OutputFile)" Lines="$([System.IO.File]::ReadAllText($(InputFile)).Replace('.js&quot; a','.js?v=$(ArtifactVersion)&quot; a').Replace('.css&quot; r','.css?v=$(ArtifactVersion)&quot; r').Replace('.wasm&quot; a','.wasm?v=$(ArtifactVersion)&quot; a'))" Overwrite="true" />

    <Message Importance="High" Text="$(ArtifactVersion)" />
  </Target>

  <Target Name="CopyServiseWorkerToTheRoot" AfterTargets="Build">
    <PropertyGroup>
      <InputFile>$(MSBuildThisFileDirectory)\wwwroot\dist\sw.js</InputFile>
      <OutputFile>$(MSBuildThisFileDirectory)\wwwroot\sw.js</OutputFile>
    </PropertyGroup>
    <WriteLinesToFile File="$(OutputFile)" Lines="$([System.IO.File]::ReadAllText($(InputFile)))" Overwrite="true" />

    <Message Importance="High" Text="Service Worker has been copied." />
  </Target>

</Project>
