@page "/"
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@namespace ActualChat.App.Server.Pages
@using ActualChat.Hosting
@using ActualChat.Security
@using ActualChat.UI.Blazor.App
@using ActualChat.UI.Blazor.Services
@using ActualLab.Fusion.Server.Authentication
@using ActualLab.Fusion.Server.Endpoints
@using ActualLab.Generators

@inject HostInfo HostInfo
@inject ServerAuthHelper ServerAuthHelper
@inject ISessionResolver SessionResolver
@inject IServiceProvider Services
@inject UrlMapper UrlMapper
@inject IWebHostEnvironment Env
@{
    var cancellationToken = HttpContext.RequestAborted;
    var (session, isNewSession) = await HttpContext.Authenticate(ServerAuthHelper, cancellationToken);
    SessionResolver.Session = session;
    if (isNewSession)
        HttpContext.Response.Cookies.Delete(BlazorModeEndpoint.Cookie.Name!);
    var authSchemas = await ServerAuthHelper.GetSchemas(HttpContext);
    var isBlazorServer = isNewSession || BlazorModeEndpoint.IsBlazorServer(HttpContext);
    var isCloseWindowRequest = ServerAuthHelper.IsCloseWindowRequest(HttpContext, out var closeWindowFlowName);
    var blazorMaxReconnectRetries = 0; // 100_000_000;
    var blazorScriptSuffix = HostInfo.IsDevelopmentInstance ? "" : HostHelper.GetBlazorScriptSuffix();
    var isLocal = HostInfo.BaseUrlKind == BaseUrlKind.Local;
    Layout = null;
    var nonceGenerator = RandomStringGenerator.Default;
    var startupNonce = nonceGenerator.Next(12);
    var blazorReloadNonce = nonceGenerator.Next(12);
    var showOverlayNonce = nonceGenerator.Next(12);
    var closeLoginNonce = nonceGenerator.Next(12);
    // unsafe-eval is required for 'eval-source-map' to debug during local development
    var unsafeEval = isLocal ? "'unsafe-eval'" : "'wasm-unsafe-eval'";
    var connectLocalhost = Env.IsDevelopment() ? "ws://localhost:* wss://localhost:*" : "";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8"/>
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no"/>
    <meta http-equiv="Content-Security-Policy" content="
        default-src 'self';
        img-src 'self'
                https://*.actual.chat
                https://*.local.actual.chat
                https://*.dev.actual.chat
                https://*.stg.local.actual.chat
                https://*.dicebear.com
                https://*.boringavatars.com/
                https://i.ytimg.com
                blob: data:;
        media-src 'self'
                  https://*.actual.chat
                  https://*.local.actual.chat
                  https://*.dev.actual.chat
                  https://*.stg.actual.chat
                  blob: data:;
        style-src 'self' 'unsafe-inline';
        frame-src https://www.youtube.com/;
        object-src 'none';
        script-src 'self'
                   @unsafeEval
                   'nonce-@startupNonce'
                   'nonce-@blazorReloadNonce'
                   'nonce-@showOverlayNonce'
                   'nonce-@closeLoginNonce'
                   'sha256-IWFoCSRBx0i01sF31ty8kSeDtD8PRi/efpTSg/fumWo='
                   'sha256-zU2GIxfpzdHVMmYxjdLyOs4r4XWtc9oFoEFrwbxzdQg='
                   https://www.youtube.com/iframe_api
                   https://www.youtube.com/s/player/;
        connect-src 'self'
                    @connectLocalhost
                    https://actual.chat
                    https://*.actual.chat
                    https://*.dicebear.com
                    https://*.ingest.sentry.io
                    https://firebaseinstallations.googleapis.com
                    https://fcmregistrations.googleapis.com;
        upgrade-insecure-requests;
        " />
    <link rel="icon" href="/favicon.svg">
    <link rel="mask-icon" href="/safari-pinned-tab.svg" color="#0036a3">
    <link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png">
    <link rel="manifest" href="/manifest.json">
    <meta name="msapplication-TileColor" content="#0036a3">
    <meta name="theme-color" content="#444444">
    <title>Actual Chat</title>
    <base href="~/"/>

    @{
        var title = "Actual Chat: The New Voice of Everyday Communication";
        var description =
            "We fuse real-time audio, live transcription, and AI assistance to let you communicate with utmost efficiency. " +
            "Reply 5x faster, read for quick context, defer without fear of losing clarity, " +
            "and connect more frequently to deepen ties with those you cherish most â€” all free from the stress of traditional calls.";
        var image = UrlMapper.BaseUrl + "actual-chat-site-preview.jpg";
    }

    @* Essential Meta Tags *@
    <meta name="description" content="@description">

    @* Open Graph Tags *@
    <meta property="og:title" content="@title" />
    <meta property="og:description" content="@description" />
    <meta property="og:image" content="@image" />
    <meta property="og:url" content="@(UrlMapper.BaseUrl)" />
    <meta property="og:type" content="website" />
    <meta property="og:site_name" content="Actual Chat" />
    <meta property="og:locale" content="en_US" />

    @* Twitter Cards (they can be beneficial too) *@
    <meta name="twitter:card" content="summary_large_image">
    <meta name="twitter:title" content="@title">
    <meta name="twitter:description" content="@description">
    <meta name="twitter:image" content="@image">

    @* The version of icon.woff2 must match the version in icons.css! *@
    <link rel="preload" href="/dist/fonts/icon.woff2?t=1713790771278" as="font" crossorigin />
    <link rel="preload" href="/dist/fonts/TT-Commons-Pro-Regular.woff2" as="font" crossorigin />
    <link rel="preload" href="/dist/fonts/TT-Commons-Pro-Medium.woff2" as="font" crossorigin />
    <link rel="preload" href="/dist/fonts/TT-Commons-Pro-DemiBold.woff2" as="font" crossorigin />
    <link rel="prefetch" href="/dist/fonts/TT-Commons-Pro-Light.woff2" as="font" crossorigin />
    <link rel="prefetch" href="/dist/onDeviceAwakeWorker.js" as="worker" asp-append-version="true" crossorigin />
    <link rel="prefetch" href="/dist/opusDecoderWorker.js" as="worker" asp-append-version="true" crossorigin />
    <link rel="prefetch" href="/dist/opusEncoderWorker.js" as="worker" asp-append-version="true" crossorigin />
    <link rel="prefetch" href="/dist/warmUpWorklet.js" as="audioworklet" asp-append-version="true" crossorigin />
    <link rel="prefetch" href="/dist/vadWorker.js" as="worker" asp-append-version="true" crossorigin />
    <link rel="prefetch" href="/dist/feederWorklet.js" as="audioworklet" asp-append-version="true" crossorigin />
    <link rel="prefetch" href="/dist/opusEncoderWorklet.js" as="audioworklet" asp-append-version="true" crossorigin />
    <link rel="prefetch" href="/dist/vadWorklet.js" as="audioworklet" asp-append-version="true" crossorigin />
    <link rel="prefetch" href="/dist/wasm/codec.wasm" as="fetch" asp-append-version="true" crossorigin />
    <link rel="prefetch" href="/dist/wasm/webrtc-vad.wasm" as="fetch" asp-append-version="true" crossorigin />
@*
    <link rel="prefetch" href="/dist/wasm/vad.bin" as="fetch" crossorigin />
    <link rel="prefetch" href="/dist/wasm/soxr_wasm.wasm" as="fetch" asp-append-version="true" crossorigin />
    <link rel="prefetch" href="/dist/wasm/ort-wasm.wasm" as="fetch" asp-append-version="true" crossorigin />
    <link rel="prefetch" href="/dist/wasm/ort-wasm-simd.wasm" as="fetch" asp-append-version="true" crossorigin />
    <link rel="prefetch" href="/dist/wasm/ort-wasm-threaded.wasm" as="fetch" asp-append-version="true" crossorigin />
    <link rel="prefetch" href="/dist/wasm/ort-wasm-simd-threaded.wasm" as="fetch" asp-append-version="true" crossorigin />
    *@
    <link href="/dist/bundle.css" rel="stylesheet" asp-append-version="true"/>
    <script src="_content/ActualLab.Fusion.Blazor.Authentication/scripts/fusionAuth.js" asp-append-version="true"></script>
    <script nonce="@startupNonce">
        history.scrollRestoration = "manual";
        window.FusionAuth.schemas = "@authSchemas";
        window.App = {
            environment: '@(HostInfo.Environment.Value)',
            postMessage: function (data) {
                throw Error("Internal error: App.postMessage is available only in mobile apps.");
            },
            whenBundleReady: null,
            markBundleReady: function() { },
            isBundleReady: async function() {
                if (!window.App.whenBundleReady)
                    return false;

                await window.App.whenBundleReady;
                return true;
            },
            browserInit: async function(apiVersion, baseUri, sessionHash, browserInfoBackendRef, appKind) {
                await window.App.whenBundleReady;
                await window.ui.BrowserInit.init(apiVersion, baseUri, sessionHash, browserInfoBackendRef, appKind);
            },
            getAuthSchemas: function () {
                return window.FusionAuth.schemas;
            },
        };
        window.App.whenBundleReady = new Promise((resolve, _) => {
            window.App.markBundleReady = resolve;
        });
    </script>
    <script async src="/dist/bundle.js" asp-append-version="true"></script>
    @if (isBlazorServer) {
        <component type="typeof(Microsoft.AspNetCore.Components.Web.HeadOutlet)" render-mode="ServerPrerendered"/>
    }
</head>

<body class="app-web @(isBlazorServer ? "app-server" : "app-wasm")" style="background-color: #0036A3">

@if (!isBlazorServer && !isCloseWindowRequest) {
    <div id="web-splash" class="loading-overlay"></div>
    <script nonce="@showOverlayNonce">
        @* We use script here to make sure this overlay isn't used as content image by crawlers *@
        const overlay = document.getElementById('web-splash');
        if (overlay) {
          overlay.innerHTML = `
            <div class="c-content">
                <img draggable="false" src="/dist/images/splashscreen.svg" alt="Loading...">
                <div class="progress">
                    <div class="progress-value"></div>
                </div>
            </div>
          `;
        }
    </script>
}

@if (isCloseWindowRequest) {
    <script nonce="@closeLoginNonce">
        setTimeout(function () {
            window.open('','_self').close();
        }, 500)
    </script>
    <div class="fusion-close" data-flow-name="@(closeWindowFlowName)">
        <div class="c-content">
            <img draggable="false" src="/dist/images/landing/checkmark-checked.svg" alt="Checked">
            <div class="c-title">
                <span>@(closeWindowFlowName)</span>
                <span>completed.</span>
            </div>
            <div class="c-footer">
                <span>You can close this window/tab now.</span>
            </div>
        </div>
    </div>
} else {
    <app id="app" class="flex flex-col h-full">
        @{
            var appComponentType = typeof(WasmApp);
            var renderMode = RenderMode.WebAssembly;
            var sessionToken = "";
            if (isBlazorServer) {
                appComponentType = typeof(ServerApp);
                renderMode = RenderMode.Server;
                var isPrerendering = isBlazorServer && isNewSession;
                if (isPrerendering) {
                    var renderModeSelector = Services.GetRequiredService<RenderModeSelector>();
                    renderModeSelector.IsPrerendering = true;
                    renderMode = RenderMode.ServerPrerendered;
                }
                var secureTokens = Services.GetRequiredService<ISecureTokens>();
                sessionToken = (await secureTokens.CreateForSession(session, cancellationToken)).Token;
            }
            var parameters = new { SessionHash = session.Hash, SessionToken = sessionToken };
        }
        @(await Html.RenderComponentAsync(appComponentType, renderMode, parameters))
    </app>

    <!-- This block must go right after app, otherwise page content won't be blurred -->
    <div id="components-reconnect-modal"></div>
    <div id="blazor-error-ui"></div>
    <div id="app-connection-state" class="reconnect-overlay" style="display: none"></div>

    @if (isBlazorServer) {
        <script src="_framework/blazor.server@(blazorScriptSuffix).js" autostart="false"></script>
        <script nonce="@blazorReloadNonce">
            Blazor.start({
                reconnectionOptions: {
                     maxRetries: @(blazorMaxReconnectRetries),
                     retryIntervalMilliseconds: 2000,
                },
                loadBootResource: function (type, name, defaultUri, integrity) {
                    if (type !== 'dotnetjs' && location.hostname !== 'localhost' && type !== 'configuration' && integrity) {
                        return (async function () {
                            const hash = encodeURIComponent(integrity);
                            const response = await fetch(defaultUri+'?hash='+hash, { integrity: integrity });
                            if (!response.ok) {
                                throw new Error(response.statusText);
                            }
                            return response;
                        })();
                    }
                }
            });
        </script>
    }
    else {
        <script src="_framework/blazor.webassembly@(blazorScriptSuffix).js" autostart="false"></script>
        <script nonce="@blazorReloadNonce">
            Blazor.start({
                /*
               // WASM Profiling & Mono logging
               configureRuntime: dotnet => {
                   dotnet.withConfig({ browserProfilerOptions: {} });
                   dotnet.withEnvironmentVariable("MONO_LOG_LEVEL", "debug");
                   dotnet.withEnvironmentVariable("MONO_LOG_MASK", "gc");
               },
               */
                loadBootResource: function (type, name, defaultUri, integrity) {
                    if (type !== 'dotnetjs' && location.hostname !== 'localhost' && type !== 'configuration' && integrity) {
                        return (async function () {
                            const hash = encodeURIComponent(integrity);
                            const response = await fetch(defaultUri+'?hash='+hash, { integrity: integrity });
                            if (!response.ok) {
                                throw new Error(response.statusText);
                            }
                            return response;
                        })();
                    }
                }
            });

        </script>
    }
}
</body>
</html>
