@page "/"
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@namespace ActualChat.App.Server.Pages
@using ActualChat.App.Wasm
@using ActualChat.Hosting
@using ActualChat.Security
@using ActualChat.Web
@using Microsoft.AspNetCore.Mvc.TagHelpers
@using Stl.Fusion.Server.Authentication
@using Stl.Fusion.Server.Endpoints

@inject HostInfo HostInfo
@inject ServerAuthHelper ServerAuthHelper
@inject ISessionResolver SessionResolver
@inject ISecureTokens SecureTokens
@{
    var cancellationToken = HttpContext.RequestAborted;
    var session = await HttpContext.Authenticate(ServerAuthHelper, cancellationToken);
    SessionResolver.Session = session;
    var authSchemas = await ServerAuthHelper.GetSchemas(HttpContext);
    var isBlazorServer = BlazorModeEndpoint.IsBlazorServer(HttpContext);
    var isCloseWindowRequest = ServerAuthHelper.IsCloseWindowRequest(HttpContext, out var closeWindowFlowName);
    var blazorMaxReconnectRetries = 10_000_000;
    var blazorScriptsHash = GetBlazorScriptsHash();
    Layout = null;

    string GetBlazorScriptsHash()
    {
        if (HostInfo.IsDevelopmentInstance)
            return "";

        var version = typeof(ComponentsWebAssemblyApplicationBuilderExtensions)
            .Assembly
            .GetInformationalVersion()
            .RequireNonEmpty("Blazor extensions assembly version");
        return "." + version.GetSHA1HashCode().ToLower();
    }
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8"/>
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no"/>
    <link rel="icon" href="/favicon.svg">
    <link rel="mask-icon" href="/safari-pinned-tab.svg" color="#0036a3">
    <link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png">
    <link rel="manifest" href="/manifest.json">
    <meta name="msapplication-TileColor" content="#0036a3">
    <meta name="theme-color" content="#444444">
    <title>Actual Chat</title>
    <base href="~/"/>
    @* The version of icon.woff2 must match the version in icons.css! *@
    <link rel="preload" href="/dist/fonts/icon.woff2?t=1693840900262" as="font" crossorigin />
    <link rel="preload" href="/dist/fonts/TT-Commons-Pro-Regular.woff2" as="font" crossorigin />
    <link rel="preload" href="/dist/fonts/TT-Commons-Pro-Medium.woff2" as="font" crossorigin />
    <link rel="preload" href="/dist/fonts/TT-Commons-Pro-DemiBold.woff2" as="font" crossorigin />
    <link rel="prefetch" href="/dist/onDeviceAwakeWorker.js" as="worker" asp-append-version="true" crossorigin />
    <link rel="prefetch" href="/dist/opusDecoderWorker.js" as="worker" asp-append-version="true" crossorigin />
    <link rel="prefetch" href="/dist/opusEncoderWorker.js" as="worker" asp-append-version="true" crossorigin />
    <link rel="prefetch" href="/dist/warmUpWorklet.js" as="audioworklet" asp-append-version="true" crossorigin />
    <link rel="prefetch" href="/dist/vadWorker.js" as="worker" asp-append-version="true" crossorigin />
    <link rel="prefetch" href="/dist/feederWorklet.js" as="audioworklet" asp-append-version="true" crossorigin />
    <link rel="prefetch" href="/dist/opusEncoderWorklet.js" as="audioworklet" asp-append-version="true" crossorigin />
    <link rel="prefetch" href="/dist/vadWorklet.js" as="audioworklet" asp-append-version="true" crossorigin />
    <link rel="prefetch" href="/dist/wasm/codec.wasm" as="fetch" asp-append-version="true" crossorigin />
    <link rel="prefetch" href="/dist/wasm/webrtc-vad.wasm" as="fetch" asp-append-version="true" crossorigin />
    <link rel="prefetch" href="/dist/wasm/vad.bin" as="fetch" crossorigin />
    <link rel="prefetch" href="/dist/fonts/TT-Commons-Pro-Light.woff2" as="font" crossorigin />
    <link href="/dist/bundle.css" rel="stylesheet" asp-append-version="true"/>
    <script src="_content/Stl.Fusion.Blazor.Authentication/scripts/fusionAuth.js" asp-append-version="true"></script>
    <script>
        history.scrollRestoration = "manual";
        window.FusionAuth.schemas = "@authSchemas";
        window.App = {
            environment: '@(HostInfo.Environment.Value)',
            postMessage: function (data) {
                throw Error("Internal error: App.postMessage is available only in mobile apps.");
            },
            whenBundleReady: null,
            markBundleReady: function() { },
            browserInit: async function(apiVersion, baseUri, sessionHash, calls) {
                await window.App.whenBundleReady;
                await window.ui.BrowserInit.init(apiVersion, baseUri, sessionHash, calls);
            },
        };
        window.App.whenBundleReady = new Promise((resolve, _) => {
            window.App.markBundleReady = resolve;
        });
    </script>
    <script async src="/dist/bundle.js" asp-append-version="true"></script>
    @if (isBlazorServer) {
        <component type="typeof(Microsoft.AspNetCore.Components.Web.HeadOutlet)" render-mode="ServerPrerendered"/>
    }
</head>

<body class="app-web @(isBlazorServer ? "app-server" : "app-wasm")">

@if (!isBlazorServer && !isCloseWindowRequest) {
    <div id="until-ui-is-ready" class="loading-overlay hidden">
        <div class="c-box">
            <img draggable="false" src="/dist/images/landing/ac-icon-light.svg" alt="loading">
        </div>
        <div class="c-rotating-bg"></div>
    </div>
}

@if (isCloseWindowRequest) {
    <script>
        setTimeout(function () {
            window.open('','_self').close();
        }, 500)
    </script>
    <div class="fusion-close" data-flow-name="@(closeWindowFlowName)">
        <div class="c-content">
            <img draggable="false" src="/dist/images/landing/checkmark-checked.svg" alt="checked">
            <div class="c-title">
                <span>@(closeWindowFlowName)</span>
                <span>completed.</span>
            </div>
            <div class="c-footer">
                <span>You can close this window/tab now.</span>
            </div>
        </div>
    </div>
} else {
    <app id="app" class="flex flex-col h-full">
        @{
            var appComponentType = typeof(WasmApp);
            var renderMode = RenderMode.WebAssembly;
            var sessionToken = "";
            if (isBlazorServer) {
                appComponentType = typeof(ServerApp);
                renderMode = RenderMode.Server;
                sessionToken = (await SecureTokens.CreateForSession(session, cancellationToken)).Token;
            }
            var parameters = new { SessionHash = session.Hash, SessionToken = sessionToken };
        }
        @(await Html.RenderComponentAsync(appComponentType, renderMode, parameters))
    </app>

    <!-- This block must go right after app, otherwise page content won't be blurred -->
    <div id="components-reconnect-modal"></div>
    <div id="blazor-error-ui"></div>
    <div id="app-connection-state" class="reconnect-overlay" style="display: none">
        <div class="c-bg"></div>
        <div class="c-circle-blur"></div>
        <div class="c-circle">
            <img draggable="false" src="/dist/images/loading-cat.svg" alt="loading">
            <span class="c-text">Reconnecting...</span>
        </div>
    </div>

    @if (isBlazorServer) {
        <script src="_framework/blazor.server@(blazorScriptsHash).js" autostart="false"></script>
        <script>
            Blazor.start({
                reconnectionOptions: {
                     maxRetries: @(blazorMaxReconnectRetries),
                     retryIntervalMilliseconds: 3000,
                },
            });
            </script>
    }
    else {
        <script src="_framework/blazor.webassembly@(blazorScriptsHash).js"></script>
    }
}
</body>
</html>
