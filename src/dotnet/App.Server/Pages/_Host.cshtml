@page "/"
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@namespace ActualChat.App.Server.Pages
@using ActualChat.Hosting
@using Stl.Fusion.Server.Authentication
@using Stl.Fusion.Server.Controllers

@inject IServiceProvider Services
@inject ServerAuthHelper ServerAuthHelper
@inject HostInfo HostInfo
@{
    await ServerAuthHelper.UpdateAuthState(HttpContext);
    var authSchemas = await ServerAuthHelper.GetSchemas(HttpContext);
    var isServerSideBlazor = BlazorModeController.IsServerSideBlazor(HttpContext);
    var isCloseWindowRequest = ServerAuthHelper.IsCloseWindowRequest(HttpContext, out var closeWindowFlowName);
    var blazorMaxReconnectRetries = HostInfo.IsDevelopmentInstance ? 10_000_000 : 1_800; // 1h of retries
    var session = ServerAuthHelper.Session;
    var blazorUtilsVersion = GetBlazorJsVersion();
    Layout = null;
    // TODO: add HeadOutlet component (to edit <head>)
    // https://devblogs.microsoft.com/aspnet/asp-net-core-updates-in-net-6-preview-7/#modify-html-head-content-from-blazor-components

    string GetBlazorJsVersion()
    {
        if (HostInfo.IsDevelopmentInstance)
            return "";
        var version = typeof(ComponentsWebAssemblyApplicationBuilderExtensions).Assembly.GetInformationalVersion().RequireNonEmpty("blazor extensions assembly version");
        return $".{version.GetSHA1HashCode().ToLower()}";
    }
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8"/>
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no"/>
    <link rel="icon" href="/favicon.svg">
    <link rel="mask-icon" href="/safari-pinned-tab.svg" color="#0036a3">
    <link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png">
    <link rel="manifest" href="/manifest.json">
    <meta name="msapplication-TileColor" content="#0036a3">
    <meta name="theme-color" content="#444444">
    <title>Actual Chat</title>
    <base href="~/"/>
    <link href="/dist/bundle.css" rel="stylesheet"/>
    <script src="_content/Stl.Fusion.Blazor/scripts/fusionAuth.js"></script>
    <script>
        history.scrollRestoration = "manual";
        window.FusionAuth.schemas = "@authSchemas";
        window.App = {
            debug: true,
            baseUri: null,
            sessionHash: '@(session.Hash)',
            windowId: null,
            initPage: function (baseUri, sessionHash) {
                throw Error("Internal error: App.initPage is available only in mobile apps.");
            },
            postMessage: function (data) {
                throw Error("Internal error: App.postMessage is available only in mobile apps.");
            }
        }

        // Set App.windowId
        window.addEventListener("beforeunload", function (e) {
            let windowIds = JSON.parse(window.sessionStorage.windowIds ?? "[]");
            windowIds.push(window.App.windowId);
            window.sessionStorage.windowIds = JSON.stringify(windowIds);
            return null;
        });
        window.addEventListener("load", function (e) {
            let windowIds = JSON.parse(window.sessionStorage.windowIds ?? "[]");
            windowIds = windowIds.filter(function(value, i, a) { return value != null; });
            window.App.windowId = windowIds.pop();
            if (window.App.windowId == null)
                window.App.windowId = '@(session.Hash)-' + Math.random().toString(36).slice(2).substring(0, 6);
            else
                window.sessionStorage.windowIds = JSON.stringify(windowIds);
            return null;
        });
        // clear state in case page reload was invoked
        history.replaceState(null, /* ignored title */ '');
    </script>
</head>
<body>
<div id="blazor-error-ui" class="hidden fixed inset-x-0 md:inset-x-1/4 mt-16 mx-2" style="z-index: 100000;">
    <div class="flex w-full justify-center">
        <div class="flex flex-1 max-w-3xl bg-error rounded-md shadow-lg">
            <div class="bg-error w-16 text-error-toast-text rounded-l-md justify-center flex items-center">
                <i class="fa fa-2x fa-exclamation-triangle"></i>
            </div>
            <div class="h-full flex-1 flex border-error">
                <div class="flex-1 px-4 py-1 break-words">
                    <p class="text-error-toast-text font-bold text-lg">Error</p>
                    <p class="text-error-toast-text">
                        <environment include="Staging,Production">
                            An error has occurred. This application may no longer respond until reloaded.
                        </environment>
                        <environment include="Development">
                            An unhandled exception has occurred. See browser dev tools for details.
                        </environment>
                    </p>
                </div>
                <div class="flex-col grid items-center bg-error text-error-toast-text rounded-r-md p-2">
                    <div class="block dismiss cursor-pointer">
                        <svg xmlns="http://www.w3.org/2000/svg" viewBox="-4 -4 32 32" class="w-5 h-5 fill-current">
                            <path d="M23.954 21.03l-9.184-9.095 9.092-9.174-2.832-2.807-9.09 9.179-9.176-9.088-2.81 2.81 9.186 9.105-9.095 9.184 2.81 2.81 9.112-9.192 9.18 9.1z"/>
                        </svg>
                    </div>

                    <div class="block reload cursor-pointer mt-1">
                        <svg xmlns="http://www.w3.org/2000/svg" class="w-5 h-5 fill-current" viewBox="0 0 26 26">
                            <path d="M13.5 2c-5.621 0-10.211 4.443-10.475 10h-3.025l5 6.625 5-6.625h-2.975c.257-3.351 3.06-6 6.475-6 3.584 0 6.5 2.916 6.5 6.5s-2.916 6.5-6.5 6.5c-1.863 0-3.542-.793-4.728-2.053l-2.427 3.216c1.877 1.754 4.389 2.837 7.155 2.837 5.79 0 10.5-4.71 10.5-10.5s-4.71-10.5-10.5-10.5z"/>
                        </svg>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<div id="components-reconnect-modal">
    <div class="loading">
        <div class="loading-caption">Unable to connect to server. Reconnecting...</div>
        <div class="loading-progress-ring"></div>
    </div>
</div>

@if (isCloseWindowRequest) {
    <script>
    	setTimeout(function () {
    		window.close();
    	}, 500)
    </script>
    <div class="alert alert-primary">
    	@(closeWindowFlowName) completed, you can close this window.
    </div>
} else {
    <app id="app" class="flex flex-col h-full">
        @(await Html.RenderApp(Services, HttpContext))
        @* <component type="typeof(App)" render-mode="Server" /> *@
    </app>

    <script src="/dist/bundle.js"></script>
    @if (isServerSideBlazor) {
        <script src="_framework/blazor.server@(blazorUtilsVersion).js" autostart="false"></script>
        <script>
            (function () {
                async function attemptReload() {
                    try{
                        await fetch('');
                        location.reload();
                    }
                    catch{}
                }
                const observer = new MutationObserver((mutations, observer) => {
                    mutations.forEach(mutation => {
                        const classList = mutation.target.classList;
                        if (classList.contains('components-reconnect-rejected')) {
                            attemptReload();
                            window.setInterval(attemptReload, 2000);
                            observer.disconnect();
                        }
                    });
                });
                const reconnectModal = document.getElementById('components-reconnect-modal');
                if (reconnectModal !== null) {
                    observer.observe(reconnectModal, { attributes: true, subtree: true });
                }
            }());

            Blazor.start({
                reconnectionOptions: {
                     maxRetries: @(blazorMaxReconnectRetries),
                     retryIntervalMilliseconds: 2000,
                },
            });
            </script>
    }
    else {
        <script src="_framework/blazor.webassembly@(blazorUtilsVersion).js"></script>
    }

    <script>
        Blazor.registerCustomEventType('longpress', {
            browserEventName: 'long-press',
            createEventArgs: (event) => {
                const isTouchCapable = (('ontouchstart' in window)
                    || (navigator.MaxTouchPoints > 0)
                    || (navigator.msMaxTouchPoints > 0));
                if (!isTouchCapable)
                    event.preventDefault();
                return event;
            },
        });
    </script>
}
</body>
</html>
