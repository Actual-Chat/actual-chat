<Project Sdk="Microsoft.NET.Sdk.Web">

  <PropertyGroup>
    <IsPublishable>true</IsPublishable>
  </PropertyGroup>

  <!-- Runtime properties -->
  <PropertyGroup>
    <ServerGarbageCollection>true</ServerGarbageCollection>
    <InvariantGlobalization>true</InvariantGlobalization>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.AspNetCore.Components.WebAssembly.Server" />
    <PackageReference Include="Microsoft.AspNetCore.Mvc.NewtonsoftJson" />
    <PackageReference Include="Serilog.Extensions.Logging.File" />
    <PackageReference Include="Stl.Fusion.Server" />
    <PackageReference Include="Swashbuckle.AspNetCore" />
    <!-- Only for adjust Grpc.Core thread pool, for google transcriber & oltp exporter -->
    <PackageReference Include="Grpc.Core" />
    <PackageReference Include="OpenTelemetry" />
    <PackageReference Include="OpenTelemetry.Api" />
    <PackageReference Include="OpenTelemetry.Exporter.OpenTelemetryProtocol" />
    <PackageReference Include="OpenTelemetry.Exporter.Prometheus.AspNetCore" />
    <PackageReference Include="OpenTelemetry.Extensions.Hosting" />
    <PackageReference Include="OpenTelemetry.Instrumentation.AspNetCore" />
    <PackageReference Include="OpenTelemetry.Instrumentation.Http" />
    <PackageReference Include="OpenTelemetry.Instrumentation.GrpcNetClient" />
    <PackageReference Include="Npgsql.OpenTelemetry" />
    <PackageReference Include="Google.Cloud.AspNetCore.DataProtection.Storage" />
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="..\Core\Core.csproj" />
    <!-- You must reference migration projects here for services w/ DBs -->
    <ProjectReference Include="..\Chat.Service.Migration\Chat.Service.Migration.csproj" />
    <ProjectReference Include="..\Contacts.Service.Migration\Contacts.Service.Migration.csproj" />
    <ProjectReference Include="..\Feedback.Service.Migration\Feedback.Service.Migration.csproj" />
    <ProjectReference Include="..\Notification.Service.Migration\Notification.Service.Migration.csproj" />
    <ProjectReference Include="..\Invite.Service.Migration\Invite.Service.Migration.csproj" />
    <ProjectReference Include="..\Users.Service.Migration\Users.Service.Migration.csproj" />
    <ProjectReference Include="..\Media.Service.Migration\Media.Service.Migration.csproj" />
    <!-- And service projects for stateless / other services -->
    <ProjectReference Include="..\Audio.Service\Audio.Service.csproj" />
    <ProjectReference Include="..\MediaPlayback\MediaPlayback.csproj" />
    <ProjectReference Include="..\Transcription.Service\Transcription.Service.csproj" />
    <!-- But don't reference their clients! -->
    <ProjectReference Include="..\Web\Web.csproj" />
    <ProjectReference Include="..\App.Wasm\App.Wasm.csproj" />
  </ItemGroup>

  <ItemGroup>
    <Content Update="Pages\_Host.cshtml" CopyToOutputDirectory="PreserveNewest" />
    <None Include="$(ProjectDir)\Resources\**" CopyToOutputDirectory="PreserveNewest" LinkBase="Resources\" />
  </ItemGroup>

  <ItemGroup Label="dotnet watch">
    <Watch Include="appsettings*.json" />
    <Watch Include="wwwroot\dist\**" />
    <Watch Remove="wwwroot\**\*.map" />
    <Watch Remove="wwwroot\**\*.eot" />
    <Watch Remove="wwwroot\**\*.ttf" />
    <Watch Remove="wwwroot\**\*.woff" />
    <Watch Remove="wwwroot\**\*.woff2" />
  </ItemGroup>
  <!-- Copy Stl* pdb to the output folder -->
  <Target Name="_CopyNuGetPackagesPdbs" AfterTargets="ResolveReferences">
    <ItemGroup>
      <ReferenceCopyLocalPaths Include="@(ReferenceCopyLocalPaths->'%(RootDir)%(Directory)%(Filename).pdb')" Condition="'%(ReferenceCopyLocalPaths.NuGetPackageId)' != '' and $([System.String]::new('%(Filename)').StartsWith('Stl')) and Exists('%(RootDir)%(Directory)%(Filename).pdb')" />
    </ItemGroup>
  </Target>
</Project>
