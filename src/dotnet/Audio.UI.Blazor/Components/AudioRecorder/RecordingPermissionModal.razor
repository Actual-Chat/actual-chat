@namespace ActualChat.Audio.UI.Blazor.Components
@using ActualChat.Hosting
@using ActualChat.Audio.UI.Blazor.Services
@implements IModalView<RecordingPermissionModal.Model>
@{
    var isMauiApp = HostInfo.AppKind == AppKind.MauiApp;
}

<DialogFrame Class="menu-styled-modal">
    <Body>
        <div class="c-header flex-x items-center gap-x-4">
            <div class="header-icon">
                <img src="/dist/images/logo-white.svg" alt="logo" class="h-6">
            </div>
            <div class="text-title-1">No audio recording permission</div>
        </div>
        <div class="c-text">
            <p>
                Actual Chat requires microphone access permission to record and transcribe your voice messages.
            </p>
            @if (!isMauiApp) {
                <p>
                    If the permission request wasn't shown earlier, you need to open
                    <span class="text-primary">Browser Settings > Privacy or Security > Microphone</span>
                    and grant the permission there.
                </p>
            }
        </div>
    </Body>
    <Buttons>
        @if (isMauiApp) {
            <Button Class="btn-modal" Click="@OnCancelClick">Cancel</Button>
        }
        <Button Class="btn-modal btn-narrow" Click="@OnOkClick">Ok</Button>
    </Buttons>
</DialogFrame>

@code {
    [Inject] public HostInfo HostInfo { get; init; } = null!;
    [Inject] public IRecordingPermissionRequester RecordingPermissionRequester { get; init; } = null!;

    [CascadingParameter] public Modal Modal { get; set; } = null!;

    [Parameter] public Model ModalModel { get; set; } = null!;

    private void OnCancelClick()
        => Modal.Close();

    private async Task OnOkClick() {
        ModalModel.WasPermissionRequested = await RecordingPermissionRequester.TryRequest();
        Modal.Close();
    }

    // Nested types

    public sealed record Model {
        public bool WasPermissionRequested { get; set; }
    }
}
