@using ActualChat.UI.Blazor.Services
@using ActualChat.Audio.UI.Blazor.Services
@using ActualChat.Hosting
@namespace ActualChat.Audio.UI.Blazor.Components
@implements IModalView<RecordingTroubleshooterModal.Model>
@{
    GuideType type;
    @if (ModalModel.TestGuideType is { } testGuideType) {
        type = testGuideType;
    } else {
        if (ModalModel.IsUnknown) {
            type = GuideType.Unknown;
        }
        else if (HostInfo.HostKind.IsMauiApp()) {
            type = HostInfo.AppKind switch {
                AppKind.Ios => GuideType.IosApp,
                AppKind.Android => GuideType.AndroidApp,
                _ => GuideType.WebChrome,
            };
        } else {
            if (ScreenSize.IsNarrow()) {
                if (BrowserInfo.IsEdge) {
                    type = GuideType.MobileEdgeAndroid;
                } else if (BrowserInfo.IsWebKit)
                    type = GuideType.MobileSafariIos;
                else
                    type = GuideType.MobileChromeAndroid;
            } else {
                if (BrowserInfo.IsEdge) {
                    type = GuideType.WebEdge;
                } else if (BrowserInfo.IsWebKit)
                    type = GuideType.WebSafari;
                else
                    type = GuideType.WebChrome;
            }
        }
    }

    var title = type == GuideType.Unknown
        ? "Troubleshoot recording issues"
        : "Microphone access guide";
    var buttonTitle = RecordingPermissionRequester?.CanRequest ?? false
        ? "Settings"
        : "OK";
}

<DialogFrame
    Class="guide-modal"
    Title=@title
    HasCloseButton="true"
    NarrowViewSettings="@DialogFrameNarrowViewSettings.SubmitButton(OnOkClick, buttonTitle)">
    <Body>

    <FormBlock>
        @switch (type) {
            case GuideType.MobileSafariIos:
                <MobileSafariIosGuideContent/>
                break;
            case GuideType.WebEdge:
                <WebEdgeGuideContent/>
                break;
            case GuideType.WebSafari:
                <WebSafariGuideContent/>
                break;
            case GuideType.MobileChromeAndroid:
                <MobileChromeAndroidGuideContent/>
                break;
            case GuideType.MobileEdgeAndroid:
                <MobileEdgeAndroidGuideContent/>
                break;
            case GuideType.AndroidApp:
                <AndroidAppGuideContent/>
                break;
            case GuideType.IosApp:
                <IosAppGuideContent/>
                break;
            case GuideType.Unknown:
                <UnknownGuideContent/>
                break;
            default:
                <WebChromeGuideContent/>
                break;
        }

    </FormBlock>
    </Body>
    <Buttons>
        <Button Class="btn-modal" Click="OnOkClick">
            @buttonTitle
        </Button>
    </Buttons>
</DialogFrame>

@code {
    [Inject] private BrowserInfo BrowserInfo { get; init; } = null!;
    [Inject] private IRecordingPermissionRequester RecordingPermissionRequester { get; init; } = null!;
    [Inject] private HostInfo HostInfo { get; init; } = null!;

    [CascadingParameter] public ScreenSize ScreenSize { get; set; }
    [CascadingParameter] public Modal Modal { get; set; } = null!;

    [Parameter] public Model ModalModel { get; set; } = null!;

    private void OnOkClick()
        => Modal.Close();

    public sealed record Model(GuideType? TestGuideType = null, bool IsUnknown = false);
}
