@namespace ActualChat.Audio.UI.Blazor.Components
@inherits MixedStateComponent<bool, bool>
@using ActualChat.Users
@{
    var isRecording = IsRecordingState.Value;
}

<button class="audio-recorder-toggle @(isRecording ? "on" : "off") rounded-xl" @onclick="_ => IsRecordingState.Value = !isRecording" >
    <svg class="fill-current w-9 h-9 m-3.5" xmlns="http://www.w3.org/2000/svg" viewBox="-4 -4 32 32">
        <path d="M16 11c0 2.209-1.791 4-4 4s-4-1.791-4-4v-7c0-2.209 1.791-4 4-4s4 1.791 4 4v7zm4-2v2c0 4.418-3.582 8-8 8s-8-3.582-8-8v-2h2v2c0 3.309 2.691 6 6 6s6-2.691 6-6v-2h2zm-7 13v-2h-2v2h-4v2h10v-2h-4z"/>
    </svg>
</button>

@code {
    private bool _lastIsRecording;
    private bool? _lastActualIsRecording;
    private LanguageId? _lastLanguageId;

    [Inject] ILogger<AudioRecorderToggle> Log { get; init; } = null!;
    [Inject] private AudioRecorder AudioRecorder { get; init; } = null!;
    [Inject] private IChatUserSettings ChatUserSettings { get; init; } = null!;
    [Inject] private Session Session { get; init; } = null!;

    [Parameter] public string ChatId { get; set; } = "";
    [Parameter] public EventCallback<bool> Toggled { get; set; }

    public IMutableState<bool> IsRecordingState => MutableState;

    public override ValueTask DisposeAsync() {
        _ = AudioRecorder.StopRecording();
        return base.DisposeAsync();
    }

    protected override ComputedState<bool>.Options GetStateOptions()
        => new() { UpdateDelayer = UpdateDelayer.MinDelay };

    protected override async Task<bool> ComputeState(CancellationToken cancellationToken) {
        var settings = await ChatUserSettings.Get(Session, ChatId, cancellationToken).ConfigureAwait(true);
        var languageId = settings.LanguageOrDefault();
        var isLanguageChanged = _lastLanguageId.HasValue && languageId != _lastLanguageId;
        _lastLanguageId = languageId;

        var isRecording = await IsRecordingState.Use(cancellationToken).ConfigureAwait(true);
        var isRecordingChanged = isRecording != _lastIsRecording;
        _lastIsRecording = isRecording;
        if (isRecordingChanged) {
            using var _1 = ExecutionContextExt.SuppressFlow();
            _ = Toggled.InvokeAsync(isRecording);
        }

        var actualState = await AudioRecorder.State.Use(cancellationToken).ConfigureAwait(true);
        var actualIsRecording = actualState is { ChatId: var actualChatId } && actualChatId == ChatId;
        var actualIsRecordingChanged = _lastActualIsRecording.HasValue && actualIsRecording != _lastActualIsRecording;
        _lastActualIsRecording = actualIsRecording;

        if (isRecording == actualIsRecording) {
            if (isRecording && isLanguageChanged)
                UpdateActualIsRecording();
        } else {
            if (isRecordingChanged)
                UpdateActualIsRecording();
            else if (actualIsRecordingChanged)
                IsRecordingState.Value = actualIsRecording;
        }
        return actualIsRecording;

        void UpdateActualIsRecording() =>
            BackgroundTask.Run(async () => {
                if (actualState != null) {
                    // Recording is running - let's top it first;
                    var stopRecordingProcess = AudioRecorder.StopRecording();
                    await stopRecordingProcess.WhenCompleted.ConfigureAwait(false);
                }
                if (isRecording) {
                    // And start the recording if we must
                    var startRecordingProcess = AudioRecorder.StartRecording(ChatId, cancellationToken);
                    await startRecordingProcess.WhenCompleted.ConfigureAwait(false);
                }
            }, Log, "Failed to update recording state.", CancellationToken.None);
    }
}
