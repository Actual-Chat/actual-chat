@namespace ActualChat.Audio.UI.Blazor.Components
@inherits ComputedStateComponent<bool>
@using ActualChat.Users
@{
    var isRecording = State.ValueOrDefault;
}

<button class="@(_class ??= this.DefaultClass()) p-1"
        @onclick="_ => ToggleRecording()" >
    <svg class="fill-current w-8 h-8 @(isRecording ? "recording" : "not-recording")" xmlns="http://www.w3.org/2000/svg" viewBox="-4 -4 32 32">
        <path d="M16 11c0 2.209-1.791 4-4 4s-4-1.791-4-4v-7c0-2.209 1.791-4 4-4s4 1.791 4 4v7zm4-2v2c0 4.418-3.582 8-8 8s-8-3.582-8-8v-2h2v2c0 3.309 2.691 6 6 6s6-2.691 6-6v-2h2zm-7 13v-2h-2v2h-4v2h10v-2h-4z"/>
    </svg>
</button>

@code {
    private static string? _class;
    private LanguageId _latestLanguageId = LanguageId.Default;
    private bool _latestLanguageIdResolved;

    [Inject] private AudioRecorder AudioRecorder { get; set; } = null!;
    [Inject] private AudioRecorderState AudioRecorderState { get; set; } = null!;
    [Inject] private IChatUserSettings ChatUserSettings { get; init; } = null!;
    [Inject] private Session Session { get; init; } = null!;

    [Parameter]
    public string ChatId { get; set; } = "";
    [Parameter]
    public EventCallback<bool> RecordingStateChanged { get; set; }

    protected override async Task<bool> ComputeState(CancellationToken cancellationToken) {
        var toggleChatId = await AudioRecorderState.GetRecordingToggleChatId(cancellationToken).ConfigureAwait(true);
        var isRecording = toggleChatId == ChatId;
        if (!isRecording)
            return false;

        var settings = await ChatUserSettings.Get(Session, ChatId, cancellationToken).ConfigureAwait(true);
        var languageId = settings.LanguageOrDefault();
        if (_latestLanguageIdResolved && languageId != _latestLanguageId) {
            await ToggleRecording(cancellationToken).ConfigureAwait(true);
            await ToggleRecording(cancellationToken).ConfigureAwait(true);
        }
        _latestLanguageId = languageId;
        _latestLanguageIdResolved = true;
        return true;
    }

    private async Task ToggleRecording(CancellationToken cancellationToken = default) {
        using var _ = Computed.SuspendDependencyCapture();
        var toggleChatId = await AudioRecorderState.GetRecordingToggleChatId(cancellationToken).ConfigureAwait(true);
        var isRecording = toggleChatId == ChatId;
        if (!toggleChatId.IsEmpty) {
            var stopRecordingProcess = AudioRecorder.StopRecording();
            await stopRecordingProcess.WhenCompleted.ConfigureAwait(false);
        }
        if (!isRecording) {
            var startRecordingProcess = AudioRecorder.StartRecording(ChatId, cancellationToken);
            await startRecordingProcess.WhenCompleted.ConfigureAwait(false);
        }
    }
}
