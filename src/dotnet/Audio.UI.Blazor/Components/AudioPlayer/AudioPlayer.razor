@using System.Threading.Channels
@using Stl
@namespace ActualChat.Audio.UI.Blazor
@implements IAudioPlayerBackend
@inject IJSRuntime _js
@inject IAudioSourceStreamer _audioStreamer

@inject BlazorCircuitContext _circuitContext

@* <audio autoplay @ref="Ref"></audio> *@

@code {
    private CancellationTokenSource? _cancellationTokenSource;
    protected IJSObjectReference? JSComponentRef { get; set; }
    protected DotNetObjectReference<IAudioPlayerBackend>? ComponentRef { get; set; }

    // public ElementReference Ref { get; set; }

    [Parameter]
    public string StreamId { get; set; } = null!;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender) {
            ComponentRef = DotNetObjectReference.Create<IAudioPlayerBackend>(this);
            JSComponentRef = await _js.InvokeAsync<IJSObjectReference>($"{AudioBlazorUIModule.ImportName}.AudioPlayer.create", ComponentRef);
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        _cancellationTokenSource?.Cancel();
        _cancellationTokenSource = null;

        if (!_circuitContext.IsPrerendering && !StreamId.IsNullOrEmpty()) {
            _cancellationTokenSource = new CancellationTokenSource();
            var audioSource = await _audioStreamer.GetAudioSource(StreamId, _cancellationTokenSource.Token);
            _ = ReadAudio(audioSource, _cancellationTokenSource.Token);
        }
    }

    private Task AppendAudio(byte[] chunk)
    {
        if (JSComponentRef == null)
            return Task.CompletedTask;

        return JSComponentRef.InvokeVoidAsync("appendAudio", chunk).AsTask();
    }

    private async Task ReadAudio(AudioSource audioSource, CancellationToken cancellationToken)
    {
        try {
            var header = Convert.FromBase64String(audioSource.Format.CodecSettings);
            await AppendAudio(header);

            await foreach (var audioFrame in audioSource.Frames.WithCancellation(cancellationToken))
                await AppendAudio(audioFrame.Data.ToArray());
        }
        catch (ChannelClosedException) {
        }
        finally {
            // if (JSComponentRef != null)
            //     await JSComponentRef.InvokeVoidAsync("stop");
        }
    }


}
