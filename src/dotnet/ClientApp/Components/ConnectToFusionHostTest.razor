@namespace ActualChat.ClientApp
@using Stl.Fusion.Client.Internal
@using RestEase;

<h3>Connect to fusion host test:</h3>

@if(_isLoading) {
    <h4>Loading ***</h4>
}
else if (_error != null) {
    @*<WhenError Error="_error"/>*@
    <h4>Error: @_error</h4>
} else if (_user != null) {
    <h4>User id: @_user.Id</h4>
}

@code {
    private bool _isLoading = true;
    private Exception? _error;
    private User? _user;

    [Inject] private IAuth Auth { get; init; } = null!;
    [Inject] private Session Session { get; init; } = null!;
    [Inject] private IServiceProvider Services { get; init; } = null!;

    protected override async Task OnInitializedAsync()
    {
        using (var cts = new CancellationTokenSource(5000))
            try {
                var clientName = typeof(IAuthClientDef).FullName;
                var httpClientFactory = Services.GetRequiredService<IHttpClientFactory>();
            var httpClient = httpClientFactory.CreateClient(clientName);
            var client = new RestClient(httpClient) {
                RequestBodySerializer = Services.GetRequiredService<RequestBodySerializer>(),
                ResponseDeserializer = Services.GetRequiredService<ResponseDeserializer>()
            }.For<IAuthClientDef>();
            _user = await client.GetUser(Session, cts.Token).ConfigureAwait(true);
            //_user = await Auth.GetUser(Session, cts.Token).ConfigureAwait(true);
        }
        catch(Exception e) {
            _error = e;
        }
        _isLoading = false;
    }
}
