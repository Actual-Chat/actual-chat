@page "/test/auth"
@inherits ComputedStateComponent<AuthTestPage.Model>
@{
    var m = State.LatestNonErrorValue ?? Model.None;
    var error = State.Error;
    var usedAuthSchemas = m.User.Identities.Select(kv => kv.Key.Schema).ToHashSet();
    var unusedAuthSchemas = AuthSchemas.Where(p => !usedAuthSchemas.Contains(p.Name)).ToArray();
}

<MainHeader>Authentication Test Page</MainHeader>

@if (error != null) {
    <Error Title="Update error" Class="mb-3">@error.Message</Error>
}

<h3 class="section border-0">Session</h3>
<ul>
    <li><code>Session.Id</code>: <b><code>@Session.Id.Value</code></b></li>
    <li><code>SessionInfo</code>: <br/><pre>@(JsonFormatter.Format(m.SessionInfo!))</pre></li>
</ul>

<h3 class="section">User</h3>
<ul>
    <li><code>Id</code>: <b><code>@m.User.Id.Value</code></b></li>
    <li><code>Name</code>: <b><code>@m.User.Name</code></b></li>
    <li><code>Version</code>: <b><code>@m.User.Version.ToString()</code></b></li>
    <li><code>Account.IsAdmin</code>: <b><code>@m.Account.IsAdmin.ToString()</code></b></li>
    <li><code>Account.Version</code>: <b><code>@m.Account.Version.ToString()</code></b></li>
</ul>
<h4>Claims:</h4>
<ul>
    @foreach (var (key, value) in m.User.Claims) {
        <li><code>@key</code>: <b><code>@value</code></b></li>
    }
</ul>
<h4>Identities:</h4>
<ul>
    @foreach (var ((schema, schemaBoundId), _) in m.User.Identities) {
        <li><code>@schema</code>: <b><code>@schemaBoundId</code></b></li>
    }
</ul>

<h3 class="section">Account</h3>
<pre>@(JsonFormatter.Format(m.Account))</pre>

@if (m.Account.IsAdmin) {
    <div class="flex-x">
        <span>Status:</span>
        <Dropdown>
            <ButtonTemplate>
                <div class="px-2 inline-flex">
                    <span class="float-left text-secondary font-semibold chat-header-title">@m.Account.Status</span>
                </div>
            </ButtonTemplate>
            <MenuTemplate>
                <Menu Class="rounded-md border border-accent p-1 sm:right-8" ItemClass="text-left" Orientation="MenuOrientation.Vertical" IconPosition="MenuIconPosition.Right">
                    @foreach (var value in Enum.GetValues<AccountStatus>()) {
                        <MenuItem Title="@value.ToString()" Click="_ => OnStatusSelected(value)"></MenuItem>
                    }
                </Menu>
            </MenuTemplate>
        </Dropdown>
    </div>
}

@if (m.Sessions.Count != 0) {
    <h3 class="section">Sessions:</h3>
    <div>
        <table class="table table-sm">
            <thead>
            <tr>
                <th scope="col">SessionHash</th>
                <th scope="col">IP</th>
                <th scope="col">Browser</th>
                <th scope="col">Created</th>
                <th scope="col">Last Seen</th>
                <th scope="col">Version</th>
                <th scope="col"></th>
            </tr>
            </thead>
            <tbody>
            @foreach (var session in m.Sessions) {
                <tr @key="@session.SessionHash">
                    <td>@session.SessionHash</td>
                    <td>@session.IPAddress</td>
                    <td>@session.UserAgent</td>
                    <td>@session.Created</td>
                    <td>@session.LastSeen</td>
                    <td>@session.Version.ToString()</td>
                    <td>
                        @if (session.IsCurrent) {
                            <span>Current</span>
                        } else {
                            <Button Class="btn btn-sm" Click="_ => AuthHelper.Kick(Session, session.SessionHash)">Kick</Button>
                        }
                    </td>
                </tr>
            }
            </tbody>
        </table>
    </div>
}

@if (m.User.IsAuthenticated()) {
    <h3 class="section">Sign out</h3>
    <FormButtons IsEndAligned="false">
        <Button Click="_ => ClientAuth.SignOut()">Sign out</Button>
        <Button Click="_ => AuthHelper.SignOutEverywhere()">Sign out everywhere</Button>
        @if (unusedAuthSchemas.Length != 0) {
            <span> or add account: </span>
            @foreach (var (name, displayName) in unusedAuthSchemas) {
                <Button Click="_ => ClientAuth.SignIn(name)">@displayName</Button>
            }
        }
    </FormButtons>
} else {
    <h3 class="section">Sign in</h3>
    <SignInDropdown/>
}

@code {
    [Inject] private Session Session { get; init; } = null!;
    [Inject] private IAuth Auth { get; init; } = null!;
    [Inject] private ClientAuthHelper AuthHelper { get; init; } = null!;
    [Inject] private IClientAuth ClientAuth { get; init; } = null!;
    [Inject] private ILiveTime LiveTime { get; init; } = null!;
    [Inject] private NavigationManager Nav { get; init; } = null!;
    [Inject] private IAccounts Accounts { get; init; } = null!;
    [Inject] private UICommander Commander { get; init; } = null!;
    private (string Name, string DisplayName)[] AuthSchemas { get; set; } = Array.Empty<(string, string)>();

    protected override async Task OnInitializedAsync()
        => await LiveTime.WhenInitialized.ConfigureAwait(false);

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender) {
            // GetSchemas requires JS interop, so it can be called only at this point
            AuthSchemas = await ClientAuth.GetSchemas();
            StateHasChanged();
        }
    }

    protected override ComputedState<Model>.Options GetStateOptions()
        => new() { InitialValue = Model.None };

    protected override async Task<Model> ComputeState(CancellationToken cancellationToken) {
        var sessionInfo = await Auth.GetSessionInfo(Session, cancellationToken).ConfigureAwait(false);
        var account = await Accounts.Get(Session, cancellationToken).ConfigureAwait(false) ?? Account.Guest;
        var sessions = await Auth.GetUserSessions(Session, cancellationToken).ConfigureAwait(false);
        var sessionList = new List<SessionModel>();

        foreach (var session in sessions) {
            var model = new SessionModel {
                SessionHash = session.SessionHash,
                IPAddress = session.IPAddress,
                UserAgent = session.UserAgent,
                Created = await LiveTime.GetDeltaText(session.CreatedAt, cancellationToken).ConfigureAwait(false),
                LastSeen = await LiveTime.GetDeltaText(session.LastSeenAt, cancellationToken).ConfigureAwait(false),
                Version = session.Version,
                IsCurrent = Session.Hash == session.SessionHash,
            };
            sessionList.Add(model);
        }
        return new Model {
            SessionInfo = sessionInfo,
            Account = account,
            Sessions = sessionList.ToImmutableList(),
        };
    }

    private async Task OnStatusSelected(AccountStatus newStatus) {
        var account = await Accounts.Get(Session, default).Require();
        var updatedAccount = account with { Status = newStatus };
        await Commander.Run(new IAccounts.UpdateCommand(Session, updatedAccount));
    }

    public sealed record SessionModel
    {
        public string SessionHash { get; init; } = "";
        public string IPAddress { get; init; } = "";
        public string UserAgent { get; init; } = "";
        public string Created { get; init; } = "";
        public string LastSeen { get; init; } = "";
        public long Version { get; init; }
        public bool IsCurrent { get; init; }
    }

    public sealed record Model {
        public static Model None { get; } = new() { Account = Account.Guest };

        public SessionInfo? SessionInfo { get; init; }
        public Account Account { get; init; } = null!;
        public User User => Account.User;
        public ImmutableList<SessionModel> Sessions { get; init; } = ImmutableList<SessionModel>.Empty;
    }
}
