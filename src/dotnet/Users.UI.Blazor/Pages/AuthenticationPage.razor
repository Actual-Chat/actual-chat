@page "/test/auth"
@using UAParser
@inherits ComputedStateComponent<(User User, List<AuthenticationPage.SessionModel> Sessions)>

@{
    var state = State.LatestNonErrorValue;
    var error = State.Error;
    var user = state.User;
    var usedAuthSchemas = user.Identities.Select(kv => kv.Key.Schema).ToHashSet();
    var unusedAuthSchemas = AuthSchemas.Where(p => !usedAuthSchemas.Contains(p.Name)).ToArray();
}

<h1>Authentication</h1>

<WhenError Title="Update error:" Error="@error"/>

<div>
    <div>
        <div>Session properties:</div>
        <div>
            <ul>
                <li><code>Session.Id</code>: <b><code>@Session.Id</code></b></li>
            </ul>
        </div>

        <div>User properties:</div>
        <div>
            <ul>
                <li><code>User.IsAuthenticated</code>: <b><code>@user.IsAuthenticated</code></b></li>
                <li><code>User.Id</code>: <b><code>@user.Id</code></b></li>
                <li><code>User.Name</code>: <b><code>@user.Name</code></b></li>
                <li><code>User.Version</code>: <b><code>@user.Version</code></b></li>
            </ul>
            @if (user.IsAuthenticated) {
                <div class="card-subtitle">Claims:</div>
                <ul>
                    @foreach (var (key, value) in user.Claims) {
                        <li><code>@key</code>: <b><code>@value</code></b></li>
                    }
                </ul>
                <div class="card-subtitle">Identities:</div>
                <ul>
                    @foreach (var ((schema, schemaBoundId), _) in user.Identities) {
                        <li><code>@schema</code>: <b><code>@schemaBoundId</code></b></li>
                    }
                </ul>
            }
        </div>
        @if (user.IsAuthenticated && state.Sessions.Count != 0) {
            <div>Sessions:</div>
            <div>
                <table class="table table-sm">
                    <thead>
                    <tr>
                        <th scope="col">IP</th>
                        <th scope="col">Browser</th>
                        <th scope="col">Created</th>
                        <th scope="col">Last Seen</th>
                        <th scope="col">Version</th>
                        <th scope="col"></th>
                    </tr>
                    </thead>
                    <tbody>
                    @foreach (var session in state.Sessions) {
                        <tr @key="@session.Id">
                            <td>@session.IPAddress</td>
                            <td>@session.UserAgent</td>
                            <td>@session.Created</td>
                            <td>@session.LastSeen</td>
                            <td>@session.Version</td>
                            <td>
                                @if (session.IsCurrent) {
                                    <span>Current</span>
                                } else {
                                    <button type="button" class="btn btn-sm btn-danger"
                                            @onclick="_ => AuthHelper.SignOut(session.Id)">Kick</button>
                                }
                            </td>
                        </tr>
                    }
                    </tbody>
                </table>
            </div>
        }
    </div>
    <div>
        <AuthorizeView>
            <Authorized>
                    <button @onclick="_ => AuthHelper.SignOut()">Sign out</button>
                    <button @onclick="_ => AuthHelper.SignOutEverywhere()">Sign out everywhere</button>
                @if (unusedAuthSchemas.Length != 0) {
                    <span> or add account: </span>
                    @foreach (var (name, displayName) in unusedAuthSchemas) {
                        <button @onclick="_ => AuthHelper.SignIn(name)">@displayName</button>
                    }
                }
            </Authorized>
            <NotAuthorized>
                <SignInDropdown/>
            </NotAuthorized>
        </AuthorizeView>
    </div>
</div>

@code {
    private static readonly Parser Parser = Parser.GetDefault();

    [Inject] private Session Session { get; init; } = null!;
    [Inject] private IAuth Auth { get; init; } = null!;
    [Inject] private ClientAuthHelper AuthHelper { get; init; } = null!;
    [Inject] private IFusionTime FusionTime { get; init; } = null!;
    [Inject] private NavigationManager Nav { get; init; } = null!;
    private ConcurrentDictionary<string, UserAgent> UserAgentCache { get; } = new();
    private (string Name, string DisplayName)[] AuthSchemas { get; set; } = Array.Empty<(string, string)>();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender) {
            // GetSchemas requires JS interop, so it can be called only at this point
            AuthSchemas = await AuthHelper.GetSchemas();
            StateHasChanged();
        }
    }

    protected override ComputedState<(User User, List<SessionModel> Sessions)>.Options GetStateOptions()
        => new() { InitialOutput = (new(""), new List<SessionModel>()) };

    protected override async Task<(User, List<SessionModel>)> ComputeState(CancellationToken cancellationToken)
    {
        var user = await Auth.GetUser(Session, cancellationToken);
        var sessions = await Auth.GetUserSessions(Session, cancellationToken).ConfigureAwait(false);
        var result = new List<SessionModel>();

        foreach (var session in sessions) {
            var userAgent = UserAgentCache.GetOrAdd(session.UserAgent, ua => Parser.ParseUserAgent(ua));
            var model = new SessionModel() {
                Id = session.Id,
                IsCurrent = Session.Id == session.Id,
                IPAddress = session.IPAddress,
                UserAgent = $"{userAgent.Family} {userAgent.Major}.{userAgent.Minor}",
                Created = await FusionTime.GetMomentsAgo(session.CreatedAt),
                LastSeen = await FusionTime.GetMomentsAgo(session.LastSeenAt),
                Version = session.Version,
            };
            result.Add(model);
        }
        return (user, result);
    }

    public class SessionModel
    {
        public string Id { get; set; } = "";
        public string IPAddress { get; set; } = "";
        public string UserAgent { get; set; } = "";
        public string Created { get; set; } = "";
        public string LastSeen { get; set; } = "";
        public long Version { get; set; }
        public bool IsCurrent { get; set; }
    }
}
