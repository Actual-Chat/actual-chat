@using System.Text.Encodings.Web
@inherits ComputedStateComponent<UserAvatarsEditor.Model>
@{
    var items = State.LatestNonErrorValue.Items;
    var title = new MarkupString(Title);
}
<h3>@title</h3>
@if (items.Length == 0) {
    <p>Create a new Avatar</p>
}
<ul class="flex flex-wrap">
    <li class="group m-2">
        <UserAvatarTemplate Name="New Avatar">
            <ActionsTemplate>
                <button class="bg-accent px-8 py-2 mt-4 rounded-3xl text-secondary font-semibold hover:bg-primary" @onclick="OnAddNewAvatar">
                    Create New
                </button>
            </ActionsTemplate>
        </UserAvatarTemplate>
    </li>
    @foreach (var item in items) {
        <li class="group m-2">
            <div class="relative">
                <UserAvatar AvatarId="@item.AvatarId">
                    <ActionsTemplate>
                        <button class="bg-accent px-8 py-2 mt-4 rounded-3xl text-secondary font-semibold hover:bg-primary"
                                @onclick="@(() => EditAvatar(item.AvatarId))">Edit</button>
                    </ActionsTemplate>
                </UserAvatar>
                <div class="absolute top-0 right-0 mr-4 mt-2">
                    @if (item.IsSelected) {
                        <button type="button" title="Selected" @onclick="@(() => Select(""))">
                            <i class="fa fa-check fa-3x text-green-500" aria-hidden="true"></i>
                        </button>
                    } else {
                        <button type="button" title="Select" @onclick="@(() => Select(item.AvatarId))">
                            <i class="fa fa-check fa-2x text-gray-200 hover:scale-110 hover:text-green-500 transition duration-300 ease-in-out" aria-hidden="true"></i>
                        </button>
                    }
                </div>
            </div>
        </li>
    }
</ul>
<div>
    <button type="button" class="bg-blue-500 hover:bg-blue-700 text-white py-1 px-4 rounded ml-3"
                                @onclick="OnCancel">Cancel</button>
</div>

@code {
    public class Model {
        public Item[] Items { get; set; } = Array.Empty<Item>();
    }

    public class Item {
        public bool IsUserDefault { get; set; }
        public bool IsSelected { get; set; }
        public string AvatarId { get; set; } = "";
    }

    [Inject] IUserAvatars UserAvatars { get; set; } = null!;
    [Inject] IChatUserSettings ChatUserSettings { get; set; } = null!;
    [Inject] NavigationManager Nav { get; set; } = default!;
    [Inject] Session Session { get; set; } = null!;
    [Inject] UICommandRunner Cmd { get; set; } = null!;

    [Parameter]
    public string Title { get; set; } = "";
    [Parameter]
    public string ChatId { get; set; } = "";
    [Parameter]
    public Action? CancelRequested { get; set; } = default!;

    protected override ComputedState<Model>.Options GetStateOptions() {
        return new () { InitialValue = new ()};
    }

    protected override async Task<Model> ComputeState(CancellationToken cancellationToken) {
        var avatarIds = await UserAvatars.GetAvatarIds(Session, cancellationToken);
        var userDefaultAvatarId = await UserAvatars.GetDefaultAvatarId(Session, cancellationToken);
        string selectedAvatarId;
        if (string.IsNullOrEmpty(ChatId)) {
            selectedAvatarId = userDefaultAvatarId;
        } else {
            var chatUserSettings = await ChatUserSettings.Get(Session, ChatId, cancellationToken).ConfigureAwait(false);
            selectedAvatarId = chatUserSettings?.AvatarId ?? "";
        }
        return new Model {
            Items = avatarIds.Select(c => new Item {
                AvatarId = c,
                IsUserDefault = c == userDefaultAvatarId,
                IsSelected = c == selectedAvatarId
            }).ToArray()
        };
    }

    private async Task Select(string avatarId) {
        if (ChatId.IsNullOrEmpty()) {
            var command = new IUserAvatars.SetDefaultCommand(Session, avatarId);
            await Cmd.Run(command);
        } else {
            var chatUserSettings = await ChatUserSettings.Get(Session, ChatId, default).ConfigureAwait(false);
            chatUserSettings ??= new();
            chatUserSettings = chatUserSettings with { AvatarId = avatarId };
            var command = new IChatUserSettings.SetCommand(Session, ChatId, chatUserSettings);
            await Cmd.Run(command);
        }
    }

    private async Task OnAddNewAvatar() {
        var command = new IUserAvatars.CreateCommand(Session);
        await Cmd.Run(command);
    }

    private void EditAvatar(string avatarId) {
        var returnUrl = Nav.ToBaseRelativePath(Nav.Uri);
        var returnUrlEncoded = UrlEncoder.Default.Encode(returnUrl);
        Nav.NavigateTo("user/avatar/" + avatarId + "?returnUrl=" + returnUrlEncoded);
    }

    private void OnCancel() {
        CancelRequested?.Invoke();
    }
}
