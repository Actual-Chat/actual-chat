@using System.Text.Encodings.Web
@inherits ComputedStateComponent<UserAvatarsEditor.Model>
@{
    var items = State.LatestNonErrorValue.Items;
}

<ul class="flex flex-wrap gap-4">
    @foreach (var item in items) {
        <li class="group cursor-pointer" @onclick="@(() => EditAvatar(item.AvatarId))">
            <div class="relative">
                <div class="absolute top-0 right-0">
                    @{ var tag = item.IsActive ? "active" : item.IsDefault ? "default" : ""; }
                    @if (!tag.IsNullOrEmpty()) {
                        <span class="user-avatar-card_tag">@tag</span>
                    }
                </div>
                <UserAvatar AvatarId="@item.AvatarId" />
            </div>
        </li>
    }
    <li class="group cursor-pointer" @onclick="OnAddNewAvatar">
        <UserAvatarAddTile />
    </li>
</ul>

@code {
    [Inject] private Session Session { get; init; } = null!;
    [Inject] private IUserAvatars UserAvatars { get; init; } = null!;
    [Inject] private IChatUserSettings ChatUserSettings { get; init; } = null!;
    [Inject] private ModalUI ModalUI { get; init; } = null!;
    [Inject] private UICommandRunner Cmd { get; init; } = null!;

    [Parameter] public string ChatId { get; set; } = "";

    protected override ComputedState<Model>.Options GetStateOptions()
        => new () { InitialValue = new() };

    protected override async Task<Model> ComputeState(CancellationToken cancellationToken) {
        var avatarIds = await UserAvatars.GetAvatarIds(Session, cancellationToken).ConfigureAwait(true);
        var defaultAvatarId = await UserAvatars.GetDefaultAvatarId(Session, cancellationToken).ConfigureAwait(true);
        string activeAvatarId;
        if (ChatId.IsNullOrEmpty()) {
            activeAvatarId = defaultAvatarId;
        } else {
            var chatUserSettings = await ChatUserSettings.Get(Session, ChatId, cancellationToken).ConfigureAwait(true);
            activeAvatarId = chatUserSettings?.AvatarId ?? "";
        }
        return new Model {
            Items = avatarIds.Select(c => new Item {
                AvatarId = c,
                IsDefault = c == defaultAvatarId,
                IsActive = c == activeAvatarId,
            }).ToArray(),
        };
    }

    private async Task OnAddNewAvatar() {
        var command = new IUserAvatars.CreateCommand(Session);
        await Cmd.Run(command).ConfigureAwait(false);
    }

    private void EditAvatar(string avatarId) {
        ModalUI.Show(new UserAvatarEditorModal.Model(avatarId, ChatId));
    }

    public class Model {
        public Item[] Items { get; init; } = Array.Empty<Item>();
    }

    public class Item {
        public bool IsDefault { get; init; }
        public bool IsActive { get; init; }
        public string AvatarId { get; init; } = "";
    }
}
