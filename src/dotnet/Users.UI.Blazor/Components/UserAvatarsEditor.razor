@using System.Text.Encodings.Web
@inherits ComputedStateComponent<UserAvatarsEditor.Model>
@{
    var items = State.LatestNonErrorValue.Items;
}

<ul class="flex flex-wrap gap-4">
    @foreach (var item in items) {
        var borderClass = !ChatId.IsNullOrEmpty() && item.IsDefault ? "border border-green-300" : "";
        <li class="group">
            <div class="relative">
                <UserAvatar AvatarId="@item.AvatarId" Class="@borderClass">
                    <ActionsTemplate>
                        <div class="self-center btn-group">
                            <Button Click="@(() => EditAvatar(item.AvatarId))" Class="btn-cancel">Edit</Button>
                        </div>
                    </ActionsTemplate>
                </UserAvatar>
                <div class="absolute top-0 right-0 mr-3 mt-2">
                    @if (item.IsSelected) {
                        <i class="fa fa-check fa-lg text-success" aria-hidden="true"></i>
                    }
                </div>
            </div>
        </li>
    }
    <li class="group">
        <UserAvatar>
            <ActionsTemplate>
                <div class="self-center btn-group">
                    <Button Class="btn-success" Click="OnAddNewAvatar">Add new</Button>
                </div>
            </ActionsTemplate>
        </UserAvatar>
    </li>
</ul>

@code {
    [Inject] private Session Session { get; init; } = null!;
    [Inject] private IUserAvatars UserAvatars { get; init; } = null!;
    [Inject] private IChatUserSettings ChatUserSettings { get; init; } = null!;
    [Inject] private ModalUI ModalUI { get; init; } = null!;
    [Inject] private UICommandRunner Cmd { get; init; } = null!;

    [Parameter] public string ChatId { get; set; } = "";

    protected override ComputedState<Model>.Options GetStateOptions()
        => new () { InitialValue = new() };

    protected override async Task<Model> ComputeState(CancellationToken cancellationToken) {
        var avatarIds = await UserAvatars.GetAvatarIds(Session, cancellationToken).ConfigureAwait(true);
        var defaultAvatarId = await UserAvatars.GetDefaultAvatarId(Session, cancellationToken).ConfigureAwait(true);
        string selectedAvatarId;
        if (ChatId.IsNullOrEmpty()) {
            selectedAvatarId = defaultAvatarId;
        } else {
            var chatUserSettings = await ChatUserSettings.Get(Session, ChatId, cancellationToken).ConfigureAwait(true);
            selectedAvatarId = chatUserSettings?.AvatarId ?? "";
        }
        return new Model {
            Items = avatarIds.Select(c => new Item {
                AvatarId = c,
                IsDefault = c == defaultAvatarId,
                IsSelected = c == selectedAvatarId,
            }).ToArray(),
        };
    }

    private async Task OnAddNewAvatar() {
        var command = new IUserAvatars.CreateCommand(Session);
        await Cmd.Run(command).ConfigureAwait(false);
    }

    private void EditAvatar(string avatarId) {
        ModalUI.Show(new UserAvatarEditorModal.Model(avatarId, ChatId));
    }

    public class Model {
        public Item[] Items { get; init; } = Array.Empty<Item>();
    }

    public class Item {
        public bool IsDefault { get; init; }
        public bool IsSelected { get; init; }
        public string AvatarId { get; init; } = "";
    }
}
