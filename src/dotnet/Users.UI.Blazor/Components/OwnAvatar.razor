@using ActualChat.Chat
@inherits ComputedStateComponent<AvatarFull>
@{
    var m = State.LatestNonErrorValue;
}

@if (Show == ShowInfo.Name) {
    @m.Name
} else if (Show == ShowInfo.Bio) {
    @m.Bio
} else {
    <div class="own-avatar-card relative @Class">
        <div class="own-avatar-card-content">
            <Pic ContentId="@m.Picture" Title="@m.Name" Size="@Size">
                <NoPicture>
                    <AnonymousIcon/>
                </NoPicture>
            </Pic>
        </div>
    </div>
}

@code {
    public enum ShowInfo {
        Avatar,
        Name,
        Bio,
    }

    [Inject] private Session Session { get; init; } = null!;
    [Inject] private IAvatars Avatars { get; init; } = null!;

    [Parameter, EditorRequired] public string AvatarId { get; set; } = "";
    [Parameter, EditorRequired] public string ChatId { get; set; } = "";
    [Parameter] public ShowInfo Show { get; set; } = ShowInfo.Avatar;
    [Parameter] public SquareSize Size { get; set; } = SquareSize.Size9;
    [Parameter] public string Class { get; set; } = "";

    protected override ComputedState<AvatarFull>.Options GetStateOptions()
        => new() { InitialValue = AvatarFull.Loading };

    protected override async Task<AvatarFull> ComputeState(CancellationToken cancellationToken) {
        var avatar = await Avatars.GetOwn(Session, AvatarId, cancellationToken);
        return avatar ?? AvatarFull.None;
    }
}
