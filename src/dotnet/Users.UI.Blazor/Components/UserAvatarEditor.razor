<div class="px-2 py-2">
    <div>
        <h3>Edit your avatar:</h3>
    </div>

    <div class="mt-5">
        <EditForm Model="@_model" OnValidSubmit="@OnSave" >
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div>
                <label for="Name" class="block text-sm font-medium text-secondary">Name</label>
                <div class="mt-1">
                    <TextBox @bind-Value="@_model.Name" id="Name" Autofocus="true"
                               class="w-full px-2 py-1 border rounded-md focus:outline-none focus:border-success" />
                </div>
            </div>

            <div class="mt-2">
                <label for="Picture" class="block text-sm font-medium text-secondary">Picture</label>
                <div class="mt-1">
                    <TextBox @bind-Value="_model.Picture" id="Picture"
                               class="w-full px-2 py-1 border rounded-md focus:outline-none focus:border-success" />
                </div>
            </div>

            <div class="mt-2">
                <label for="Bio" class="block text-sm font-medium text-secondary">Bio</label>
                <div class="mt-1">
                    <TextBox @bind-Value="_model.Bio" id="Bio"
                               class="w-full px-2 py-1 border rounded-md focus:outline-none focus:border-success" />
                </div>
            </div>

            <div class="mt-3 flex-x justify-end">
                <Button Type="ButtonType.Submit" class="btn-success">Save</Button>
                <Button Class="btn-cancel ml-3" Click="OnCancel">Cancel</Button>
            </div>
        </EditForm>
    </div>
</div>

@code {
    private readonly Model _model = new();

    [Inject] private Session Session { get; init; } = null!;
    [Inject] private IUserAvatars UserAvatars { get; init; } = null!;
    [Inject] private UICommandRunner Cmd { get; init; } = null!;

    [Parameter, EditorRequired] public string AvatarId { get; set; } = "";
    [Parameter] public Action? OnUpdated { get; set; } = default!;
    [Parameter] public Action? CancelRequested { get; set; } = default!;

    protected override async Task OnParametersSetAsync() {
        var userAvatar = await UserAvatars.Get(Session, AvatarId, default);

        _model.Name = userAvatar?.Name ?? "";
        _model.Picture = userAvatar?.Picture ?? "";
        _model.Bio = userAvatar?.Bio ?? "";
    }

    private async void OnSave() {
        var command = new IUserAvatars.UpdateCommand(Session, AvatarId, _model.Name, _model.Picture, _model.Bio);
        await Cmd.Run(command, default);
        OnUpdated?.Invoke();
    }

    private void OnCancel() {
        CancelRequested?.Invoke();
    }

    public class Model
    {
        public string Name { get; set; } = "";
        public string Picture { get; set; } = "";
        public string Bio { get; set; } = "";
    }
}
