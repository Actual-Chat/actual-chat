@inherits ComputedStateComponent<UserAvatar.Model>
@{
    var m = State.LatestNonErrorValue;
}

@if (Show == ShowInfo.Name) {
    @m.Name
} else if (Show == ShowInfo.Bio) {
    @m.Bio
} else {
    <div class="user-avatar-card relative">
        <div class="user-avatar-card-content">
            <Pic ContentId="@m.Picture" Title="@m.Name" Size="SquareSize.Size9">
                <NoPicture>
                    <AnonymousIcon/>
                </NoPicture>
            </Pic>
        </div>
    </div>
}

@code {
    public enum ShowInfo {
        Avatar,
        Name,
        Bio,
    }
    [Inject] private Session Session { get; init; } = null!;
    [Inject] private IUserAvatars UserAvatars { get; init; } = null!;
    [Inject] private IChatUserSettings ChatUserSettings { get; init; } = null!;

    [Parameter, EditorRequired] public string AvatarId { get; set; } = "";
    [Parameter, EditorRequired] public string ChatId { get; set; } = "";
    [Parameter] public ShowInfo Show { get; set; } = ShowInfo.Avatar;

    protected override ComputedState<Model>.Options GetStateOptions()
        => new() { InitialValue = Model.None };

    protected override async Task<Model> ComputeState(CancellationToken cancellationToken) {
        var userAvatar = await UserAvatars.Get(Session, AvatarId, cancellationToken);
        if (userAvatar == null)
            return new Model();

        var defaultAvatarId = await UserAvatars.GetDefaultAvatarId(Session, cancellationToken);
        var activeAvatarId = "";
        if (!ChatId.IsNullOrEmpty()) {
            var chatUserSettings = await ChatUserSettings.Get(Session, ChatId, cancellationToken);
            activeAvatarId = chatUserSettings?.AvatarId ?? "";
        }

        var isActive = OrdinalEquals(activeAvatarId, AvatarId);
        var isDefault = OrdinalEquals(defaultAvatarId, AvatarId);
        var tag = isActive
            ? isDefault ? "active, default" : "active"
            : isDefault ? "default" : "";

        return new Model {
            Picture = userAvatar.Picture,
            Name = userAvatar.Name,
            Bio = userAvatar.Bio,
            Tag = tag,
        };
    }

    public sealed record Model {
        public static Model None { get; } = new();

        public string Name { get; init; } = "";
        public string Picture { get; init; } = "";
        public string Bio { get; init; } = "";
        public string Tag { get; init; } = "";
    }
}
