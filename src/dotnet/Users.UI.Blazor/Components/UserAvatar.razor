@inherits ComputedStateComponent<UserAvatar.Model>
@{
    var m = State.LatestNonErrorValue;
}

<div class="user-avatar-card relative">
    <div class="user-avatar-card_content">
        @if (!m.Picture.IsNullOrEmpty()) {
            <img class="user-avatar-card_picture" src="@m.Picture" alt="avatar pic">
        } else {
            <svg class="user-avatar-card_picture user-avatar-card_picture-svg"
                 viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                <path d="M12 0c-6.627 0-12 5.373-12 12s5.373 12 12 12 12-5.373 12-12-5.373-12-12-12zm7.753 18.305c-.261-.586-.789-.991-1.871-1.241-2.293-.529-4.428-.993-3.393-2.945 3.145-5.942.833-9.119-2.489-9.119-3.388 0-5.644 3.299-2.489 9.119 1.066 1.964-1.148 2.427-3.393 2.945-1.084.25-1.608.658-1.867 1.246-1.405-1.723-2.251-3.919-2.251-6.31 0-5.514 4.486-10 10-10s10 4.486 10 10c0 2.389-.845 4.583-2.247 6.305z"/>
            </svg>
        }
        <p class="user-avatar-card_bio">@m.Bio</p>
    </div>
    <div class="absolute top-0 right-0">
        @if (!m.Tag.IsNullOrEmpty()) {
            <span class="user-avatar-card_tag">@m.Tag</span>
        }
    </div>
</div>

@code {
    [Inject] private Session Session { get; init; } = null!;
    [Inject] private IUserAvatars UserAvatars { get; init; } = null!;
    [Inject] private IChatUserSettings ChatUserSettings { get; init; } = null!;

    [Parameter] public string AvatarId { get; set; } = "";
    [Parameter] public string ChatId { get; set; } = "";

    protected override ComputedState<Model>.Options GetStateOptions()
        => new() { InitialValue = Model.None };

    protected override async Task<Model> ComputeState(CancellationToken cancellationToken) {
        var userAvatar = await UserAvatars.Get(Session, AvatarId, cancellationToken).ConfigureAwait(false);
        if (userAvatar == null)
            return new Model();
        var defaultAvatarId = await UserAvatars.GetDefaultAvatarId(Session, cancellationToken).ConfigureAwait(true);
        string activeAvatarId = "";
        if (!ChatId.IsNullOrEmpty()) {
            var chatUserSettings = await ChatUserSettings.Get(Session, ChatId, cancellationToken).ConfigureAwait(true);
            activeAvatarId = chatUserSettings?.AvatarId ?? "";
        }
        var tag = Equals(activeAvatarId, AvatarId) ? "active" : Equals(defaultAvatarId, AvatarId) ? "default" : "";

        return new Model {
            Picture = userAvatar.Picture,
            Bio = userAvatar.Bio,
            Tag = tag
        };
    }

    public record Model {
        public static Model None { get; } = new();

        public string Picture { get; init; } = "";
        public string Bio { get; init; } = "";
        public string Tag { get; init; } = "";
    }
}
