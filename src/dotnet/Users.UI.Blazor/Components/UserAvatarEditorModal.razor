@using System.ComponentModel.DataAnnotations
@implements IModalView<UserAvatarEditorModal.Model>
@attribute [MatchFor(typeof(Model), typeof(IModalView))]

<Form @ref="_formRef" Model="@_form" OnSubmit="@OnSave">
    <DialogFrame Title="Edit avatar">
        <Body>
            <DataAnnotationsValidator/>
            <ValidationSummary/>
            <PicUpload
                ImageUploadUrl="@UploadUrl"
                ImagePicked="OnImagePicked"
                Size="SquareSize.Size20"
                Title="@_form.Bio"
                ContentId="@_form.Picture">
                <NoPicture>
                    <AnonymousIcon Class="w-20 h-20"/>
                </NoPicture>
            </PicUpload>

            <FormSection InputId="@_form.BioFieldId" Label="Bio">
                <TextBox @bind-Value="@_form.Bio" Id="@_form.BioFieldId"/>
            </FormSection>

            <FormSection InputId="@_form.IsDefaultFieldId">
                <ToggleEdit @bind-Value="@_form.IsDefault" Id="@_form.IsDefaultFieldId"
                            Label="Default for the user"/>
            </FormSection>

            @if (!ModalModel.ChatId.IsNullOrEmpty()) {
                <FormSection InputId="@_form.IsActiveFieldId">
                    <ToggleEdit @bind-Value="@_form.IsActive" Id="@_form.IsActiveFieldId"
                                Label="Used in this chat (otherwise the default one is used)"/>
                </FormSection>
            }
        </Body>
        <Buttons>
            <FormButtons>
                @{
                    var submitClass = $"btn-primary {(_formRef.IsValid ? "" : "disabled")}";
                }
                <Button Type="@ButtonType.Button" Class="btn-secondary" Click="OnCancel">Cancel</Button>
                <Button Type="@ButtonType.Submit" Class="@submitClass">Save</Button>
            </FormButtons>
        </Buttons>
    </DialogFrame>
</Form>

@code {
    private Form _formRef = null!;
    private FormModel _form = null!;

    [Inject] private Session Session { get; init; } = null!;
    [Inject] private IUserAvatars UserAvatars { get; init; } = null!;
    [Inject] private IChatUserSettings ChatUserSettings { get; init; } = null!;
    [Inject] private ComponentIdGenerator ComponentIdGenerator { get; init; } = null!;
    [Inject] private UICommander UICommander { get; init; } = null!;
    private string UploadUrl => $"/api/user-avatars/{ModalModel.AvatarId}/upload-picture";

    [CascadingParameter] public BlazoredModalInstance ModalInstance { get; set; } = null!;
    [Parameter] public Model ModalModel { get; set; } = null!;

    protected override async Task OnParametersSetAsync() {
        _form = new FormModel(ComponentIdGenerator).CopyToBase(); // Must be fully initialized in sync part
        var userAvatar = await UserAvatars.Get(Session, ModalModel.AvatarId, default);
        var defaultAvatarId = await UserAvatars.GetDefaultAvatarId(Session, default);
        var isDefault = OrdinalEquals(ModalModel.AvatarId, defaultAvatarId);
        var isActive = false;
        if (!ModalModel.ChatId.IsNullOrEmpty()) {
            var chatUserSettings = await ChatUserSettings.Get(Session, ModalModel.ChatId, default);
            var activeAvatarId = chatUserSettings?.AvatarId.Value ?? "";
            isActive = OrdinalEquals(ModalModel.AvatarId, activeAvatarId);
        }

        _form.Name = userAvatar?.Name ?? "";
        _form.Picture = userAvatar?.Picture ?? "";
        _form.Bio = userAvatar?.Bio ?? "";
        _form.IsDefault = isDefault;
        _form.IsActive = isActive;
        _form.CopyToBase();
    }

    private async void OnSave() {
        var avatarId = ModalModel.AvatarId;
        var command = new IUserAvatars.UpdateCommand(Session, avatarId, _form.Name, _form.Picture, _form.Bio);
        await UICommander.Run(command);

        if (_form.IsDefault && !_form.Base.IsDefault)
            await SetDefaultAvatar(_form.IsDefault ? avatarId : "");

        if (!ModalModel.ChatId.IsNullOrEmpty()) {
            if (_form.IsActive && !_form.Base.IsActive)
                await SetActiveAvatar(_form.IsActive ? avatarId : "");
        }

        CloseModal();
    }

    private void OnImagePicked(string contentId) {
        _form.Picture = contentId;
        StateHasChanged();
    }

    private async Task SetDefaultAvatar(string avatarId)
    {
        var command = new IUserAvatars.SetDefaultCommand(Session, avatarId);
        await UICommander.Run(command);
    }

    private async Task SetActiveAvatar(string avatarId)
    {
        var chatUserSettings = await ChatUserSettings.Get(Session, ModalModel.ChatId, default);
        chatUserSettings ??= new();
        chatUserSettings = chatUserSettings with { AvatarId = avatarId };
        var command = new IChatUserSettings.SetCommand(Session, ModalModel.ChatId, chatUserSettings);
        await UICommander.Run(command);
    }

    private void OnCancel()
        => CloseModal();

    private void CloseModal()
        => ModalInstance.CancelAsync();

    public sealed class FormModel : FormModel<FormModel> {
        [Required, MinLength(1)] public string Name { get; set; } = "";
        public string Picture { get; set; } = "";
        public string Bio { get; set; } = "";
        public string BioFieldId { get; set; } = "";
        public bool IsDefault { get; set; }
        public string IsDefaultFieldId { get; set; } = "";
        public bool IsActive { get; set; }
        public string IsActiveFieldId { get; set; } = "";

        public FormModel(ComponentIdGenerator? componentIdGenerator)
            : base("avatar-editor", componentIdGenerator) {
        }
    }

    public sealed record Model(string AvatarId, string ChatId);
}
