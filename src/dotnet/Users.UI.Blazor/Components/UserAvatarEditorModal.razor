@implements IModalView<UserAvatarEditorModal.Model>
@attribute [MatchFor(typeof(Model), typeof(IModalView))]

<EditForm Model="@_model" OnValidSubmit="@OnSave">
    <DialogFrame Title="Edit avatar">
        <Body>
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div>
                <label for="Picture" class="block text-sm font-medium text-secondary">Picture</label>
                <div class="mt-1">
                    <TextBox @bind-Value="_model.Picture" id="Picture"
                             class="w-full px-2 py-1 border rounded-md focus:outline-none focus:border-success" />
                </div>
            </div>

            <div class="mt-2">
                <label for="Bio" class="block text-sm font-medium text-secondary">Bio</label>
                <div class="mt-1">
                    <TextBox @bind-Value="_model.Bio" id="Bio"
                             class="w-full px-2 py-1 border rounded-md focus:outline-none focus:border-success" />
                </div>
            </div>
        </Body>
        <Buttons>
            <Button Class="btn-cancel" Click="OnCancel">Cancel</Button>
            <Button Type="@ButtonType.Submit" class="btn-success">Save</Button>
        </Buttons>
    </DialogFrame>
</EditForm>

@code {
    private readonly EditModel _model = new();

    [Inject] private Session Session { get; init; } = null!;
    [Inject] private IUserAvatars UserAvatars { get; init; } = null!;
    [Inject] private UICommandRunner Cmd { get; init; } = null!;

    [CascadingParameter] BlazoredModalInstance ModalInstance { get; set; } = null!;
    [Parameter] public Model ModalModel { get; set; } = null!;

    protected override async Task OnParametersSetAsync() {
        var userAvatar = await UserAvatars.Get(Session, ModalModel.AvatarId, default);

        _model.Name = userAvatar?.Name ?? "";
        _model.Picture = userAvatar?.Picture ?? "";
        _model.Bio = userAvatar?.Bio ?? "";
    }

    private async void OnSave() {
        var command = new IUserAvatars.UpdateCommand(Session, ModalModel.AvatarId, _model.Name, _model.Picture, _model.Bio);
        await Cmd.Run(command).ConfigureAwait(true);
        CloseModal();
    }

    private void OnCancel()
        => CloseModal();

    private void CloseModal()
        => ModalInstance.CancelAsync();

    public sealed class EditModel {
        public string Name { get; set; } = "";
        public string Picture { get; set; } = "";
        public string Bio { get; set; } = "";
    }

    public sealed record Model(string AvatarId);
}
