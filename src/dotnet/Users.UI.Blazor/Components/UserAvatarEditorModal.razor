@implements IModalView<UserAvatarEditorModal.Model>
@attribute [MatchFor(typeof(Model), typeof(IModalView))]
@{
    var m = _model;
}

<Form Model="@m" OnValidSubmit="@OnSave">
    <DialogFrame Title="Edit avatar">
        <Body>
            <DataAnnotationsValidator />
            <ValidationSummary />

            <FormSection InputId="@m.PictureId" Label="Picture">
                <TextBox @bind-Value="@m.Picture" id="@m.PictureId" Autofocus="true" />
            </FormSection>

            <FormSection InputId="@m.BioId" Label="Bio">
                <TextBox @bind-Value="@m.Bio" id="@m.BioId" />
            </FormSection>
        </Body>
        <Buttons>
            <FormButtons>
                <Button Class="btn-cancel" Click="OnCancel">Cancel</Button>
                <Button Type="@ButtonType.Submit" class="btn-success">Save</Button>
            </FormButtons>
        </Buttons>
    </DialogFrame>
</Form>

@code {
    private EditModel _model = null!;

    [Inject] private Session Session { get; init; } = null!;
    [Inject] private IUserAvatars UserAvatars { get; init; } = null!;
    [Inject] private UICommandRunner Cmd { get; init; } = null!;
    [Inject] private ComponentIdGenerator ComponentIdGenerator { get; init; } = null!;

    [CascadingParameter] BlazoredModalInstance ModalInstance { get; set; } = null!;
    [Parameter] public Model ModalModel { get; set; } = null!;

    protected override async Task OnParametersSetAsync() {
        _model ??= new EditModel(ComponentIdGenerator);

        var userAvatar = await UserAvatars.Get(Session, ModalModel.AvatarId, default);

        _model.Name = userAvatar?.Name ?? "";
        _model.Picture = userAvatar?.Picture ?? "";
        _model.Bio = userAvatar?.Bio ?? "";
    }

    private async void OnSave() {
        var command = new IUserAvatars.UpdateCommand(Session, ModalModel.AvatarId, _model.Name, _model.Picture, _model.Bio);
        await Cmd.Run(command).ConfigureAwait(true);
        CloseModal();
    }

    private void OnCancel()
        => CloseModal();

    private void CloseModal()
        => ModalInstance.CancelAsync();

    public sealed class EditModel {
        public string FormId { get; }
        public string NameId { get; }
        public string PictureId { get; }
        public string BioId { get; }

        public string Name { get; set; } = "";
        public string Picture { get; set; } = "";
        public string Bio { get; set; } = "";

        public EditModel(ComponentIdGenerator componentIdGenerator) {
            FormId = componentIdGenerator.Next("avatar-editor");
            NameId = $"{FormId}-name";
            PictureId = $"{FormId}-picture";
            BioId = $"{FormId}-bio";
        }
    }

    public sealed record Model(string AvatarId);
}
