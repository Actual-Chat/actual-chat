@implements IModalView<UserAvatarEditorModal.Model>
@attribute [MatchFor(typeof(Model), typeof(IModalView))]
@{
    var m = _model;
}

<Form Model="@m" OnValidSubmit="@OnSave">
    <DialogFrame Title="Edit avatar">
        <Body>
            <DataAnnotationsValidator />
            <ValidationSummary />

            <FormSection InputId="@m.PictureId" Label="Picture">
                <TextBox @bind-Value="@m.Picture" id="@m.PictureId" Autofocus="true" />
            </FormSection>

            <FormSection InputId="@m.BioId" Label="Bio">
                <TextBox @bind-Value="@m.Bio" id="@m.BioId" />
            </FormSection>

            <FormSection InputId="@m.IsDefaultId" Label="Is default avatar for the user">
                <ToggleEdit @bind-Value="@m.IsDefault" id="@m.IsDefaultId" />
            </FormSection>

            @if (!ModalModel.ChatId.IsNullOrEmpty()) {
                <FormSection InputId="@m.IsActiveId" Label="Is active avatar in this chat (otherwise default is used)">
                    <ToggleEdit @bind-Value="@m.IsActive" id="@m.IsActiveId" />
                </FormSection>
            }
        </Body>
        <Buttons>
            <FormButtons>
                <Button Class="btn-cancel" Click="OnCancel">Cancel</Button>
                <Button Type="@ButtonType.Submit" class="btn-success">Save</Button>
            </FormButtons>
        </Buttons>
    </DialogFrame>
</Form>

@code {
    private EditModel _model = null!;
    private bool _isDefaultAvatar;
    private bool _isActiveAvatar;

    [Inject] private Session Session { get; init; } = null!;
    [Inject] private IUserAvatars UserAvatars { get; init; } = null!;
    [Inject] private IChatUserSettings ChatUserSettings { get; init; } = null!;
    [Inject] private UICommandRunner Cmd { get; init; } = null!;
    [Inject] private ComponentIdGenerator ComponentIdGenerator { get; init; } = null!;

    [CascadingParameter] BlazoredModalInstance ModalInstance { get; set; } = null!;
    [Parameter] public Model ModalModel { get; set; } = null!;

    protected override async Task OnParametersSetAsync() {
        _model ??= new EditModel(ComponentIdGenerator);

        var userAvatar = await UserAvatars.Get(Session, ModalModel.AvatarId, default);
        var defaultAvatarId = await UserAvatars.GetDefaultAvatarId(Session, default).ConfigureAwait(true);
        _isDefaultAvatar = Equals(ModalModel.AvatarId, defaultAvatarId);
        if (!ModalModel.ChatId.IsNullOrEmpty()) {
            var chatUserSettings = await ChatUserSettings.Get(Session, ModalModel.ChatId, default).ConfigureAwait(true);
            string selectedAvatarId = chatUserSettings?.AvatarId ?? "";
            _isActiveAvatar = Equals(ModalModel.AvatarId, selectedAvatarId);
        }

        _model.Name = userAvatar?.Name ?? "";
        _model.Picture = userAvatar?.Picture ?? "";
        _model.Bio = userAvatar?.Bio ?? "";
        _model.IsDefault = _isDefaultAvatar;
        _model.IsActive = _isActiveAvatar;
    }

    private async void OnSave() {
        var command = new IUserAvatars.UpdateCommand(Session, ModalModel.AvatarId, _model.Name, _model.Picture, _model.Bio);
        await Cmd.Run(command).ConfigureAwait(true);

        if (_model.IsDefault)
            await SetDefaultAvatar(ModalModel.AvatarId);
        else if (_isDefaultAvatar)
            await SetDefaultAvatar(""); // clear default avatar id

        if (!ModalModel.ChatId.IsNullOrEmpty()) {
            if (_model.IsActive)
                await SetActiveAvatar(ModalModel.AvatarId);
            else if (_isActiveAvatar)
                await SetActiveAvatar(""); // clear active avatar id
        }

        CloseModal();
    }

    private async Task SetDefaultAvatar(string avatarId)
    {
        var command = new IUserAvatars.SetDefaultCommand(Session, avatarId);
        await Cmd.Run(command).ConfigureAwait(false);
    }

    private async Task SetActiveAvatar(string avatarId)
    {
        var chatUserSettings = await ChatUserSettings.Get(Session, ModalModel.ChatId, default).ConfigureAwait(false);
        chatUserSettings ??= new();
        chatUserSettings = chatUserSettings with { AvatarId = avatarId };
        var command = new IChatUserSettings.SetCommand(Session, ModalModel.ChatId, chatUserSettings);
        await Cmd.Run(command).ConfigureAwait(false);
    }

    private void OnCancel()
        => CloseModal();

    private void CloseModal()
        => ModalInstance.CancelAsync();

    public sealed class EditModel {
        public string FormId { get; }
        public string PictureId { get; }
        public string BioId { get; }
        public string IsDefaultId { get; }
        public string IsActiveId { get; }

        public string Name { get; set; } = "";
        public string Picture { get; set; } = "";
        public string Bio { get; set; } = "";
        public bool IsDefault { get; set; }
        public bool IsActive { get; set; }

        public EditModel(ComponentIdGenerator componentIdGenerator) {
            FormId = componentIdGenerator.Next("avatar-editor");
            PictureId = $"{FormId}-picture";
            BioId = $"{FormId}-bio";
            IsDefaultId = $"{FormId}-isDefault";
            IsActiveId = $"{FormId}-isActive";
        }
    }

    public sealed record Model(string AvatarId, string ChatId);
}
