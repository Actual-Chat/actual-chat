@using Stl.Reflection
@implements IModalView<UserAvatarEditorModal.Model>
@attribute [MatchFor(typeof(Model), typeof(IModalView))]

<Form Model="@M" OnValidSubmit="@OnSave">
    <DialogFrame Title="Edit avatar">
        <Body>
            <DataAnnotationsValidator />
            <ValidationSummary />

            <FormSection InputId="@M.PictureFieldId" Label="Picture">
                <TextBox @bind-Value="@M.Picture" Id="@M.PictureFieldId" Autofocus="true" />
            </FormSection>

            <FormSection InputId="@M.BioFieldId" Label="Bio">
                <TextBox @bind-Value="@M.Bio" Id="@M.BioFieldId" />
            </FormSection>

            <FormSection InputId="@M.IsDefaultFieldId">
                <ToggleEdit @bind-Value="@M.IsDefault" Id="@M.IsDefaultFieldId"
                            Label="Default for the user" />
            </FormSection>

            @if (!ModalModel.ChatId.IsNullOrEmpty()) {
                <FormSection InputId="@M.IsActiveFieldId">
                    <ToggleEdit @bind-Value="@M.IsActive" Id="@M.IsActiveFieldId"
                                Label="Used in this chat (otherwise the default one is used)"/>
                </FormSection>
            }
        </Body>
        <Buttons>
            <FormButtons>
                <Button Class="btn-cancel" Click="OnCancel">Cancel</Button>
                <Button Type="@ButtonType.Submit" class="btn-success">Save</Button>
            </FormButtons>
        </Buttons>
    </DialogFrame>
</Form>

@code {
    [Inject] private Session Session { get; init; } = null!;
    [Inject] private IUserAvatars UserAvatars { get; init; } = null!;
    [Inject] private IChatUserSettings ChatUserSettings { get; init; } = null!;
    [Inject] private UICommandRunner Cmd { get; init; } = null!;
    [Inject] private ComponentIdGenerator ComponentIdGenerator { get; init; } = null!;

    private FormModel M { get; set; } = null!;

    [CascadingParameter] public BlazoredModalInstance ModalInstance { get; set; } = null!;
    [Parameter] public Model ModalModel { get; set; } = null!;

    protected override async Task OnParametersSetAsync() {
        M = new FormModel(ComponentIdGenerator).CopyToBase(); // Must be fully initialized in sync part
        var userAvatar = await UserAvatars.Get(Session, ModalModel.AvatarId, default);
        var defaultAvatarId = await UserAvatars.GetDefaultAvatarId(Session, default).ConfigureAwait(true);
        var isDefault = OrdinalEquals(ModalModel.AvatarId, defaultAvatarId);
        var isActive = false;
        if (!ModalModel.ChatId.IsNullOrEmpty()) {
            var chatUserSettings = await ChatUserSettings.Get(Session, ModalModel.ChatId, default).ConfigureAwait(true);
            var activeAvatarId = chatUserSettings?.AvatarId.Value ?? "";
            isActive = OrdinalEquals(ModalModel.AvatarId, activeAvatarId);
        }

        M.Name = userAvatar?.Name ?? "";
        M.Picture = userAvatar?.Picture ?? "";
        M.Bio = userAvatar?.Bio ?? "";
        M.IsDefault = isDefault;
        M.IsActive = isActive;
        M.CopyToBase();
    }

    private async void OnSave() {
        var avatarId = ModalModel.AvatarId;
        var command = new IUserAvatars.UpdateCommand(Session, avatarId, M.Name, M.Picture, M.Bio);
        await Cmd.Run(command).ConfigureAwait(true);

        if (M.IsDefault && !M.Base.IsDefault)
            await SetDefaultAvatar(M.IsDefault ? avatarId : "").ConfigureAwait(true);

        if (!ModalModel.ChatId.IsNullOrEmpty()) {
            if (M.IsActive && !M.Base.IsActive)
                await SetActiveAvatar(M.IsActive ? avatarId : "").ConfigureAwait(true);
        }

        CloseModal();
    }

    private async Task SetDefaultAvatar(string avatarId)
    {
        var command = new IUserAvatars.SetDefaultCommand(Session, avatarId);
        await Cmd.Run(command).ConfigureAwait(false);
    }

    private async Task SetActiveAvatar(string avatarId)
    {
        var chatUserSettings = await ChatUserSettings.Get(Session, ModalModel.ChatId, default).ConfigureAwait(false);
        chatUserSettings ??= new();
        chatUserSettings = chatUserSettings with { AvatarId = avatarId };
        var command = new IChatUserSettings.SetCommand(Session, ModalModel.ChatId, chatUserSettings);
        await Cmd.Run(command).ConfigureAwait(false);
    }

    private void OnCancel()
        => CloseModal();

    private void CloseModal()
        => ModalInstance.CancelAsync();

    public sealed class FormModel : FormModel<FormModel> {
        public string Name { get; set; } = "";
        public string NameFieldId { get; set; } = "";

        public string Picture { get; set; } = "";
        public string PictureFieldId { get; set; } = "";

        public string Bio { get; set; } = "";
        public string BioFieldId { get; set; } = "";

        public bool IsDefault { get; set; }
        public string IsDefaultFieldId { get; set; } = "";

        public bool IsActive { get; set; }
        public string IsActiveFieldId { get; set; } = "";

        public FormModel(ComponentIdGenerator? componentIdGenerator)
            : base("avatar-editor", componentIdGenerator)
        { }
    }

    public sealed record Model(string AvatarId, string ChatId);
}
