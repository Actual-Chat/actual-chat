@using System.ComponentModel.DataAnnotations
@implements IModalView<OwnAccountEditorModal.Model>
@{
    if (ReferenceEquals(_account, AccountFull.Loading))
        return;
}

<Form @ref="@_formRef" Class="h-full" Model="@_form" OnSubmit="@OnSave">
    <DialogFrame
        Class="own-account-editor-modal"
        Title="Edit account"
        HasCloseButton="true"
        NarrowViewSettings="@DialogFrameNarrowViewSettings.FormSubmitButton()"
        ButtonsClass="full-width">
        <Body>
        <DataAnnotationsValidator/>
        <ValidationSummary/>

        <AvatarCard
            Avatar="@_account.Avatar"
            Size="SquareSize.Size30"
            Class="edit-account-avatar"/>

        <FormSection For="() => _form.Name" IsRequired="true" InputId="@_form.NameFieldId" Label="First name" IsLabelInsideInput="true">
            <TextBox @bind-Value="@_form.Name" Id="@_form.NameFieldId" Autofocus="true"/>
        </FormSection>

        <FormSection For="() => _form.LastName" InputId="@_form.LastNameFieldId" Label="Last name" IsLabelInsideInput="true">
            <TextBox @bind-Value="@_form.LastName" Id="@_form.LastNameFieldId" Autofocus="true"/>
        </FormSection>

        <FormSection For="() => _form.Email" InputId="@_form.EmailFieldId" Label="Email" IsLabelInsideInput="true">
            <TextBox @bind-Value="@_form.Email" Id="@_form.EmailFieldId" Autofocus="true" disabled/>
        </FormSection>

        <FormSection For="() => _form.Phone" InputId="@_form.PhoneFieldId" Label="Phone" IsLabelInsideInput="true">
            <TextBox @bind-Value="@_form.Phone" Id="@_form.PhoneFieldId" Autofocus="true" disabled/>
        </FormSection>

        </Body>
        <Buttons>
            <FormButtons>
                @{
                    var submitClass = $"btn-primary {(_formRef.IsValid ? "" : "disabled")}";
                }
                <Button Type="@ButtonType.Button" Class="btn-cancel" Click="OnCancel">Cancel</Button>
                <Button Type="@ButtonType.Submit" Class="@submitClass">Save</Button>
            </FormButtons>
        </Buttons>
    </DialogFrame>
</Form>

@code {
    private Form _formRef = null!;
    private FormModel _form = null!;
    private AccountFull _account = AccountFull.Loading;

    [Inject] private Session Session { get; init; } = null!;
    [Inject] private IAccounts Accounts { get; init; } = null!;
    [Inject] private ComponentIdGenerator ComponentIdGenerator { get; init; } = null!;
    [Inject] private UICommander UICommander { get; init; } = null!;

    [CascadingParameter] public Modal Modal { get; set; } = null!;
    [Parameter] public Model ModalModel { get; set; } = null!;

    protected override async Task OnInitializedAsync() {
        _form = new FormModel(ComponentIdGenerator).CopyToBase(); // Must be fully initialized in sync part
        _account = await Accounts.GetOwn(Session, default);
        _form.Name = _account.Name;
        _form.LastName = _account.LastName;
        _form.Email = _account.Email;
        _form.Phone = _account.Phone;
        _form.CopyToBase();
    }

    private async void OnSave() {
        var account = await Accounts.GetOwn(Session, default);
        var updateAccountCommand = new IAccounts.UpdateCommand(
            Session,
            account with {
                Name = _form.Name,
                LastName = _form.LastName,
            },
            account.Version);
        var (_, error) = await UICommander.Run(updateAccountCommand);
        if (error != null)
            return;

        _form.CopyToBase();
        Modal.Close();
    }

    private void OnCancel()
        => Modal.Close();

    public sealed class FormModel : FormModel<FormModel> {

        [Required, MinLength(4, ErrorMessage = "Name must be at least 4 characters.")]
        public string Name { get; set; } = "";
        public string NameFieldId { get; set; } = "";
        public string LastName { get; set; } = "";
        public string LastNameFieldId { get; set; } = "";
        public string Email { get; set; } = "";
        public string EmailFieldId { get; set; } = "";
        public string Phone { get; set; } = "";
        public string PhoneFieldId { get; set; } = "";

        public FormModel(ComponentIdGenerator? componentIdGenerator)
            : base("own-account-editor", componentIdGenerator)
        { }
    }

    public sealed record Model {
        public static Model Default { get; } = new();
    };
}
