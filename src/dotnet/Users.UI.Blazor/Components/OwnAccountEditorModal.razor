@using System.ComponentModel.DataAnnotations
@implements IModalView<OwnAccountEditorModal.Model>
@{
    if (ReferenceEquals(_account, AccountFull.Loading))
        return;
    var isPhoneValid = PhoneValidation.IsValid(_form.Code, _form.Number);
    var phone = _form.Phone;
    var isPhoneVerified = _account.HasVerifiedPhone();
}

<Form @ref="@_formRef" Class="h-full" Model="@_form" OnSubmit="@OnSave">
    <DialogFrame
        Class="own-account-editor-modal"
        Title="Edit account"
        HasCloseButton="true"
        NarrowViewSettings="@DialogFrameNarrowViewSettings.FormSubmitButton()"
        ButtonsClass="full-width">
        <Body>
        <FormBlock>
            <DataAnnotationsValidator/>
            <ValidationSummary/>

            <FormSection For="() => _form.Name" IsRequired="true" InputId="@_form.NameFieldId" Label="First name" IsLabelInsideInput="true">
                <TextBox @bind-Value="@_form.Name" Id="@_form.NameFieldId" Autofocus="true"/>
            </FormSection>

            <FormSection For="() => _form.LastName" InputId="@_form.LastNameFieldId" Label="Last name" IsLabelInsideInput="true">
                <TextBox @bind-Value="@_form.LastName" Id="@_form.LastNameFieldId" Autofocus="true"/>
            </FormSection>

            <div class="flex-x gap-x-4 items-center">
                <FormSection
                    For="() => _form.Code"
                    InputId="@_form.CodeFieldId"
                    Label="Code"
                    Class="w-20"
                    IsLabelInsideInput="true"
                    IsRequired="true">
                    @* TODO: seems like we need custom country code control *@
                    <InputText
                        id="@_form.CodeFieldId"
                        @bind-Value="_form.Code"
                        list="phoneCodes"
                        pattern="@PhoneValidation.CountryCodePattern"
                        onfocus="this.select()"
                        disabled="@_account.HasVerifiedPhone()"/>
                    <datalist id="phoneCodes">
                        @foreach (var phoneCode in PhoneCodes.List) {
                            <option value="@phoneCode.DisplayCode">@phoneCode.Country (@phoneCode.DisplayCode)</option>
                        }
                    </datalist>
                </FormSection>
                <FormSection
                    For="() => _form.Number"
                    InputId="@_form.NumberFieldId"
                    Label="Phone number"
                    Class="grow"
                    IsLabelInsideInput="true"
                    IsRequired="true">
                    <ChildContent>
                        <InputText
                            id="@_form.NumberFieldId"
                            @bind-Value="_form.Number"
                            autocomplete="tel-national"
                            type="tel"
                            pattern="@PhoneValidation.NumberPattern"
                            inputmode="tel"
                            disabled="@isPhoneVerified"/>
                    </ChildContent>
                    <Right>
                        @if (isPhoneValid) {
                            <VerificationStatus IsVerified="isPhoneVerified"/>
                        }
                    </Right>
                </FormSection>
            </div>

            @if (isPhoneValid && !isPhoneVerified) {
                <PhoneVerifier Phone="@phone.Value" Class="my-3" Verified="OnPhoneVerified"/>
            }

            <FormSection For="() => _form.Email" InputId="@_form.EmailFieldId" Label="Email" IsLabelInsideInput="true">
                <ChildContent>
                    <TextBox @bind-Value="@_form.Email" Id="@_form.EmailFieldId" Autofocus="true" disabled/>
                </ChildContent>
                <Right>
                    <VerificationStatus IsVerified="@_account.HasVerifiedEmail()"/>
                </Right>
            </FormSection>
        </FormBlock>
        <FormBlock>
            <button type="button" class="delete-avatar-btn" @onclick="@OnDeleteAccountClick">
                <div>
                    <i class="icon-trash03 text-xl text-error"></i>
                </div>
                <div class="flex w-full px-8 text-error">
                    Delete account
                </div>
            </button>
        </FormBlock>
        </Body>
        <Buttons>
            <FormButtons>
                <Button Type="@ButtonType.Button" Class="btn-cancel" Click="OnCancel">Cancel</Button>
                <Button Type="@ButtonType.Submit" Class="btn-primary" IsDisabled="@(!_formRef.IsValid)">Save</Button>
            </FormButtons>
        </Buttons>
    </DialogFrame>
</Form>

@code {
    private Form _formRef = null!;
    private FormModel _form = null!;
    private AccountFull _account = AccountFull.Loading;

    [Inject] private Session Session { get; init; } = null!;
    [Inject] private IAccounts Accounts { get; init; } = null!;
    [Inject] private ComponentIdGenerator ComponentIdGenerator { get; init; } = null!;
    [Inject] private UICommander UICommander { get; init; } = null!;
    [Inject] private ModalUI ModalUI { get; init; } = null!;

    [CascadingParameter] public Modal Modal { get; set; } = null!;
    [Parameter] public Model ModalModel { get; set; } = null!;

    protected override async Task OnInitializedAsync() {
        _form = new FormModel(ComponentIdGenerator).CopyToBase(); // Must be fully initialized in sync part
        _account = await Accounts.GetOwn(Session, default);
        _form.Name = _account.Name;
        _form.LastName = _account.LastName;
        _form.Email = _account.Email;
        _form.Code = PhoneCodes.GetByCode(_account.Phone.Code)?.DisplayCode ?? PhoneCodes.Default.DisplayCode;
        _form.Number = _account.Phone.Number;
        _form.CopyToBase();
    }

    private async void OnSave() {
        var account = await Accounts.GetOwn(Session, default);
        var updateAccountCommand = new Accounts_Update(
            Session,
            account with {
                Name = _form.Name,
                LastName = _form.LastName,
            },
            account.Version);
        var (_, error) = await UICommander.Run(updateAccountCommand);
        if (error != null)
            return;

        _form.CopyToBase();
        Modal.Close();
    }

    private void OnCancel()
        => Modal.Close();

    private async Task OnPhoneVerified()
        => _account = await Accounts.GetOwn(Session, default);

    private Task OnDeleteAccountClick()
        => ModalUI.Show(new DeleteAccountModal.Model());

    public sealed class FormModel : FormModel<FormModel> {

        [Required, MinLength(4, ErrorMessage = "Name must be at least 4 characters.")]
        public string Name { get; set; } = "";
        public string NameFieldId { get; set; } = "";
        public string LastName { get; set; } = "";
        public string LastNameFieldId { get; set; } = "";
        public string Email { get; set; } = "";
        public string EmailFieldId { get; set; } = "";
        [Required, CountryCode] public string Code { get; set; } = PhoneCodes.Default.DisplayCode;
        public string CodeFieldId { get; set; } = "";
        [Required, PhoneNumber] public string Number { get; set; } = "";
        public string NumberFieldId { get; set; } = "";
        public Phone Phone => new(Code, Number);

        public FormModel(ComponentIdGenerator? componentIdGenerator)
            : base("own-account-editor", componentIdGenerator)
        { }
    }

    public sealed record Model {
        public static Model Default { get; } = new();
    }

}
