@page "/"
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@namespace ActualChat.Host.Pages
@using ActualChat.Host.Module
@using ActualChat.Hosting
@using Stl.Fusion.Blazor
@using Stl.Fusion.Server.Authentication
@using Stl.Fusion.Server.Controllers
@inject IServiceProvider _services
@inject ServerAuthHelper _serverAuthHelper
@inject HostSettings _hostSettings
@inject BlazorCircuitContext _circuitContext
@inject HostInfo _hostInfo
@{
    await _serverAuthHelper.UpdateAuthState(HttpContext);
    var authSchemas = await _serverAuthHelper.GetSchemas(HttpContext);
    var sessionId = _serverAuthHelper.Session.Id.Value;
    var isServerSideBlazor = BlazorModeController.IsServerSideBlazor(HttpContext);
    var isCloseWindowRequest = _serverAuthHelper.IsCloseWindowRequest(HttpContext, out var closeWindowFlowName);
    var blazorMaxReconnectRetries = _hostInfo.IsDevelopmentInstance ? 10_000_000 : 1_800; // 1h of retries
    Layout = null;
    // TODO: add HeadOutlet component (to edit <head>)
    // https://devblogs.microsoft.com/aspnet/asp-net-core-updates-in-net-6-preview-7/#modify-html-head-content-from-blazor-components
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8"/>
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no"/>
    <title>Actual Chat</title>
    <base href="~/"/>
    <link href="/dist/bundle.css" rel="stylesheet"/>
    <link href="_content/Blazored.Modal/blazored-modal.css" rel="stylesheet" />
    <script src="_content/Stl.Fusion.Blazor/scripts/fusionAuth.js"></script>
    <script>
        history.scrollRestoration = "manual";
        window.FusionAuth.schemas = "@authSchemas";
        window.FusionAuth.sessionId = "@sessionId";
    </script>
</head>
<body>
<div id="blazor-error-ui" class="hidden fixed inset-x-0 mt-12" style="z-index:100000;">
    <div class="flex w-full justify-center">
        <div class="flex flex-1 max-w-3xl bg-red-100 shadow-lg transition duration-300 ease-in-out transform hover:-translate-y-1 hover:scale-105">
            <div class="bg-red-500 w-16 text-white justify-center flex items-center">
                <i class="fa fa-2x fa-exclamation-triangle"></i>
            </div>
            <div class="h-full flex-1 flex border-r-8 border-red-500">
                <div class="flex-1 px-4 py-2 break-words">
                    <p class="text-grey-dark font-bold">Error</p>
                    <p class="text-grey-dark">
                        <environment include="Staging,Production">
                            An error has occurred. This application may no longer respond until reloaded.
                        </environment>
                        <environment include="Development">
                            An unhandled exception has occurred. See browser dev tools for details.
                        </environment>
                    </p>
                </div>
                <div class="flex-col w-8 items-start mx-auto pt-2 px-1 text-right text-grey-dark ml-3 mr-1">
                    <i class="block dismiss cursor-pointer fa fa-times fa-fw"></i>
                    <i class="reload block cursor-pointer fa fa-repeat fa-fw"></i>
                </div>
            </div>
        </div>
    </div>
</div>

<div id="components-reconnect-modal">
    <div class="loading">
        <div class="loading-caption">Unable to connect to server. Reconnecting...</div>
        <div class="loading-progress-ring"></div>
    </div>
</div>

@if (isCloseWindowRequest) {
    <script>
        setTimeout(function () {
            window.close();
        }, 500)
    </script>
    <div class="alert alert-primary">
        @(closeWindowFlowName) completed, you can close this window.
    </div>
} else {
    <app id="app" class="flex flex-col h-full" >
        @(await Html.RenderApp(_services, HttpContext))
        @* <component type="typeof(App)" render-mode="Server" /> *@
    </app>

    <script src="/dist/bundle.js"></script>
    @if(isServerSideBlazor)
    {
        <script src="_framework/blazor.server.js" autostart="false"></script>
        <script>
            (function () {
                async function attemptReload() {
                    try{
                        await fetch('');
                        location.reload();
                    }
                    catch{}
                }
                const observer = new MutationObserver((mutations, observer) => {
                    mutations.forEach(mutation => {
                        const classList = mutation.target.classList;
                        if (classList.contains('components-reconnect-rejected')) {
                            attemptReload();
                            setInterval(attemptReload, 2000);
                            observer.disconnect();
                        }
                    });
                });
                const reconnectModal = document.getElementById('components-reconnect-modal');
                if (reconnectModal !== null) {
                    observer.observe(reconnectModal, { attributes: true, subtree: true });
                }
            }());

            Blazor.start({
                reconnectionOptions: {
                     maxRetries: @(blazorMaxReconnectRetries),
                     retryIntervalMilliseconds: 2000
                },
            });
            </script>
        <script src="_content/Blazored.Modal/blazored.modal.js"></script>
    }
    else
    {
        <script src="_framework/blazor.webassembly.js"></script>
        <script src="_content/Blazored.Modal/blazored.modal.js"></script>
    }
}
</body>
</html>
