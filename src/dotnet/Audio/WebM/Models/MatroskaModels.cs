using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Runtime.CompilerServices;
using ActualChat.Spans;

// ReSharper disable UnusedAutoPropertyAccessor.Global
// ReSharper disable InconsistentNaming
// ReSharper disable ClassNeverInstantiated.Global
// ReSharper disable IdentifierTypo


//--------------------------------------------------------------------------------------------------------
// <auto-generated>
//     This C# code class was auto-generated at 07/26/2022 08:55:21.
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//
//     Based on "https://github.com/ietf-wg-cellar/matroska-specification/blob/master/ebml_matroska.xml".
// </auto-generated>
//--------------------------------------------------------------------------------------------------------
namespace ActualChat.Audio.WebM.Models
{
    [GeneratedCode("MatroskaModels.tt", "1.0.0.0")]
    [MatroskaElementDescriptor(MatroskaSpecification.Unknown)]
    public sealed class Unknown : BaseModel
    {
        public override EbmlElementDescriptor Descriptor => MatroskaSpecification.UnknownDescriptor;


        public override ulong GetSize() {
            var size = 0UL;
            return size;
        }
    }

    [GeneratedCode("MatroskaModels.tt", "1.0.0.0")]
    [MatroskaElementDescriptor(MatroskaSpecification.EBML)]
    public sealed class EBML : RootEntry
    {
        public override EbmlElementDescriptor Descriptor => MatroskaSpecification.EBMLDescriptor;

        [MatroskaElementDescriptor(MatroskaSpecification.EBMLVersion)]
        public ulong EBMLVersion { get; set; } = 1;

        [MatroskaElementDescriptor(MatroskaSpecification.EBMLReadVersion)]
        public ulong EBMLReadVersion { get; set; } = 1;

        [MatroskaElementDescriptor(MatroskaSpecification.EBMLMaxIDLength)]
        public ulong EBMLMaxIDLength { get; set; } = 4;

        [MatroskaElementDescriptor(MatroskaSpecification.EBMLMaxSizeLength)]
        public ulong EBMLMaxSizeLength { get; set; } = 8;

        [MatroskaElementDescriptor(MatroskaSpecification.DocType)]
        public string DocType { get; set; } = null!;

        [MatroskaElementDescriptor(MatroskaSpecification.DocTypeVersion)]
        public ulong DocTypeVersion { get; set; } = 1;

        [MatroskaElementDescriptor(MatroskaSpecification.DocTypeReadVersion)]
        public ulong DocTypeReadVersion { get; set; } = 1;

        [MatroskaElementDescriptor(MatroskaSpecification.DocTypeExtension)]
        public DocTypeExtension? DocTypeExtension { get; set; }

        public override ulong GetSize() {
            var size = 0UL;
            size += EbmlHelper.GetElementSize(MatroskaSpecification.EBMLVersion, EBMLVersion);
            size += EbmlHelper.GetElementSize(MatroskaSpecification.EBMLReadVersion, EBMLReadVersion);
            size += EbmlHelper.GetElementSize(MatroskaSpecification.EBMLMaxIDLength, EBMLMaxIDLength);
            size += EbmlHelper.GetElementSize(MatroskaSpecification.EBMLMaxSizeLength, EBMLMaxSizeLength);
            size += EbmlHelper.GetElementSize(MatroskaSpecification.DocType, DocType, true);
            size += EbmlHelper.GetElementSize(MatroskaSpecification.DocTypeVersion, DocTypeVersion);
            size += EbmlHelper.GetElementSize(MatroskaSpecification.DocTypeReadVersion, DocTypeReadVersion);
            size += EbmlHelper.GetElementSize(MatroskaSpecification.DocTypeExtension, DocTypeExtension);
            return size;
        }
    }

    [GeneratedCode("MatroskaModels.tt", "1.0.0.0")]
    [MatroskaElementDescriptor(MatroskaSpecification.DocTypeExtension)]
    public sealed class DocTypeExtension : BaseModel
    {
        public override EbmlElementDescriptor Descriptor => MatroskaSpecification.DocTypeExtensionDescriptor;

        [MatroskaElementDescriptor(MatroskaSpecification.DocTypeExtensionName)]
        public string DocTypeExtensionName { get; set; } = null!;

        [MatroskaElementDescriptor(MatroskaSpecification.DocTypeExtensionVersion)]
        public ulong DocTypeExtensionVersion { get; set; }

        public override ulong GetSize() {
            var size = 0UL;
            size += EbmlHelper.GetElementSize(MatroskaSpecification.DocTypeExtensionName, DocTypeExtensionName, true);
            size += EbmlHelper.GetElementSize(MatroskaSpecification.DocTypeExtensionVersion, DocTypeExtensionVersion);
            return size;
        }
    }

    [GeneratedCode("MatroskaModels.tt", "1.0.0.0")]
    [MatroskaElementDescriptor(MatroskaSpecification.Segment)]
    public sealed class Segment : RootEntry
    {
        public override EbmlElementDescriptor Descriptor => MatroskaSpecification.SegmentDescriptor;

        [MatroskaElementDescriptor(MatroskaSpecification.SeekHead)]
        public SeekHead? SeekHead { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.Info)]
        public Info Info { get; set; } = null!;

        [MatroskaElementDescriptor(MatroskaSpecification.Tracks)]
        public Tracks? Tracks { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.Cues)]
        public Cues? Cues { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.Attachments)]
        public Attachments? Attachments { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.Chapters)]
        public Chapters? Chapters { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.Tags)]
        public Tags? Tags { get; set; }

        public override ulong GetSize() {
            var size = 0UL;
            size = 0xFF_FFFF_FFFF_FFFF;

            return size;
        }
    }

    [GeneratedCode("MatroskaModels.tt", "1.0.0.0")]
    [MatroskaElementDescriptor(MatroskaSpecification.Attachments)]
    public sealed class Attachments : BaseModel
    {
        public override EbmlElementDescriptor Descriptor => MatroskaSpecification.AttachmentsDescriptor;

        [MatroskaElementDescriptor(MatroskaSpecification.AttachedFile)]
        public AttachedFile AttachedFile { get; set; } = null!;

        public override ulong GetSize() {
            var size = 0UL;
            size += EbmlHelper.GetElementSize(MatroskaSpecification.AttachedFile, AttachedFile);
            return size;
        }
    }

    [GeneratedCode("MatroskaModels.tt", "1.0.0.0")]
    [MatroskaElementDescriptor(MatroskaSpecification.AttachedFile)]
    public sealed class AttachedFile : BaseModel
    {
        public override EbmlElementDescriptor Descriptor => MatroskaSpecification.AttachedFileDescriptor;

        [MatroskaElementDescriptor(MatroskaSpecification.FileDescription)]
        public string? FileDescription { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.FileName)]
        public string FileName { get; set; } = null!;

        [MatroskaElementDescriptor(MatroskaSpecification.FileMimeType)]
        public string FileMimeType { get; set; } = null!;

        [MatroskaElementDescriptor(MatroskaSpecification.FileData)]
        public byte[] FileData { get; set; } = null!;

        [MatroskaElementDescriptor(MatroskaSpecification.FileUID)]
        public ulong FileUID { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.FileReferral)]
        public byte[]? FileReferral { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.FileUsedStartTime)]
        public ulong? FileUsedStartTime { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.FileUsedEndTime)]
        public ulong? FileUsedEndTime { get; set; }

        public override ulong GetSize() {
            var size = 0UL;
            size += EbmlHelper.GetElementSize(MatroskaSpecification.FileDescription, FileDescription, false);
            size += EbmlHelper.GetElementSize(MatroskaSpecification.FileName, FileName, false);
            size += EbmlHelper.GetElementSize(MatroskaSpecification.FileMimeType, FileMimeType, true);
            size += EbmlHelper.GetElementSize(MatroskaSpecification.FileData, FileData);
            size += EbmlHelper.GetElementSize(MatroskaSpecification.FileUID, FileUID);
            size += EbmlHelper.GetElementSize(MatroskaSpecification.FileReferral, FileReferral);
            size += EbmlHelper.GetElementSize(MatroskaSpecification.FileUsedStartTime, FileUsedStartTime);
            size += EbmlHelper.GetElementSize(MatroskaSpecification.FileUsedEndTime, FileUsedEndTime);
            return size;
        }
    }

    [GeneratedCode("MatroskaModels.tt", "1.0.0.0")]
    [MatroskaElementDescriptor(MatroskaSpecification.Chapters)]
    public sealed class Chapters : BaseModel
    {
        public override EbmlElementDescriptor Descriptor => MatroskaSpecification.ChaptersDescriptor;

        [MatroskaElementDescriptor(MatroskaSpecification.EditionEntry)]
        public EditionEntry EditionEntry { get; set; } = null!;

        public override ulong GetSize() {
            var size = 0UL;
            size += EbmlHelper.GetElementSize(MatroskaSpecification.EditionEntry, EditionEntry);
            return size;
        }
    }

    [GeneratedCode("MatroskaModels.tt", "1.0.0.0")]
    [MatroskaElementDescriptor(MatroskaSpecification.EditionEntry)]
    public sealed class EditionEntry : BaseModel
    {
        public override EbmlElementDescriptor Descriptor => MatroskaSpecification.EditionEntryDescriptor;

        [MatroskaElementDescriptor(MatroskaSpecification.EditionUID)]
        public ulong? EditionUID { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.EditionFlagHidden)]
        public ulong EditionFlagHidden { get; set; } = 0;

        [MatroskaElementDescriptor(MatroskaSpecification.EditionFlagDefault)]
        public ulong EditionFlagDefault { get; set; } = 0;

        [MatroskaElementDescriptor(MatroskaSpecification.EditionFlagOrdered)]
        public ulong EditionFlagOrdered { get; set; } = 0;

        [MatroskaElementDescriptor(MatroskaSpecification.ChapterAtom)]
        public ChapterAtom ChapterAtom { get; set; } = null!;

        public override ulong GetSize() {
            var size = 0UL;
            size += EbmlHelper.GetElementSize(MatroskaSpecification.EditionUID, EditionUID);
            if (EditionFlagHidden != 0)
                size += EbmlHelper.GetElementSize(MatroskaSpecification.EditionFlagHidden, EditionFlagHidden);
            if (EditionFlagDefault != 0)
                size += EbmlHelper.GetElementSize(MatroskaSpecification.EditionFlagDefault, EditionFlagDefault);
            if (EditionFlagOrdered != 0)
                size += EbmlHelper.GetElementSize(MatroskaSpecification.EditionFlagOrdered, EditionFlagOrdered);
            size += EbmlHelper.GetElementSize(MatroskaSpecification.ChapterAtom, ChapterAtom);
            return size;
        }
    }

    [GeneratedCode("MatroskaModels.tt", "1.0.0.0")]
    [MatroskaElementDescriptor(MatroskaSpecification.ChapterAtom)]
    public sealed class ChapterAtom : BaseModel
    {
        public override EbmlElementDescriptor Descriptor => MatroskaSpecification.ChapterAtomDescriptor;


        public override ulong GetSize() {
            var size = 0UL;
            return size;
        }
    }

    [GeneratedCode("MatroskaModels.tt", "1.0.0.0")]
    [MatroskaElementDescriptor(MatroskaSpecification.ChapProcess)]
    public sealed class ChapProcess : BaseModel
    {
        public override EbmlElementDescriptor Descriptor => MatroskaSpecification.ChapProcessDescriptor;


        public override ulong GetSize() {
            var size = 0UL;
            return size;
        }
    }

    [GeneratedCode("MatroskaModels.tt", "1.0.0.0")]
    [MatroskaElementDescriptor(MatroskaSpecification.ChapProcessCommand)]
    public sealed class ChapProcessCommand : BaseModel
    {
        public override EbmlElementDescriptor Descriptor => MatroskaSpecification.ChapProcessCommandDescriptor;


        public override ulong GetSize() {
            var size = 0UL;
            return size;
        }
    }

    [GeneratedCode("MatroskaModels.tt", "1.0.0.0")]
    [MatroskaElementDescriptor(MatroskaSpecification.ChapterDisplay)]
    public sealed class ChapterDisplay : BaseModel
    {
        public override EbmlElementDescriptor Descriptor => MatroskaSpecification.ChapterDisplayDescriptor;


        public override ulong GetSize() {
            var size = 0UL;
            return size;
        }
    }

    [GeneratedCode("MatroskaModels.tt", "1.0.0.0")]
    [MatroskaElementDescriptor(MatroskaSpecification.ChapterTrack)]
    public sealed class ChapterTrack : BaseModel
    {
        public override EbmlElementDescriptor Descriptor => MatroskaSpecification.ChapterTrackDescriptor;


        public override ulong GetSize() {
            var size = 0UL;
            return size;
        }
    }

    [GeneratedCode("MatroskaModels.tt", "1.0.0.0")]
    [MatroskaElementDescriptor(MatroskaSpecification.Cluster)]
    public sealed class Cluster : RootEntry
    {
        public override EbmlElementDescriptor Descriptor => MatroskaSpecification.ClusterDescriptor;

        [MatroskaElementDescriptor(MatroskaSpecification.Timestamp)]
        public ulong Timestamp { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.SilentTracks)]
        public SilentTracks? SilentTracks { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.Position)]
        public ulong? Position { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.PrevSize)]
        public ulong? PrevSize { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.SimpleBlock, typeof(SimpleBlock))]
        public IReadOnlyList<SimpleBlock>? SimpleBlocks { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.BlockGroup, typeof(BlockGroup))]
        public IReadOnlyList<BlockGroup>? BlockGroups { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.EncryptedBlock, typeof(EncryptedBlock))]
        public IReadOnlyList<EncryptedBlock>? EncryptedBlocks { get; set; }

        public override ulong GetSize() {
            var size = 0UL;
            if (!IsCompleted)
                return 0xFF_FFFF_FFFF_FFFF;

            size += EbmlHelper.GetElementSize(MatroskaSpecification.Timestamp, Timestamp);
            size += EbmlHelper.GetElementSize(MatroskaSpecification.SilentTracks, SilentTracks);
            size += EbmlHelper.GetElementSize(MatroskaSpecification.Position, Position);
            size += EbmlHelper.GetElementSize(MatroskaSpecification.PrevSize, PrevSize);
            size += EbmlHelper.GetElementSize(MatroskaSpecification.SimpleBlock, SimpleBlocks);
            size += EbmlHelper.GetElementSize(MatroskaSpecification.BlockGroup, BlockGroups);
            size += EbmlHelper.GetElementSize(MatroskaSpecification.EncryptedBlock, EncryptedBlocks);
            return size;
        }
    }

    [GeneratedCode("MatroskaModels.tt", "1.0.0.0")]
    [MatroskaElementDescriptor(MatroskaSpecification.BlockGroup)]
    public sealed class BlockGroup : BaseModel
    {
        public override EbmlElementDescriptor Descriptor => MatroskaSpecification.BlockGroupDescriptor;

        [MatroskaElementDescriptor(MatroskaSpecification.Block, typeof(Block))]
        public IReadOnlyList<Block> Blocks { get; set; } = null!;

        [MatroskaElementDescriptor(MatroskaSpecification.BlockVirtual, typeof(BlockVirtual))]
        public IReadOnlyList<BlockVirtual>? BlockVirtuals { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.BlockAdditions)]
        public BlockAdditions? BlockAdditions { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.BlockDuration)]
        public ulong? BlockDuration { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.ReferencePriority)]
        public ulong ReferencePriority { get; set; } = 0;

        [MatroskaElementDescriptor(MatroskaSpecification.ReferenceBlock)]
        public long? ReferenceBlock { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.ReferenceVirtual)]
        public long? ReferenceVirtual { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.CodecState)]
        public byte[]? CodecState { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.DiscardPadding)]
        public long? DiscardPadding { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.Slices)]
        public Slices? Slices { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.ReferenceFrame)]
        public ReferenceFrame? ReferenceFrame { get; set; }

        public override ulong GetSize() {
            var size = 0UL;
            size += EbmlHelper.GetElementSize(MatroskaSpecification.Block, Blocks);
            size += EbmlHelper.GetElementSize(MatroskaSpecification.BlockVirtual, BlockVirtuals);
            size += EbmlHelper.GetElementSize(MatroskaSpecification.BlockAdditions, BlockAdditions);
            size += EbmlHelper.GetElementSize(MatroskaSpecification.BlockDuration, BlockDuration);
            if (ReferencePriority != 0)
                size += EbmlHelper.GetElementSize(MatroskaSpecification.ReferencePriority, ReferencePriority);
            size += EbmlHelper.GetElementSize(MatroskaSpecification.ReferenceBlock, ReferenceBlock);
            size += EbmlHelper.GetElementSize(MatroskaSpecification.ReferenceVirtual, ReferenceVirtual);
            size += EbmlHelper.GetElementSize(MatroskaSpecification.CodecState, CodecState);
            size += EbmlHelper.GetElementSize(MatroskaSpecification.DiscardPadding, DiscardPadding);
            size += EbmlHelper.GetElementSize(MatroskaSpecification.Slices, Slices);
            size += EbmlHelper.GetElementSize(MatroskaSpecification.ReferenceFrame, ReferenceFrame);
            return size;
        }
    }

    [GeneratedCode("MatroskaModels.tt", "1.0.0.0")]
    [MatroskaElementDescriptor(MatroskaSpecification.BlockAdditions)]
    public sealed class BlockAdditions : BaseModel
    {
        public override EbmlElementDescriptor Descriptor => MatroskaSpecification.BlockAdditionsDescriptor;

        [MatroskaElementDescriptor(MatroskaSpecification.BlockMore)]
        public BlockMore BlockMore { get; set; } = null!;

        public override ulong GetSize() {
            var size = 0UL;
            size += EbmlHelper.GetElementSize(MatroskaSpecification.BlockMore, BlockMore);
            return size;
        }
    }

    [GeneratedCode("MatroskaModels.tt", "1.0.0.0")]
    [MatroskaElementDescriptor(MatroskaSpecification.BlockMore)]
    public sealed class BlockMore : BaseModel
    {
        public override EbmlElementDescriptor Descriptor => MatroskaSpecification.BlockMoreDescriptor;

        [MatroskaElementDescriptor(MatroskaSpecification.BlockAddID)]
        public ulong BlockAddID { get; set; } = 1;

        [MatroskaElementDescriptor(MatroskaSpecification.BlockAdditional, typeof(BlockAdditional))]
        public IReadOnlyList<BlockAdditional> BlockAdditionals { get; set; } = null!;

        public override ulong GetSize() {
            var size = 0UL;
            if (BlockAddID != 1)
                size += EbmlHelper.GetElementSize(MatroskaSpecification.BlockAddID, BlockAddID);
            size += EbmlHelper.GetElementSize(MatroskaSpecification.BlockAdditional, BlockAdditionals);
            return size;
        }
    }

    [GeneratedCode("MatroskaModels.tt", "1.0.0.0")]
    [MatroskaElementDescriptor(MatroskaSpecification.ReferenceFrame)]
    public sealed class ReferenceFrame : BaseModel
    {
        public override EbmlElementDescriptor Descriptor => MatroskaSpecification.ReferenceFrameDescriptor;

        [MatroskaElementDescriptor(MatroskaSpecification.ReferenceOffset)]
        public ulong ReferenceOffset { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.ReferenceTimestamp)]
        public ulong ReferenceTimestamp { get; set; }

        public override ulong GetSize() {
            var size = 0UL;
            size += EbmlHelper.GetElementSize(MatroskaSpecification.ReferenceOffset, ReferenceOffset);
            size += EbmlHelper.GetElementSize(MatroskaSpecification.ReferenceTimestamp, ReferenceTimestamp);
            return size;
        }
    }

    [GeneratedCode("MatroskaModels.tt", "1.0.0.0")]
    [MatroskaElementDescriptor(MatroskaSpecification.Slices)]
    public sealed class Slices : BaseModel
    {
        public override EbmlElementDescriptor Descriptor => MatroskaSpecification.SlicesDescriptor;

        [MatroskaElementDescriptor(MatroskaSpecification.TimeSlice)]
        public TimeSlice? TimeSlice { get; set; }

        public override ulong GetSize() {
            var size = 0UL;
            size += EbmlHelper.GetElementSize(MatroskaSpecification.TimeSlice, TimeSlice);
            return size;
        }
    }

    [GeneratedCode("MatroskaModels.tt", "1.0.0.0")]
    [MatroskaElementDescriptor(MatroskaSpecification.TimeSlice)]
    public sealed class TimeSlice : BaseModel
    {
        public override EbmlElementDescriptor Descriptor => MatroskaSpecification.TimeSliceDescriptor;

        [MatroskaElementDescriptor(MatroskaSpecification.LaceNumber)]
        public ulong? LaceNumber { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.FrameNumber)]
        public ulong? FrameNumber { get; set; } = 0;

        [MatroskaElementDescriptor(MatroskaSpecification.BlockAdditionID)]
        public ulong? BlockAdditionID { get; set; } = 0;

        [MatroskaElementDescriptor(MatroskaSpecification.Delay)]
        public ulong? Delay { get; set; } = 0;

        [MatroskaElementDescriptor(MatroskaSpecification.SliceDuration)]
        public ulong? SliceDuration { get; set; } = 0;

        public override ulong GetSize() {
            var size = 0UL;
            size += EbmlHelper.GetElementSize(MatroskaSpecification.LaceNumber, LaceNumber);
            if (FrameNumber != 0)
                size += EbmlHelper.GetElementSize(MatroskaSpecification.FrameNumber, FrameNumber);
            if (BlockAdditionID != 0)
                size += EbmlHelper.GetElementSize(MatroskaSpecification.BlockAdditionID, BlockAdditionID);
            if (Delay != 0)
                size += EbmlHelper.GetElementSize(MatroskaSpecification.Delay, Delay);
            if (SliceDuration != 0)
                size += EbmlHelper.GetElementSize(MatroskaSpecification.SliceDuration, SliceDuration);
            return size;
        }
    }

    [GeneratedCode("MatroskaModels.tt", "1.0.0.0")]
    [MatroskaElementDescriptor(MatroskaSpecification.SilentTracks)]
    public sealed class SilentTracks : BaseModel
    {
        public override EbmlElementDescriptor Descriptor => MatroskaSpecification.SilentTracksDescriptor;

        [MatroskaElementDescriptor(MatroskaSpecification.SilentTrackNumber)]
        public ulong? SilentTrackNumber { get; set; }

        public override ulong GetSize() {
            var size = 0UL;
            size += EbmlHelper.GetElementSize(MatroskaSpecification.SilentTrackNumber, SilentTrackNumber);
            return size;
        }
    }

    [GeneratedCode("MatroskaModels.tt", "1.0.0.0")]
    [MatroskaElementDescriptor(MatroskaSpecification.Cues)]
    public sealed class Cues : BaseModel
    {
        public override EbmlElementDescriptor Descriptor => MatroskaSpecification.CuesDescriptor;

        [MatroskaElementDescriptor(MatroskaSpecification.CuePoint, typeof(CuePoint))]
        public IReadOnlyList<CuePoint> CuePoints { get; set; } = null!;

        public override ulong GetSize() {
            var size = 0UL;
            size += EbmlHelper.GetElementSize(MatroskaSpecification.CuePoint, CuePoints);
            return size;
        }
    }

    [GeneratedCode("MatroskaModels.tt", "1.0.0.0")]
    [MatroskaElementDescriptor(MatroskaSpecification.CuePoint)]
    public sealed class CuePoint : BaseModel
    {
        public override EbmlElementDescriptor Descriptor => MatroskaSpecification.CuePointDescriptor;

        [MatroskaElementDescriptor(MatroskaSpecification.CueTime)]
        public ulong CueTime { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.CueTrackPositions)]
        public CueTrackPositions CueTrackPositions { get; set; } = null!;

        public override ulong GetSize() {
            var size = 0UL;
            size += EbmlHelper.GetElementSize(MatroskaSpecification.CueTime, CueTime);
            size += EbmlHelper.GetElementSize(MatroskaSpecification.CueTrackPositions, CueTrackPositions);
            return size;
        }
    }

    [GeneratedCode("MatroskaModels.tt", "1.0.0.0")]
    [MatroskaElementDescriptor(MatroskaSpecification.CueTrackPositions)]
    public sealed class CueTrackPositions : BaseModel
    {
        public override EbmlElementDescriptor Descriptor => MatroskaSpecification.CueTrackPositionsDescriptor;

        [MatroskaElementDescriptor(MatroskaSpecification.CueTrack)]
        public ulong CueTrack { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.CueClusterPosition)]
        public ulong CueClusterPosition { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.CueRelativePosition)]
        public ulong? CueRelativePosition { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.CueDuration)]
        public ulong? CueDuration { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.CueBlockNumber)]
        public ulong? CueBlockNumber { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.CueCodecState)]
        public ulong? CueCodecState { get; set; } = 0;

        [MatroskaElementDescriptor(MatroskaSpecification.CueReference, typeof(CueReference))]
        public IReadOnlyList<CueReference>? CueReferences { get; set; }

        public override ulong GetSize() {
            var size = 0UL;
            size += EbmlHelper.GetElementSize(MatroskaSpecification.CueTrack, CueTrack);
            size += EbmlHelper.GetElementSize(MatroskaSpecification.CueClusterPosition, CueClusterPosition);
            size += EbmlHelper.GetElementSize(MatroskaSpecification.CueRelativePosition, CueRelativePosition);
            size += EbmlHelper.GetElementSize(MatroskaSpecification.CueDuration, CueDuration);
            size += EbmlHelper.GetElementSize(MatroskaSpecification.CueBlockNumber, CueBlockNumber);
            if (CueCodecState != 0)
                size += EbmlHelper.GetElementSize(MatroskaSpecification.CueCodecState, CueCodecState);
            size += EbmlHelper.GetElementSize(MatroskaSpecification.CueReference, CueReferences);
            return size;
        }
    }

    [GeneratedCode("MatroskaModels.tt", "1.0.0.0")]
    [MatroskaElementDescriptor(MatroskaSpecification.CueReference)]
    public sealed class CueReference : BaseModel
    {
        public override EbmlElementDescriptor Descriptor => MatroskaSpecification.CueReferenceDescriptor;

        [MatroskaElementDescriptor(MatroskaSpecification.CueRefTime)]
        public ulong CueRefTime { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.CueRefCluster)]
        public ulong CueRefCluster { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.CueRefNumber)]
        public ulong? CueRefNumber { get; set; } = 1;

        [MatroskaElementDescriptor(MatroskaSpecification.CueRefCodecState)]
        public ulong? CueRefCodecState { get; set; } = 0;

        public override ulong GetSize() {
            var size = 0UL;
            size += EbmlHelper.GetElementSize(MatroskaSpecification.CueRefTime, CueRefTime);
            size += EbmlHelper.GetElementSize(MatroskaSpecification.CueRefCluster, CueRefCluster);
            if (CueRefNumber != 1)
                size += EbmlHelper.GetElementSize(MatroskaSpecification.CueRefNumber, CueRefNumber);
            if (CueRefCodecState != 0)
                size += EbmlHelper.GetElementSize(MatroskaSpecification.CueRefCodecState, CueRefCodecState);
            return size;
        }
    }

    [GeneratedCode("MatroskaModels.tt", "1.0.0.0")]
    [MatroskaElementDescriptor(MatroskaSpecification.Info)]
    public sealed class Info : BaseModel
    {
        public override EbmlElementDescriptor Descriptor => MatroskaSpecification.InfoDescriptor;

        [MatroskaElementDescriptor(MatroskaSpecification.SegmentUID)]
        public byte[]? SegmentUID { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.SegmentFilename)]
        public string? SegmentFilename { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.PrevUID)]
        public byte[]? PrevUID { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.PrevFilename)]
        public string? PrevFilename { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.NextUID)]
        public byte[]? NextUID { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.NextFilename)]
        public string? NextFilename { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.SegmentFamily)]
        public byte[]? SegmentFamily { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.ChapterTranslate)]
        public ChapterTranslate? ChapterTranslate { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.TimestampScale)]
        public ulong TimestampScale { get; set; } = 1000000;

        [MatroskaElementDescriptor(MatroskaSpecification.Duration)]
        public float? Duration { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.DateUTC)]
        public DateTime? DateUTC { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.Title)]
        public string? Title { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.MuxingApp)]
        public string MuxingApp { get; set; } = null!;

        [MatroskaElementDescriptor(MatroskaSpecification.WritingApp)]
        public string WritingApp { get; set; } = null!;

        public override ulong GetSize() {
            var size = 0UL;
            size += EbmlHelper.GetElementSize(MatroskaSpecification.SegmentUID, SegmentUID);
            size += EbmlHelper.GetElementSize(MatroskaSpecification.SegmentFilename, SegmentFilename, false);
            size += EbmlHelper.GetElementSize(MatroskaSpecification.PrevUID, PrevUID);
            size += EbmlHelper.GetElementSize(MatroskaSpecification.PrevFilename, PrevFilename, false);
            size += EbmlHelper.GetElementSize(MatroskaSpecification.NextUID, NextUID);
            size += EbmlHelper.GetElementSize(MatroskaSpecification.NextFilename, NextFilename, false);
            size += EbmlHelper.GetElementSize(MatroskaSpecification.SegmentFamily, SegmentFamily);
            size += EbmlHelper.GetElementSize(MatroskaSpecification.ChapterTranslate, ChapterTranslate);
            size += EbmlHelper.GetElementSize(MatroskaSpecification.TimestampScale, TimestampScale);
            size += EbmlHelper.GetElementSize(MatroskaSpecification.Duration, Duration);
            size += EbmlHelper.GetElementSize(MatroskaSpecification.DateUTC, DateUTC);
            size += EbmlHelper.GetElementSize(MatroskaSpecification.Title, Title, false);
            size += EbmlHelper.GetElementSize(MatroskaSpecification.MuxingApp, MuxingApp, false);
            size += EbmlHelper.GetElementSize(MatroskaSpecification.WritingApp, WritingApp, false);
            return size;
        }
    }

    [GeneratedCode("MatroskaModels.tt", "1.0.0.0")]
    [MatroskaElementDescriptor(MatroskaSpecification.ChapterTranslate)]
    public sealed class ChapterTranslate : BaseModel
    {
        public override EbmlElementDescriptor Descriptor => MatroskaSpecification.ChapterTranslateDescriptor;

        [MatroskaElementDescriptor(MatroskaSpecification.ChapterTranslateEditionUID)]
        public ulong? ChapterTranslateEditionUID { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.ChapterTranslateCodec)]
        public ulong ChapterTranslateCodec { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.ChapterTranslateID)]
        public byte[] ChapterTranslateID { get; set; } = null!;

        public override ulong GetSize() {
            var size = 0UL;
            size += EbmlHelper.GetElementSize(MatroskaSpecification.ChapterTranslateEditionUID, ChapterTranslateEditionUID);
            size += EbmlHelper.GetElementSize(MatroskaSpecification.ChapterTranslateCodec, ChapterTranslateCodec);
            size += EbmlHelper.GetElementSize(MatroskaSpecification.ChapterTranslateID, ChapterTranslateID);
            return size;
        }
    }

    [GeneratedCode("MatroskaModels.tt", "1.0.0.0")]
    [MatroskaElementDescriptor(MatroskaSpecification.SeekHead)]
    public sealed class SeekHead : BaseModel
    {
        public override EbmlElementDescriptor Descriptor => MatroskaSpecification.SeekHeadDescriptor;

        [MatroskaElementDescriptor(MatroskaSpecification.Seek, typeof(Seek))]
        public IReadOnlyList<Seek> Seeks { get; set; } = null!;

        public override ulong GetSize() {
            var size = 0UL;
            size += EbmlHelper.GetElementSize(MatroskaSpecification.Seek, Seeks);
            return size;
        }
    }

    [GeneratedCode("MatroskaModels.tt", "1.0.0.0")]
    [MatroskaElementDescriptor(MatroskaSpecification.Seek)]
    public sealed class Seek : BaseModel
    {
        public override EbmlElementDescriptor Descriptor => MatroskaSpecification.SeekDescriptor;

        [MatroskaElementDescriptor(MatroskaSpecification.SeekID)]
        public byte[] SeekID { get; set; } = null!;

        [MatroskaElementDescriptor(MatroskaSpecification.SeekPosition)]
        public ulong SeekPosition { get; set; }

        public override ulong GetSize() {
            var size = 0UL;
            size += EbmlHelper.GetElementSize(MatroskaSpecification.SeekID, SeekID);
            size += EbmlHelper.GetElementSize(MatroskaSpecification.SeekPosition, SeekPosition);
            return size;
        }
    }

    [GeneratedCode("MatroskaModels.tt", "1.0.0.0")]
    [MatroskaElementDescriptor(MatroskaSpecification.Tags)]
    public sealed class Tags : BaseModel
    {
        public override EbmlElementDescriptor Descriptor => MatroskaSpecification.TagsDescriptor;

        [MatroskaElementDescriptor(MatroskaSpecification.Tag, typeof(TagItem))]
        public IReadOnlyList<TagItem> TagItems { get; set; } = null!;

        public override ulong GetSize() {
            var size = 0UL;
            size += EbmlHelper.GetElementSize(MatroskaSpecification.Tag, TagItems);
            return size;
        }
    }

    [GeneratedCode("MatroskaModels.tt", "1.0.0.0")]
    [MatroskaElementDescriptor(MatroskaSpecification.Tag)]
    public sealed class TagItem : BaseModel
    {
        public override EbmlElementDescriptor Descriptor => MatroskaSpecification.TagDescriptor;

        [MatroskaElementDescriptor(MatroskaSpecification.Targets)]
        public Targets Targets { get; set; } = null!;

        [MatroskaElementDescriptor(MatroskaSpecification.SimpleTag, typeof(SimpleTag))]
        public IReadOnlyList<SimpleTag> SimpleTags { get; set; } = null!;

        public override ulong GetSize() {
            var size = 0UL;
            size += EbmlHelper.GetElementSize(MatroskaSpecification.Targets, Targets);
            size += EbmlHelper.GetElementSize(MatroskaSpecification.SimpleTag, SimpleTags);
            return size;
        }
    }

    [GeneratedCode("MatroskaModels.tt", "1.0.0.0")]
    [MatroskaElementDescriptor(MatroskaSpecification.Targets)]
    public sealed class Targets : BaseModel
    {
        public override EbmlElementDescriptor Descriptor => MatroskaSpecification.TargetsDescriptor;

        [MatroskaElementDescriptor(MatroskaSpecification.TargetTypeValue)]
        public ulong? TargetTypeValue { get; set; } = 50;

        [MatroskaElementDescriptor(MatroskaSpecification.TargetType)]
        public string? TargetType { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.TagTrackUID)]
        public ulong? TagTrackUID { get; set; } = 0;

        [MatroskaElementDescriptor(MatroskaSpecification.TagEditionUID)]
        public ulong? TagEditionUID { get; set; } = 0;

        [MatroskaElementDescriptor(MatroskaSpecification.TagChapterUID)]
        public ulong? TagChapterUID { get; set; } = 0;

        [MatroskaElementDescriptor(MatroskaSpecification.TagAttachmentUID)]
        public ulong? TagAttachmentUID { get; set; } = 0;

        public override ulong GetSize() {
            var size = 0UL;
            if (TargetTypeValue != 50)
                size += EbmlHelper.GetElementSize(MatroskaSpecification.TargetTypeValue, TargetTypeValue);
            size += EbmlHelper.GetElementSize(MatroskaSpecification.TargetType, TargetType, true);
            if (TagTrackUID != 0)
                size += EbmlHelper.GetElementSize(MatroskaSpecification.TagTrackUID, TagTrackUID);
            if (TagEditionUID != 0)
                size += EbmlHelper.GetElementSize(MatroskaSpecification.TagEditionUID, TagEditionUID);
            if (TagChapterUID != 0)
                size += EbmlHelper.GetElementSize(MatroskaSpecification.TagChapterUID, TagChapterUID);
            if (TagAttachmentUID != 0)
                size += EbmlHelper.GetElementSize(MatroskaSpecification.TagAttachmentUID, TagAttachmentUID);
            return size;
        }
    }

    [GeneratedCode("MatroskaModels.tt", "1.0.0.0")]
    [MatroskaElementDescriptor(MatroskaSpecification.Tracks)]
    public sealed class Tracks : BaseModel
    {
        public override EbmlElementDescriptor Descriptor => MatroskaSpecification.TracksDescriptor;

        [MatroskaElementDescriptor(MatroskaSpecification.TrackEntry, typeof(TrackEntry))]
        public IReadOnlyList<TrackEntry> TrackEntries { get; set; } = null!;

        public override ulong GetSize() {
            var size = 0UL;
            size += EbmlHelper.GetElementSize(MatroskaSpecification.TrackEntry, TrackEntries);
            return size;
        }
    }

    [GeneratedCode("MatroskaModels.tt", "1.0.0.0")]
    [MatroskaElementDescriptor(MatroskaSpecification.TrackEntry)]
    public sealed class TrackEntry : BaseModel
    {
        public override EbmlElementDescriptor Descriptor => MatroskaSpecification.TrackEntryDescriptor;

        [MatroskaElementDescriptor(MatroskaSpecification.TrackNumber)]
        public ulong TrackNumber { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.TrackUID)]
        public ulong TrackUID { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.TrackType)]
        public TrackType? TrackType { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.FlagEnabled)]
        public ulong FlagEnabled { get; set; } = 1;

        [MatroskaElementDescriptor(MatroskaSpecification.FlagDefault)]
        public ulong FlagDefault { get; set; } = 1;

        [MatroskaElementDescriptor(MatroskaSpecification.FlagForced)]
        public ulong FlagForced { get; set; } = 0;

        [MatroskaElementDescriptor(MatroskaSpecification.FlagHearingImpaired)]
        public ulong? FlagHearingImpaired { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.FlagVisualImpaired)]
        public ulong? FlagVisualImpaired { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.FlagTextDescriptions)]
        public ulong? FlagTextDescriptions { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.FlagOriginal)]
        public ulong? FlagOriginal { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.FlagCommentary)]
        public ulong? FlagCommentary { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.FlagLacing)]
        public ulong FlagLacing { get; set; } = 1;

        [MatroskaElementDescriptor(MatroskaSpecification.MinCache)]
        public ulong MinCache { get; set; } = 0;

        [MatroskaElementDescriptor(MatroskaSpecification.MaxCache)]
        public ulong? MaxCache { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.DefaultDuration)]
        public ulong? DefaultDuration { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.DefaultDecodedFieldDuration)]
        public ulong? DefaultDecodedFieldDuration { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.TrackOffset)]
        public long? TrackOffset { get; set; } = 0;

        [MatroskaElementDescriptor(MatroskaSpecification.MaxBlockAdditionID)]
        public ulong MaxBlockAdditionID { get; set; } = 0;

        [MatroskaElementDescriptor(MatroskaSpecification.BlockAdditionMapping)]
        public BlockAdditionMapping? BlockAdditionMapping { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.Name)]
        public string? Name { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.Language)]
        public string Language { get; set; } = null!;

        [MatroskaElementDescriptor(MatroskaSpecification.LanguageIETF)]
        public string? LanguageIETF { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.CodecID)]
        public string CodecID { get; set; } = null!;

        [MatroskaElementDescriptor(MatroskaSpecification.CodecPrivate)]
        public byte[]? CodecPrivate { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.CodecName)]
        public string? CodecName { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.AttachmentLink)]
        public ulong? AttachmentLink { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.CodecSettings)]
        public string? CodecSettings { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.CodecInfoURL)]
        public string? CodecInfoURL { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.CodecDownloadURL)]
        public string? CodecDownloadURL { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.CodecDecodeAll)]
        public ulong CodecDecodeAll { get; set; } = 1;

        [MatroskaElementDescriptor(MatroskaSpecification.TrackOverlay)]
        public ulong? TrackOverlay { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.CodecDelay)]
        public ulong? CodecDelay { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.SeekPreRoll)]
        public ulong SeekPreRoll { get; set; } = 0;

        [MatroskaElementDescriptor(MatroskaSpecification.TrackTranslate)]
        public TrackTranslate? TrackTranslate { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.Video)]
        public Video? Video { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.Audio)]
        public Audio? Audio { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.TrackOperation)]
        public TrackOperation? TrackOperation { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.TrickTrackUID)]
        public ulong? TrickTrackUID { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.TrickTrackSegmentUID)]
        public byte[]? TrickTrackSegmentUID { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.TrickTrackFlag)]
        public ulong? TrickTrackFlag { get; set; } = 0;

        [MatroskaElementDescriptor(MatroskaSpecification.TrickMasterTrackUID)]
        public ulong? TrickMasterTrackUID { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.TrickMasterTrackSegmentUID)]
        public byte[]? TrickMasterTrackSegmentUID { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.ContentEncodings)]
        public ContentEncodings? ContentEncodings { get; set; }

        public override ulong GetSize() {
            var size = 0UL;
            size += EbmlHelper.GetElementSize(MatroskaSpecification.TrackNumber, TrackNumber);
            size += EbmlHelper.GetElementSize(MatroskaSpecification.TrackUID, TrackUID);
            size += EbmlHelper.GetElementSize(MatroskaSpecification.TrackType, (ulong?)TrackType);
            if (FlagEnabled != 1)
                size += EbmlHelper.GetElementSize(MatroskaSpecification.FlagEnabled, FlagEnabled);
            if (FlagDefault != 1)
                size += EbmlHelper.GetElementSize(MatroskaSpecification.FlagDefault, FlagDefault);
            if (FlagForced != 0)
                size += EbmlHelper.GetElementSize(MatroskaSpecification.FlagForced, FlagForced);
            size += EbmlHelper.GetElementSize(MatroskaSpecification.FlagHearingImpaired, FlagHearingImpaired);
            size += EbmlHelper.GetElementSize(MatroskaSpecification.FlagVisualImpaired, FlagVisualImpaired);
            size += EbmlHelper.GetElementSize(MatroskaSpecification.FlagTextDescriptions, FlagTextDescriptions);
            size += EbmlHelper.GetElementSize(MatroskaSpecification.FlagOriginal, FlagOriginal);
            size += EbmlHelper.GetElementSize(MatroskaSpecification.FlagCommentary, FlagCommentary);
            if (FlagLacing != 1)
                size += EbmlHelper.GetElementSize(MatroskaSpecification.FlagLacing, FlagLacing);
            if (MinCache != 0)
                size += EbmlHelper.GetElementSize(MatroskaSpecification.MinCache, MinCache);
            size += EbmlHelper.GetElementSize(MatroskaSpecification.MaxCache, MaxCache);
            size += EbmlHelper.GetElementSize(MatroskaSpecification.DefaultDuration, DefaultDuration);
            size += EbmlHelper.GetElementSize(MatroskaSpecification.DefaultDecodedFieldDuration, DefaultDecodedFieldDuration);
            if (TrackOffset != 0)
                size += EbmlHelper.GetElementSize(MatroskaSpecification.TrackOffset, TrackOffset);
            if (MaxBlockAdditionID != 0)
                size += EbmlHelper.GetElementSize(MatroskaSpecification.MaxBlockAdditionID, MaxBlockAdditionID);
            size += EbmlHelper.GetElementSize(MatroskaSpecification.BlockAdditionMapping, BlockAdditionMapping);
            size += EbmlHelper.GetElementSize(MatroskaSpecification.Name, Name, false);
            size += EbmlHelper.GetElementSize(MatroskaSpecification.Language, Language, true);
            size += EbmlHelper.GetElementSize(MatroskaSpecification.LanguageIETF, LanguageIETF, true);
            size += EbmlHelper.GetElementSize(MatroskaSpecification.CodecID, CodecID, true);
            size += EbmlHelper.GetElementSize(MatroskaSpecification.CodecPrivate, CodecPrivate);
            size += EbmlHelper.GetElementSize(MatroskaSpecification.CodecName, CodecName, false);
            size += EbmlHelper.GetElementSize(MatroskaSpecification.AttachmentLink, AttachmentLink);
            size += EbmlHelper.GetElementSize(MatroskaSpecification.CodecSettings, CodecSettings, false);
            size += EbmlHelper.GetElementSize(MatroskaSpecification.CodecInfoURL, CodecInfoURL, true);
            size += EbmlHelper.GetElementSize(MatroskaSpecification.CodecDownloadURL, CodecDownloadURL, true);
            if (CodecDecodeAll != 1)
                size += EbmlHelper.GetElementSize(MatroskaSpecification.CodecDecodeAll, CodecDecodeAll);
            size += EbmlHelper.GetElementSize(MatroskaSpecification.TrackOverlay, TrackOverlay);
            size += EbmlHelper.GetElementSize(MatroskaSpecification.CodecDelay, CodecDelay);
            if (SeekPreRoll != 0)
                size += EbmlHelper.GetElementSize(MatroskaSpecification.SeekPreRoll, SeekPreRoll);
            size += EbmlHelper.GetElementSize(MatroskaSpecification.TrackTranslate, TrackTranslate);
            size += EbmlHelper.GetElementSize(MatroskaSpecification.Video, Video);
            size += EbmlHelper.GetElementSize(MatroskaSpecification.Audio, Audio);
            size += EbmlHelper.GetElementSize(MatroskaSpecification.TrackOperation, TrackOperation);
            size += EbmlHelper.GetElementSize(MatroskaSpecification.TrickTrackUID, TrickTrackUID);
            size += EbmlHelper.GetElementSize(MatroskaSpecification.TrickTrackSegmentUID, TrickTrackSegmentUID);
            if (TrickTrackFlag != 0)
                size += EbmlHelper.GetElementSize(MatroskaSpecification.TrickTrackFlag, TrickTrackFlag);
            size += EbmlHelper.GetElementSize(MatroskaSpecification.TrickMasterTrackUID, TrickMasterTrackUID);
            size += EbmlHelper.GetElementSize(MatroskaSpecification.TrickMasterTrackSegmentUID, TrickMasterTrackSegmentUID);
            size += EbmlHelper.GetElementSize(MatroskaSpecification.ContentEncodings, ContentEncodings);
            return size;
        }
    }

    [GeneratedCode("MatroskaModels.tt", "1.0.0.0")]
    [MatroskaElementDescriptor(MatroskaSpecification.Audio)]
    public sealed class Audio : BaseModel
    {
        public override EbmlElementDescriptor Descriptor => MatroskaSpecification.AudioDescriptor;

        [MatroskaElementDescriptor(MatroskaSpecification.SamplingFrequency)]
        public float SamplingFrequency { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.OutputSamplingFrequency)]
        public float? OutputSamplingFrequency { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.Channels)]
        public ulong Channels { get; set; } = 1;

        [MatroskaElementDescriptor(MatroskaSpecification.ChannelPositions)]
        public byte[]? ChannelPositions { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.BitDepth)]
        public ulong? BitDepth { get; set; }

        public override ulong GetSize() {
            var size = 0UL;
            size += EbmlHelper.GetElementSize(MatroskaSpecification.SamplingFrequency, SamplingFrequency);
            size += EbmlHelper.GetElementSize(MatroskaSpecification.OutputSamplingFrequency, OutputSamplingFrequency);
            size += EbmlHelper.GetElementSize(MatroskaSpecification.Channels, Channels);
            size += EbmlHelper.GetElementSize(MatroskaSpecification.ChannelPositions, ChannelPositions);
            size += EbmlHelper.GetElementSize(MatroskaSpecification.BitDepth, BitDepth);
            return size;
        }
    }

    [GeneratedCode("MatroskaModels.tt", "1.0.0.0")]
    [MatroskaElementDescriptor(MatroskaSpecification.BlockAdditionMapping)]
    public sealed class BlockAdditionMapping : BaseModel
    {
        public override EbmlElementDescriptor Descriptor => MatroskaSpecification.BlockAdditionMappingDescriptor;

        [MatroskaElementDescriptor(MatroskaSpecification.BlockAddIDValue)]
        public ulong? BlockAddIDValue { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.BlockAddIDName)]
        public string? BlockAddIDName { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.BlockAddIDType)]
        public ulong BlockAddIDType { get; set; } = 0;

        [MatroskaElementDescriptor(MatroskaSpecification.BlockAddIDExtraData)]
        public byte[]? BlockAddIDExtraData { get; set; }

        public override ulong GetSize() {
            var size = 0UL;
            size += EbmlHelper.GetElementSize(MatroskaSpecification.BlockAddIDValue, BlockAddIDValue);
            size += EbmlHelper.GetElementSize(MatroskaSpecification.BlockAddIDName, BlockAddIDName, true);
            if (BlockAddIDType != 0)
                size += EbmlHelper.GetElementSize(MatroskaSpecification.BlockAddIDType, BlockAddIDType);
            size += EbmlHelper.GetElementSize(MatroskaSpecification.BlockAddIDExtraData, BlockAddIDExtraData);
            return size;
        }
    }

    [GeneratedCode("MatroskaModels.tt", "1.0.0.0")]
    [MatroskaElementDescriptor(MatroskaSpecification.ContentEncodings)]
    public sealed class ContentEncodings : BaseModel
    {
        public override EbmlElementDescriptor Descriptor => MatroskaSpecification.ContentEncodingsDescriptor;

        [MatroskaElementDescriptor(MatroskaSpecification.ContentEncoding, typeof(ContentEncodingItem))]
        public IReadOnlyList<ContentEncodingItem> ContentEncodingItems { get; set; } = null!;

        public override ulong GetSize() {
            var size = 0UL;
            size += EbmlHelper.GetElementSize(MatroskaSpecification.ContentEncoding, ContentEncodingItems);
            return size;
        }
    }

    [GeneratedCode("MatroskaModels.tt", "1.0.0.0")]
    [MatroskaElementDescriptor(MatroskaSpecification.ContentEncoding)]
    public sealed class ContentEncodingItem : BaseModel
    {
        public override EbmlElementDescriptor Descriptor => MatroskaSpecification.ContentEncodingDescriptor;

        [MatroskaElementDescriptor(MatroskaSpecification.ContentEncodingOrder)]
        public ulong ContentEncodingOrder { get; set; } = 0;

        [MatroskaElementDescriptor(MatroskaSpecification.ContentEncodingScope)]
        public ulong ContentEncodingScope { get; set; } = 1;

        [MatroskaElementDescriptor(MatroskaSpecification.ContentEncodingType)]
        public ulong ContentEncodingType { get; set; } = 0;

        [MatroskaElementDescriptor(MatroskaSpecification.ContentCompression, typeof(ContentCompression))]
        public IReadOnlyList<ContentCompression>? ContentCompressions { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.ContentEncryption)]
        public ContentEncryption? ContentEncryption { get; set; }

        public override ulong GetSize() {
            var size = 0UL;
            if (ContentEncodingOrder != 0)
                size += EbmlHelper.GetElementSize(MatroskaSpecification.ContentEncodingOrder, ContentEncodingOrder);
            if (ContentEncodingScope != 1)
                size += EbmlHelper.GetElementSize(MatroskaSpecification.ContentEncodingScope, ContentEncodingScope);
            if (ContentEncodingType != 0)
                size += EbmlHelper.GetElementSize(MatroskaSpecification.ContentEncodingType, ContentEncodingType);
            size += EbmlHelper.GetElementSize(MatroskaSpecification.ContentCompression, ContentCompressions);
            size += EbmlHelper.GetElementSize(MatroskaSpecification.ContentEncryption, ContentEncryption);
            return size;
        }
    }

    [GeneratedCode("MatroskaModels.tt", "1.0.0.0")]
    [MatroskaElementDescriptor(MatroskaSpecification.ContentCompression)]
    public sealed class ContentCompression : BaseModel
    {
        public override EbmlElementDescriptor Descriptor => MatroskaSpecification.ContentCompressionDescriptor;

        [MatroskaElementDescriptor(MatroskaSpecification.ContentCompAlgo)]
        public ulong ContentCompAlgo { get; set; } = 0;

        [MatroskaElementDescriptor(MatroskaSpecification.ContentCompSettings)]
        public byte[]? ContentCompSettings { get; set; }

        public override ulong GetSize() {
            var size = 0UL;
            if (ContentCompAlgo != 0)
                size += EbmlHelper.GetElementSize(MatroskaSpecification.ContentCompAlgo, ContentCompAlgo);
            size += EbmlHelper.GetElementSize(MatroskaSpecification.ContentCompSettings, ContentCompSettings);
            return size;
        }
    }

    [GeneratedCode("MatroskaModels.tt", "1.0.0.0")]
    [MatroskaElementDescriptor(MatroskaSpecification.ContentEncryption)]
    public sealed class ContentEncryption : BaseModel
    {
        public override EbmlElementDescriptor Descriptor => MatroskaSpecification.ContentEncryptionDescriptor;

        [MatroskaElementDescriptor(MatroskaSpecification.ContentEncAlgo)]
        public ulong ContentEncAlgo { get; set; } = 0;

        [MatroskaElementDescriptor(MatroskaSpecification.ContentEncKeyID)]
        public byte[]? ContentEncKeyID { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.ContentEncAESSettings)]
        public ContentEncAESSettings? ContentEncAESSettings { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.ContentSignature)]
        public byte[]? ContentSignature { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.ContentSigKeyID)]
        public byte[]? ContentSigKeyID { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.ContentSigAlgo)]
        public ulong? ContentSigAlgo { get; set; } = 0;

        [MatroskaElementDescriptor(MatroskaSpecification.ContentSigHashAlgo)]
        public ulong? ContentSigHashAlgo { get; set; } = 0;

        public override ulong GetSize() {
            var size = 0UL;
            if (ContentEncAlgo != 0)
                size += EbmlHelper.GetElementSize(MatroskaSpecification.ContentEncAlgo, ContentEncAlgo);
            size += EbmlHelper.GetElementSize(MatroskaSpecification.ContentEncKeyID, ContentEncKeyID);
            size += EbmlHelper.GetElementSize(MatroskaSpecification.ContentEncAESSettings, ContentEncAESSettings);
            size += EbmlHelper.GetElementSize(MatroskaSpecification.ContentSignature, ContentSignature);
            size += EbmlHelper.GetElementSize(MatroskaSpecification.ContentSigKeyID, ContentSigKeyID);
            if (ContentSigAlgo != 0)
                size += EbmlHelper.GetElementSize(MatroskaSpecification.ContentSigAlgo, ContentSigAlgo);
            if (ContentSigHashAlgo != 0)
                size += EbmlHelper.GetElementSize(MatroskaSpecification.ContentSigHashAlgo, ContentSigHashAlgo);
            return size;
        }
    }

    [GeneratedCode("MatroskaModels.tt", "1.0.0.0")]
    [MatroskaElementDescriptor(MatroskaSpecification.ContentEncAESSettings)]
    public sealed class ContentEncAESSettings : BaseModel
    {
        public override EbmlElementDescriptor Descriptor => MatroskaSpecification.ContentEncAESSettingsDescriptor;

        [MatroskaElementDescriptor(MatroskaSpecification.AESSettingsCipherMode)]
        public ulong AESSettingsCipherMode { get; set; }

        public override ulong GetSize() {
            var size = 0UL;
            size += EbmlHelper.GetElementSize(MatroskaSpecification.AESSettingsCipherMode, AESSettingsCipherMode);
            return size;
        }
    }

    [GeneratedCode("MatroskaModels.tt", "1.0.0.0")]
    [MatroskaElementDescriptor(MatroskaSpecification.TrackOperation)]
    public sealed class TrackOperation : BaseModel
    {
        public override EbmlElementDescriptor Descriptor => MatroskaSpecification.TrackOperationDescriptor;

        [MatroskaElementDescriptor(MatroskaSpecification.TrackCombinePlanes)]
        public TrackCombinePlanes? TrackCombinePlanes { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.TrackJoinBlocks)]
        public TrackJoinBlocks? TrackJoinBlocks { get; set; }

        public override ulong GetSize() {
            var size = 0UL;
            size += EbmlHelper.GetElementSize(MatroskaSpecification.TrackCombinePlanes, TrackCombinePlanes);
            size += EbmlHelper.GetElementSize(MatroskaSpecification.TrackJoinBlocks, TrackJoinBlocks);
            return size;
        }
    }

    [GeneratedCode("MatroskaModels.tt", "1.0.0.0")]
    [MatroskaElementDescriptor(MatroskaSpecification.TrackCombinePlanes)]
    public sealed class TrackCombinePlanes : BaseModel
    {
        public override EbmlElementDescriptor Descriptor => MatroskaSpecification.TrackCombinePlanesDescriptor;

        [MatroskaElementDescriptor(MatroskaSpecification.TrackPlane)]
        public TrackPlane TrackPlane { get; set; } = null!;

        public override ulong GetSize() {
            var size = 0UL;
            size += EbmlHelper.GetElementSize(MatroskaSpecification.TrackPlane, TrackPlane);
            return size;
        }
    }

    [GeneratedCode("MatroskaModels.tt", "1.0.0.0")]
    [MatroskaElementDescriptor(MatroskaSpecification.TrackPlane)]
    public sealed class TrackPlane : BaseModel
    {
        public override EbmlElementDescriptor Descriptor => MatroskaSpecification.TrackPlaneDescriptor;

        [MatroskaElementDescriptor(MatroskaSpecification.TrackPlaneUID)]
        public ulong TrackPlaneUID { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.TrackPlaneType)]
        public ulong TrackPlaneType { get; set; }

        public override ulong GetSize() {
            var size = 0UL;
            size += EbmlHelper.GetElementSize(MatroskaSpecification.TrackPlaneUID, TrackPlaneUID);
            size += EbmlHelper.GetElementSize(MatroskaSpecification.TrackPlaneType, TrackPlaneType);
            return size;
        }
    }

    [GeneratedCode("MatroskaModels.tt", "1.0.0.0")]
    [MatroskaElementDescriptor(MatroskaSpecification.TrackJoinBlocks)]
    public sealed class TrackJoinBlocks : BaseModel
    {
        public override EbmlElementDescriptor Descriptor => MatroskaSpecification.TrackJoinBlocksDescriptor;

        [MatroskaElementDescriptor(MatroskaSpecification.TrackJoinUID)]
        public ulong TrackJoinUID { get; set; }

        public override ulong GetSize() {
            var size = 0UL;
            size += EbmlHelper.GetElementSize(MatroskaSpecification.TrackJoinUID, TrackJoinUID);
            return size;
        }
    }

    [GeneratedCode("MatroskaModels.tt", "1.0.0.0")]
    [MatroskaElementDescriptor(MatroskaSpecification.TrackTranslate)]
    public sealed class TrackTranslate : BaseModel
    {
        public override EbmlElementDescriptor Descriptor => MatroskaSpecification.TrackTranslateDescriptor;

        [MatroskaElementDescriptor(MatroskaSpecification.TrackTranslateEditionUID)]
        public ulong? TrackTranslateEditionUID { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.TrackTranslateCodec)]
        public ulong TrackTranslateCodec { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.TrackTranslateTrackID)]
        public byte[] TrackTranslateTrackID { get; set; } = null!;

        public override ulong GetSize() {
            var size = 0UL;
            size += EbmlHelper.GetElementSize(MatroskaSpecification.TrackTranslateEditionUID, TrackTranslateEditionUID);
            size += EbmlHelper.GetElementSize(MatroskaSpecification.TrackTranslateCodec, TrackTranslateCodec);
            size += EbmlHelper.GetElementSize(MatroskaSpecification.TrackTranslateTrackID, TrackTranslateTrackID);
            return size;
        }
    }

    [GeneratedCode("MatroskaModels.tt", "1.0.0.0")]
    [MatroskaElementDescriptor(MatroskaSpecification.Video)]
    public sealed class Video : BaseModel
    {
        public override EbmlElementDescriptor Descriptor => MatroskaSpecification.VideoDescriptor;

        [MatroskaElementDescriptor(MatroskaSpecification.FlagInterlaced)]
        public ulong FlagInterlaced { get; set; } = 0;

        [MatroskaElementDescriptor(MatroskaSpecification.FieldOrder)]
        public ulong FieldOrder { get; set; } = 2;

        [MatroskaElementDescriptor(MatroskaSpecification.StereoMode)]
        public ulong StereoMode { get; set; } = 0;

        [MatroskaElementDescriptor(MatroskaSpecification.AlphaMode)]
        public ulong? AlphaMode { get; set; } = 0;

        [MatroskaElementDescriptor(MatroskaSpecification.OldStereoMode)]
        public ulong? OldStereoMode { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.PixelWidth)]
        public ulong PixelWidth { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.PixelHeight)]
        public ulong PixelHeight { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.PixelCropBottom)]
        public ulong? PixelCropBottom { get; set; } = 0;

        [MatroskaElementDescriptor(MatroskaSpecification.PixelCropTop)]
        public ulong? PixelCropTop { get; set; } = 0;

        [MatroskaElementDescriptor(MatroskaSpecification.PixelCropLeft)]
        public ulong? PixelCropLeft { get; set; } = 0;

        [MatroskaElementDescriptor(MatroskaSpecification.PixelCropRight)]
        public ulong? PixelCropRight { get; set; } = 0;

        [MatroskaElementDescriptor(MatroskaSpecification.DisplayWidth)]
        public ulong? DisplayWidth { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.DisplayHeight)]
        public ulong? DisplayHeight { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.DisplayUnit)]
        public ulong DisplayUnit { get; set; } = 0;

        [MatroskaElementDescriptor(MatroskaSpecification.AspectRatioType)]
        public ulong? AspectRatioType { get; set; } = 0;

        [MatroskaElementDescriptor(MatroskaSpecification.ColourSpace)]
        public byte[]? ColourSpace { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.GammaValue)]
        public float? GammaValue { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.FrameRate)]
        public float? FrameRate { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.Colour)]
        public Colour? Colour { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.Projection)]
        public Projection? Projection { get; set; }

        public override ulong GetSize() {
            var size = 0UL;
            if (FlagInterlaced != 0)
                size += EbmlHelper.GetElementSize(MatroskaSpecification.FlagInterlaced, FlagInterlaced);
            if (FieldOrder != 2)
                size += EbmlHelper.GetElementSize(MatroskaSpecification.FieldOrder, FieldOrder);
            if (StereoMode != 0)
                size += EbmlHelper.GetElementSize(MatroskaSpecification.StereoMode, StereoMode);
            if (AlphaMode != 0)
                size += EbmlHelper.GetElementSize(MatroskaSpecification.AlphaMode, AlphaMode);
            size += EbmlHelper.GetElementSize(MatroskaSpecification.OldStereoMode, OldStereoMode);
            size += EbmlHelper.GetElementSize(MatroskaSpecification.PixelWidth, PixelWidth);
            size += EbmlHelper.GetElementSize(MatroskaSpecification.PixelHeight, PixelHeight);
            if (PixelCropBottom != 0)
                size += EbmlHelper.GetElementSize(MatroskaSpecification.PixelCropBottom, PixelCropBottom);
            if (PixelCropTop != 0)
                size += EbmlHelper.GetElementSize(MatroskaSpecification.PixelCropTop, PixelCropTop);
            if (PixelCropLeft != 0)
                size += EbmlHelper.GetElementSize(MatroskaSpecification.PixelCropLeft, PixelCropLeft);
            if (PixelCropRight != 0)
                size += EbmlHelper.GetElementSize(MatroskaSpecification.PixelCropRight, PixelCropRight);
            size += EbmlHelper.GetElementSize(MatroskaSpecification.DisplayWidth, DisplayWidth);
            size += EbmlHelper.GetElementSize(MatroskaSpecification.DisplayHeight, DisplayHeight);
            if (DisplayUnit != 0)
                size += EbmlHelper.GetElementSize(MatroskaSpecification.DisplayUnit, DisplayUnit);
            if (AspectRatioType != 0)
                size += EbmlHelper.GetElementSize(MatroskaSpecification.AspectRatioType, AspectRatioType);
            size += EbmlHelper.GetElementSize(MatroskaSpecification.ColourSpace, ColourSpace);
            size += EbmlHelper.GetElementSize(MatroskaSpecification.GammaValue, GammaValue);
            size += EbmlHelper.GetElementSize(MatroskaSpecification.FrameRate, FrameRate);
            size += EbmlHelper.GetElementSize(MatroskaSpecification.Colour, Colour);
            size += EbmlHelper.GetElementSize(MatroskaSpecification.Projection, Projection);
            return size;
        }
    }

    [GeneratedCode("MatroskaModels.tt", "1.0.0.0")]
    [MatroskaElementDescriptor(MatroskaSpecification.Colour)]
    public sealed class Colour : BaseModel
    {
        public override EbmlElementDescriptor Descriptor => MatroskaSpecification.ColourDescriptor;

        [MatroskaElementDescriptor(MatroskaSpecification.MatrixCoefficients)]
        public ulong MatrixCoefficients { get; set; } = 2;

        [MatroskaElementDescriptor(MatroskaSpecification.BitsPerChannel)]
        public ulong? BitsPerChannel { get; set; } = 0;

        [MatroskaElementDescriptor(MatroskaSpecification.ChromaSubsamplingHorz)]
        public ulong? ChromaSubsamplingHorz { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.ChromaSubsamplingVert)]
        public ulong? ChromaSubsamplingVert { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.CbSubsamplingHorz)]
        public ulong? CbSubsamplingHorz { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.CbSubsamplingVert)]
        public ulong? CbSubsamplingVert { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.ChromaSitingHorz)]
        public ulong ChromaSitingHorz { get; set; } = 0;

        [MatroskaElementDescriptor(MatroskaSpecification.ChromaSitingVert)]
        public ulong ChromaSitingVert { get; set; } = 0;

        [MatroskaElementDescriptor(MatroskaSpecification.Range)]
        public ulong Range { get; set; } = 0;

        [MatroskaElementDescriptor(MatroskaSpecification.TransferCharacteristics)]
        public ulong TransferCharacteristics { get; set; } = 2;

        [MatroskaElementDescriptor(MatroskaSpecification.Primaries)]
        public ulong Primaries { get; set; } = 2;

        [MatroskaElementDescriptor(MatroskaSpecification.MaxCLL)]
        public ulong? MaxCLL { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.MaxFALL)]
        public ulong? MaxFALL { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.MasteringMetadata)]
        public MasteringMetadata? MasteringMetadata { get; set; }

        public override ulong GetSize() {
            var size = 0UL;
            if (MatrixCoefficients != 2)
                size += EbmlHelper.GetElementSize(MatroskaSpecification.MatrixCoefficients, MatrixCoefficients);
            if (BitsPerChannel != 0)
                size += EbmlHelper.GetElementSize(MatroskaSpecification.BitsPerChannel, BitsPerChannel);
            size += EbmlHelper.GetElementSize(MatroskaSpecification.ChromaSubsamplingHorz, ChromaSubsamplingHorz);
            size += EbmlHelper.GetElementSize(MatroskaSpecification.ChromaSubsamplingVert, ChromaSubsamplingVert);
            size += EbmlHelper.GetElementSize(MatroskaSpecification.CbSubsamplingHorz, CbSubsamplingHorz);
            size += EbmlHelper.GetElementSize(MatroskaSpecification.CbSubsamplingVert, CbSubsamplingVert);
            if (ChromaSitingHorz != 0)
                size += EbmlHelper.GetElementSize(MatroskaSpecification.ChromaSitingHorz, ChromaSitingHorz);
            if (ChromaSitingVert != 0)
                size += EbmlHelper.GetElementSize(MatroskaSpecification.ChromaSitingVert, ChromaSitingVert);
            if (Range != 0)
                size += EbmlHelper.GetElementSize(MatroskaSpecification.Range, Range);
            if (TransferCharacteristics != 2)
                size += EbmlHelper.GetElementSize(MatroskaSpecification.TransferCharacteristics, TransferCharacteristics);
            if (Primaries != 2)
                size += EbmlHelper.GetElementSize(MatroskaSpecification.Primaries, Primaries);
            size += EbmlHelper.GetElementSize(MatroskaSpecification.MaxCLL, MaxCLL);
            size += EbmlHelper.GetElementSize(MatroskaSpecification.MaxFALL, MaxFALL);
            size += EbmlHelper.GetElementSize(MatroskaSpecification.MasteringMetadata, MasteringMetadata);
            return size;
        }
    }

    [GeneratedCode("MatroskaModels.tt", "1.0.0.0")]
    [MatroskaElementDescriptor(MatroskaSpecification.MasteringMetadata)]
    public sealed class MasteringMetadata : BaseModel
    {
        public override EbmlElementDescriptor Descriptor => MatroskaSpecification.MasteringMetadataDescriptor;

        [MatroskaElementDescriptor(MatroskaSpecification.PrimaryRChromaticityX)]
        public float? PrimaryRChromaticityX { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.PrimaryRChromaticityY)]
        public float? PrimaryRChromaticityY { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.PrimaryGChromaticityX)]
        public float? PrimaryGChromaticityX { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.PrimaryGChromaticityY)]
        public float? PrimaryGChromaticityY { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.PrimaryBChromaticityX)]
        public float? PrimaryBChromaticityX { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.PrimaryBChromaticityY)]
        public float? PrimaryBChromaticityY { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.WhitePointChromaticityX)]
        public float? WhitePointChromaticityX { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.WhitePointChromaticityY)]
        public float? WhitePointChromaticityY { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.LuminanceMax)]
        public float? LuminanceMax { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.LuminanceMin)]
        public float? LuminanceMin { get; set; }

        public override ulong GetSize() {
            var size = 0UL;
            size += EbmlHelper.GetElementSize(MatroskaSpecification.PrimaryRChromaticityX, PrimaryRChromaticityX);
            size += EbmlHelper.GetElementSize(MatroskaSpecification.PrimaryRChromaticityY, PrimaryRChromaticityY);
            size += EbmlHelper.GetElementSize(MatroskaSpecification.PrimaryGChromaticityX, PrimaryGChromaticityX);
            size += EbmlHelper.GetElementSize(MatroskaSpecification.PrimaryGChromaticityY, PrimaryGChromaticityY);
            size += EbmlHelper.GetElementSize(MatroskaSpecification.PrimaryBChromaticityX, PrimaryBChromaticityX);
            size += EbmlHelper.GetElementSize(MatroskaSpecification.PrimaryBChromaticityY, PrimaryBChromaticityY);
            size += EbmlHelper.GetElementSize(MatroskaSpecification.WhitePointChromaticityX, WhitePointChromaticityX);
            size += EbmlHelper.GetElementSize(MatroskaSpecification.WhitePointChromaticityY, WhitePointChromaticityY);
            size += EbmlHelper.GetElementSize(MatroskaSpecification.LuminanceMax, LuminanceMax);
            size += EbmlHelper.GetElementSize(MatroskaSpecification.LuminanceMin, LuminanceMin);
            return size;
        }
    }

    [GeneratedCode("MatroskaModels.tt", "1.0.0.0")]
    [MatroskaElementDescriptor(MatroskaSpecification.Projection)]
    public sealed class Projection : BaseModel
    {
        public override EbmlElementDescriptor Descriptor => MatroskaSpecification.ProjectionDescriptor;

        [MatroskaElementDescriptor(MatroskaSpecification.ProjectionType)]
        public ulong ProjectionType { get; set; } = 0;

        [MatroskaElementDescriptor(MatroskaSpecification.ProjectionPrivate)]
        public byte[]? ProjectionPrivate { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.ProjectionPoseYaw)]
        public float ProjectionPoseYaw { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.ProjectionPosePitch)]
        public float ProjectionPosePitch { get; set; }

        [MatroskaElementDescriptor(MatroskaSpecification.ProjectionPoseRoll)]
        public float ProjectionPoseRoll { get; set; }

        public override ulong GetSize() {
            var size = 0UL;
            if (ProjectionType != 0)
                size += EbmlHelper.GetElementSize(MatroskaSpecification.ProjectionType, ProjectionType);
            size += EbmlHelper.GetElementSize(MatroskaSpecification.ProjectionPrivate, ProjectionPrivate);
            size += EbmlHelper.GetElementSize(MatroskaSpecification.ProjectionPoseYaw, ProjectionPoseYaw);
            size += EbmlHelper.GetElementSize(MatroskaSpecification.ProjectionPosePitch, ProjectionPosePitch);
            size += EbmlHelper.GetElementSize(MatroskaSpecification.ProjectionPoseRoll, ProjectionPoseRoll);
            return size;
        }
    }


    public static class ModelExt
    {

        public static bool Write(this BaseModel? model, ref SpanWriter writer)
        {
            if (model == null)
                return true;

            switch (model.Descriptor.Identifier.EncodedValue) {
            case MatroskaSpecification.EBML:
                return ((EBML)model).Write(ref writer);
            case MatroskaSpecification.DocTypeExtension:
                return ((DocTypeExtension)model).Write(ref writer);
            case MatroskaSpecification.Segment:
                return ((Segment)model).Write(ref writer);
            case MatroskaSpecification.Attachments:
                return ((Attachments)model).Write(ref writer);
            case MatroskaSpecification.AttachedFile:
                return ((AttachedFile)model).Write(ref writer);
            case MatroskaSpecification.Chapters:
                return ((Chapters)model).Write(ref writer);
            case MatroskaSpecification.EditionEntry:
                return ((EditionEntry)model).Write(ref writer);
            case MatroskaSpecification.Cluster:
                return ((Cluster)model).Write(ref writer);
            case MatroskaSpecification.BlockGroup:
                return ((BlockGroup)model).Write(ref writer);
            case MatroskaSpecification.Block:
                return ((Block)model).Write(ref writer);
            case MatroskaSpecification.BlockAdditions:
                return ((BlockAdditions)model).Write(ref writer);
            case MatroskaSpecification.BlockMore:
                return ((BlockMore)model).Write(ref writer);
            case MatroskaSpecification.BlockAdditional:
                return ((BlockAdditional)model).Write(ref writer);
            case MatroskaSpecification.BlockVirtual:
                return ((BlockVirtual)model).Write(ref writer);
            case MatroskaSpecification.ReferenceFrame:
                return ((ReferenceFrame)model).Write(ref writer);
            case MatroskaSpecification.Slices:
                return ((Slices)model).Write(ref writer);
            case MatroskaSpecification.TimeSlice:
                return ((TimeSlice)model).Write(ref writer);
            case MatroskaSpecification.EncryptedBlock:
                return ((EncryptedBlock)model).Write(ref writer);
            case MatroskaSpecification.SilentTracks:
                return ((SilentTracks)model).Write(ref writer);
            case MatroskaSpecification.SimpleBlock:
                return ((SimpleBlock)model).Write(ref writer);
            case MatroskaSpecification.Cues:
                return ((Cues)model).Write(ref writer);
            case MatroskaSpecification.CuePoint:
                return ((CuePoint)model).Write(ref writer);
            case MatroskaSpecification.CueTrackPositions:
                return ((CueTrackPositions)model).Write(ref writer);
            case MatroskaSpecification.CueReference:
                return ((CueReference)model).Write(ref writer);
            case MatroskaSpecification.Info:
                return ((Info)model).Write(ref writer);
            case MatroskaSpecification.ChapterTranslate:
                return ((ChapterTranslate)model).Write(ref writer);
            case MatroskaSpecification.SeekHead:
                return ((SeekHead)model).Write(ref writer);
            case MatroskaSpecification.Seek:
                return ((Seek)model).Write(ref writer);
            case MatroskaSpecification.Tags:
                return ((Tags)model).Write(ref writer);
            case MatroskaSpecification.Tag:
                return ((TagItem)model).Write(ref writer);
            case MatroskaSpecification.Targets:
                return ((Targets)model).Write(ref writer);
            case MatroskaSpecification.Tracks:
                return ((Tracks)model).Write(ref writer);
            case MatroskaSpecification.TrackEntry:
                return ((TrackEntry)model).Write(ref writer);
            case MatroskaSpecification.Audio:
                return ((Audio)model).Write(ref writer);
            case MatroskaSpecification.BlockAdditionMapping:
                return ((BlockAdditionMapping)model).Write(ref writer);
            case MatroskaSpecification.ContentEncodings:
                return ((ContentEncodings)model).Write(ref writer);
            case MatroskaSpecification.ContentEncoding:
                return ((ContentEncodingItem)model).Write(ref writer);
            case MatroskaSpecification.ContentCompression:
                return ((ContentCompression)model).Write(ref writer);
            case MatroskaSpecification.ContentEncryption:
                return ((ContentEncryption)model).Write(ref writer);
            case MatroskaSpecification.ContentEncAESSettings:
                return ((ContentEncAESSettings)model).Write(ref writer);
            case MatroskaSpecification.TrackOperation:
                return ((TrackOperation)model).Write(ref writer);
            case MatroskaSpecification.TrackCombinePlanes:
                return ((TrackCombinePlanes)model).Write(ref writer);
            case MatroskaSpecification.TrackPlane:
                return ((TrackPlane)model).Write(ref writer);
            case MatroskaSpecification.TrackJoinBlocks:
                return ((TrackJoinBlocks)model).Write(ref writer);
            case MatroskaSpecification.TrackTranslate:
                return ((TrackTranslate)model).Write(ref writer);
            case MatroskaSpecification.Video:
                return ((Video)model).Write(ref writer);
            case MatroskaSpecification.Colour:
                return ((Colour)model).Write(ref writer);
            case MatroskaSpecification.MasteringMetadata:
                return ((MasteringMetadata)model).Write(ref writer);
            case MatroskaSpecification.Projection:
                return ((Projection)model).Write(ref writer);
            default:
                throw new EbmlDataFormatException($"Unexpected EBML element '{model.Descriptor.Identifier}'.");
            }
        }


        public static bool Write(this EBML? model, ref SpanWriter writer)
        {
            if (model == null)
                return true;

            if (!EbmlHelper.WriteEbmlMasterElement(MatroskaSpecification.EBML, model.GetSize(), ref writer))
                return false;
            EbmlHelper.WriteEbmlElement(MatroskaSpecification.EBMLVersion, model.EBMLVersion, ref writer);
            EbmlHelper.WriteEbmlElement(MatroskaSpecification.EBMLReadVersion, model.EBMLReadVersion, ref writer);
            EbmlHelper.WriteEbmlElement(MatroskaSpecification.EBMLMaxIDLength, model.EBMLMaxIDLength, ref writer);
            EbmlHelper.WriteEbmlElement(MatroskaSpecification.EBMLMaxSizeLength, model.EBMLMaxSizeLength, ref writer);
            EbmlHelper.WriteEbmlElement(MatroskaSpecification.DocType, model.DocType, true, ref writer);
            EbmlHelper.WriteEbmlElement(MatroskaSpecification.DocTypeVersion, model.DocTypeVersion, ref writer);
            EbmlHelper.WriteEbmlElement(MatroskaSpecification.DocTypeReadVersion, model.DocTypeReadVersion, ref writer);
            model.DocTypeExtension?.Write(ref writer);
            return true;
        }

        public static bool Write(this DocTypeExtension? model, ref SpanWriter writer)
        {
            if (model == null)
                return true;

            if (!EbmlHelper.WriteEbmlMasterElement(MatroskaSpecification.DocTypeExtension, model.GetSize(), ref writer))
                return false;
            EbmlHelper.WriteEbmlElement(MatroskaSpecification.DocTypeExtensionName, model.DocTypeExtensionName, true, ref writer);
            EbmlHelper.WriteEbmlElement(MatroskaSpecification.DocTypeExtensionVersion, model.DocTypeExtensionVersion, ref writer);
            return true;
        }

        public static bool Write(this Segment? model, ref SpanWriter writer)
        {
            if (model == null)
                return true;

            if (!EbmlHelper.WriteEbmlMasterElement(MatroskaSpecification.Segment, model.GetSize(), ref writer))
                return false;
            model.SeekHead?.Write(ref writer);
            model.Info.Write(ref writer);
            model.Tracks?.Write(ref writer);
            model.Cues?.Write(ref writer);
            model.Attachments?.Write(ref writer);
            model.Chapters?.Write(ref writer);
            model.Tags?.Write(ref writer);
            return true;
        }

        public static bool Write(this Attachments? model, ref SpanWriter writer)
        {
            if (model == null)
                return true;

            if (!EbmlHelper.WriteEbmlMasterElement(MatroskaSpecification.Attachments, model.GetSize(), ref writer))
                return false;
            model.AttachedFile.Write(ref writer);
            return true;
        }

        public static bool Write(this AttachedFile? model, ref SpanWriter writer)
        {
            if (model == null)
                return true;

            if (!EbmlHelper.WriteEbmlMasterElement(MatroskaSpecification.AttachedFile, model.GetSize(), ref writer))
                return false;
            EbmlHelper.WriteEbmlElement(MatroskaSpecification.FileDescription, model.FileDescription, false, ref writer);
            EbmlHelper.WriteEbmlElement(MatroskaSpecification.FileName, model.FileName, false, ref writer);
            EbmlHelper.WriteEbmlElement(MatroskaSpecification.FileMimeType, model.FileMimeType, true, ref writer);
            EbmlHelper.WriteEbmlElement(MatroskaSpecification.FileData, model.FileData, ref writer);
            EbmlHelper.WriteEbmlElement(MatroskaSpecification.FileUID, model.FileUID, ref writer);
            EbmlHelper.WriteEbmlElement(MatroskaSpecification.FileReferral, model.FileReferral, ref writer);
            EbmlHelper.WriteEbmlElement(MatroskaSpecification.FileUsedStartTime, model.FileUsedStartTime, ref writer);
            EbmlHelper.WriteEbmlElement(MatroskaSpecification.FileUsedEndTime, model.FileUsedEndTime, ref writer);
            return true;
        }

        public static bool Write(this Chapters? model, ref SpanWriter writer)
        {
            if (model == null)
                return true;

            if (!EbmlHelper.WriteEbmlMasterElement(MatroskaSpecification.Chapters, model.GetSize(), ref writer))
                return false;
            model.EditionEntry.Write(ref writer);
            return true;
        }

        public static bool Write(this EditionEntry? model, ref SpanWriter writer)
        {
            if (model == null)
                return true;

            if (!EbmlHelper.WriteEbmlMasterElement(MatroskaSpecification.EditionEntry, model.GetSize(), ref writer))
                return false;
            EbmlHelper.WriteEbmlElement(MatroskaSpecification.EditionUID, model.EditionUID, ref writer);
            if (model.EditionFlagHidden != 0)
                EbmlHelper.WriteEbmlElement(MatroskaSpecification.EditionFlagHidden, model.EditionFlagHidden, ref writer);
            if (model.EditionFlagDefault != 0)
                EbmlHelper.WriteEbmlElement(MatroskaSpecification.EditionFlagDefault, model.EditionFlagDefault, ref writer);
            if (model.EditionFlagOrdered != 0)
                EbmlHelper.WriteEbmlElement(MatroskaSpecification.EditionFlagOrdered, model.EditionFlagOrdered, ref writer);
            model.ChapterAtom.Write(ref writer);
            return true;
        }

        public static bool Write(this ChapterAtom? model, ref SpanWriter writer)
        {
            if (model == null)
                return true;

            if (!EbmlHelper.WriteEbmlMasterElement(MatroskaSpecification.ChapterAtom, model.GetSize(), ref writer))
                return false;
            return true;
        }

        public static bool Write(this ChapProcess? model, ref SpanWriter writer)
        {
            if (model == null)
                return true;

            if (!EbmlHelper.WriteEbmlMasterElement(MatroskaSpecification.ChapProcess, model.GetSize(), ref writer))
                return false;
            return true;
        }

        public static bool Write(this ChapProcessCommand? model, ref SpanWriter writer)
        {
            if (model == null)
                return true;

            if (!EbmlHelper.WriteEbmlMasterElement(MatroskaSpecification.ChapProcessCommand, model.GetSize(), ref writer))
                return false;
            return true;
        }

        public static bool Write(this ChapterDisplay? model, ref SpanWriter writer)
        {
            if (model == null)
                return true;

            if (!EbmlHelper.WriteEbmlMasterElement(MatroskaSpecification.ChapterDisplay, model.GetSize(), ref writer))
                return false;
            return true;
        }

        public static bool Write(this ChapterTrack? model, ref SpanWriter writer)
        {
            if (model == null)
                return true;

            if (!EbmlHelper.WriteEbmlMasterElement(MatroskaSpecification.ChapterTrack, model.GetSize(), ref writer))
                return false;
            return true;
        }

        public static bool Write(this Cluster? model, ref SpanWriter writer)
        {
            if (model == null)
                return true;

            if (!EbmlHelper.WriteEbmlMasterElement(MatroskaSpecification.Cluster, model.GetSize(), ref writer))
                return false;
            EbmlHelper.WriteEbmlElement(MatroskaSpecification.Timestamp, model.Timestamp, ref writer);
            model.SilentTracks?.Write(ref writer);
            EbmlHelper.WriteEbmlElement(MatroskaSpecification.Position, model.Position, ref writer);
            EbmlHelper.WriteEbmlElement(MatroskaSpecification.PrevSize, model.PrevSize, ref writer);
            model.BlockGroups?.Write(ref writer);
            return true;
        }

        public static bool Write(this BlockGroup? model, ref SpanWriter writer)
        {
            if (model == null)
                return true;

            if (!EbmlHelper.WriteEbmlMasterElement(MatroskaSpecification.BlockGroup, model.GetSize(), ref writer))
                return false;
            model.BlockAdditions?.Write(ref writer);
            EbmlHelper.WriteEbmlElement(MatroskaSpecification.BlockDuration, model.BlockDuration, ref writer);
            if (model.ReferencePriority != 0)
                EbmlHelper.WriteEbmlElement(MatroskaSpecification.ReferencePriority, model.ReferencePriority, ref writer);
            EbmlHelper.WriteEbmlElement(MatroskaSpecification.ReferenceBlock, model.ReferenceBlock, ref writer);
            EbmlHelper.WriteEbmlElement(MatroskaSpecification.ReferenceVirtual, model.ReferenceVirtual, ref writer);
            EbmlHelper.WriteEbmlElement(MatroskaSpecification.CodecState, model.CodecState, ref writer);
            EbmlHelper.WriteEbmlElement(MatroskaSpecification.DiscardPadding, model.DiscardPadding, ref writer);
            model.Slices?.Write(ref writer);
            model.ReferenceFrame?.Write(ref writer);
            return true;
        }

        public static bool Write(this BlockAdditions? model, ref SpanWriter writer)
        {
            if (model == null)
                return true;

            if (!EbmlHelper.WriteEbmlMasterElement(MatroskaSpecification.BlockAdditions, model.GetSize(), ref writer))
                return false;
            model.BlockMore.Write(ref writer);
            return true;
        }

        public static bool Write(this BlockMore? model, ref SpanWriter writer)
        {
            if (model == null)
                return true;

            if (!EbmlHelper.WriteEbmlMasterElement(MatroskaSpecification.BlockMore, model.GetSize(), ref writer))
                return false;
            if (model.BlockAddID != 1)
                EbmlHelper.WriteEbmlElement(MatroskaSpecification.BlockAddID, model.BlockAddID, ref writer);
            return true;
        }

        public static bool Write(this ReferenceFrame? model, ref SpanWriter writer)
        {
            if (model == null)
                return true;

            if (!EbmlHelper.WriteEbmlMasterElement(MatroskaSpecification.ReferenceFrame, model.GetSize(), ref writer))
                return false;
            EbmlHelper.WriteEbmlElement(MatroskaSpecification.ReferenceOffset, model.ReferenceOffset, ref writer);
            EbmlHelper.WriteEbmlElement(MatroskaSpecification.ReferenceTimestamp, model.ReferenceTimestamp, ref writer);
            return true;
        }

        public static bool Write(this Slices? model, ref SpanWriter writer)
        {
            if (model == null)
                return true;

            if (!EbmlHelper.WriteEbmlMasterElement(MatroskaSpecification.Slices, model.GetSize(), ref writer))
                return false;
            model.TimeSlice?.Write(ref writer);
            return true;
        }

        public static bool Write(this TimeSlice? model, ref SpanWriter writer)
        {
            if (model == null)
                return true;

            if (!EbmlHelper.WriteEbmlMasterElement(MatroskaSpecification.TimeSlice, model.GetSize(), ref writer))
                return false;
            EbmlHelper.WriteEbmlElement(MatroskaSpecification.LaceNumber, model.LaceNumber, ref writer);
            if (model.FrameNumber != 0)
                EbmlHelper.WriteEbmlElement(MatroskaSpecification.FrameNumber, model.FrameNumber, ref writer);
            if (model.BlockAdditionID != 0)
                EbmlHelper.WriteEbmlElement(MatroskaSpecification.BlockAdditionID, model.BlockAdditionID, ref writer);
            if (model.Delay != 0)
                EbmlHelper.WriteEbmlElement(MatroskaSpecification.Delay, model.Delay, ref writer);
            if (model.SliceDuration != 0)
                EbmlHelper.WriteEbmlElement(MatroskaSpecification.SliceDuration, model.SliceDuration, ref writer);
            return true;
        }

        public static bool Write(this SilentTracks? model, ref SpanWriter writer)
        {
            if (model == null)
                return true;

            if (!EbmlHelper.WriteEbmlMasterElement(MatroskaSpecification.SilentTracks, model.GetSize(), ref writer))
                return false;
            EbmlHelper.WriteEbmlElement(MatroskaSpecification.SilentTrackNumber, model.SilentTrackNumber, ref writer);
            return true;
        }

        public static bool Write(this Cues? model, ref SpanWriter writer)
        {
            if (model == null)
                return true;

            if (!EbmlHelper.WriteEbmlMasterElement(MatroskaSpecification.Cues, model.GetSize(), ref writer))
                return false;
            model.CuePoints.Write(ref writer);
            return true;
        }

        public static bool Write(this CuePoint? model, ref SpanWriter writer)
        {
            if (model == null)
                return true;

            if (!EbmlHelper.WriteEbmlMasterElement(MatroskaSpecification.CuePoint, model.GetSize(), ref writer))
                return false;
            EbmlHelper.WriteEbmlElement(MatroskaSpecification.CueTime, model.CueTime, ref writer);
            model.CueTrackPositions.Write(ref writer);
            return true;
        }

        public static bool Write(this CueTrackPositions? model, ref SpanWriter writer)
        {
            if (model == null)
                return true;

            if (!EbmlHelper.WriteEbmlMasterElement(MatroskaSpecification.CueTrackPositions, model.GetSize(), ref writer))
                return false;
            EbmlHelper.WriteEbmlElement(MatroskaSpecification.CueTrack, model.CueTrack, ref writer);
            EbmlHelper.WriteEbmlElement(MatroskaSpecification.CueClusterPosition, model.CueClusterPosition, ref writer);
            EbmlHelper.WriteEbmlElement(MatroskaSpecification.CueRelativePosition, model.CueRelativePosition, ref writer);
            EbmlHelper.WriteEbmlElement(MatroskaSpecification.CueDuration, model.CueDuration, ref writer);
            EbmlHelper.WriteEbmlElement(MatroskaSpecification.CueBlockNumber, model.CueBlockNumber, ref writer);
            if (model.CueCodecState != 0)
                EbmlHelper.WriteEbmlElement(MatroskaSpecification.CueCodecState, model.CueCodecState, ref writer);
            model.CueReferences?.Write(ref writer);
            return true;
        }

        public static bool Write(this CueReference? model, ref SpanWriter writer)
        {
            if (model == null)
                return true;

            if (!EbmlHelper.WriteEbmlMasterElement(MatroskaSpecification.CueReference, model.GetSize(), ref writer))
                return false;
            EbmlHelper.WriteEbmlElement(MatroskaSpecification.CueRefTime, model.CueRefTime, ref writer);
            EbmlHelper.WriteEbmlElement(MatroskaSpecification.CueRefCluster, model.CueRefCluster, ref writer);
            if (model.CueRefNumber != 1)
                EbmlHelper.WriteEbmlElement(MatroskaSpecification.CueRefNumber, model.CueRefNumber, ref writer);
            if (model.CueRefCodecState != 0)
                EbmlHelper.WriteEbmlElement(MatroskaSpecification.CueRefCodecState, model.CueRefCodecState, ref writer);
            return true;
        }

        public static bool Write(this Info? model, ref SpanWriter writer)
        {
            if (model == null)
                return true;

            if (!EbmlHelper.WriteEbmlMasterElement(MatroskaSpecification.Info, model.GetSize(), ref writer))
                return false;
            EbmlHelper.WriteEbmlElement(MatroskaSpecification.SegmentUID, model.SegmentUID, ref writer);
            EbmlHelper.WriteEbmlElement(MatroskaSpecification.SegmentFilename, model.SegmentFilename, false, ref writer);
            EbmlHelper.WriteEbmlElement(MatroskaSpecification.PrevUID, model.PrevUID, ref writer);
            EbmlHelper.WriteEbmlElement(MatroskaSpecification.PrevFilename, model.PrevFilename, false, ref writer);
            EbmlHelper.WriteEbmlElement(MatroskaSpecification.NextUID, model.NextUID, ref writer);
            EbmlHelper.WriteEbmlElement(MatroskaSpecification.NextFilename, model.NextFilename, false, ref writer);
            EbmlHelper.WriteEbmlElement(MatroskaSpecification.SegmentFamily, model.SegmentFamily, ref writer);
            model.ChapterTranslate?.Write(ref writer);
            EbmlHelper.WriteEbmlElement(MatroskaSpecification.TimestampScale, model.TimestampScale, ref writer);
            EbmlHelper.WriteEbmlElement(MatroskaSpecification.Duration, model.Duration, ref writer);
            EbmlHelper.WriteEbmlElement(MatroskaSpecification.DateUTC, model.DateUTC, ref writer);
            EbmlHelper.WriteEbmlElement(MatroskaSpecification.Title, model.Title, false, ref writer);
            EbmlHelper.WriteEbmlElement(MatroskaSpecification.MuxingApp, model.MuxingApp, false, ref writer);
            EbmlHelper.WriteEbmlElement(MatroskaSpecification.WritingApp, model.WritingApp, false, ref writer);
            return true;
        }

        public static bool Write(this ChapterTranslate? model, ref SpanWriter writer)
        {
            if (model == null)
                return true;

            if (!EbmlHelper.WriteEbmlMasterElement(MatroskaSpecification.ChapterTranslate, model.GetSize(), ref writer))
                return false;
            EbmlHelper.WriteEbmlElement(MatroskaSpecification.ChapterTranslateEditionUID, model.ChapterTranslateEditionUID, ref writer);
            EbmlHelper.WriteEbmlElement(MatroskaSpecification.ChapterTranslateCodec, model.ChapterTranslateCodec, ref writer);
            EbmlHelper.WriteEbmlElement(MatroskaSpecification.ChapterTranslateID, model.ChapterTranslateID, ref writer);
            return true;
        }

        public static bool Write(this SeekHead? model, ref SpanWriter writer)
        {
            if (model == null)
                return true;

            if (!EbmlHelper.WriteEbmlMasterElement(MatroskaSpecification.SeekHead, model.GetSize(), ref writer))
                return false;
            model.Seeks.Write(ref writer);
            return true;
        }

        public static bool Write(this Seek? model, ref SpanWriter writer)
        {
            if (model == null)
                return true;

            if (!EbmlHelper.WriteEbmlMasterElement(MatroskaSpecification.Seek, model.GetSize(), ref writer))
                return false;
            EbmlHelper.WriteEbmlElement(MatroskaSpecification.SeekID, model.SeekID, ref writer);
            EbmlHelper.WriteEbmlElement(MatroskaSpecification.SeekPosition, model.SeekPosition, ref writer);
            return true;
        }

        public static bool Write(this Tags? model, ref SpanWriter writer)
        {
            if (model == null)
                return true;

            if (!EbmlHelper.WriteEbmlMasterElement(MatroskaSpecification.Tags, model.GetSize(), ref writer))
                return false;
            model.TagItems.Write(ref writer);
            return true;
        }

        public static bool Write(this TagItem? model, ref SpanWriter writer)
        {
            if (model == null)
                return true;

            if (!EbmlHelper.WriteEbmlMasterElement(MatroskaSpecification.Tag, model.GetSize(), ref writer))
                return false;
            model.Targets.Write(ref writer);
            model.SimpleTags.Write(ref writer);
            return true;
        }

        public static bool Write(this Targets? model, ref SpanWriter writer)
        {
            if (model == null)
                return true;

            if (!EbmlHelper.WriteEbmlMasterElement(MatroskaSpecification.Targets, model.GetSize(), ref writer))
                return false;
            if (model.TargetTypeValue != 50)
                EbmlHelper.WriteEbmlElement(MatroskaSpecification.TargetTypeValue, model.TargetTypeValue, ref writer);
            EbmlHelper.WriteEbmlElement(MatroskaSpecification.TargetType, model.TargetType, true, ref writer);
            if (model.TagTrackUID != 0)
                EbmlHelper.WriteEbmlElement(MatroskaSpecification.TagTrackUID, model.TagTrackUID, ref writer);
            if (model.TagEditionUID != 0)
                EbmlHelper.WriteEbmlElement(MatroskaSpecification.TagEditionUID, model.TagEditionUID, ref writer);
            if (model.TagChapterUID != 0)
                EbmlHelper.WriteEbmlElement(MatroskaSpecification.TagChapterUID, model.TagChapterUID, ref writer);
            if (model.TagAttachmentUID != 0)
                EbmlHelper.WriteEbmlElement(MatroskaSpecification.TagAttachmentUID, model.TagAttachmentUID, ref writer);
            return true;
        }

        public static bool Write(this Tracks? model, ref SpanWriter writer)
        {
            if (model == null)
                return true;

            if (!EbmlHelper.WriteEbmlMasterElement(MatroskaSpecification.Tracks, model.GetSize(), ref writer))
                return false;
            model.TrackEntries.Write(ref writer);
            return true;
        }

        public static bool Write(this TrackEntry? model, ref SpanWriter writer)
        {
            if (model == null)
                return true;

            if (!EbmlHelper.WriteEbmlMasterElement(MatroskaSpecification.TrackEntry, model.GetSize(), ref writer))
                return false;
            EbmlHelper.WriteEbmlElement(MatroskaSpecification.TrackNumber, model.TrackNumber, ref writer);
            EbmlHelper.WriteEbmlElement(MatroskaSpecification.TrackUID, model.TrackUID, ref writer);
            EbmlHelper.WriteEbmlElement(MatroskaSpecification.TrackType, (ulong?)model.TrackType, ref writer);
            if (model.FlagEnabled != 1)
                EbmlHelper.WriteEbmlElement(MatroskaSpecification.FlagEnabled, model.FlagEnabled, ref writer);
            if (model.FlagDefault != 1)
                EbmlHelper.WriteEbmlElement(MatroskaSpecification.FlagDefault, model.FlagDefault, ref writer);
            if (model.FlagForced != 0)
                EbmlHelper.WriteEbmlElement(MatroskaSpecification.FlagForced, model.FlagForced, ref writer);
            EbmlHelper.WriteEbmlElement(MatroskaSpecification.FlagHearingImpaired, model.FlagHearingImpaired, ref writer);
            EbmlHelper.WriteEbmlElement(MatroskaSpecification.FlagVisualImpaired, model.FlagVisualImpaired, ref writer);
            EbmlHelper.WriteEbmlElement(MatroskaSpecification.FlagTextDescriptions, model.FlagTextDescriptions, ref writer);
            EbmlHelper.WriteEbmlElement(MatroskaSpecification.FlagOriginal, model.FlagOriginal, ref writer);
            EbmlHelper.WriteEbmlElement(MatroskaSpecification.FlagCommentary, model.FlagCommentary, ref writer);
            if (model.FlagLacing != 1)
                EbmlHelper.WriteEbmlElement(MatroskaSpecification.FlagLacing, model.FlagLacing, ref writer);
            if (model.MinCache != 0)
                EbmlHelper.WriteEbmlElement(MatroskaSpecification.MinCache, model.MinCache, ref writer);
            EbmlHelper.WriteEbmlElement(MatroskaSpecification.MaxCache, model.MaxCache, ref writer);
            EbmlHelper.WriteEbmlElement(MatroskaSpecification.DefaultDuration, model.DefaultDuration, ref writer);
            EbmlHelper.WriteEbmlElement(MatroskaSpecification.DefaultDecodedFieldDuration, model.DefaultDecodedFieldDuration, ref writer);
            if (model.TrackOffset != 0)
                EbmlHelper.WriteEbmlElement(MatroskaSpecification.TrackOffset, model.TrackOffset, ref writer);
            if (model.MaxBlockAdditionID != 0)
                EbmlHelper.WriteEbmlElement(MatroskaSpecification.MaxBlockAdditionID, model.MaxBlockAdditionID, ref writer);
            model.BlockAdditionMapping?.Write(ref writer);
            EbmlHelper.WriteEbmlElement(MatroskaSpecification.Name, model.Name, false, ref writer);
            EbmlHelper.WriteEbmlElement(MatroskaSpecification.Language, model.Language, true, ref writer);
            EbmlHelper.WriteEbmlElement(MatroskaSpecification.LanguageIETF, model.LanguageIETF, true, ref writer);
            EbmlHelper.WriteEbmlElement(MatroskaSpecification.CodecID, model.CodecID, true, ref writer);
            EbmlHelper.WriteEbmlElement(MatroskaSpecification.CodecPrivate, model.CodecPrivate, ref writer);
            EbmlHelper.WriteEbmlElement(MatroskaSpecification.CodecName, model.CodecName, false, ref writer);
            EbmlHelper.WriteEbmlElement(MatroskaSpecification.AttachmentLink, model.AttachmentLink, ref writer);
            EbmlHelper.WriteEbmlElement(MatroskaSpecification.CodecSettings, model.CodecSettings, false, ref writer);
            EbmlHelper.WriteEbmlElement(MatroskaSpecification.CodecInfoURL, model.CodecInfoURL, true, ref writer);
            EbmlHelper.WriteEbmlElement(MatroskaSpecification.CodecDownloadURL, model.CodecDownloadURL, true, ref writer);
            if (model.CodecDecodeAll != 1)
                EbmlHelper.WriteEbmlElement(MatroskaSpecification.CodecDecodeAll, model.CodecDecodeAll, ref writer);
            EbmlHelper.WriteEbmlElement(MatroskaSpecification.TrackOverlay, model.TrackOverlay, ref writer);
            EbmlHelper.WriteEbmlElement(MatroskaSpecification.CodecDelay, model.CodecDelay, ref writer);
            if (model.SeekPreRoll != 0)
                EbmlHelper.WriteEbmlElement(MatroskaSpecification.SeekPreRoll, model.SeekPreRoll, ref writer);
            model.TrackTranslate?.Write(ref writer);
            model.Video?.Write(ref writer);
            model.Audio?.Write(ref writer);
            model.TrackOperation?.Write(ref writer);
            EbmlHelper.WriteEbmlElement(MatroskaSpecification.TrickTrackUID, model.TrickTrackUID, ref writer);
            EbmlHelper.WriteEbmlElement(MatroskaSpecification.TrickTrackSegmentUID, model.TrickTrackSegmentUID, ref writer);
            if (model.TrickTrackFlag != 0)
                EbmlHelper.WriteEbmlElement(MatroskaSpecification.TrickTrackFlag, model.TrickTrackFlag, ref writer);
            EbmlHelper.WriteEbmlElement(MatroskaSpecification.TrickMasterTrackUID, model.TrickMasterTrackUID, ref writer);
            EbmlHelper.WriteEbmlElement(MatroskaSpecification.TrickMasterTrackSegmentUID, model.TrickMasterTrackSegmentUID, ref writer);
            model.ContentEncodings?.Write(ref writer);
            return true;
        }

        public static bool Write(this Audio? model, ref SpanWriter writer)
        {
            if (model == null)
                return true;

            if (!EbmlHelper.WriteEbmlMasterElement(MatroskaSpecification.Audio, model.GetSize(), ref writer))
                return false;
            EbmlHelper.WriteEbmlElement(MatroskaSpecification.SamplingFrequency, model.SamplingFrequency, ref writer);
            EbmlHelper.WriteEbmlElement(MatroskaSpecification.OutputSamplingFrequency, model.OutputSamplingFrequency, ref writer);
            EbmlHelper.WriteEbmlElement(MatroskaSpecification.Channels, model.Channels, ref writer);
            EbmlHelper.WriteEbmlElement(MatroskaSpecification.ChannelPositions, model.ChannelPositions, ref writer);
            EbmlHelper.WriteEbmlElement(MatroskaSpecification.BitDepth, model.BitDepth, ref writer);
            return true;
        }

        public static bool Write(this BlockAdditionMapping? model, ref SpanWriter writer)
        {
            if (model == null)
                return true;

            if (!EbmlHelper.WriteEbmlMasterElement(MatroskaSpecification.BlockAdditionMapping, model.GetSize(), ref writer))
                return false;
            EbmlHelper.WriteEbmlElement(MatroskaSpecification.BlockAddIDValue, model.BlockAddIDValue, ref writer);
            EbmlHelper.WriteEbmlElement(MatroskaSpecification.BlockAddIDName, model.BlockAddIDName, true, ref writer);
            if (model.BlockAddIDType != 0)
                EbmlHelper.WriteEbmlElement(MatroskaSpecification.BlockAddIDType, model.BlockAddIDType, ref writer);
            EbmlHelper.WriteEbmlElement(MatroskaSpecification.BlockAddIDExtraData, model.BlockAddIDExtraData, ref writer);
            return true;
        }

        public static bool Write(this ContentEncodings? model, ref SpanWriter writer)
        {
            if (model == null)
                return true;

            if (!EbmlHelper.WriteEbmlMasterElement(MatroskaSpecification.ContentEncodings, model.GetSize(), ref writer))
                return false;
            model.ContentEncodingItems.Write(ref writer);
            return true;
        }

        public static bool Write(this ContentEncodingItem? model, ref SpanWriter writer)
        {
            if (model == null)
                return true;

            if (!EbmlHelper.WriteEbmlMasterElement(MatroskaSpecification.ContentEncoding, model.GetSize(), ref writer))
                return false;
            if (model.ContentEncodingOrder != 0)
                EbmlHelper.WriteEbmlElement(MatroskaSpecification.ContentEncodingOrder, model.ContentEncodingOrder, ref writer);
            if (model.ContentEncodingScope != 1)
                EbmlHelper.WriteEbmlElement(MatroskaSpecification.ContentEncodingScope, model.ContentEncodingScope, ref writer);
            if (model.ContentEncodingType != 0)
                EbmlHelper.WriteEbmlElement(MatroskaSpecification.ContentEncodingType, model.ContentEncodingType, ref writer);
            model.ContentCompressions?.Write(ref writer);
            model.ContentEncryption?.Write(ref writer);
            return true;
        }

        public static bool Write(this ContentCompression? model, ref SpanWriter writer)
        {
            if (model == null)
                return true;

            if (!EbmlHelper.WriteEbmlMasterElement(MatroskaSpecification.ContentCompression, model.GetSize(), ref writer))
                return false;
            if (model.ContentCompAlgo != 0)
                EbmlHelper.WriteEbmlElement(MatroskaSpecification.ContentCompAlgo, model.ContentCompAlgo, ref writer);
            EbmlHelper.WriteEbmlElement(MatroskaSpecification.ContentCompSettings, model.ContentCompSettings, ref writer);
            return true;
        }

        public static bool Write(this ContentEncryption? model, ref SpanWriter writer)
        {
            if (model == null)
                return true;

            if (!EbmlHelper.WriteEbmlMasterElement(MatroskaSpecification.ContentEncryption, model.GetSize(), ref writer))
                return false;
            if (model.ContentEncAlgo != 0)
                EbmlHelper.WriteEbmlElement(MatroskaSpecification.ContentEncAlgo, model.ContentEncAlgo, ref writer);
            EbmlHelper.WriteEbmlElement(MatroskaSpecification.ContentEncKeyID, model.ContentEncKeyID, ref writer);
            model.ContentEncAESSettings?.Write(ref writer);
            EbmlHelper.WriteEbmlElement(MatroskaSpecification.ContentSignature, model.ContentSignature, ref writer);
            EbmlHelper.WriteEbmlElement(MatroskaSpecification.ContentSigKeyID, model.ContentSigKeyID, ref writer);
            if (model.ContentSigAlgo != 0)
                EbmlHelper.WriteEbmlElement(MatroskaSpecification.ContentSigAlgo, model.ContentSigAlgo, ref writer);
            if (model.ContentSigHashAlgo != 0)
                EbmlHelper.WriteEbmlElement(MatroskaSpecification.ContentSigHashAlgo, model.ContentSigHashAlgo, ref writer);
            return true;
        }

        public static bool Write(this ContentEncAESSettings? model, ref SpanWriter writer)
        {
            if (model == null)
                return true;

            if (!EbmlHelper.WriteEbmlMasterElement(MatroskaSpecification.ContentEncAESSettings, model.GetSize(), ref writer))
                return false;
            EbmlHelper.WriteEbmlElement(MatroskaSpecification.AESSettingsCipherMode, model.AESSettingsCipherMode, ref writer);
            return true;
        }

        public static bool Write(this TrackOperation? model, ref SpanWriter writer)
        {
            if (model == null)
                return true;

            if (!EbmlHelper.WriteEbmlMasterElement(MatroskaSpecification.TrackOperation, model.GetSize(), ref writer))
                return false;
            model.TrackCombinePlanes?.Write(ref writer);
            model.TrackJoinBlocks?.Write(ref writer);
            return true;
        }

        public static bool Write(this TrackCombinePlanes? model, ref SpanWriter writer)
        {
            if (model == null)
                return true;

            if (!EbmlHelper.WriteEbmlMasterElement(MatroskaSpecification.TrackCombinePlanes, model.GetSize(), ref writer))
                return false;
            model.TrackPlane.Write(ref writer);
            return true;
        }

        public static bool Write(this TrackPlane? model, ref SpanWriter writer)
        {
            if (model == null)
                return true;

            if (!EbmlHelper.WriteEbmlMasterElement(MatroskaSpecification.TrackPlane, model.GetSize(), ref writer))
                return false;
            EbmlHelper.WriteEbmlElement(MatroskaSpecification.TrackPlaneUID, model.TrackPlaneUID, ref writer);
            EbmlHelper.WriteEbmlElement(MatroskaSpecification.TrackPlaneType, model.TrackPlaneType, ref writer);
            return true;
        }

        public static bool Write(this TrackJoinBlocks? model, ref SpanWriter writer)
        {
            if (model == null)
                return true;

            if (!EbmlHelper.WriteEbmlMasterElement(MatroskaSpecification.TrackJoinBlocks, model.GetSize(), ref writer))
                return false;
            EbmlHelper.WriteEbmlElement(MatroskaSpecification.TrackJoinUID, model.TrackJoinUID, ref writer);
            return true;
        }

        public static bool Write(this TrackTranslate? model, ref SpanWriter writer)
        {
            if (model == null)
                return true;

            if (!EbmlHelper.WriteEbmlMasterElement(MatroskaSpecification.TrackTranslate, model.GetSize(), ref writer))
                return false;
            EbmlHelper.WriteEbmlElement(MatroskaSpecification.TrackTranslateEditionUID, model.TrackTranslateEditionUID, ref writer);
            EbmlHelper.WriteEbmlElement(MatroskaSpecification.TrackTranslateCodec, model.TrackTranslateCodec, ref writer);
            EbmlHelper.WriteEbmlElement(MatroskaSpecification.TrackTranslateTrackID, model.TrackTranslateTrackID, ref writer);
            return true;
        }

        public static bool Write(this Video? model, ref SpanWriter writer)
        {
            if (model == null)
                return true;

            if (!EbmlHelper.WriteEbmlMasterElement(MatroskaSpecification.Video, model.GetSize(), ref writer))
                return false;
            if (model.FlagInterlaced != 0)
                EbmlHelper.WriteEbmlElement(MatroskaSpecification.FlagInterlaced, model.FlagInterlaced, ref writer);
            if (model.FieldOrder != 2)
                EbmlHelper.WriteEbmlElement(MatroskaSpecification.FieldOrder, model.FieldOrder, ref writer);
            if (model.StereoMode != 0)
                EbmlHelper.WriteEbmlElement(MatroskaSpecification.StereoMode, model.StereoMode, ref writer);
            if (model.AlphaMode != 0)
                EbmlHelper.WriteEbmlElement(MatroskaSpecification.AlphaMode, model.AlphaMode, ref writer);
            EbmlHelper.WriteEbmlElement(MatroskaSpecification.OldStereoMode, model.OldStereoMode, ref writer);
            EbmlHelper.WriteEbmlElement(MatroskaSpecification.PixelWidth, model.PixelWidth, ref writer);
            EbmlHelper.WriteEbmlElement(MatroskaSpecification.PixelHeight, model.PixelHeight, ref writer);
            if (model.PixelCropBottom != 0)
                EbmlHelper.WriteEbmlElement(MatroskaSpecification.PixelCropBottom, model.PixelCropBottom, ref writer);
            if (model.PixelCropTop != 0)
                EbmlHelper.WriteEbmlElement(MatroskaSpecification.PixelCropTop, model.PixelCropTop, ref writer);
            if (model.PixelCropLeft != 0)
                EbmlHelper.WriteEbmlElement(MatroskaSpecification.PixelCropLeft, model.PixelCropLeft, ref writer);
            if (model.PixelCropRight != 0)
                EbmlHelper.WriteEbmlElement(MatroskaSpecification.PixelCropRight, model.PixelCropRight, ref writer);
            EbmlHelper.WriteEbmlElement(MatroskaSpecification.DisplayWidth, model.DisplayWidth, ref writer);
            EbmlHelper.WriteEbmlElement(MatroskaSpecification.DisplayHeight, model.DisplayHeight, ref writer);
            if (model.DisplayUnit != 0)
                EbmlHelper.WriteEbmlElement(MatroskaSpecification.DisplayUnit, model.DisplayUnit, ref writer);
            if (model.AspectRatioType != 0)
                EbmlHelper.WriteEbmlElement(MatroskaSpecification.AspectRatioType, model.AspectRatioType, ref writer);
            EbmlHelper.WriteEbmlElement(MatroskaSpecification.ColourSpace, model.ColourSpace, ref writer);
            EbmlHelper.WriteEbmlElement(MatroskaSpecification.GammaValue, model.GammaValue, ref writer);
            EbmlHelper.WriteEbmlElement(MatroskaSpecification.FrameRate, model.FrameRate, ref writer);
            model.Colour?.Write(ref writer);
            model.Projection?.Write(ref writer);
            return true;
        }

        public static bool Write(this Colour? model, ref SpanWriter writer)
        {
            if (model == null)
                return true;

            if (!EbmlHelper.WriteEbmlMasterElement(MatroskaSpecification.Colour, model.GetSize(), ref writer))
                return false;
            if (model.MatrixCoefficients != 2)
                EbmlHelper.WriteEbmlElement(MatroskaSpecification.MatrixCoefficients, model.MatrixCoefficients, ref writer);
            if (model.BitsPerChannel != 0)
                EbmlHelper.WriteEbmlElement(MatroskaSpecification.BitsPerChannel, model.BitsPerChannel, ref writer);
            EbmlHelper.WriteEbmlElement(MatroskaSpecification.ChromaSubsamplingHorz, model.ChromaSubsamplingHorz, ref writer);
            EbmlHelper.WriteEbmlElement(MatroskaSpecification.ChromaSubsamplingVert, model.ChromaSubsamplingVert, ref writer);
            EbmlHelper.WriteEbmlElement(MatroskaSpecification.CbSubsamplingHorz, model.CbSubsamplingHorz, ref writer);
            EbmlHelper.WriteEbmlElement(MatroskaSpecification.CbSubsamplingVert, model.CbSubsamplingVert, ref writer);
            if (model.ChromaSitingHorz != 0)
                EbmlHelper.WriteEbmlElement(MatroskaSpecification.ChromaSitingHorz, model.ChromaSitingHorz, ref writer);
            if (model.ChromaSitingVert != 0)
                EbmlHelper.WriteEbmlElement(MatroskaSpecification.ChromaSitingVert, model.ChromaSitingVert, ref writer);
            if (model.Range != 0)
                EbmlHelper.WriteEbmlElement(MatroskaSpecification.Range, model.Range, ref writer);
            if (model.TransferCharacteristics != 2)
                EbmlHelper.WriteEbmlElement(MatroskaSpecification.TransferCharacteristics, model.TransferCharacteristics, ref writer);
            if (model.Primaries != 2)
                EbmlHelper.WriteEbmlElement(MatroskaSpecification.Primaries, model.Primaries, ref writer);
            EbmlHelper.WriteEbmlElement(MatroskaSpecification.MaxCLL, model.MaxCLL, ref writer);
            EbmlHelper.WriteEbmlElement(MatroskaSpecification.MaxFALL, model.MaxFALL, ref writer);
            model.MasteringMetadata?.Write(ref writer);
            return true;
        }

        public static bool Write(this MasteringMetadata? model, ref SpanWriter writer)
        {
            if (model == null)
                return true;

            if (!EbmlHelper.WriteEbmlMasterElement(MatroskaSpecification.MasteringMetadata, model.GetSize(), ref writer))
                return false;
            EbmlHelper.WriteEbmlElement(MatroskaSpecification.PrimaryRChromaticityX, model.PrimaryRChromaticityX, ref writer);
            EbmlHelper.WriteEbmlElement(MatroskaSpecification.PrimaryRChromaticityY, model.PrimaryRChromaticityY, ref writer);
            EbmlHelper.WriteEbmlElement(MatroskaSpecification.PrimaryGChromaticityX, model.PrimaryGChromaticityX, ref writer);
            EbmlHelper.WriteEbmlElement(MatroskaSpecification.PrimaryGChromaticityY, model.PrimaryGChromaticityY, ref writer);
            EbmlHelper.WriteEbmlElement(MatroskaSpecification.PrimaryBChromaticityX, model.PrimaryBChromaticityX, ref writer);
            EbmlHelper.WriteEbmlElement(MatroskaSpecification.PrimaryBChromaticityY, model.PrimaryBChromaticityY, ref writer);
            EbmlHelper.WriteEbmlElement(MatroskaSpecification.WhitePointChromaticityX, model.WhitePointChromaticityX, ref writer);
            EbmlHelper.WriteEbmlElement(MatroskaSpecification.WhitePointChromaticityY, model.WhitePointChromaticityY, ref writer);
            EbmlHelper.WriteEbmlElement(MatroskaSpecification.LuminanceMax, model.LuminanceMax, ref writer);
            EbmlHelper.WriteEbmlElement(MatroskaSpecification.LuminanceMin, model.LuminanceMin, ref writer);
            return true;
        }

        public static bool Write(this Projection? model, ref SpanWriter writer)
        {
            if (model == null)
                return true;

            if (!EbmlHelper.WriteEbmlMasterElement(MatroskaSpecification.Projection, model.GetSize(), ref writer))
                return false;
            if (model.ProjectionType != 0)
                EbmlHelper.WriteEbmlElement(MatroskaSpecification.ProjectionType, model.ProjectionType, ref writer);
            EbmlHelper.WriteEbmlElement(MatroskaSpecification.ProjectionPrivate, model.ProjectionPrivate, ref writer);
            EbmlHelper.WriteEbmlElement(MatroskaSpecification.ProjectionPoseYaw, model.ProjectionPoseYaw, ref writer);
            EbmlHelper.WriteEbmlElement(MatroskaSpecification.ProjectionPosePitch, model.ProjectionPosePitch, ref writer);
            EbmlHelper.WriteEbmlElement(MatroskaSpecification.ProjectionPoseRoll, model.ProjectionPoseRoll, ref writer);
            return true;
        }


        public static BaseModel CreateInstance(this EbmlElementDescriptor descriptor)
        {
            if (descriptor.Type != EbmlElementType.MasterElement)
                throw new InvalidOperationException("Can't create instances of non-master element.");

            switch (descriptor.Identifier.EncodedValue) {
            case MatroskaSpecification.EBML:
                return new EBML();
            case MatroskaSpecification.DocTypeExtension:
                return new DocTypeExtension();
            case MatroskaSpecification.Segment:
                return new Segment();
            case MatroskaSpecification.Attachments:
                return new Attachments();
            case MatroskaSpecification.AttachedFile:
                return new AttachedFile();
            case MatroskaSpecification.Chapters:
                return new Chapters();
            case MatroskaSpecification.EditionEntry:
                return new EditionEntry();
            case MatroskaSpecification.ChapterAtom:
                return new ChapterAtom();
            case MatroskaSpecification.ChapProcess:
                return new ChapProcess();
            case MatroskaSpecification.ChapProcessCommand:
                return new ChapProcessCommand();
            case MatroskaSpecification.ChapterDisplay:
                return new ChapterDisplay();
            case MatroskaSpecification.ChapterTrack:
                return new ChapterTrack();
            case MatroskaSpecification.Cluster:
                return new Cluster();
            case MatroskaSpecification.BlockGroup:
                return new BlockGroup();
            case MatroskaSpecification.BlockAdditions:
                return new BlockAdditions();
            case MatroskaSpecification.BlockMore:
                return new BlockMore();
            case MatroskaSpecification.ReferenceFrame:
                return new ReferenceFrame();
            case MatroskaSpecification.Slices:
                return new Slices();
            case MatroskaSpecification.TimeSlice:
                return new TimeSlice();
            case MatroskaSpecification.SilentTracks:
                return new SilentTracks();
            case MatroskaSpecification.Cues:
                return new Cues();
            case MatroskaSpecification.CuePoint:
                return new CuePoint();
            case MatroskaSpecification.CueTrackPositions:
                return new CueTrackPositions();
            case MatroskaSpecification.CueReference:
                return new CueReference();
            case MatroskaSpecification.Info:
                return new Info();
            case MatroskaSpecification.ChapterTranslate:
                return new ChapterTranslate();
            case MatroskaSpecification.SeekHead:
                return new SeekHead();
            case MatroskaSpecification.Seek:
                return new Seek();
            case MatroskaSpecification.Tags:
                return new Tags();
            case MatroskaSpecification.Tag:
                return new TagItem();
            case MatroskaSpecification.Targets:
                return new Targets();
            case MatroskaSpecification.Tracks:
                return new Tracks();
            case MatroskaSpecification.TrackEntry:
                return new TrackEntry();
            case MatroskaSpecification.Audio:
                return new Audio();
            case MatroskaSpecification.BlockAdditionMapping:
                return new BlockAdditionMapping();
            case MatroskaSpecification.ContentEncodings:
                return new ContentEncodings();
            case MatroskaSpecification.ContentEncoding:
                return new ContentEncodingItem();
            case MatroskaSpecification.ContentCompression:
                return new ContentCompression();
            case MatroskaSpecification.ContentEncryption:
                return new ContentEncryption();
            case MatroskaSpecification.ContentEncAESSettings:
                return new ContentEncAESSettings();
            case MatroskaSpecification.TrackOperation:
                return new TrackOperation();
            case MatroskaSpecification.TrackCombinePlanes:
                return new TrackCombinePlanes();
            case MatroskaSpecification.TrackPlane:
                return new TrackPlane();
            case MatroskaSpecification.TrackJoinBlocks:
                return new TrackJoinBlocks();
            case MatroskaSpecification.TrackTranslate:
                return new TrackTranslate();
            case MatroskaSpecification.Video:
                return new Video();
            case MatroskaSpecification.Colour:
                return new Colour();
            case MatroskaSpecification.MasteringMetadata:
                return new MasteringMetadata();
            case MatroskaSpecification.Projection:
                return new Projection();
            default:
                throw new InvalidOperationException("Unknown master element: " + descriptor.Identifier + ".");
            }
        }

        public static void FillScalar(this BaseModel model, EbmlElementDescriptor containerDescriptor, EbmlElementDescriptor descriptor, int size, ref SpanReader reader)
        {
            switch (containerDescriptor.Identifier.EncodedValue) {
            case MatroskaSpecification.EBML:
                ((EBML)model).FillScalar(descriptor, size, ref reader);
                break;
            case MatroskaSpecification.DocTypeExtension:
                ((DocTypeExtension)model).FillScalar(descriptor, size, ref reader);
                break;
            case MatroskaSpecification.AttachedFile:
                ((AttachedFile)model).FillScalar(descriptor, size, ref reader);
                break;
            case MatroskaSpecification.EditionEntry:
                ((EditionEntry)model).FillScalar(descriptor, size, ref reader);
                break;
            case MatroskaSpecification.Cluster:
                ((Cluster)model).FillScalar(descriptor, size, ref reader);
                break;
            case MatroskaSpecification.BlockGroup:
                ((BlockGroup)model).FillScalar(descriptor, size, ref reader);
                break;
            case MatroskaSpecification.BlockMore:
                ((BlockMore)model).FillScalar(descriptor, size, ref reader);
                break;
            case MatroskaSpecification.ReferenceFrame:
                ((ReferenceFrame)model).FillScalar(descriptor, size, ref reader);
                break;
            case MatroskaSpecification.TimeSlice:
                ((TimeSlice)model).FillScalar(descriptor, size, ref reader);
                break;
            case MatroskaSpecification.SilentTracks:
                ((SilentTracks)model).FillScalar(descriptor, size, ref reader);
                break;
            case MatroskaSpecification.CuePoint:
                ((CuePoint)model).FillScalar(descriptor, size, ref reader);
                break;
            case MatroskaSpecification.CueTrackPositions:
                ((CueTrackPositions)model).FillScalar(descriptor, size, ref reader);
                break;
            case MatroskaSpecification.CueReference:
                ((CueReference)model).FillScalar(descriptor, size, ref reader);
                break;
            case MatroskaSpecification.Info:
                ((Info)model).FillScalar(descriptor, size, ref reader);
                break;
            case MatroskaSpecification.ChapterTranslate:
                ((ChapterTranslate)model).FillScalar(descriptor, size, ref reader);
                break;
            case MatroskaSpecification.Seek:
                ((Seek)model).FillScalar(descriptor, size, ref reader);
                break;
            case MatroskaSpecification.Targets:
                ((Targets)model).FillScalar(descriptor, size, ref reader);
                break;
            case MatroskaSpecification.TrackEntry:
                ((TrackEntry)model).FillScalar(descriptor, size, ref reader);
                break;
            case MatroskaSpecification.Audio:
                ((Audio)model).FillScalar(descriptor, size, ref reader);
                break;
            case MatroskaSpecification.BlockAdditionMapping:
                ((BlockAdditionMapping)model).FillScalar(descriptor, size, ref reader);
                break;
            case MatroskaSpecification.ContentEncoding:
                ((ContentEncodingItem)model).FillScalar(descriptor, size, ref reader);
                break;
            case MatroskaSpecification.ContentCompression:
                ((ContentCompression)model).FillScalar(descriptor, size, ref reader);
                break;
            case MatroskaSpecification.ContentEncryption:
                ((ContentEncryption)model).FillScalar(descriptor, size, ref reader);
                break;
            case MatroskaSpecification.ContentEncAESSettings:
                ((ContentEncAESSettings)model).FillScalar(descriptor, size, ref reader);
                break;
            case MatroskaSpecification.TrackPlane:
                ((TrackPlane)model).FillScalar(descriptor, size, ref reader);
                break;
            case MatroskaSpecification.TrackJoinBlocks:
                ((TrackJoinBlocks)model).FillScalar(descriptor, size, ref reader);
                break;
            case MatroskaSpecification.TrackTranslate:
                ((TrackTranslate)model).FillScalar(descriptor, size, ref reader);
                break;
            case MatroskaSpecification.Video:
                ((Video)model).FillScalar(descriptor, size, ref reader);
                break;
            case MatroskaSpecification.Colour:
                ((Colour)model).FillScalar(descriptor, size, ref reader);
                break;
            case MatroskaSpecification.MasteringMetadata:
                ((MasteringMetadata)model).FillScalar(descriptor, size, ref reader);
                break;
            case MatroskaSpecification.Projection:
                ((Projection)model).FillScalar(descriptor, size, ref reader);
                break;
            }
        }

        public static void FillComplex(this BaseModel model, EbmlElementDescriptor containerDescriptor, EbmlElementDescriptor descriptor, BaseModel propertyModel)
        {
            switch (containerDescriptor.Identifier.EncodedValue) {
            case MatroskaSpecification.EBML:
                ((EBML)model).FillComplex(descriptor, propertyModel);
                break;
            case MatroskaSpecification.Segment:
                ((Segment)model).FillComplex(descriptor, propertyModel);
                break;
            case MatroskaSpecification.Attachments:
                ((Attachments)model).FillComplex(descriptor, propertyModel);
                break;
            case MatroskaSpecification.Chapters:
                ((Chapters)model).FillComplex(descriptor, propertyModel);
                break;
            case MatroskaSpecification.EditionEntry:
                ((EditionEntry)model).FillComplex(descriptor, propertyModel);
                break;
            case MatroskaSpecification.Cluster:
                ((Cluster)model).FillComplex(descriptor, propertyModel);
                break;
            case MatroskaSpecification.BlockGroup:
                ((BlockGroup)model).FillComplex(descriptor, propertyModel);
                break;
            case MatroskaSpecification.BlockAdditions:
                ((BlockAdditions)model).FillComplex(descriptor, propertyModel);
                break;
            case MatroskaSpecification.Slices:
                ((Slices)model).FillComplex(descriptor, propertyModel);
                break;
            case MatroskaSpecification.CuePoint:
                ((CuePoint)model).FillComplex(descriptor, propertyModel);
                break;
            case MatroskaSpecification.Info:
                ((Info)model).FillComplex(descriptor, propertyModel);
                break;
            case MatroskaSpecification.Tag:
                ((TagItem)model).FillComplex(descriptor, propertyModel);
                break;
            case MatroskaSpecification.TrackEntry:
                ((TrackEntry)model).FillComplex(descriptor, propertyModel);
                break;
            case MatroskaSpecification.ContentEncoding:
                ((ContentEncodingItem)model).FillComplex(descriptor, propertyModel);
                break;
            case MatroskaSpecification.ContentEncryption:
                ((ContentEncryption)model).FillComplex(descriptor, propertyModel);
                break;
            case MatroskaSpecification.TrackOperation:
                ((TrackOperation)model).FillComplex(descriptor, propertyModel);
                break;
            case MatroskaSpecification.TrackCombinePlanes:
                ((TrackCombinePlanes)model).FillComplex(descriptor, propertyModel);
                break;
            case MatroskaSpecification.Video:
                ((Video)model).FillComplex(descriptor, propertyModel);
                break;
            case MatroskaSpecification.Colour:
                ((Colour)model).FillComplex(descriptor, propertyModel);
                break;
            }
        }

        public static void FillListEntry(this BaseModel model, EbmlElementDescriptor containerDescriptor, EbmlElementDescriptor descriptor, object listEntry)
        {
            switch (containerDescriptor.Identifier.EncodedValue) {
            case MatroskaSpecification.Cluster:
                ((Cluster)model).FillListEntry(descriptor, listEntry);
                break;
            case MatroskaSpecification.BlockGroup:
                ((BlockGroup)model).FillListEntry(descriptor, listEntry);
                break;
            case MatroskaSpecification.BlockMore:
                ((BlockMore)model).FillListEntry(descriptor, listEntry);
                break;
            case MatroskaSpecification.Cues:
                ((Cues)model).FillListEntry(descriptor, listEntry);
                break;
            case MatroskaSpecification.CueTrackPositions:
                ((CueTrackPositions)model).FillListEntry(descriptor, listEntry);
                break;
            case MatroskaSpecification.SeekHead:
                ((SeekHead)model).FillListEntry(descriptor, listEntry);
                break;
            case MatroskaSpecification.Tags:
                ((Tags)model).FillListEntry(descriptor, listEntry);
                break;
            case MatroskaSpecification.Tag:
                ((TagItem)model).FillListEntry(descriptor, listEntry);
                break;
            case MatroskaSpecification.Tracks:
                ((Tracks)model).FillListEntry(descriptor, listEntry);
                break;
            case MatroskaSpecification.ContentEncodings:
                ((ContentEncodings)model).FillListEntry(descriptor, listEntry);
                break;
            case MatroskaSpecification.ContentEncoding:
                ((ContentEncodingItem)model).FillListEntry(descriptor, listEntry);
                break;
            }
        }

        private static void FillScalar(this EBML model, EbmlElementDescriptor descriptor, int size, ref SpanReader reader)
        {
            if (descriptor.Type == EbmlElementType.MasterElement)
                throw new InvalidOperationException("Can't read master elements directly from the reader.");

            switch (descriptor.Identifier.EncodedValue) {
            case MatroskaSpecification.EBMLVersion:
                model.EBMLVersion = reader.ReadULong(size)!.Value;
                break;
            case MatroskaSpecification.EBMLReadVersion:
                model.EBMLReadVersion = reader.ReadULong(size)!.Value;
                break;
            case MatroskaSpecification.EBMLMaxIDLength:
                model.EBMLMaxIDLength = reader.ReadULong(size)!.Value;
                break;
            case MatroskaSpecification.EBMLMaxSizeLength:
                model.EBMLMaxSizeLength = reader.ReadULong(size)!.Value;
                break;
            case MatroskaSpecification.DocType:
                model.DocType = reader.ReadAsciiString(size)!;
                break;
            case MatroskaSpecification.DocTypeVersion:
                model.DocTypeVersion = reader.ReadULong(size)!.Value;
                break;
            case MatroskaSpecification.DocTypeReadVersion:
                model.DocTypeReadVersion = reader.ReadULong(size)!.Value;
                break;
            default:
                throw new EbmlDataFormatException($"Unexpected EBML element '{descriptor.Identifier}'.");
            }
        }

        private static void FillComplex(this EBML model, EbmlElementDescriptor descriptor, BaseModel propertyModel)
        {
            if (descriptor.Type != EbmlElementType.MasterElement)
                throw new InvalidOperationException("EbmlElementDescriptor should have 'master' type.");

            switch (descriptor.Identifier.EncodedValue) {
            case MatroskaSpecification.DocTypeExtension:
                model.DocTypeExtension = (DocTypeExtension?)propertyModel;
                break;
            default:
                throw new EbmlDataFormatException($"Unexpected EBML element: '{descriptor.Identifier}'.");
            }
        }

        private static void FillScalar(this DocTypeExtension model, EbmlElementDescriptor descriptor, int size, ref SpanReader reader)
        {
            if (descriptor.Type == EbmlElementType.MasterElement)
                throw new InvalidOperationException("Can't read master elements directly from the reader.");

            switch (descriptor.Identifier.EncodedValue) {
            case MatroskaSpecification.DocTypeExtensionName:
                model.DocTypeExtensionName = reader.ReadAsciiString(size)!;
                break;
            case MatroskaSpecification.DocTypeExtensionVersion:
                model.DocTypeExtensionVersion = reader.ReadULong(size)!.Value;
                break;
            default:
                throw new EbmlDataFormatException($"Unexpected EBML element '{descriptor.Identifier}'.");
            }
        }

        private static void FillComplex(this Segment model, EbmlElementDescriptor descriptor, BaseModel propertyModel)
        {
            if (descriptor.Type != EbmlElementType.MasterElement)
                throw new InvalidOperationException("EbmlElementDescriptor should have 'master' type.");

            switch (descriptor.Identifier.EncodedValue) {
            case MatroskaSpecification.SeekHead:
                model.SeekHead = (SeekHead?)propertyModel;
                break;
            case MatroskaSpecification.Info:
                model.Info = (Info)propertyModel;
                break;
            case MatroskaSpecification.Tracks:
                model.Tracks = (Tracks?)propertyModel;
                break;
            case MatroskaSpecification.Cues:
                model.Cues = (Cues?)propertyModel;
                break;
            case MatroskaSpecification.Attachments:
                model.Attachments = (Attachments?)propertyModel;
                break;
            case MatroskaSpecification.Chapters:
                model.Chapters = (Chapters?)propertyModel;
                break;
            case MatroskaSpecification.Tags:
                model.Tags = (Tags?)propertyModel;
                break;
            default:
                throw new EbmlDataFormatException($"Unexpected EBML element: '{descriptor.Identifier}'.");
            }
        }

        private static void FillComplex(this Attachments model, EbmlElementDescriptor descriptor, BaseModel propertyModel)
        {
            if (descriptor.Type != EbmlElementType.MasterElement)
                throw new InvalidOperationException("EbmlElementDescriptor should have 'master' type.");

            switch (descriptor.Identifier.EncodedValue) {
            case MatroskaSpecification.AttachedFile:
                model.AttachedFile = (AttachedFile)propertyModel;
                break;
            default:
                throw new EbmlDataFormatException($"Unexpected EBML element: '{descriptor.Identifier}'.");
            }
        }

        private static void FillScalar(this AttachedFile model, EbmlElementDescriptor descriptor, int size, ref SpanReader reader)
        {
            if (descriptor.Type == EbmlElementType.MasterElement)
                throw new InvalidOperationException("Can't read master elements directly from the reader.");

            switch (descriptor.Identifier.EncodedValue) {
            case MatroskaSpecification.FileDescription:
                model.FileDescription = reader.ReadUtf8String(size)!;
                break;
            case MatroskaSpecification.FileName:
                model.FileName = reader.ReadUtf8String(size)!;
                break;
            case MatroskaSpecification.FileMimeType:
                model.FileMimeType = reader.ReadAsciiString(size)!;
                break;
            case MatroskaSpecification.FileData:
                model.FileData = reader.ReadBytes(size)!;
                break;
            case MatroskaSpecification.FileUID:
                model.FileUID = reader.ReadULong(size)!.Value;
                break;
            case MatroskaSpecification.FileReferral:
                model.FileReferral = reader.ReadBytes(size)!;
                break;
            case MatroskaSpecification.FileUsedStartTime:
                model.FileUsedStartTime = reader.ReadULong(size)!.Value;
                break;
            case MatroskaSpecification.FileUsedEndTime:
                model.FileUsedEndTime = reader.ReadULong(size)!.Value;
                break;
            default:
                throw new EbmlDataFormatException($"Unexpected EBML element '{descriptor.Identifier}'.");
            }
        }

        private static void FillComplex(this Chapters model, EbmlElementDescriptor descriptor, BaseModel propertyModel)
        {
            if (descriptor.Type != EbmlElementType.MasterElement)
                throw new InvalidOperationException("EbmlElementDescriptor should have 'master' type.");

            switch (descriptor.Identifier.EncodedValue) {
            case MatroskaSpecification.EditionEntry:
                model.EditionEntry = (EditionEntry)propertyModel;
                break;
            default:
                throw new EbmlDataFormatException($"Unexpected EBML element: '{descriptor.Identifier}'.");
            }
        }

        private static void FillScalar(this EditionEntry model, EbmlElementDescriptor descriptor, int size, ref SpanReader reader)
        {
            if (descriptor.Type == EbmlElementType.MasterElement)
                throw new InvalidOperationException("Can't read master elements directly from the reader.");

            switch (descriptor.Identifier.EncodedValue) {
            case MatroskaSpecification.EditionUID:
                model.EditionUID = reader.ReadULong(size)!.Value;
                break;
            case MatroskaSpecification.EditionFlagHidden:
                model.EditionFlagHidden = reader.ReadULong(size)!.Value;
                break;
            case MatroskaSpecification.EditionFlagDefault:
                model.EditionFlagDefault = reader.ReadULong(size)!.Value;
                break;
            case MatroskaSpecification.EditionFlagOrdered:
                model.EditionFlagOrdered = reader.ReadULong(size)!.Value;
                break;
            default:
                throw new EbmlDataFormatException($"Unexpected EBML element '{descriptor.Identifier}'.");
            }
        }

        private static void FillComplex(this EditionEntry model, EbmlElementDescriptor descriptor, BaseModel propertyModel)
        {
            if (descriptor.Type != EbmlElementType.MasterElement)
                throw new InvalidOperationException("EbmlElementDescriptor should have 'master' type.");

            switch (descriptor.Identifier.EncodedValue) {
            case MatroskaSpecification.ChapterAtom:
                model.ChapterAtom = (ChapterAtom)propertyModel;
                break;
            default:
                throw new EbmlDataFormatException($"Unexpected EBML element: '{descriptor.Identifier}'.");
            }
        }

        private static void FillScalar(this Cluster model, EbmlElementDescriptor descriptor, int size, ref SpanReader reader)
        {
            if (descriptor.Type == EbmlElementType.MasterElement)
                throw new InvalidOperationException("Can't read master elements directly from the reader.");

            switch (descriptor.Identifier.EncodedValue) {
            case MatroskaSpecification.Timestamp:
                model.Timestamp = reader.ReadULong(size)!.Value;
                break;
            case MatroskaSpecification.Position:
                model.Position = reader.ReadULong(size)!.Value;
                break;
            case MatroskaSpecification.PrevSize:
                model.PrevSize = reader.ReadULong(size)!.Value;
                break;
            default:
                throw new EbmlDataFormatException($"Unexpected EBML element '{descriptor.Identifier}'.");
            }
        }

        private static void FillComplex(this Cluster model, EbmlElementDescriptor descriptor, BaseModel propertyModel)
        {
            if (descriptor.Type != EbmlElementType.MasterElement)
                throw new InvalidOperationException("EbmlElementDescriptor should have 'master' type.");

            switch (descriptor.Identifier.EncodedValue) {
            case MatroskaSpecification.SilentTracks:
                model.SilentTracks = (SilentTracks?)propertyModel;
                break;
            default:
                throw new EbmlDataFormatException($"Unexpected EBML element: '{descriptor.Identifier}'.");
            }
        }

        private static void FillListEntry(this Cluster model, EbmlElementDescriptor descriptor, object listItem)
        {
            if (descriptor.Type != EbmlElementType.MasterElement && descriptor.Type != EbmlElementType.Binary)
                throw new InvalidOperationException("EbmlElementDescriptor should have 'master' or 'binary' type.");

            switch (descriptor.Identifier.EncodedValue) {
            case MatroskaSpecification.SimpleBlock: {
                var list = model.SimpleBlocks as IList<SimpleBlock> ?? new List<SimpleBlock>(4);
                list.Add((SimpleBlock)listItem);
                model.SimpleBlocks = (IReadOnlyList<SimpleBlock>?)list;
                break;
            }
            case MatroskaSpecification.BlockGroup: {
                var list = model.BlockGroups as IList<BlockGroup> ?? new List<BlockGroup>(4);
                list.Add((BlockGroup)listItem);
                model.BlockGroups = (IReadOnlyList<BlockGroup>?)list;
                break;
            }
            case MatroskaSpecification.EncryptedBlock: {
                var list = model.EncryptedBlocks as IList<EncryptedBlock> ?? new List<EncryptedBlock>(4);
                list.Add((EncryptedBlock)listItem);
                model.EncryptedBlocks = (IReadOnlyList<EncryptedBlock>?)list;
                break;
            }
            default:
                throw new EbmlDataFormatException($"Unexpected EBML element '{descriptor.Identifier}'.");
            }
        }

        private static void FillScalar(this BlockGroup model, EbmlElementDescriptor descriptor, int size, ref SpanReader reader)
        {
            if (descriptor.Type == EbmlElementType.MasterElement)
                throw new InvalidOperationException("Can't read master elements directly from the reader.");

            switch (descriptor.Identifier.EncodedValue) {
            case MatroskaSpecification.BlockDuration:
                model.BlockDuration = reader.ReadULong(size)!.Value;
                break;
            case MatroskaSpecification.ReferencePriority:
                model.ReferencePriority = reader.ReadULong(size)!.Value;
                break;
            case MatroskaSpecification.ReferenceBlock:
                model.ReferenceBlock = reader.ReadLong(size)!.Value;
                break;
            case MatroskaSpecification.ReferenceVirtual:
                model.ReferenceVirtual = reader.ReadLong(size)!.Value;
                break;
            case MatroskaSpecification.CodecState:
                model.CodecState = reader.ReadBytes(size)!;
                break;
            case MatroskaSpecification.DiscardPadding:
                model.DiscardPadding = reader.ReadLong(size)!.Value;
                break;
            default:
                throw new EbmlDataFormatException($"Unexpected EBML element '{descriptor.Identifier}'.");
            }
        }

        private static void FillComplex(this BlockGroup model, EbmlElementDescriptor descriptor, BaseModel propertyModel)
        {
            if (descriptor.Type != EbmlElementType.MasterElement)
                throw new InvalidOperationException("EbmlElementDescriptor should have 'master' type.");

            switch (descriptor.Identifier.EncodedValue) {
            case MatroskaSpecification.BlockAdditions:
                model.BlockAdditions = (BlockAdditions?)propertyModel;
                break;
            case MatroskaSpecification.Slices:
                model.Slices = (Slices?)propertyModel;
                break;
            case MatroskaSpecification.ReferenceFrame:
                model.ReferenceFrame = (ReferenceFrame?)propertyModel;
                break;
            default:
                throw new EbmlDataFormatException($"Unexpected EBML element: '{descriptor.Identifier}'.");
            }
        }

        private static void FillListEntry(this BlockGroup model, EbmlElementDescriptor descriptor, object listItem)
        {
            if (descriptor.Type != EbmlElementType.MasterElement && descriptor.Type != EbmlElementType.Binary)
                throw new InvalidOperationException("EbmlElementDescriptor should have 'master' or 'binary' type.");

            switch (descriptor.Identifier.EncodedValue) {
            case MatroskaSpecification.Block: {
                var list = model.Blocks as IList<Block> ?? new List<Block>(4);
                list.Add((Block)listItem);
                model.Blocks = (IReadOnlyList<Block>)list;
                break;
            }
            case MatroskaSpecification.BlockVirtual: {
                var list = model.BlockVirtuals as IList<BlockVirtual> ?? new List<BlockVirtual>(4);
                list.Add((BlockVirtual)listItem);
                model.BlockVirtuals = (IReadOnlyList<BlockVirtual>?)list;
                break;
            }
            default:
                throw new EbmlDataFormatException($"Unexpected EBML element '{descriptor.Identifier}'.");
            }
        }

        private static void FillComplex(this BlockAdditions model, EbmlElementDescriptor descriptor, BaseModel propertyModel)
        {
            if (descriptor.Type != EbmlElementType.MasterElement)
                throw new InvalidOperationException("EbmlElementDescriptor should have 'master' type.");

            switch (descriptor.Identifier.EncodedValue) {
            case MatroskaSpecification.BlockMore:
                model.BlockMore = (BlockMore)propertyModel;
                break;
            default:
                throw new EbmlDataFormatException($"Unexpected EBML element: '{descriptor.Identifier}'.");
            }
        }

        private static void FillScalar(this BlockMore model, EbmlElementDescriptor descriptor, int size, ref SpanReader reader)
        {
            if (descriptor.Type == EbmlElementType.MasterElement)
                throw new InvalidOperationException("Can't read master elements directly from the reader.");

            switch (descriptor.Identifier.EncodedValue) {
            case MatroskaSpecification.BlockAddID:
                model.BlockAddID = reader.ReadULong(size)!.Value;
                break;
            default:
                throw new EbmlDataFormatException($"Unexpected EBML element '{descriptor.Identifier}'.");
            }
        }

        private static void FillListEntry(this BlockMore model, EbmlElementDescriptor descriptor, object listItem)
        {
            if (descriptor.Type != EbmlElementType.MasterElement && descriptor.Type != EbmlElementType.Binary)
                throw new InvalidOperationException("EbmlElementDescriptor should have 'master' or 'binary' type.");

            switch (descriptor.Identifier.EncodedValue) {
            case MatroskaSpecification.BlockAdditional: {
                var list = model.BlockAdditionals as IList<BlockAdditional> ?? new List<BlockAdditional>(4);
                list.Add((BlockAdditional)listItem);
                model.BlockAdditionals = (IReadOnlyList<BlockAdditional>)list;
                break;
            }
            default:
                throw new EbmlDataFormatException($"Unexpected EBML element '{descriptor.Identifier}'.");
            }
        }

        private static void FillScalar(this ReferenceFrame model, EbmlElementDescriptor descriptor, int size, ref SpanReader reader)
        {
            if (descriptor.Type == EbmlElementType.MasterElement)
                throw new InvalidOperationException("Can't read master elements directly from the reader.");

            switch (descriptor.Identifier.EncodedValue) {
            case MatroskaSpecification.ReferenceOffset:
                model.ReferenceOffset = reader.ReadULong(size)!.Value;
                break;
            case MatroskaSpecification.ReferenceTimestamp:
                model.ReferenceTimestamp = reader.ReadULong(size)!.Value;
                break;
            default:
                throw new EbmlDataFormatException($"Unexpected EBML element '{descriptor.Identifier}'.");
            }
        }

        private static void FillComplex(this Slices model, EbmlElementDescriptor descriptor, BaseModel propertyModel)
        {
            if (descriptor.Type != EbmlElementType.MasterElement)
                throw new InvalidOperationException("EbmlElementDescriptor should have 'master' type.");

            switch (descriptor.Identifier.EncodedValue) {
            case MatroskaSpecification.TimeSlice:
                model.TimeSlice = (TimeSlice?)propertyModel;
                break;
            default:
                throw new EbmlDataFormatException($"Unexpected EBML element: '{descriptor.Identifier}'.");
            }
        }

        private static void FillScalar(this TimeSlice model, EbmlElementDescriptor descriptor, int size, ref SpanReader reader)
        {
            if (descriptor.Type == EbmlElementType.MasterElement)
                throw new InvalidOperationException("Can't read master elements directly from the reader.");

            switch (descriptor.Identifier.EncodedValue) {
            case MatroskaSpecification.LaceNumber:
                model.LaceNumber = reader.ReadULong(size)!.Value;
                break;
            case MatroskaSpecification.FrameNumber:
                model.FrameNumber = reader.ReadULong(size)!.Value;
                break;
            case MatroskaSpecification.BlockAdditionID:
                model.BlockAdditionID = reader.ReadULong(size)!.Value;
                break;
            case MatroskaSpecification.Delay:
                model.Delay = reader.ReadULong(size)!.Value;
                break;
            case MatroskaSpecification.SliceDuration:
                model.SliceDuration = reader.ReadULong(size)!.Value;
                break;
            default:
                throw new EbmlDataFormatException($"Unexpected EBML element '{descriptor.Identifier}'.");
            }
        }

        private static void FillScalar(this SilentTracks model, EbmlElementDescriptor descriptor, int size, ref SpanReader reader)
        {
            if (descriptor.Type == EbmlElementType.MasterElement)
                throw new InvalidOperationException("Can't read master elements directly from the reader.");

            switch (descriptor.Identifier.EncodedValue) {
            case MatroskaSpecification.SilentTrackNumber:
                model.SilentTrackNumber = reader.ReadULong(size)!.Value;
                break;
            default:
                throw new EbmlDataFormatException($"Unexpected EBML element '{descriptor.Identifier}'.");
            }
        }

        private static void FillListEntry(this Cues model, EbmlElementDescriptor descriptor, object listItem)
        {
            if (descriptor.Type != EbmlElementType.MasterElement && descriptor.Type != EbmlElementType.Binary)
                throw new InvalidOperationException("EbmlElementDescriptor should have 'master' or 'binary' type.");

            switch (descriptor.Identifier.EncodedValue) {
            case MatroskaSpecification.CuePoint: {
                var list = model.CuePoints as IList<CuePoint> ?? new List<CuePoint>(4);
                list.Add((CuePoint)listItem);
                model.CuePoints = (IReadOnlyList<CuePoint>)list;
                break;
            }
            default:
                throw new EbmlDataFormatException($"Unexpected EBML element '{descriptor.Identifier}'.");
            }
        }

        private static void FillScalar(this CuePoint model, EbmlElementDescriptor descriptor, int size, ref SpanReader reader)
        {
            if (descriptor.Type == EbmlElementType.MasterElement)
                throw new InvalidOperationException("Can't read master elements directly from the reader.");

            switch (descriptor.Identifier.EncodedValue) {
            case MatroskaSpecification.CueTime:
                model.CueTime = reader.ReadULong(size)!.Value;
                break;
            default:
                throw new EbmlDataFormatException($"Unexpected EBML element '{descriptor.Identifier}'.");
            }
        }

        private static void FillComplex(this CuePoint model, EbmlElementDescriptor descriptor, BaseModel propertyModel)
        {
            if (descriptor.Type != EbmlElementType.MasterElement)
                throw new InvalidOperationException("EbmlElementDescriptor should have 'master' type.");

            switch (descriptor.Identifier.EncodedValue) {
            case MatroskaSpecification.CueTrackPositions:
                model.CueTrackPositions = (CueTrackPositions)propertyModel;
                break;
            default:
                throw new EbmlDataFormatException($"Unexpected EBML element: '{descriptor.Identifier}'.");
            }
        }

        private static void FillScalar(this CueTrackPositions model, EbmlElementDescriptor descriptor, int size, ref SpanReader reader)
        {
            if (descriptor.Type == EbmlElementType.MasterElement)
                throw new InvalidOperationException("Can't read master elements directly from the reader.");

            switch (descriptor.Identifier.EncodedValue) {
            case MatroskaSpecification.CueTrack:
                model.CueTrack = reader.ReadULong(size)!.Value;
                break;
            case MatroskaSpecification.CueClusterPosition:
                model.CueClusterPosition = reader.ReadULong(size)!.Value;
                break;
            case MatroskaSpecification.CueRelativePosition:
                model.CueRelativePosition = reader.ReadULong(size)!.Value;
                break;
            case MatroskaSpecification.CueDuration:
                model.CueDuration = reader.ReadULong(size)!.Value;
                break;
            case MatroskaSpecification.CueBlockNumber:
                model.CueBlockNumber = reader.ReadULong(size)!.Value;
                break;
            case MatroskaSpecification.CueCodecState:
                model.CueCodecState = reader.ReadULong(size)!.Value;
                break;
            default:
                throw new EbmlDataFormatException($"Unexpected EBML element '{descriptor.Identifier}'.");
            }
        }

        private static void FillListEntry(this CueTrackPositions model, EbmlElementDescriptor descriptor, object listItem)
        {
            if (descriptor.Type != EbmlElementType.MasterElement && descriptor.Type != EbmlElementType.Binary)
                throw new InvalidOperationException("EbmlElementDescriptor should have 'master' or 'binary' type.");

            switch (descriptor.Identifier.EncodedValue) {
            case MatroskaSpecification.CueReference: {
                var list = model.CueReferences as IList<CueReference> ?? new List<CueReference>(4);
                list.Add((CueReference)listItem);
                model.CueReferences = (IReadOnlyList<CueReference>?)list;
                break;
            }
            default:
                throw new EbmlDataFormatException($"Unexpected EBML element '{descriptor.Identifier}'.");
            }
        }

        private static void FillScalar(this CueReference model, EbmlElementDescriptor descriptor, int size, ref SpanReader reader)
        {
            if (descriptor.Type == EbmlElementType.MasterElement)
                throw new InvalidOperationException("Can't read master elements directly from the reader.");

            switch (descriptor.Identifier.EncodedValue) {
            case MatroskaSpecification.CueRefTime:
                model.CueRefTime = reader.ReadULong(size)!.Value;
                break;
            case MatroskaSpecification.CueRefCluster:
                model.CueRefCluster = reader.ReadULong(size)!.Value;
                break;
            case MatroskaSpecification.CueRefNumber:
                model.CueRefNumber = reader.ReadULong(size)!.Value;
                break;
            case MatroskaSpecification.CueRefCodecState:
                model.CueRefCodecState = reader.ReadULong(size)!.Value;
                break;
            default:
                throw new EbmlDataFormatException($"Unexpected EBML element '{descriptor.Identifier}'.");
            }
        }

        private static void FillScalar(this Info model, EbmlElementDescriptor descriptor, int size, ref SpanReader reader)
        {
            if (descriptor.Type == EbmlElementType.MasterElement)
                throw new InvalidOperationException("Can't read master elements directly from the reader.");

            switch (descriptor.Identifier.EncodedValue) {
            case MatroskaSpecification.SegmentUID:
                model.SegmentUID = reader.ReadBytes(size)!;
                break;
            case MatroskaSpecification.SegmentFilename:
                model.SegmentFilename = reader.ReadUtf8String(size)!;
                break;
            case MatroskaSpecification.PrevUID:
                model.PrevUID = reader.ReadBytes(size)!;
                break;
            case MatroskaSpecification.PrevFilename:
                model.PrevFilename = reader.ReadUtf8String(size)!;
                break;
            case MatroskaSpecification.NextUID:
                model.NextUID = reader.ReadBytes(size)!;
                break;
            case MatroskaSpecification.NextFilename:
                model.NextFilename = reader.ReadUtf8String(size)!;
                break;
            case MatroskaSpecification.SegmentFamily:
                model.SegmentFamily = reader.ReadBytes(size)!;
                break;
            case MatroskaSpecification.TimestampScale:
                model.TimestampScale = reader.ReadULong(size)!.Value;
                break;
            case MatroskaSpecification.Duration:
                model.Duration = reader.ReadFloat(size)!.Value;
                break;
            case MatroskaSpecification.DateUTC:
                model.DateUTC = reader.ReadDateTime()!.Value;
                break;
            case MatroskaSpecification.Title:
                model.Title = reader.ReadUtf8String(size)!;
                break;
            case MatroskaSpecification.MuxingApp:
                model.MuxingApp = reader.ReadUtf8String(size)!;
                break;
            case MatroskaSpecification.WritingApp:
                model.WritingApp = reader.ReadUtf8String(size)!;
                break;
            default:
                throw new EbmlDataFormatException($"Unexpected EBML element '{descriptor.Identifier}'.");
            }
        }

        private static void FillComplex(this Info model, EbmlElementDescriptor descriptor, BaseModel propertyModel)
        {
            if (descriptor.Type != EbmlElementType.MasterElement)
                throw new InvalidOperationException("EbmlElementDescriptor should have 'master' type.");

            switch (descriptor.Identifier.EncodedValue) {
            case MatroskaSpecification.ChapterTranslate:
                model.ChapterTranslate = (ChapterTranslate?)propertyModel;
                break;
            default:
                throw new EbmlDataFormatException($"Unexpected EBML element: '{descriptor.Identifier}'.");
            }
        }

        private static void FillScalar(this ChapterTranslate model, EbmlElementDescriptor descriptor, int size, ref SpanReader reader)
        {
            if (descriptor.Type == EbmlElementType.MasterElement)
                throw new InvalidOperationException("Can't read master elements directly from the reader.");

            switch (descriptor.Identifier.EncodedValue) {
            case MatroskaSpecification.ChapterTranslateEditionUID:
                model.ChapterTranslateEditionUID = reader.ReadULong(size)!.Value;
                break;
            case MatroskaSpecification.ChapterTranslateCodec:
                model.ChapterTranslateCodec = reader.ReadULong(size)!.Value;
                break;
            case MatroskaSpecification.ChapterTranslateID:
                model.ChapterTranslateID = reader.ReadBytes(size)!;
                break;
            default:
                throw new EbmlDataFormatException($"Unexpected EBML element '{descriptor.Identifier}'.");
            }
        }

        private static void FillListEntry(this SeekHead model, EbmlElementDescriptor descriptor, object listItem)
        {
            if (descriptor.Type != EbmlElementType.MasterElement && descriptor.Type != EbmlElementType.Binary)
                throw new InvalidOperationException("EbmlElementDescriptor should have 'master' or 'binary' type.");

            switch (descriptor.Identifier.EncodedValue) {
            case MatroskaSpecification.Seek: {
                var list = model.Seeks as IList<Seek> ?? new List<Seek>(4);
                list.Add((Seek)listItem);
                model.Seeks = (IReadOnlyList<Seek>)list;
                break;
            }
            default:
                throw new EbmlDataFormatException($"Unexpected EBML element '{descriptor.Identifier}'.");
            }
        }

        private static void FillScalar(this Seek model, EbmlElementDescriptor descriptor, int size, ref SpanReader reader)
        {
            if (descriptor.Type == EbmlElementType.MasterElement)
                throw new InvalidOperationException("Can't read master elements directly from the reader.");

            switch (descriptor.Identifier.EncodedValue) {
            case MatroskaSpecification.SeekID:
                model.SeekID = reader.ReadBytes(size)!;
                break;
            case MatroskaSpecification.SeekPosition:
                model.SeekPosition = reader.ReadULong(size)!.Value;
                break;
            default:
                throw new EbmlDataFormatException($"Unexpected EBML element '{descriptor.Identifier}'.");
            }
        }

        private static void FillListEntry(this Tags model, EbmlElementDescriptor descriptor, object listItem)
        {
            if (descriptor.Type != EbmlElementType.MasterElement && descriptor.Type != EbmlElementType.Binary)
                throw new InvalidOperationException("EbmlElementDescriptor should have 'master' or 'binary' type.");

            switch (descriptor.Identifier.EncodedValue) {
            case MatroskaSpecification.Tag: {
                var list = model.TagItems as IList<TagItem> ?? new List<TagItem>(4);
                list.Add((TagItem)listItem);
                model.TagItems = (IReadOnlyList<TagItem>)list;
                break;
            }
            default:
                throw new EbmlDataFormatException($"Unexpected EBML element '{descriptor.Identifier}'.");
            }
        }

        private static void FillComplex(this TagItem model, EbmlElementDescriptor descriptor, BaseModel propertyModel)
        {
            if (descriptor.Type != EbmlElementType.MasterElement)
                throw new InvalidOperationException("EbmlElementDescriptor should have 'master' type.");

            switch (descriptor.Identifier.EncodedValue) {
            case MatroskaSpecification.Targets:
                model.Targets = (Targets)propertyModel;
                break;
            default:
                throw new EbmlDataFormatException($"Unexpected EBML element: '{descriptor.Identifier}'.");
            }
        }

        private static void FillListEntry(this TagItem model, EbmlElementDescriptor descriptor, object listItem)
        {
            if (descriptor.Type != EbmlElementType.MasterElement && descriptor.Type != EbmlElementType.Binary)
                throw new InvalidOperationException("EbmlElementDescriptor should have 'master' or 'binary' type.");

            switch (descriptor.Identifier.EncodedValue) {
            case MatroskaSpecification.SimpleTag: {
                var list = model.SimpleTags as IList<SimpleTag> ?? new List<SimpleTag>(4);
                list.Add((SimpleTag)listItem);
                model.SimpleTags = (IReadOnlyList<SimpleTag>)list;
                break;
            }
            default:
                throw new EbmlDataFormatException($"Unexpected EBML element '{descriptor.Identifier}'.");
            }
        }

        private static void FillScalar(this Targets model, EbmlElementDescriptor descriptor, int size, ref SpanReader reader)
        {
            if (descriptor.Type == EbmlElementType.MasterElement)
                throw new InvalidOperationException("Can't read master elements directly from the reader.");

            switch (descriptor.Identifier.EncodedValue) {
            case MatroskaSpecification.TargetTypeValue:
                model.TargetTypeValue = reader.ReadULong(size)!.Value;
                break;
            case MatroskaSpecification.TargetType:
                model.TargetType = reader.ReadAsciiString(size)!;
                break;
            case MatroskaSpecification.TagTrackUID:
                model.TagTrackUID = reader.ReadULong(size)!.Value;
                break;
            case MatroskaSpecification.TagEditionUID:
                model.TagEditionUID = reader.ReadULong(size)!.Value;
                break;
            case MatroskaSpecification.TagChapterUID:
                model.TagChapterUID = reader.ReadULong(size)!.Value;
                break;
            case MatroskaSpecification.TagAttachmentUID:
                model.TagAttachmentUID = reader.ReadULong(size)!.Value;
                break;
            default:
                throw new EbmlDataFormatException($"Unexpected EBML element '{descriptor.Identifier}'.");
            }
        }

        private static void FillListEntry(this Tracks model, EbmlElementDescriptor descriptor, object listItem)
        {
            if (descriptor.Type != EbmlElementType.MasterElement && descriptor.Type != EbmlElementType.Binary)
                throw new InvalidOperationException("EbmlElementDescriptor should have 'master' or 'binary' type.");

            switch (descriptor.Identifier.EncodedValue) {
            case MatroskaSpecification.TrackEntry: {
                var list = model.TrackEntries as IList<TrackEntry> ?? new List<TrackEntry>(4);
                list.Add((TrackEntry)listItem);
                model.TrackEntries = (IReadOnlyList<TrackEntry>)list;
                break;
            }
            default:
                throw new EbmlDataFormatException($"Unexpected EBML element '{descriptor.Identifier}'.");
            }
        }

        private static void FillScalar(this TrackEntry model, EbmlElementDescriptor descriptor, int size, ref SpanReader reader)
        {
            if (descriptor.Type == EbmlElementType.MasterElement)
                throw new InvalidOperationException("Can't read master elements directly from the reader.");

            switch (descriptor.Identifier.EncodedValue) {
            case MatroskaSpecification.TrackNumber:
                model.TrackNumber = reader.ReadULong(size)!.Value;
                break;
            case MatroskaSpecification.TrackUID:
                model.TrackUID = reader.ReadULong(size)!.Value;
                break;
            case MatroskaSpecification.TrackType:
                model.TrackType = (TrackType?)reader.ReadULong(size)!.Value;
                break;
            case MatroskaSpecification.FlagEnabled:
                model.FlagEnabled = reader.ReadULong(size)!.Value;
                break;
            case MatroskaSpecification.FlagDefault:
                model.FlagDefault = reader.ReadULong(size)!.Value;
                break;
            case MatroskaSpecification.FlagForced:
                model.FlagForced = reader.ReadULong(size)!.Value;
                break;
            case MatroskaSpecification.FlagHearingImpaired:
                model.FlagHearingImpaired = reader.ReadULong(size)!.Value;
                break;
            case MatroskaSpecification.FlagVisualImpaired:
                model.FlagVisualImpaired = reader.ReadULong(size)!.Value;
                break;
            case MatroskaSpecification.FlagTextDescriptions:
                model.FlagTextDescriptions = reader.ReadULong(size)!.Value;
                break;
            case MatroskaSpecification.FlagOriginal:
                model.FlagOriginal = reader.ReadULong(size)!.Value;
                break;
            case MatroskaSpecification.FlagCommentary:
                model.FlagCommentary = reader.ReadULong(size)!.Value;
                break;
            case MatroskaSpecification.FlagLacing:
                model.FlagLacing = reader.ReadULong(size)!.Value;
                break;
            case MatroskaSpecification.MinCache:
                model.MinCache = reader.ReadULong(size)!.Value;
                break;
            case MatroskaSpecification.MaxCache:
                model.MaxCache = reader.ReadULong(size)!.Value;
                break;
            case MatroskaSpecification.DefaultDuration:
                model.DefaultDuration = reader.ReadULong(size)!.Value;
                break;
            case MatroskaSpecification.DefaultDecodedFieldDuration:
                model.DefaultDecodedFieldDuration = reader.ReadULong(size)!.Value;
                break;
            case MatroskaSpecification.TrackOffset:
                model.TrackOffset = reader.ReadLong(size)!.Value;
                break;
            case MatroskaSpecification.MaxBlockAdditionID:
                model.MaxBlockAdditionID = reader.ReadULong(size)!.Value;
                break;
            case MatroskaSpecification.Name:
                model.Name = reader.ReadUtf8String(size)!;
                break;
            case MatroskaSpecification.Language:
                model.Language = reader.ReadAsciiString(size)!;
                break;
            case MatroskaSpecification.LanguageIETF:
                model.LanguageIETF = reader.ReadAsciiString(size)!;
                break;
            case MatroskaSpecification.CodecID:
                model.CodecID = reader.ReadAsciiString(size)!;
                break;
            case MatroskaSpecification.CodecPrivate:
                model.CodecPrivate = reader.ReadBytes(size)!;
                break;
            case MatroskaSpecification.CodecName:
                model.CodecName = reader.ReadUtf8String(size)!;
                break;
            case MatroskaSpecification.AttachmentLink:
                model.AttachmentLink = reader.ReadULong(size)!.Value;
                break;
            case MatroskaSpecification.CodecSettings:
                model.CodecSettings = reader.ReadUtf8String(size)!;
                break;
            case MatroskaSpecification.CodecInfoURL:
                model.CodecInfoURL = reader.ReadAsciiString(size)!;
                break;
            case MatroskaSpecification.CodecDownloadURL:
                model.CodecDownloadURL = reader.ReadAsciiString(size)!;
                break;
            case MatroskaSpecification.CodecDecodeAll:
                model.CodecDecodeAll = reader.ReadULong(size)!.Value;
                break;
            case MatroskaSpecification.TrackOverlay:
                model.TrackOverlay = reader.ReadULong(size)!.Value;
                break;
            case MatroskaSpecification.CodecDelay:
                model.CodecDelay = reader.ReadULong(size)!.Value;
                break;
            case MatroskaSpecification.SeekPreRoll:
                model.SeekPreRoll = reader.ReadULong(size)!.Value;
                break;
            case MatroskaSpecification.TrickTrackUID:
                model.TrickTrackUID = reader.ReadULong(size)!.Value;
                break;
            case MatroskaSpecification.TrickTrackSegmentUID:
                model.TrickTrackSegmentUID = reader.ReadBytes(size)!;
                break;
            case MatroskaSpecification.TrickTrackFlag:
                model.TrickTrackFlag = reader.ReadULong(size)!.Value;
                break;
            case MatroskaSpecification.TrickMasterTrackUID:
                model.TrickMasterTrackUID = reader.ReadULong(size)!.Value;
                break;
            case MatroskaSpecification.TrickMasterTrackSegmentUID:
                model.TrickMasterTrackSegmentUID = reader.ReadBytes(size)!;
                break;
            default:
                throw new EbmlDataFormatException($"Unexpected EBML element '{descriptor.Identifier}'.");
            }
        }

        private static void FillComplex(this TrackEntry model, EbmlElementDescriptor descriptor, BaseModel propertyModel)
        {
            if (descriptor.Type != EbmlElementType.MasterElement)
                throw new InvalidOperationException("EbmlElementDescriptor should have 'master' type.");

            switch (descriptor.Identifier.EncodedValue) {
            case MatroskaSpecification.BlockAdditionMapping:
                model.BlockAdditionMapping = (BlockAdditionMapping?)propertyModel;
                break;
            case MatroskaSpecification.TrackTranslate:
                model.TrackTranslate = (TrackTranslate?)propertyModel;
                break;
            case MatroskaSpecification.Video:
                model.Video = (Video?)propertyModel;
                break;
            case MatroskaSpecification.Audio:
                model.Audio = (Audio?)propertyModel;
                break;
            case MatroskaSpecification.TrackOperation:
                model.TrackOperation = (TrackOperation?)propertyModel;
                break;
            case MatroskaSpecification.ContentEncodings:
                model.ContentEncodings = (ContentEncodings?)propertyModel;
                break;
            default:
                throw new EbmlDataFormatException($"Unexpected EBML element: '{descriptor.Identifier}'.");
            }
        }

        private static void FillScalar(this Audio model, EbmlElementDescriptor descriptor, int size, ref SpanReader reader)
        {
            if (descriptor.Type == EbmlElementType.MasterElement)
                throw new InvalidOperationException("Can't read master elements directly from the reader.");

            switch (descriptor.Identifier.EncodedValue) {
            case MatroskaSpecification.SamplingFrequency:
                model.SamplingFrequency = reader.ReadFloat(size)!.Value;
                break;
            case MatroskaSpecification.OutputSamplingFrequency:
                model.OutputSamplingFrequency = reader.ReadFloat(size)!.Value;
                break;
            case MatroskaSpecification.Channels:
                model.Channels = reader.ReadULong(size)!.Value;
                break;
            case MatroskaSpecification.ChannelPositions:
                model.ChannelPositions = reader.ReadBytes(size)!;
                break;
            case MatroskaSpecification.BitDepth:
                model.BitDepth = reader.ReadULong(size)!.Value;
                break;
            default:
                throw new EbmlDataFormatException($"Unexpected EBML element '{descriptor.Identifier}'.");
            }
        }

        private static void FillScalar(this BlockAdditionMapping model, EbmlElementDescriptor descriptor, int size, ref SpanReader reader)
        {
            if (descriptor.Type == EbmlElementType.MasterElement)
                throw new InvalidOperationException("Can't read master elements directly from the reader.");

            switch (descriptor.Identifier.EncodedValue) {
            case MatroskaSpecification.BlockAddIDValue:
                model.BlockAddIDValue = reader.ReadULong(size)!.Value;
                break;
            case MatroskaSpecification.BlockAddIDName:
                model.BlockAddIDName = reader.ReadAsciiString(size)!;
                break;
            case MatroskaSpecification.BlockAddIDType:
                model.BlockAddIDType = reader.ReadULong(size)!.Value;
                break;
            case MatroskaSpecification.BlockAddIDExtraData:
                model.BlockAddIDExtraData = reader.ReadBytes(size)!;
                break;
            default:
                throw new EbmlDataFormatException($"Unexpected EBML element '{descriptor.Identifier}'.");
            }
        }

        private static void FillListEntry(this ContentEncodings model, EbmlElementDescriptor descriptor, object listItem)
        {
            if (descriptor.Type != EbmlElementType.MasterElement && descriptor.Type != EbmlElementType.Binary)
                throw new InvalidOperationException("EbmlElementDescriptor should have 'master' or 'binary' type.");

            switch (descriptor.Identifier.EncodedValue) {
            case MatroskaSpecification.ContentEncoding: {
                var list = model.ContentEncodingItems as IList<ContentEncodingItem> ?? new List<ContentEncodingItem>(4);
                list.Add((ContentEncodingItem)listItem);
                model.ContentEncodingItems = (IReadOnlyList<ContentEncodingItem>)list;
                break;
            }
            default:
                throw new EbmlDataFormatException($"Unexpected EBML element '{descriptor.Identifier}'.");
            }
        }

        private static void FillScalar(this ContentEncodingItem model, EbmlElementDescriptor descriptor, int size, ref SpanReader reader)
        {
            if (descriptor.Type == EbmlElementType.MasterElement)
                throw new InvalidOperationException("Can't read master elements directly from the reader.");

            switch (descriptor.Identifier.EncodedValue) {
            case MatroskaSpecification.ContentEncodingOrder:
                model.ContentEncodingOrder = reader.ReadULong(size)!.Value;
                break;
            case MatroskaSpecification.ContentEncodingScope:
                model.ContentEncodingScope = reader.ReadULong(size)!.Value;
                break;
            case MatroskaSpecification.ContentEncodingType:
                model.ContentEncodingType = reader.ReadULong(size)!.Value;
                break;
            default:
                throw new EbmlDataFormatException($"Unexpected EBML element '{descriptor.Identifier}'.");
            }
        }

        private static void FillComplex(this ContentEncodingItem model, EbmlElementDescriptor descriptor, BaseModel propertyModel)
        {
            if (descriptor.Type != EbmlElementType.MasterElement)
                throw new InvalidOperationException("EbmlElementDescriptor should have 'master' type.");

            switch (descriptor.Identifier.EncodedValue) {
            case MatroskaSpecification.ContentEncryption:
                model.ContentEncryption = (ContentEncryption?)propertyModel;
                break;
            default:
                throw new EbmlDataFormatException($"Unexpected EBML element: '{descriptor.Identifier}'.");
            }
        }

        private static void FillListEntry(this ContentEncodingItem model, EbmlElementDescriptor descriptor, object listItem)
        {
            if (descriptor.Type != EbmlElementType.MasterElement && descriptor.Type != EbmlElementType.Binary)
                throw new InvalidOperationException("EbmlElementDescriptor should have 'master' or 'binary' type.");

            switch (descriptor.Identifier.EncodedValue) {
            case MatroskaSpecification.ContentCompression: {
                var list = model.ContentCompressions as IList<ContentCompression> ?? new List<ContentCompression>(4);
                list.Add((ContentCompression)listItem);
                model.ContentCompressions = (IReadOnlyList<ContentCompression>?)list;
                break;
            }
            default:
                throw new EbmlDataFormatException($"Unexpected EBML element '{descriptor.Identifier}'.");
            }
        }

        private static void FillScalar(this ContentCompression model, EbmlElementDescriptor descriptor, int size, ref SpanReader reader)
        {
            if (descriptor.Type == EbmlElementType.MasterElement)
                throw new InvalidOperationException("Can't read master elements directly from the reader.");

            switch (descriptor.Identifier.EncodedValue) {
            case MatroskaSpecification.ContentCompAlgo:
                model.ContentCompAlgo = reader.ReadULong(size)!.Value;
                break;
            case MatroskaSpecification.ContentCompSettings:
                model.ContentCompSettings = reader.ReadBytes(size)!;
                break;
            default:
                throw new EbmlDataFormatException($"Unexpected EBML element '{descriptor.Identifier}'.");
            }
        }

        private static void FillScalar(this ContentEncryption model, EbmlElementDescriptor descriptor, int size, ref SpanReader reader)
        {
            if (descriptor.Type == EbmlElementType.MasterElement)
                throw new InvalidOperationException("Can't read master elements directly from the reader.");

            switch (descriptor.Identifier.EncodedValue) {
            case MatroskaSpecification.ContentEncAlgo:
                model.ContentEncAlgo = reader.ReadULong(size)!.Value;
                break;
            case MatroskaSpecification.ContentEncKeyID:
                model.ContentEncKeyID = reader.ReadBytes(size)!;
                break;
            case MatroskaSpecification.ContentSignature:
                model.ContentSignature = reader.ReadBytes(size)!;
                break;
            case MatroskaSpecification.ContentSigKeyID:
                model.ContentSigKeyID = reader.ReadBytes(size)!;
                break;
            case MatroskaSpecification.ContentSigAlgo:
                model.ContentSigAlgo = reader.ReadULong(size)!.Value;
                break;
            case MatroskaSpecification.ContentSigHashAlgo:
                model.ContentSigHashAlgo = reader.ReadULong(size)!.Value;
                break;
            default:
                throw new EbmlDataFormatException($"Unexpected EBML element '{descriptor.Identifier}'.");
            }
        }

        private static void FillComplex(this ContentEncryption model, EbmlElementDescriptor descriptor, BaseModel propertyModel)
        {
            if (descriptor.Type != EbmlElementType.MasterElement)
                throw new InvalidOperationException("EbmlElementDescriptor should have 'master' type.");

            switch (descriptor.Identifier.EncodedValue) {
            case MatroskaSpecification.ContentEncAESSettings:
                model.ContentEncAESSettings = (ContentEncAESSettings?)propertyModel;
                break;
            default:
                throw new EbmlDataFormatException($"Unexpected EBML element: '{descriptor.Identifier}'.");
            }
        }

        private static void FillScalar(this ContentEncAESSettings model, EbmlElementDescriptor descriptor, int size, ref SpanReader reader)
        {
            if (descriptor.Type == EbmlElementType.MasterElement)
                throw new InvalidOperationException("Can't read master elements directly from the reader.");

            switch (descriptor.Identifier.EncodedValue) {
            case MatroskaSpecification.AESSettingsCipherMode:
                model.AESSettingsCipherMode = reader.ReadULong(size)!.Value;
                break;
            default:
                throw new EbmlDataFormatException($"Unexpected EBML element '{descriptor.Identifier}'.");
            }
        }

        private static void FillComplex(this TrackOperation model, EbmlElementDescriptor descriptor, BaseModel propertyModel)
        {
            if (descriptor.Type != EbmlElementType.MasterElement)
                throw new InvalidOperationException("EbmlElementDescriptor should have 'master' type.");

            switch (descriptor.Identifier.EncodedValue) {
            case MatroskaSpecification.TrackCombinePlanes:
                model.TrackCombinePlanes = (TrackCombinePlanes?)propertyModel;
                break;
            case MatroskaSpecification.TrackJoinBlocks:
                model.TrackJoinBlocks = (TrackJoinBlocks?)propertyModel;
                break;
            default:
                throw new EbmlDataFormatException($"Unexpected EBML element: '{descriptor.Identifier}'.");
            }
        }

        private static void FillComplex(this TrackCombinePlanes model, EbmlElementDescriptor descriptor, BaseModel propertyModel)
        {
            if (descriptor.Type != EbmlElementType.MasterElement)
                throw new InvalidOperationException("EbmlElementDescriptor should have 'master' type.");

            switch (descriptor.Identifier.EncodedValue) {
            case MatroskaSpecification.TrackPlane:
                model.TrackPlane = (TrackPlane)propertyModel;
                break;
            default:
                throw new EbmlDataFormatException($"Unexpected EBML element: '{descriptor.Identifier}'.");
            }
        }

        private static void FillScalar(this TrackPlane model, EbmlElementDescriptor descriptor, int size, ref SpanReader reader)
        {
            if (descriptor.Type == EbmlElementType.MasterElement)
                throw new InvalidOperationException("Can't read master elements directly from the reader.");

            switch (descriptor.Identifier.EncodedValue) {
            case MatroskaSpecification.TrackPlaneUID:
                model.TrackPlaneUID = reader.ReadULong(size)!.Value;
                break;
            case MatroskaSpecification.TrackPlaneType:
                model.TrackPlaneType = reader.ReadULong(size)!.Value;
                break;
            default:
                throw new EbmlDataFormatException($"Unexpected EBML element '{descriptor.Identifier}'.");
            }
        }

        private static void FillScalar(this TrackJoinBlocks model, EbmlElementDescriptor descriptor, int size, ref SpanReader reader)
        {
            if (descriptor.Type == EbmlElementType.MasterElement)
                throw new InvalidOperationException("Can't read master elements directly from the reader.");

            switch (descriptor.Identifier.EncodedValue) {
            case MatroskaSpecification.TrackJoinUID:
                model.TrackJoinUID = reader.ReadULong(size)!.Value;
                break;
            default:
                throw new EbmlDataFormatException($"Unexpected EBML element '{descriptor.Identifier}'.");
            }
        }

        private static void FillScalar(this TrackTranslate model, EbmlElementDescriptor descriptor, int size, ref SpanReader reader)
        {
            if (descriptor.Type == EbmlElementType.MasterElement)
                throw new InvalidOperationException("Can't read master elements directly from the reader.");

            switch (descriptor.Identifier.EncodedValue) {
            case MatroskaSpecification.TrackTranslateEditionUID:
                model.TrackTranslateEditionUID = reader.ReadULong(size)!.Value;
                break;
            case MatroskaSpecification.TrackTranslateCodec:
                model.TrackTranslateCodec = reader.ReadULong(size)!.Value;
                break;
            case MatroskaSpecification.TrackTranslateTrackID:
                model.TrackTranslateTrackID = reader.ReadBytes(size)!;
                break;
            default:
                throw new EbmlDataFormatException($"Unexpected EBML element '{descriptor.Identifier}'.");
            }
        }

        private static void FillScalar(this Video model, EbmlElementDescriptor descriptor, int size, ref SpanReader reader)
        {
            if (descriptor.Type == EbmlElementType.MasterElement)
                throw new InvalidOperationException("Can't read master elements directly from the reader.");

            switch (descriptor.Identifier.EncodedValue) {
            case MatroskaSpecification.FlagInterlaced:
                model.FlagInterlaced = reader.ReadULong(size)!.Value;
                break;
            case MatroskaSpecification.FieldOrder:
                model.FieldOrder = reader.ReadULong(size)!.Value;
                break;
            case MatroskaSpecification.StereoMode:
                model.StereoMode = reader.ReadULong(size)!.Value;
                break;
            case MatroskaSpecification.AlphaMode:
                model.AlphaMode = reader.ReadULong(size)!.Value;
                break;
            case MatroskaSpecification.OldStereoMode:
                model.OldStereoMode = reader.ReadULong(size)!.Value;
                break;
            case MatroskaSpecification.PixelWidth:
                model.PixelWidth = reader.ReadULong(size)!.Value;
                break;
            case MatroskaSpecification.PixelHeight:
                model.PixelHeight = reader.ReadULong(size)!.Value;
                break;
            case MatroskaSpecification.PixelCropBottom:
                model.PixelCropBottom = reader.ReadULong(size)!.Value;
                break;
            case MatroskaSpecification.PixelCropTop:
                model.PixelCropTop = reader.ReadULong(size)!.Value;
                break;
            case MatroskaSpecification.PixelCropLeft:
                model.PixelCropLeft = reader.ReadULong(size)!.Value;
                break;
            case MatroskaSpecification.PixelCropRight:
                model.PixelCropRight = reader.ReadULong(size)!.Value;
                break;
            case MatroskaSpecification.DisplayWidth:
                model.DisplayWidth = reader.ReadULong(size)!.Value;
                break;
            case MatroskaSpecification.DisplayHeight:
                model.DisplayHeight = reader.ReadULong(size)!.Value;
                break;
            case MatroskaSpecification.DisplayUnit:
                model.DisplayUnit = reader.ReadULong(size)!.Value;
                break;
            case MatroskaSpecification.AspectRatioType:
                model.AspectRatioType = reader.ReadULong(size)!.Value;
                break;
            case MatroskaSpecification.ColourSpace:
                model.ColourSpace = reader.ReadBytes(size)!;
                break;
            case MatroskaSpecification.GammaValue:
                model.GammaValue = reader.ReadFloat(size)!.Value;
                break;
            case MatroskaSpecification.FrameRate:
                model.FrameRate = reader.ReadFloat(size)!.Value;
                break;
            default:
                throw new EbmlDataFormatException($"Unexpected EBML element '{descriptor.Identifier}'.");
            }
        }

        private static void FillComplex(this Video model, EbmlElementDescriptor descriptor, BaseModel propertyModel)
        {
            if (descriptor.Type != EbmlElementType.MasterElement)
                throw new InvalidOperationException("EbmlElementDescriptor should have 'master' type.");

            switch (descriptor.Identifier.EncodedValue) {
            case MatroskaSpecification.Colour:
                model.Colour = (Colour?)propertyModel;
                break;
            case MatroskaSpecification.Projection:
                model.Projection = (Projection?)propertyModel;
                break;
            default:
                throw new EbmlDataFormatException($"Unexpected EBML element: '{descriptor.Identifier}'.");
            }
        }

        private static void FillScalar(this Colour model, EbmlElementDescriptor descriptor, int size, ref SpanReader reader)
        {
            if (descriptor.Type == EbmlElementType.MasterElement)
                throw new InvalidOperationException("Can't read master elements directly from the reader.");

            switch (descriptor.Identifier.EncodedValue) {
            case MatroskaSpecification.MatrixCoefficients:
                model.MatrixCoefficients = reader.ReadULong(size)!.Value;
                break;
            case MatroskaSpecification.BitsPerChannel:
                model.BitsPerChannel = reader.ReadULong(size)!.Value;
                break;
            case MatroskaSpecification.ChromaSubsamplingHorz:
                model.ChromaSubsamplingHorz = reader.ReadULong(size)!.Value;
                break;
            case MatroskaSpecification.ChromaSubsamplingVert:
                model.ChromaSubsamplingVert = reader.ReadULong(size)!.Value;
                break;
            case MatroskaSpecification.CbSubsamplingHorz:
                model.CbSubsamplingHorz = reader.ReadULong(size)!.Value;
                break;
            case MatroskaSpecification.CbSubsamplingVert:
                model.CbSubsamplingVert = reader.ReadULong(size)!.Value;
                break;
            case MatroskaSpecification.ChromaSitingHorz:
                model.ChromaSitingHorz = reader.ReadULong(size)!.Value;
                break;
            case MatroskaSpecification.ChromaSitingVert:
                model.ChromaSitingVert = reader.ReadULong(size)!.Value;
                break;
            case MatroskaSpecification.Range:
                model.Range = reader.ReadULong(size)!.Value;
                break;
            case MatroskaSpecification.TransferCharacteristics:
                model.TransferCharacteristics = reader.ReadULong(size)!.Value;
                break;
            case MatroskaSpecification.Primaries:
                model.Primaries = reader.ReadULong(size)!.Value;
                break;
            case MatroskaSpecification.MaxCLL:
                model.MaxCLL = reader.ReadULong(size)!.Value;
                break;
            case MatroskaSpecification.MaxFALL:
                model.MaxFALL = reader.ReadULong(size)!.Value;
                break;
            default:
                throw new EbmlDataFormatException($"Unexpected EBML element '{descriptor.Identifier}'.");
            }
        }

        private static void FillComplex(this Colour model, EbmlElementDescriptor descriptor, BaseModel propertyModel)
        {
            if (descriptor.Type != EbmlElementType.MasterElement)
                throw new InvalidOperationException("EbmlElementDescriptor should have 'master' type.");

            switch (descriptor.Identifier.EncodedValue) {
            case MatroskaSpecification.MasteringMetadata:
                model.MasteringMetadata = (MasteringMetadata?)propertyModel;
                break;
            default:
                throw new EbmlDataFormatException($"Unexpected EBML element: '{descriptor.Identifier}'.");
            }
        }

        private static void FillScalar(this MasteringMetadata model, EbmlElementDescriptor descriptor, int size, ref SpanReader reader)
        {
            if (descriptor.Type == EbmlElementType.MasterElement)
                throw new InvalidOperationException("Can't read master elements directly from the reader.");

            switch (descriptor.Identifier.EncodedValue) {
            case MatroskaSpecification.PrimaryRChromaticityX:
                model.PrimaryRChromaticityX = reader.ReadFloat(size)!.Value;
                break;
            case MatroskaSpecification.PrimaryRChromaticityY:
                model.PrimaryRChromaticityY = reader.ReadFloat(size)!.Value;
                break;
            case MatroskaSpecification.PrimaryGChromaticityX:
                model.PrimaryGChromaticityX = reader.ReadFloat(size)!.Value;
                break;
            case MatroskaSpecification.PrimaryGChromaticityY:
                model.PrimaryGChromaticityY = reader.ReadFloat(size)!.Value;
                break;
            case MatroskaSpecification.PrimaryBChromaticityX:
                model.PrimaryBChromaticityX = reader.ReadFloat(size)!.Value;
                break;
            case MatroskaSpecification.PrimaryBChromaticityY:
                model.PrimaryBChromaticityY = reader.ReadFloat(size)!.Value;
                break;
            case MatroskaSpecification.WhitePointChromaticityX:
                model.WhitePointChromaticityX = reader.ReadFloat(size)!.Value;
                break;
            case MatroskaSpecification.WhitePointChromaticityY:
                model.WhitePointChromaticityY = reader.ReadFloat(size)!.Value;
                break;
            case MatroskaSpecification.LuminanceMax:
                model.LuminanceMax = reader.ReadFloat(size)!.Value;
                break;
            case MatroskaSpecification.LuminanceMin:
                model.LuminanceMin = reader.ReadFloat(size)!.Value;
                break;
            default:
                throw new EbmlDataFormatException($"Unexpected EBML element '{descriptor.Identifier}'.");
            }
        }

        private static void FillScalar(this Projection model, EbmlElementDescriptor descriptor, int size, ref SpanReader reader)
        {
            if (descriptor.Type == EbmlElementType.MasterElement)
                throw new InvalidOperationException("Can't read master elements directly from the reader.");

            switch (descriptor.Identifier.EncodedValue) {
            case MatroskaSpecification.ProjectionType:
                model.ProjectionType = reader.ReadULong(size)!.Value;
                break;
            case MatroskaSpecification.ProjectionPrivate:
                model.ProjectionPrivate = reader.ReadBytes(size)!;
                break;
            case MatroskaSpecification.ProjectionPoseYaw:
                model.ProjectionPoseYaw = reader.ReadFloat(size)!.Value;
                break;
            case MatroskaSpecification.ProjectionPosePitch:
                model.ProjectionPosePitch = reader.ReadFloat(size)!.Value;
                break;
            case MatroskaSpecification.ProjectionPoseRoll:
                model.ProjectionPoseRoll = reader.ReadFloat(size)!.Value;
                break;
            default:
                throw new EbmlDataFormatException($"Unexpected EBML element '{descriptor.Identifier}'.");
            }
        }

    }
}

