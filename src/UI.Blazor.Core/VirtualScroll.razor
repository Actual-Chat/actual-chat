@typeparam TItem
@implements IVirtualScrollBackend
@implements IAsyncDisposable
@using System.Linq
@using ActualChat.UI.Blazor.Internal
@using Microsoft.AspNetCore.Components
@using Stl.Async
@inject IJSRuntime JS

@{
    var state = State ?? new ViewState();
    var items = Items
        .Skip(state.SkipCount)
        .Take(state.TakeCount)
        .Select((item, index) => (Item: item, Index: index));
}

<div class="@Class virtual-scroll" style="@Style" @ref="Ref">
    <div class="content" style="height: @(state.Height)px">
         @foreach (var item in items) {
             <div class="item" style="height: @(ItemHeight)px; top: @((state.SkipCount + item.Index) * ItemHeight)px;">
                 @ChildContent(item.Item)
             </div>
         }
    </div>
</div>

@code {

    public record ViewState
    {
        public double Height { get; init; }
        public int SkipCount { get; init; }
        public int TakeCount { get; init; }
    }

    protected IJSObjectReference? ModuleRef { get; set; } // Shouldn't be disposed
    protected IJSObjectReference? JSComponentRef { get; set; }
    protected DotNetObjectReference<VirtualScroll<TItem>>? ComponentRef { get; set; }
    protected IVirtualScrollBackend.ClientSideState? ClientSideState { get; set; }
    protected ViewState? State { get; set; }

    [Parameter] public string Class { get; set; } = "";
    [Parameter] public string Style { get; set; } = "";
    [Parameter] public double ItemHeight { get; set; } = 50;
    [Parameter] public RenderFragment<TItem> ChildContent { get; set; } = null!;
    [Parameter] public IEnumerable<TItem> Items { get; set; } = Enumerable.Empty<TItem>();

    public ElementReference Ref { get; set; }

    public virtual async ValueTask DisposeAsync()
    {
        if (JSComponentRef != null) {
            await JSComponentRef.InvokeVoidAsync("dispose");
            await JSComponentRef.DisposeAsync();
        }
        ComponentRef?.Dispose();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (ModuleRef != null || !firstRender)
            return;
        ModuleRef = await JS.Import(typeof(IVirtualScrollBackend).Assembly, "scripts/virtualScroll.js");
        ComponentRef = DotNetObjectReference.Create(this);
        JSComponentRef = await ModuleRef.InvokeAsync<IJSObjectReference>("create", Ref, ComponentRef);
        JSComponentRef.InvokeVoidAsync("pushStateUpdate").Ignore();
    }

    [JSInvokable]
    public void UpdateClientSideState(IVirtualScrollBackend.ClientSideState clientSideState)
    {
        ClientSideState = clientSideState;
        State = new ViewState() {
            Height = Items.Count() * ItemHeight,
            SkipCount = (int) Math.Floor(clientSideState.ScrollTop / ItemHeight),
            TakeCount = (int) Math.Ceiling(clientSideState.ClientHeight / ItemHeight),
        };
        StateHasChanged();
    }

}
