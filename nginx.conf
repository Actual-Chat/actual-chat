# Detemine the formatting of the log that will be print to the access.log file
log_format testlog '$remote_addr - $remote_user [$time_local] '
               '"$request" $status $bytes_sent '
               '"$http_referer" $http_user_agent $request_body $gzip_ratio '
               '"$request_time $upstream_connect_time $upstream_header_time $upstream_response_time ';

# Define the upstreams for image proxy service and actual chat web app
upstream actaul-chat-app {
    server host.docker.internal:7080;
}

upstream image-proxy {
    server imageproxy:8080;
}

server {
    # Determine where to output the log
    access_log /var/log/nginx/access.log;

    listen 80;
    server_name local.actual.chat;

#     Redirect to SSL
#     location / {
#         return 301 https://$host$request_uri;
#     }

    location / {
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Host $http_host;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_pass http://actaul-chat-app;
    }
}

server {
    # Determine where to output the log
    access_log /var/log/nginx/access.log;

    listen 80;
    server_name cdn.local.actual.chat;

    location / {
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Host $http_host;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_pass http://actaul-chat-app/api/content/;
    }
}

server {
    # Determine where to output the log
    access_log /var/log/nginx/access.log;

    listen 80;
    server_name media.local.actual.chat;

    location / {
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Host $http_host;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_pass http://imageproxy;
    }
}

# # Write the reverse proxy
# server {
#     # Determine where to output the log
#     access_log /var/log/nginx/access.log;
#     # expose port 443
#     listen 443 ssl;
#     server_name *.local.actual.chat;
#
# #     ssl_certificate /etc/letsencrypt/live/local.actual.chat/fullchain.pem;
# #     ssl_certificate_key /etc/letsencrypt/live/local.actual.chat/privkey.pem;
# #     include /etc/letsencrypt/options-ssl-nginx.conf;
# #     ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;
#
#     # if the root route get access it will return the default nginx html page
#     location / {
#         root   /usr/share/nginx/html;
#         index  index.html index.htm;
#     }
#
# #     # Here we do the reverse proxy with the keyword "proxy_pass" and pass the upstream as the first argument
# #     # do not forget to set the proxy header, here I will use the common header instructed by the documentation
# #     location /one {
# #         proxy_set_header X-Real-IP $remote_addr;
# #         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
# #         proxy_set_header Host $http_host;
# #         proxy_set_header X-Forwarded-Proto $scheme;
# #         # do not forget to include the scheme which is http
# # 		proxy_pass http://service-one;
# # 	}
# #
# #     # do the same with service two and service three
# #     location /two {
# #         proxy_set_header X-Real-IP $remote_addr;
# #         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
# #         proxy_set_header Host $http_host;
# #         proxy_set_header X-Forwarded-Proto $scheme;
# # 		proxy_pass http://service-two;
# # 	}
# #
# #     location /three {
# #         proxy_set_header X-Real-IP $remote_addr;
# #         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
# #         proxy_set_header Host $http_host;
# #         proxy_set_header X-Forwarded-Proto $scheme;
# # 		proxy_pass http://service-three;
# # 	}
# }
