proxy_cache_path /var/cache/nginx/static-cache levels=1:2 keys_zone=static-cache:128m inactive=60m max_size=10g use_temp_path=off;

upstream backend {
    server local.actual.chat:7080;
}

upstream image-proxy {
    server imageproxy:8080;
}

include snippets/ssl-params.conf;

#Redirect to SSL
server {
    listen 80;

    location / {
        return 301 https://$host$request_uri;
    }
}

server {
    listen 443 ssl;
    server_name local.actual.chat;
    ssl_protocols       TLSv1.2 TLSv1.3;
    client_max_body_size 64M;

    location /sw.js {
        proxy_pass http://backend/dist/sw.js;

        access_log off;

        add_header Cache-Control "public";
        expires 1m;
        proxy_cache static-cache;

        # ignore incorrect Kestrel settings :)
        proxy_ignore_headers Set-Cookie;
        proxy_ignore_headers Cache-Control;
        proxy_ignore_headers Expires;
        proxy_hide_header Set-Cookie;
        proxy_hide_header Cache-Control;
        proxy_hide_header Expires;
        proxy_cache_valid 200 300m;
        proxy_cache_valid 404 1m;
        proxy_cache_valid 500 1s;
        proxy_cache_revalidate on;
        proxy_cache_min_uses 3;
        proxy_cache_use_stale error timeout updating http_404 http_500 http_502 http_503 http_504;
        proxy_cache_background_update on;
        proxy_cache_lock on;
        add_header X-Cache-Status $upstream_cache_status;

        # CORS for static files
        add_header 'Access-Control-Allow-Origin' '*' always;
        add_header 'Access-Control-Allow-Methods' 'GET' always;
        add_header 'Access-Control-Allow-Headers' 'Accept,Upgrade-Insecure-Requests,DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range' always;
        add_header 'Access-Control-Expose-Headers' 'Content-Encoding,Content-Length,Content-Range' always;
    }

    location /_framework/blazor.boot.json {
        proxy_pass http://backend/_framework/blazor.boot.json;

        access_log off;

        add_header Cache-Control "no-store, no-cache, must-revalidate, proxy-revalidate";
        expires 1m;
        proxy_cache static-cache;

        # ignore incorrect Kestrel settings :)
        proxy_ignore_headers Set-Cookie;
        proxy_ignore_headers Cache-Control;
        proxy_ignore_headers Expires;
        proxy_hide_header Set-Cookie;
        proxy_hide_header Cache-Control;
        proxy_hide_header Expires;
        proxy_cache_valid 200 1m; # avoid caching
        proxy_cache_valid 404 1m;
        proxy_cache_valid 500 1s;
        proxy_cache_revalidate on;
        proxy_cache_min_uses 3;
        proxy_cache_use_stale error timeout updating http_404 http_500 http_502 http_503 http_504;
        proxy_cache_background_update on;
        proxy_cache_lock on;
        add_header X-Cache-Status $upstream_cache_status;

        # CORS for static files
        add_header 'Access-Control-Allow-Origin' '*' always;
        add_header 'Access-Control-Allow-Methods' 'GET' always;
        add_header 'Access-Control-Allow-Headers' 'Accept,Upgrade-Insecure-Requests,DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range' always;
        add_header 'Access-Control-Expose-Headers' 'Content-Encoding,Content-Length,Content-Range' always;
    }

    location /_framework/ {
        proxy_pass http://backend/_framework/;

        access_log off;

        add_header Cache-Control "no-store, no-cache, must-revalidate, proxy-revalidate";
        expires 1m;
        proxy_cache static-cache;

        # do not cache - this code is for testing purposes
        # if ($arg_hash) {
        #     add_header Cache-Control "public, immmutable, proxy-revalidate, stale-while-revalidate=86400";
        #     expires 180d;
        # }

        # ignore incorrect Kestrel settings :)
        proxy_ignore_headers Set-Cookie;
        proxy_ignore_headers Cache-Control;
        proxy_ignore_headers Expires;
        proxy_hide_header Set-Cookie;
        proxy_hide_header Cache-Control;
        proxy_hide_header Expires;

        proxy_cache_valid 200 1m; # avoid caching
        proxy_cache_valid 404 1m;
        proxy_cache_valid 500 1s;
        proxy_cache_revalidate on;
        proxy_cache_min_uses 3;
        proxy_cache_use_stale error timeout updating http_404 http_500 http_502 http_503 http_504;
        proxy_cache_background_update on;
        proxy_cache_lock on;
        proxy_cache_bypass $http_x_purge;
        add_header X-Cache-Status $upstream_cache_status;

        # CORS for static files
        add_header 'Access-Control-Allow-Origin' '*' always;
        add_header 'Access-Control-Allow-Methods' 'GET' always;
        add_header 'Access-Control-Allow-Headers' 'Accept,Upgrade-Insecure-Requests,DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range' always;
        add_header 'Access-Control-Expose-Headers' 'Content-Encoding,Content-Length,Content-Range' always;
    }

    location ~ ^\/(_framework\/blazor\.(server|webassembly))(?:\.\w+)?\.js$ {
        access_log off;

        proxy_pass http://backend/$1.js;
    }

    location = /healthz {
        access_log off;

        return 200 'health OK';
        add_header Content-Type text/plain;
    }

    location /backend/ {
        access_log off;
        return 404;
    }

    location / {
        proxy_pass http://backend;

        # additional setting to support Server-Side Blazor
        # https://www.indie-dev.at/2021/07/18/nginx-blazor-server-side/
        proxy_read_timeout 1d;
        proxy_connect_timeout 4;
        proxy_send_timeout 1d;

        include nginx.proxy-headers.conf;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $http_connection;
    }
}

server {
    #listen 80;
    listen 443 ssl;
    server_name cdn.local.actual.chat;
    ssl_protocols       TLSv1.2 TLSv1.3;
    client_max_body_size 64M;

    include nginx.proxy-headers.conf;

    # changed this section to support embedded test page
    location / {
        proxy_pass http://backend;

        # additional setting to support Server-Side Blazor
        # https://www.indie-dev.at/2021/07/18/nginx-blazor-server-side/
        proxy_read_timeout 1d;
        proxy_connect_timeout 4;
        proxy_send_timeout 1d;

        include nginx.proxy-headers.conf;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $http_connection;
    }

    location /media/ {
        proxy_pass http://backend/api/content/media/;
    }
}

server {
    #listen 80;
    listen 443 ssl;
    server_name media.local.actual.chat;

    include nginx.proxy-headers.conf;

    location / {
        proxy_pass http://image-proxy;
    }
}
