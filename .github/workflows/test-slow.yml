name: Run slow tests
concurrency:
  group: "${{ github.workflow }}-${{ github.ref }}"
  cancel-in-progress: true

on:
  workflow_dispatch:
  create:
  push:
    branches:
      - "**"
      - master
      - dev
      - release/v*
    paths-ignore:
      - "**.md"
  pull_request:
    branches:
      - master
      - dev
      - release/v*

permissions:
  contents: read
  id-token: write
  packages: write
  issues: read
  checks: write
  statuses: write

jobs:
  slow-tests:
    name: Run Slow tests
    runs-on: ubuntu-latest
    env:
      NUGET_PACKAGES: ${{ github.workspace }}/.nuget/packages
    services:
      redis:
        image: redis:6.2.6-alpine3.14
        # Set health checks to wait until redis has started
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps port 6379 on service container to the host
          - 6379:6379
      postgres:
        image: postgres:16.1-alpine3.19
        # Provide the password for postgres
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_HOST_AUTH_METHOD: password
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432
      nats:
        image: ghcr.io/actual-chat/nats-jetstream:2.10.10-alpine3.19
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd "wget --no-verbose --tries=1 --spider 'http://localhost:8222/healthz?js-enabled-only=true' || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10
        ports:
          # Maps port 4222 and 8222 on service container to the host
          - 4222:4222
          - 8222:8222
      opensearch:
        image: opensearchproject/opensearch:2.12.0
        env:
          node.name: opensearch-node
          discovery.type: single-node
          cluster.name: opensearch-cluster
          cluster.routing.allocation.disk.threshold_enabled: false
          bootstrap.memory_lock: true # along with the memlock settings below, disables swapping
          OPENSEARCH_JAVA_OPTS: -Xms4096m -Xmx4096m # minimum and maximum Java heap size, recommend setting both to 50% of system RAM
          DISABLE_SECURITY_PLUGIN: true
          plugins.ml_commons.only_run_on_ml_node: false # allow running ml tasks on data nodes
          plugins.ml_commons.allow_registering_model_via_url: true
          plugins.ml_commons.allow_registering_model_via_local_file: true
          plugins.ml_commons.model_access_control_enabled: true
          plugins.ml_commons.native_memory_threshold: 99
        options: >-
          --ulimit memlock=-1:-1
          --ulimit nofile=65536:65536
          --health-cmd "curl --fail 'http://localhost:9200/_cluster/health?wait_for_status=green&timeout=1s' || exit 1"
          --health-interval 5s
          --health-timeout 5s
          --health-retries 15
        ports:
          - 9200:9200
          - 9600:9600
        volumes:
          - opensearch-data:/usr/share/opensearch/data
    steps:
      - name: Install postgresql-client
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client

      - name: "Set some postgres settings"
        run: |
          docker exec -i ${{ job.services.postgres.id }} bash << EOF
          sed -i -e 's/max_connections = 100/max_connections = 1000/' /var/lib/postgresql/data/postgresql.conf
          sed -i -e 's/shared_buffers = 128MB/shared_buffers = 256MB/' /var/lib/postgresql/data/postgresql.conf
          cat /var/lib/postgresql/data/postgresql.conf
          EOF
          docker restart --time 0 ${{ job.services.postgres.id }}
          sleep 5

      - name: Show max connections
        run: PGPASSWORD=postgres psql -h localhost -U postgres -c 'SHOW max_connections;'

      - name: Checkout
        uses: actions/checkout@v3
        with:
          # Avoid shallow clone for Nerdbank.GitVersioning
          fetch-depth: 0
          lfs: true

      - name: Build OpenSearch configurator image
        run: |
          docker build \
          -f ${{github.workspace}}/services/opensearch/Dockerfile \
          -t opensearch-configurator-image:latest .

      - name: Configure OpenSearch ML pipeline
        run: |
          docker run --attach stderr --attach stdout --rm \
          --network host \
          --name opensearch-configurator \
          --env SLEEP_ON_FAILURE_SECONDS=5 \
          --env MAX_RETRY_ATTEMPTS=6 \
          --env OPENSEARCH_CLUSTER_URL='http://localhost:9200' \
          --env OPENSEARCH_ML_MODEL_GROUP='NLP_model_group' \
          --env TORCHSCRIPT_MODEL_PATH='/ml_model/sentence-transformers_paraphrase-MiniLM-L3-v2-1.0.1-torch_script.zip' \
          --env TORCHSCRIPT_MODEL_CONFIG_PATH='/ml_model/config.json' \
          --mount type=bind,src=${{github.workspace}}/services/opensearch/ml_model,dst=/ml_model \
          --mount type=bind,src=${{github.workspace}}/services/opensearch/opensearch-setup.py,dst=/workdir/opensearch-setup.py \
          opensearch-configurator-image:latest

      - name: Setup dotnet
        uses: ./.github/actions/setup-dotnet
        with:
          restore-tools: false
          restore-workloads: false

      - name: Debug Build for tests
        run: |
          dotnet build ActualChat.CI.slnf --nologo --no-restore --configuration Debug

      - name: Run slow tests
        env:
          GOOGLE_APPLICATION_CREDENTIALS: ${{github.workspace}}/.config/gcp-key.json
          HostSettings__WebRootPath: ${{github.workspace}}/src/dotnet/App.Wasm/wwwroot/
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
          NPM_READ_TOKEN: ${{secrets.NPM_READ_TOKEN}}
          USERSSETTINGS__GOOGLECLIENTID: ${{secrets.USERSSETTINGS__GOOGLECLIENTID}}
          USERSSETTINGS__GOOGLECLIENTSECRET: ${{secrets.USERSSETTINGS__GOOGLECLIENTSECRET}}
          USERSSETTINGS__MICROSOFTACCOUNTCLIENTID: ${{secrets.USERSSETTINGS__MICROSOFTACCOUNTCLIENTID}}
          USERSSETTINGS__MICROSOFTACCOUNTCLIENTSECRET: ${{secrets.USERSSETTINGS__MICROSOFTACCOUNTCLIENTSECRET}}
          TESTS__USERS__USER1__EMAIL: ${{secrets.TESTS__USERS__USER1__EMAIL}}
          TESTS__USERS__USER1__PASSWORD: ${{secrets.TESTS__USERS__USER1__PASSWORD}}
          RedisSettings__DefaultRedis: localhost|test_{instance.}{context}
          DbSettings__DefaultDb: postgresql:Server=localhost;Database=ac_{instance_}{context};Port=5432;User Id=postgres;Password=postgres
          CoreSettings__GoogleProjectId: ${{secrets.CORESETTINGS_GOOGLEPROJECTID}}
        run: |-
          cat <<- 'EOF' > ./.config/gcp-key.json
          ${{secrets.GCP_KEY_JSON}}
          EOF

          ./run-build.cmd slow-tests --configuration Debug

      - name: Report slow test results
        uses: phoenix-actions/test-reporting@v15
        if: success() || failure()    # run this step even if previous step failed
        with:
          name: Slow tests results     # Name of the check run which will be created
          path: './tests/**/*.trx'   # Path to test results
          reporter: dotnet-trx        # Format of test results
          fail-on-error: false
          list-tests: 'all'
          output-to: 'checks'
          list-suites: 'all'
          only-summary: 'true'
