name: Build test and deploy
concurrency:
  group: "${{ github.workflow }}-${{ github.ref }}"
  cancel-in-progress: true

on:
  workflow_dispatch:
  create:
  push:
    branches:
      - "**"
      - master
      - dev
      - release/v*
    paths-ignore:
      - "**.md"
  pull_request:
    branches:
      - master
      - dev
      - release/v*

permissions:
  contents: read
  id-token: write
  packages: write
  issues: read
  checks: write
  statuses: write

jobs:
  build:
    name: Build image for ${{ github.ref_name }}
    if: |
      github.ref == 'refs/heads/master' ||
      github.ref == 'refs/heads/dev' ||
      startsWith(github.ref, 'refs/pull/') ||
      startsWith(github.ref, 'refs/heads/release/')
    runs-on: ubuntu-latest
    outputs:
      semver2: ${{ steps.nbgv.outputs.SemVer2 }}
      version: ${{ steps.nbgv.outputs.Version }}
      simple-version: ${{ steps.nbgv.outputs.SimpleVersion }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          # Avoid shallow clone for Nerdbank.GitVersioning
          fetch-depth: 0
          lfs: true

      - name: Install dotnet 8.0 SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0'
          dotnet-quality: 'ga'

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
        with:
          install: true

      - name: Replace git+ssh://git@ to https://
        run: sed -i 's/git+ssh:\/\/git@/https:\/\//g' src/nodejs/package-lock.json

      - name: Generate version variables
        id: nbgv
        uses: dotnet/nbgv@master
        with:
          setAllVars: true

      - name: Restore tools for nbgv
        run: dotnet tool restore

      - name: Generate Nerdbank.GitVersioning files
        run: ./run-build.cmd generate-version

      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v0.7.2
        with:
          token_format: access_token
          workload_identity_provider: projects/1074465586741/locations/global/workloadIdentityPools/actual-identity-pool/providers/github-actual-chat
          service_account: sa-deploy-bot@actual-infrastructure.iam.gserviceaccount.com

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build image 'actual-chat-app:${{ steps.nbgv.outputs.SemVer2 }}'
        uses: docker/build-push-action@v4
        with:
          context: .
          build-args: "NPM_READ_TOKEN=${{secrets.NPM_READ_TOKEN}}"
          tags: |
            ghcr.io/actual-chat/actual-chat-app:${{ steps.nbgv.outputs.SemVer2 }}
          push: ${{github.ref == 'refs/heads/master' || github.ref == 'refs/heads/dev' || startsWith(github.ref, 'refs/heads/release/')}}

  unit-tests:
    name: Run Unit tests
    runs-on: ubuntu-latest
    env:
      NUGET_PACKAGES: ${{ github.workspace }}/.nuget/packages
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          # Avoid shallow clone for Nerdbank.GitVersioning
          fetch-depth: 0
          lfs: true

      - name: Install dotnet 8.0 SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0'
          dotnet-quality: 'ga'

      - name: Use cached dependencies
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}/.nuget/packages
          key: "${{ runner.os }}-nuget-${{ hashFiles('Directory.Packages.props') }}"
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore dependencies
        run: |-
          ./run-build.cmd restore

      - name: Debug build of tests
        run: |-
          dotnet build ActualChat.CI.slnf --nologo --no-restore --configuration Debug

      - name: Run unit tests
        run: ./run-build.cmd unit-tests --configuration Debug

      - name: Report unit test results
        uses: dorny/test-reporter@v1
        if: success() || failure()    # run this step even if previous step failed
        with:
          name: Unit tests results     # Name of the check run which will be created
          path: './tests/**/*.trx'   # Path to test results
          reporter: dotnet-trx        # Format of test results

  integration-tests:
    name: Run Integration tests
    runs-on: ubuntu-latest
    env:
      NUGET_PACKAGES: ${{ github.workspace }}/.nuget/packages
    services:
      redis:
        image: redis:6.2.6-alpine3.14
        # Set health checks to wait until redis has started
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps port 6379 on service container to the host
          - 6379:6379
      postgres:
        image: postgres:16.1-alpine3.19
        # Provide the password for postgres
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_HOST_AUTH_METHOD: password
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432
      elasticsearch:
        image: elasticsearch:8.11.3
        ports:
          - 9200:9200
        env:
          ELASTIC_USERNAME: elastic
          ELASTIC_PASSWORD: elastic
          xpack.security.enabled: false
          discovery.type: single-node
      nats:
        image: ghcr.io/actual-chat/nats-jetstream:2.10.10-alpine3.19
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd "wget --no-verbose --tries=1 --spider 'http://localhost:8222/healthz?js-enabled-only=true' || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10
        ports:
          # Maps port 4222 and 8222 on service container to the host
          - 4222:4222
          - 8222:8222
    steps:
      - name: Install postgresql-client
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client

      - name: "Set some postgres settings"
        run: |
          docker exec -i ${{ job.services.postgres.id }} bash << EOF
          sed -i -e 's/max_connections = 100/max_connections = 1000/' /var/lib/postgresql/data/postgresql.conf
          sed -i -e 's/shared_buffers = 128MB/shared_buffers = 256MB/' /var/lib/postgresql/data/postgresql.conf
          cat /var/lib/postgresql/data/postgresql.conf
          EOF
          docker restart --time 0 ${{ job.services.postgres.id }}
          sleep 5

      - name: Show max connections
        run: PGPASSWORD=postgres psql -h localhost -U postgres -c 'SHOW max_connections;'

      - name: Checkout
        uses: actions/checkout@v3
        with:
          # Avoid shallow clone for Nerdbank.GitVersioning
          fetch-depth: 0
          lfs: true

      - name: Install dotnet 8.0 SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0'
          dotnet-quality: 'ga'

      - name: Use cached dependencies
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}/.nuget/packages
          key: "${{ runner.os }}-nuget-${{ hashFiles('Directory.Packages.props') }}"
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore dependencies
        run: |-
          ./run-build.cmd restore

      - name: Debug Build for tests
        run: |-
          dotnet build ActualChat.CI.slnf --nologo --no-restore --configuration Debug

      - name: Run integration tests
        env:
          GOOGLE_APPLICATION_CREDENTIALS: ${{github.workspace}}/.config/gcp-key.json
          HostSettings__WebRootPath: ${{github.workspace}}/src/dotnet/App.Wasm/wwwroot/
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
          NPM_READ_TOKEN: ${{secrets.NPM_READ_TOKEN}}
          USERSSETTINGS__GOOGLECLIENTID: ${{secrets.USERSSETTINGS__GOOGLECLIENTID}}
          USERSSETTINGS__GOOGLECLIENTSECRET: ${{secrets.USERSSETTINGS__GOOGLECLIENTSECRET}}
          USERSSETTINGS__MICROSOFTACCOUNTCLIENTID: ${{secrets.USERSSETTINGS__MICROSOFTACCOUNTCLIENTID}}
          USERSSETTINGS__MICROSOFTACCOUNTCLIENTSECRET: ${{secrets.USERSSETTINGS__MICROSOFTACCOUNTCLIENTSECRET}}
          TESTS__USERS__USER1__EMAIL: ${{secrets.TESTS__USERS__USER1__EMAIL}}
          TESTS__USERS__USER1__PASSWORD: ${{secrets.TESTS__USERS__USER1__PASSWORD}}
          RedisSettings__DefaultRedis: localhost|test_{instance.}{context}
          DbSettings__DefaultDb: postgresql:Server=localhost;Database=ac_{instance_}{context};Port=5432;User Id=postgres;Password=postgres
          CoreSettings__GoogleProjectId: ${{secrets.CORESETTINGS_GOOGLEPROJECTID}}
        run: |-
          cat <<- 'EOF' > ./.config/gcp-key.json
          ${{secrets.GCP_KEY_JSON}}
          EOF

          ./run-build.cmd integration-tests --configuration Debug

      - name: Report integration test results
        uses: dorny/test-reporter@v1
        if: success() || failure()    # run this step even if previous step failed
        with:
          name: Integration tests results     # Name of the check run which will be created
          path: './tests/**/*.trx'   # Path to test results
          reporter: dotnet-trx        # Format of test results

  deploy-dev:
    name: Deploy dev
    if: |
      github.ref == 'refs/heads/master' ||
      github.ref == 'refs/heads/dev'    ||
      startsWith(github.ref, 'refs/heads/release/')
    runs-on: ubuntu-latest
    needs:
      - build
      - unit-tests
      - integration-tests
    environment: dev
    steps:
      - name: Checking out ${{ github.ref }}
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
          lfs: false

      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v0.7.2
        with:
          token_format: access_token
          workload_identity_provider: projects/1074465586741/locations/global/workloadIdentityPools/actual-identity-pool/providers/github-actual-chat
          service_account: sa-deploy-bot@actual-infrastructure.iam.gserviceaccount.com

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to GAR
        uses: docker/login-action@v2
        with:
          registry: us-central1-docker.pkg.dev
          username: oauth2accesstoken
          password: ${{ steps.auth.outputs.access_token }}

      - name: Deploy dev
        if: |
          github.ref == 'refs/heads/dev' ||
          startsWith(github.ref, 'refs/heads/release/')
        uses: akhilerm/tag-push-action@v2.0.0
        with:
          src: ghcr.io/actual-chat/actual-chat-app:${{needs.build.outputs.semver2}}
          dst: |
            us-central1-docker.pkg.dev/actual-infrastructure/docker-dev/actual-chat-app:${{needs.build.outputs.semver2}}

  deploy-prod:
    name: Deploy prod
    if: |
      github.ref == 'refs/heads/master' ||
      startsWith(github.ref, 'refs/heads/release/')
    runs-on: ubuntu-latest
    needs:
      - build
      - deploy-dev
    environment: prod
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
          lfs: false

      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v0.7.2
        with:
          token_format: access_token
          workload_identity_provider: projects/1074465586741/locations/global/workloadIdentityPools/actual-identity-pool/providers/github-actual-chat
          service_account: sa-deploy-bot@actual-infrastructure.iam.gserviceaccount.com

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to GAR
        uses: docker/login-action@v2
        with:
          registry: us-central1-docker.pkg.dev
          username: oauth2accesstoken
          password: ${{ steps.auth.outputs.access_token }}

      - name: Deploy prod
        uses: akhilerm/tag-push-action@v2.0.0
        with:
          src: ghcr.io/actual-chat/actual-chat-app:${{needs.build.outputs.semver2}}
          dst: |
            us-central1-docker.pkg.dev/actual-infrastructure/docker/actual-chat-app:${{needs.build.outputs.simple-version}}

  build-android-pkg:
    name: Build app package for ${{ github.ref_name }}
    if: |
      github.ref == 'refs/heads/master' ||
      github.ref == 'refs/heads/dev' ||
      startsWith(github.ref, 'refs/heads/release/')
    runs-on: macos-latest
    env:
      NUGET_PACKAGES: ${{ github.workspace }}/.nuget/packages
      NPM_READ_TOKEN: ${{ secrets.NPM_READ_TOKEN }}
      ActualChat_AndroidSigningKeyPass: ${{secrets.ANDROIDSIGNINGKEYPASS}}
      ActualChat_AndroidSigningStorePass: ${{secrets.ANDROIDSIGNINGSTOREPASS}}
      IS_DEV_MAUI: ${{ !startsWith(github.ref, 'refs/heads/release/') }}
      APP_ID: chat.actual.${{ !startsWith(github.ref, 'refs/heads/release/') && 'dev.' || '' }}app
      PACKAGE_FILE_NAME: chat.actual.${{ !startsWith(github.ref, 'refs/heads/release/') && 'dev.' || '' }}app-Signed.aab
    outputs:
      APP_ID: ${{env.APP_ID}}
      ARTIFACT_NAME: ${{env.APP_ID}}.${{steps.nbgv.outputs.SemVer2}}.aab
      PACKAGE_FILE_NAME: ${{env.PACKAGE_FILE_NAME}}
      MAJOR_MINOR_VERSION: ${{steps.nbgv.outputs.MajorMinorVersion}}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          # Avoid shallow clone for Nerdbank.GitVersioning
          fetch-depth: 0
          lfs: true

      - name: Install dotnet 8.0 SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0'
          dotnet-quality: 'ga'

      - name: Use cached dependencies
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}/.nuget/packages
          key: "${{ runner.os }}-nuget-${{ hashFiles('Directory.Packages.props') }}"
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Replace git+ssh://git@ to https://
        run: sed -i -E 's/git+ssh:\/\/git@/https:\/\//g' src/nodejs/package-lock.json

      - name: Install workloads
        run: |-
          dotnet workload restore

      - name: Generate version variables
        id: nbgv
        uses: dotnet/nbgv@master
        with:
          setAllVars: true

      - name: Restore nuget packages
        run: |-
          ./run-build.cmd restore

      - name: Prepare GoogleServices file for dev
        if: ${{env.IS_DEV_MAUI}}
        run: |-
          tee src/dotnet/App.Maui/Platforms/Android/Resources/google-services.json.dev <<EOF
          ${{ secrets.GOOGLE_SERVICES_JSON_DEV }}
          EOF

      - name: Prepare GoogleServices file for prod
        if: ${{!env.IS_DEV_MAUI}}
        run: |-
          tee src/dotnet/App.Maui/Platforms/Android/Resources/google-services.json.prod <<EOF
          ${{ secrets.GOOGLE_SERVICES_JSON_PROD }}
          EOF

      - name: Build app package
        run: |-
          ./run-build.cmd publish-android --configuration Release --is-dev-maui "${{env.IS_DEV_MAUI}}"

      - name: Upload package to artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{env.APP_ID}}.${{steps.nbgv.outputs.SemVer2}}.aab
          path: artifacts/publish/App.Maui/release_net8.0-android/${{env.PACKAGE_FILE_NAME}}
          if-no-files-found: error
          compression-level: 0
          retention-days: 10

  deploy-android-dev-to-drive:
    name: Deploy app package for ${{ github.ref_name }} to googlde drive
    if: |
      github.ref == 'refs/heads/master' ||
      github.ref == 'refs/heads/dev'
    runs-on: ubuntu-latest
    needs:
      - build-android-pkg
      - unit-tests
      - integration-tests
    env:
      APP_ID: ${{needs.build-android-pkg.outputs.APP_ID}}
      ARTIFACT_NAME: ${{needs.build-android-pkg.outputs.ARTIFACT_NAME}}
      PACKAGE_FILE_NAME: ${{needs.build-android-pkg.outputs.PACKAGE_FILE_NAME}}
      MAJOR_MINOR_VERSION: ${{needs.build-android-pkg.outputs.MAJOR_MINOR_VERSION}}
    steps:
      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v2
        with:
          token_format: access_token
          workload_identity_provider: projects/1074465586741/locations/global/workloadIdentityPools/actual-identity-pool/providers/github-actual-chat
          service_account: sa-deploy-bot@actual-infrastructure.iam.gserviceaccount.com
          create_credentials_file: 'true'

      - name: Download package file from artifacts
        uses: actions/download-artifact@v4
        with:
          name: ${{env.ARTIFACT_NAME}}
          path: v${{env.MAJOR_MINOR_VERSION}}/

      - name: Prepare google service account json variable
        run: |-
          saJson=$(cat ${{ steps.auth.outputs.credentials_file_path }})
          echo ::add-mask::$saJson
          echo "SERVICE_ACCOUNT_JSON=$saJson" >> $GITHUB_ENV

      - name: Upload app package to google drive
        uses: logickoder/g-drive-upload@main
        with:
          filename: v${{env.MAJOR_MINOR_VERSION}}/${{env.PACKAGE_FILE_NAME}}
          name: ${{env.ARTIFACT_NAME}}
          folderId: ${{secrets.GDRIVE_BUILDS_FOLDER_ID}}
          credentials: ${{env.SERVICE_ACCOUNT_JSON}}
          mirrorDirectoryStructure: true
          overwrite: true


  deploy-android-to-play-store:
    name: Deploy app package for ${{ github.ref_name }} to google play store
    if: |
      github.ref == 'refs/heads/master' ||
      startsWith(github.ref, 'refs/heads/release/')
    runs-on: ubuntu-latest
    needs:
      - build-android-pkg
      - unit-tests
      - integration-tests
    environment: prod
    env:
      APP_ID: ${{needs.build-android-pkg.outputs.APP_ID}}
      ARTIFACT_NAME: ${{needs.build-android-pkg.outputs.ARTIFACT_NAME}}
      PACKAGE_FILE_NAME: ${{needs.build-android-pkg.outputs.PACKAGE_FILE_NAME}}
    steps:
      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v2
        with:
          token_format: access_token
          workload_identity_provider: projects/1074465586741/locations/global/workloadIdentityPools/actual-identity-pool/providers/github-actual-chat
          service_account: sa-deploy-bot@actual-infrastructure.iam.gserviceaccount.com
          create_credentials_file: 'true'

      - name: Download package file from artifacts
        uses: actions/download-artifact@v4
        with:
          name: ${{env.ARTIFACT_NAME}}

      - run: test -f ${{env.PACKAGE_FILE_NAME}} || exit /b 1

      - name: Deploy to internal testing
        uses: r0adkll/upload-google-play@v1
        with:
          serviceAccountJson: ${{ steps.auth.outputs.credentials_file_path }}
          packageName: ${{env.APP_ID}}
          releaseFiles: ${{env.PACKAGE_FILE_NAME}}
          track: internal
